// generated by SMACK version 2.4.1 for svcomp
// via /usr/local/bin/smack /proj/SMACK/SMACKBenchResults/data/sv-benchmarks/c/ldv-linux-4.0-rc1-mav/linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil.i -x svcomp --verifier svcomp -t -q -bpl linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil.i.bpl

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (133 regions)
var $M.0: i8;
var $M.1: i32;
var $M.2: [ref] i32;
var $M.3: [ref] ref;
var $M.4: [ref] ref;
var $M.5: [ref] ref;
var $M.6: [ref] ref;
var $M.7: [ref] i8;
var $M.8: [ref] ref;
var $M.9: [ref] ref;
var $M.10: [ref] ref;
var $M.11: [ref] ref;
var $M.12: [ref] i24;
var $M.13: [ref] i8;
var $M.14: i32;
var $M.15: i32;
var $M.16: i32;
var $M.17: i8;
var $M.18: [ref] i32;
var $M.19: [ref] ref;
var $M.20: [ref] ref;
var $M.21: [ref] ref;
var $M.22: [ref] ref;
var $M.23: [ref] i8;
var $M.24: i32;
var $M.25: [ref] ref;
var $M.26: [ref] i32;
var $M.27: [ref] ref;
var $M.28: [ref] ref;
var $M.29: [ref] i32;
var $M.30: i32;
var $M.31: i32;
var $M.32: i32;
var $M.33: i32;
var $M.34: i32;
var $M.35: i32;
var $M.36: i32;
var $M.37: i32;
var $M.38: i32;
var $M.39: i32;
var $M.40: i32;
var $M.41: i32;
var $M.42: i32;
var $M.43: i32;
var $M.44: i32;
var $M.45: i32;
var $M.46: i32;
var $M.47: i16;
var $M.48: i32;
var $M.49: i32;
var $M.50: i32;
var $M.51: i32;
var $M.52: i8;
var $M.53: i8;
var $M.54: i8;
var $M.55: i16;
var $M.56: i16;
var $M.57: i16;
var $M.58: i16;
var $M.59: i16;
var $M.60: i8;
var $M.61: i8;
var $M.62: i8;
var $M.63: i8;
var $M.64: i8;
var $M.65: i8;
var $M.66: i8;
var $M.67: i64;
var $M.68: i16;
var $M.69: i16;
var $M.70: i16;
var $M.71: i16;
var $M.72: i16;
var $M.73: i8;
var $M.74: i8;
var $M.75: i8;
var $M.76: i8;
var $M.77: i8;
var $M.78: i8;
var $M.79: i8;
var $M.80: i64;
var $M.81: i32;
var $M.82: ref;
var $M.83: i32;
var $M.84: ref;
var $M.85: i32;
var $M.86: ref;
var $M.87: i32;
var $M.88: ref;
var $M.89: [ref] ref;
var $M.90: [ref] ref;
var $M.91: [ref] ref;
var $M.92: [ref] i32;
var $M.93: ref;
var $M.94: ref;
var $M.95: ref;
var $M.96: ref;
var $M.97: ref;
var $M.98: ref;
var $M.99: ref;
var $M.100: ref;
var $M.101: ref;
var $M.102: ref;
var $M.103: ref;
var $M.104: ref;
var $M.105: ref;
var $M.106: ref;
var $M.107: ref;
var $M.108: ref;
var $M.109: ref;
var $M.110: ref;
var $M.111: ref;
var $M.112: ref;
var $M.113: ref;
var $M.114: ref;
var $M.115: ref;
var $M.116: ref;
var $M.117: ref;
var $M.118: ref;
var $M.119: ref;
var $M.120: ref;
var $M.121: ref;
var $M.122: ref;
var $M.123: i32;
var $M.124: i32;
var $M.125: i32;
var $M.126: i32;
var $M.127: i32;
var $M.128: i32;
var $M.129: i32;
var $M.130: i32;
var $M.131: ref;
var $M.132: i32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 377737));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (i64);

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $srem.i1(i1: i1, i2: i1) returns (i1) { (if ($ne.i1.bool($smod.i1(i1, i2), 0) && $slt.i1.bool(i1, 0)) then $sub.i1($smod.i1(i1, i2), $smax.i1(i2, $sub.i1(0, i2))) else $smod.i1(i1, i2)) }
function {:inline} $srem.i5(i1: i5, i2: i5) returns (i5) { (if ($ne.i5.bool($smod.i5(i1, i2), 0) && $slt.i5.bool(i1, 0)) then $sub.i5($smod.i5(i1, i2), $smax.i5(i2, $sub.i5(0, i2))) else $smod.i5(i1, i2)) }
function {:inline} $srem.i6(i1: i6, i2: i6) returns (i6) { (if ($ne.i6.bool($smod.i6(i1, i2), 0) && $slt.i6.bool(i1, 0)) then $sub.i6($smod.i6(i1, i2), $smax.i6(i2, $sub.i6(0, i2))) else $smod.i6(i1, i2)) }
function {:inline} $srem.i8(i1: i8, i2: i8) returns (i8) { (if ($ne.i8.bool($smod.i8(i1, i2), 0) && $slt.i8.bool(i1, 0)) then $sub.i8($smod.i8(i1, i2), $smax.i8(i2, $sub.i8(0, i2))) else $smod.i8(i1, i2)) }
function {:inline} $srem.i16(i1: i16, i2: i16) returns (i16) { (if ($ne.i16.bool($smod.i16(i1, i2), 0) && $slt.i16.bool(i1, 0)) then $sub.i16($smod.i16(i1, i2), $smax.i16(i2, $sub.i16(0, i2))) else $smod.i16(i1, i2)) }
function {:inline} $srem.i24(i1: i24, i2: i24) returns (i24) { (if ($ne.i24.bool($smod.i24(i1, i2), 0) && $slt.i24.bool(i1, 0)) then $sub.i24($smod.i24(i1, i2), $smax.i24(i2, $sub.i24(0, i2))) else $smod.i24(i1, i2)) }
function {:inline} $srem.i32(i1: i32, i2: i32) returns (i32) { (if ($ne.i32.bool($smod.i32(i1, i2), 0) && $slt.i32.bool(i1, 0)) then $sub.i32($smod.i32(i1, i2), $smax.i32(i2, $sub.i32(0, i2))) else $smod.i32(i1, i2)) }
function {:inline} $srem.i40(i1: i40, i2: i40) returns (i40) { (if ($ne.i40.bool($smod.i40(i1, i2), 0) && $slt.i40.bool(i1, 0)) then $sub.i40($smod.i40(i1, i2), $smax.i40(i2, $sub.i40(0, i2))) else $smod.i40(i1, i2)) }
function {:inline} $srem.i48(i1: i48, i2: i48) returns (i48) { (if ($ne.i48.bool($smod.i48(i1, i2), 0) && $slt.i48.bool(i1, 0)) then $sub.i48($smod.i48(i1, i2), $smax.i48(i2, $sub.i48(0, i2))) else $smod.i48(i1, i2)) }
function {:inline} $srem.i56(i1: i56, i2: i56) returns (i56) { (if ($ne.i56.bool($smod.i56(i1, i2), 0) && $slt.i56.bool(i1, 0)) then $sub.i56($smod.i56(i1, i2), $smax.i56(i2, $sub.i56(0, i2))) else $smod.i56(i1, i2)) }
function {:inline} $srem.i64(i1: i64, i2: i64) returns (i64) { (if ($ne.i64.bool($smod.i64(i1, i2), 0) && $slt.i64.bool(i1, 0)) then $sub.i64($smod.i64(i1, i2), $smax.i64(i2, $sub.i64(0, i2))) else $smod.i64(i1, i2)) }
function {:inline} $srem.i80(i1: i80, i2: i80) returns (i80) { (if ($ne.i80.bool($smod.i80(i1, i2), 0) && $slt.i80.bool(i1, 0)) then $sub.i80($smod.i80(i1, i2), $smax.i80(i2, $sub.i80(0, i2))) else $smod.i80(i1, i2)) }
function {:inline} $srem.i88(i1: i88, i2: i88) returns (i88) { (if ($ne.i88.bool($smod.i88(i1, i2), 0) && $slt.i88.bool(i1, 0)) then $sub.i88($smod.i88(i1, i2), $smax.i88(i2, $sub.i88(0, i2))) else $smod.i88(i1, i2)) }
function {:inline} $srem.i96(i1: i96, i2: i96) returns (i96) { (if ($ne.i96.bool($smod.i96(i1, i2), 0) && $slt.i96.bool(i1, 0)) then $sub.i96($smod.i96(i1, i2), $smax.i96(i2, $sub.i96(0, i2))) else $smod.i96(i1, i2)) }
function {:inline} $srem.i128(i1: i128, i2: i128) returns (i128) { (if ($ne.i128.bool($smod.i128(i1, i2), 0) && $slt.i128.bool(i1, 0)) then $sub.i128($smod.i128(i1, i2), $smax.i128(i2, $sub.i128(0, i2))) else $smod.i128(i1, i2)) }
function {:inline} $srem.i160(i1: i160, i2: i160) returns (i160) { (if ($ne.i160.bool($smod.i160(i1, i2), 0) && $slt.i160.bool(i1, 0)) then $sub.i160($smod.i160(i1, i2), $smax.i160(i2, $sub.i160(0, i2))) else $smod.i160(i1, i2)) }
function {:inline} $srem.i256(i1: i256, i2: i256) returns (i256) { (if ($ne.i256.bool($smod.i256(i1, i2), 0) && $slt.i256.bool(i1, 0)) then $sub.i256($smod.i256(i1, i2), $smax.i256(i2, $sub.i256(0, i2))) else $smod.i256(i1, i2)) }
function {:inline} $urem.i1(i1: i1, i2: i1) returns (i1) { $smod.i1(i1, i2) }
function {:inline} $urem.i5(i1: i5, i2: i5) returns (i5) { $smod.i5(i1, i2) }
function {:inline} $urem.i6(i1: i6, i2: i6) returns (i6) { $smod.i6(i1, i2) }
function {:inline} $urem.i8(i1: i8, i2: i8) returns (i8) { $smod.i8(i1, i2) }
function {:inline} $urem.i16(i1: i16, i2: i16) returns (i16) { $smod.i16(i1, i2) }
function {:inline} $urem.i24(i1: i24, i2: i24) returns (i24) { $smod.i24(i1, i2) }
function {:inline} $urem.i32(i1: i32, i2: i32) returns (i32) { $smod.i32(i1, i2) }
function {:inline} $urem.i40(i1: i40, i2: i40) returns (i40) { $smod.i40(i1, i2) }
function {:inline} $urem.i48(i1: i48, i2: i48) returns (i48) { $smod.i48(i1, i2) }
function {:inline} $urem.i56(i1: i56, i2: i56) returns (i56) { $smod.i56(i1, i2) }
function {:inline} $urem.i64(i1: i64, i2: i64) returns (i64) { $smod.i64(i1, i2) }
function {:inline} $urem.i80(i1: i80, i2: i80) returns (i80) { $smod.i80(i1, i2) }
function {:inline} $urem.i88(i1: i88, i2: i88) returns (i88) { $smod.i88(i1, i2) }
function {:inline} $urem.i96(i1: i96, i2: i96) returns (i96) { $smod.i96(i1, i2) }
function {:inline} $urem.i128(i1: i128, i2: i128) returns (i128) { $smod.i128(i1, i2) }
function {:inline} $urem.i160(i1: i160, i2: i160) returns (i160) { $smod.i160(i1, i2) }
function {:inline} $urem.i256(i1: i256, i2: i256) returns (i256) { $smod.i256(i1, i2) }
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
axiom ($and.i1(0, 0) == 0);
axiom ($or.i1(0, 0) == 0);
axiom ($xor.i1(0, 0) == 0);
axiom ($and.i1(0, 1) == 0);
axiom ($or.i1(0, 1) == 1);
axiom ($xor.i1(0, 1) == 1);
axiom ($and.i1(1, 0) == 0);
axiom ($or.i1(1, 0) == 1);
axiom ($xor.i1(1, 0) == 1);
axiom ($and.i1(1, 1) == 1);
axiom ($or.i1(1, 1) == 1);
axiom ($xor.i1(1, 1) == 0);
axiom ($and.i32(32, 16) == 0);
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
// Integer load/store operations
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
// Conversion between integer types
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer load/store operations
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.i8(f: float) returns (i8);
function $bitcast.float.i16(f: float) returns (i16);
function $bitcast.float.i32(f: float) returns (i32);
function $bitcast.float.i64(f: float) returns (i64);
function $bitcast.float.i80(f: float) returns (i80);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.i80.float(i: i80) returns (float);
function $fp2si.float.i1(f: float) returns (i1);
function $fp2si.float.i5(f: float) returns (i5);
function $fp2si.float.i6(f: float) returns (i6);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2si.float.i80(f: float) returns (i80);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2si.float.i160(f: float) returns (i160);
function $fp2si.float.i256(f: float) returns (i256);
function $fp2ui.float.i1(f: float) returns (i1);
function $fp2ui.float.i5(f: float) returns (i5);
function $fp2ui.float.i6(f: float) returns (i6);
function $fp2ui.float.i8(f: float) returns (i8);
function $fp2ui.float.i16(f: float) returns (i16);
function $fp2ui.float.i24(f: float) returns (i24);
function $fp2ui.float.i32(f: float) returns (i32);
function $fp2ui.float.i40(f: float) returns (i40);
function $fp2ui.float.i48(f: float) returns (i48);
function $fp2ui.float.i56(f: float) returns (i56);
function $fp2ui.float.i64(f: float) returns (i64);
function $fp2ui.float.i80(f: float) returns (i80);
function $fp2ui.float.i88(f: float) returns (i88);
function $fp2ui.float.i96(f: float) returns (i96);
function $fp2ui.float.i128(f: float) returns (i128);
function $fp2ui.float.i160(f: float) returns (i160);
function $fp2ui.float.i256(f: float) returns (i256);
function $si2fp.i1.float(i: i1) returns (float);
function $si2fp.i5.float(i: i5) returns (float);
function $si2fp.i6.float(i: i6) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $si2fp.i128.float(i: i128) returns (float);
function $si2fp.i160.float(i: i160) returns (float);
function $si2fp.i256.float(i: i256) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $ui2fp.i5.float(i: i5) returns (float);
function $ui2fp.i6.float(i: i6) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $ui2fp.i160.float(i: i160) returns (float);
function $ui2fp.i256.float(i: i256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, f: float) returns ([ref] i8) { M[p := $bitcast.float.i8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const ldv_linux_alloc_usb_lock_lock: ref;
axiom (ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 1028));
const ldv_linux_arch_io_iomem: ref;
axiom (ldv_linux_arch_io_iomem == $sub.ref(0, 2056));
const ldv_linux_block_request_blk_rq: ref;
axiom (ldv_linux_block_request_blk_rq == $sub.ref(0, 3084));
const ldv_linux_drivers_base_class_usb_gadget_class: ref;
axiom (ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 4112));
const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;
axiom (ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 5140));
const ldv_linux_fs_sysfs_sysfs: ref;
axiom (ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 6168));
const ldv_linux_kernel_locking_rwlock_rlock: ref;
axiom (ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 7196));
const ldv_linux_kernel_locking_rwlock_wlock: ref;
axiom (ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 8224));
const ldv_linux_kernel_module_module_refcounter: ref;
axiom (ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 9252));
const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;
axiom (ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 10280));
const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;
axiom (ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 11308));
const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;
axiom (ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 12336));
const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;
axiom (ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 13364));
const ldv_linux_mmc_sdio_func_sdio_element: ref;
axiom (ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 14390));
const ldv_linux_net_register_probe_state: ref;
axiom (ldv_linux_net_register_probe_state == $sub.ref(0, 15418));
const rtnllocknumber: ref;
axiom (rtnllocknumber == $sub.ref(0, 16446));
const locksocknumber: ref;
axiom (locksocknumber == $sub.ref(0, 17474));
const ldv_linux_usb_coherent_coherent_state: ref;
axiom (ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 18502));
const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;
axiom (LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 19530));
const ldv_linux_usb_gadget_usb_gadget: ref;
axiom (ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 20558));
const ldv_linux_usb_register_probe_state: ref;
axiom (ldv_linux_usb_register_probe_state == $sub.ref(0, 21586));
const ldv_linux_usb_urb_urb_state: ref;
axiom (ldv_linux_usb_urb_urb_state == $sub.ref(0, 22614));
const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;
axiom (LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 23639));
const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_io_mutex_of_usb_yurex: ref;
axiom (LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_io_mutex_of_usb_yurex == $sub.ref(0, 24664));
const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;
axiom (LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 25689));
const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;
axiom (LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 26714));
const {:count 2} __mod_usb__yurex_table_device_table: ref;
axiom (__mod_usb__yurex_table_device_table == $sub.ref(0, 27802));
const ldv_thread_0: ref;
axiom (ldv_thread_0 == $sub.ref(0, 28842));
const ldv_thread_1: ref;
axiom (ldv_thread_1 == $sub.ref(0, 29882));
const ldv_thread_2: ref;
axiom (ldv_thread_2 == $sub.ref(0, 30922));
const ldv_thread_5: ref;
axiom (ldv_thread_5 == $sub.ref(0, 31962));
const __ldv_in_interrupt_context: ref;
axiom (__ldv_in_interrupt_context == $sub.ref(0, 32987));
const yurex_driver: ref;
axiom (yurex_driver == $sub.ref(0, 34315));
const {:count 6} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 35345));
const {:count 2} yurex_table: ref;
axiom (yurex_table == $sub.ref(0, 36433));
const yurex_class: ref;
axiom (yurex_class == $sub.ref(0, 37489));
const {:count 32} .str.35: ref;
axiom (.str.35 == $sub.ref(0, 38545));
const {:count 21} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 39590));
const {:count 13} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 40627));
const {:count 25} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 41676));
const {:count 4} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 42704));
const {:count 8} .str.34: ref;
axiom (.str.34 == $sub.ref(0, 43736));
const yurex_fops: ref;
axiom (yurex_fops == $sub.ref(0, 45000));
const __this_module: ref;
axiom (__this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776)));
const {:count 44} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 46068));
const {:count 11} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 47103));
const {:count 12} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 48139));
const {:count 16} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 49179));
const {:count 40} .str.11: ref;
axiom (.str.11 == $sub.ref(0, 50243));
const current_task: ref;
axiom (current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784)));
const {:count 6} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 51273));
const ldv_linux_kernel_locking_spinlock_spin_lock_of_usb_yurex: ref;
axiom (ldv_linux_kernel_locking_spinlock_spin_lock_of_usb_yurex == $sub.ref(0, 52301));
const {:count 15} .str.12: ref;
axiom (.str.12 == $sub.ref(0, 53340));
const {:count 15} .str.13: ref;
axiom (.str.13 == $sub.ref(0, 54379));
const {:count 21} .str.14: ref;
axiom (.str.14 == $sub.ref(0, 55424));
const {:count 12} .str.15: ref;
axiom (.str.15 == $sub.ref(0, 56460));
const {:count 26} .str.16: ref;
axiom (.str.16 == $sub.ref(0, 57510));
const {:count 32} .str.17: ref;
axiom (.str.17 == $sub.ref(0, 58566));
const {:count 29} .str.18: ref;
axiom (.str.18 == $sub.ref(0, 59619));
const {:count 32} .str.19: ref;
axiom (.str.19 == $sub.ref(0, 60675));
const {:count 24} .str.20: ref;
axiom (.str.20 == $sub.ref(0, 61723));
const {:count 31} .str.21: ref;
axiom (.str.21 == $sub.ref(0, 62778));
const {:count 26} .str.22: ref;
axiom (.str.22 == $sub.ref(0, 63828));
const {:count 42} .str.23: ref;
axiom (.str.23 == $sub.ref(0, 64894));
const {:count 44} .str.24: ref;
axiom (.str.24 == $sub.ref(0, 65962));
const {:count 51} .str.27: ref;
axiom (.str.27 == $sub.ref(0, 67037));
const {:count 16} .str.28: ref;
axiom (.str.28 == $sub.ref(0, 68077));
const {:count 34} .str.29: ref;
axiom (.str.29 == $sub.ref(0, 69135));
const {:count 16} .str.30: ref;
axiom (.str.30 == $sub.ref(0, 70175));
const {:count 28} .str.31: ref;
axiom (.str.31 == $sub.ref(0, 71227));
const {:count 12} .str.32: ref;
axiom (.str.32 == $sub.ref(0, 72263));
const {:count 32} .str.33: ref;
axiom (.str.33 == $sub.ref(0, 73319));
const {:count 25} .str.25: ref;
axiom (.str.25 == $sub.ref(0, 74368));
const {:count 23} .str.26: ref;
axiom (.str.26 == $sub.ref(0, 75415));
const ldv_linux_lib_idr_idr: ref;
axiom (ldv_linux_lib_idr_idr == $sub.ref(0, 76443));
const ldv_linux_block_queue_queue_state: ref;
axiom (ldv_linux_block_queue_queue_state == $sub.ref(0, 77471));
const ldv_linux_block_genhd_disk_state: ref;
axiom (ldv_linux_block_genhd_disk_state == $sub.ref(0, 78499));
const nr_cpu_ids: ref;
axiom (nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792)));
const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;
axiom (ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 79527));
const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;
axiom (ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 80555));
const ldv_linux_kernel_locking_spinlock_spin_lock: ref;
axiom (ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 81583));
const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;
axiom (ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 82611));
const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;
axiom (ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 83639));
const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;
axiom (ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 84667));
const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;
axiom (ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 85695));
const .str: ref;
axiom (.str == $sub.ref(0, 86720));
const ldv_linux_kernel_sched_completion_completion: ref;
axiom (ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 87748));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 88780));
const {:count 3} .str.1.64: ref;
axiom (.str.1.64 == $sub.ref(0, 89807));
const {:count 14} .str.65: ref;
axiom (.str.65 == $sub.ref(0, 90845));
const errno_global: ref;
axiom (errno_global == $sub.ref(0, 91873));
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 92905));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const ldv_in_interrupt_context: ref;
axiom (ldv_in_interrupt_context == $sub.ref(0, 93937));
procedure  ldv_in_interrupt_context()
  returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7549, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7549, 11} true;
  assume {:verifier.code 0} true;
  $i0 := $M.0;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7549, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $trunc.i8.i1($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7549, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ldv_check_alloc_flags: ref;
axiom (ldv_check_alloc_flags == $sub.ref(0, 94969));
procedure  ldv_check_alloc_flags($i0: i32)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4042, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4042, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_alloc_irq_check_alloc_flags($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4043, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4045, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_alloc_irq_check_alloc_flags: ref;
axiom (ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 96001));
procedure  ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6474, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6474, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_in_interrupt_context();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6474, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i8($i1);
  call {:cexpr "tmp"} boogie_si_record_i8($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6476, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i8.i1($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6476, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6478, 3} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  $i4 := 1;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6482, 43} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6482, 51} true;
  assume {:verifier.code 0} true;
  $i6 := 1;
  assume {:branchcond $i5} true;
  goto $bb4, $bb6;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6482, 51} true;
  assume {:verifier.code 0} true;
  assume ($i5 == 1);
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6482, 51} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i1.i32($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6482, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_alloc_irq__wrong_flags($i8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6484, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb6:
  assume !(($i5 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6482, 60} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i0, 32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6482, 51} true;
  assume {:verifier.code 0} true;
  $i6 := $i7;
  goto $bb5;
}
const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;
axiom (ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 97033));
procedure  ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6537, 7} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6537, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $M.1;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6537, 37} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6537, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6539, 56} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i0, 16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6539, 63} true;
  assume {:verifier.code 0} true;
  $i4 := 1;
  assume {:branchcond $i3} true;
  goto $bb3, $bb5;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6539, 63} true;
  assume {:verifier.code 0} true;
  assume ($i3 == 1);
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6539, 63} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6539, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6541, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i3 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6539, 72} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i0, 32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6539, 63} true;
  assume {:verifier.code 0} true;
  $i4 := $i5;
  goto $bb4;
$bb6:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6543, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;
axiom (ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 98065));
procedure  ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10557, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10557, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10557, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10559, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10561, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10563, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_alloc_irq__wrong_flags: ref;
axiom (ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 99097));
procedure  ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10619, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10619, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10619, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10621, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10623, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10625, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assume: ref;
axiom (ldv_assume == $sub.ref(0, 100129));
procedure  ldv_assume($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8169, 18} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8169, 18} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8169, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8169, 24} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8171, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8174, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_undef_ptr: ref;
axiom (ldv_undef_ptr == $sub.ref(0, 101161));
procedure  ldv_undef_ptr()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8402, 9} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8402, 9} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet_pointer();
  call {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8404, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const ldv_is_err: ref;
axiom (ldv_is_err == $sub.ref(0, 102193));
procedure  ldv_is_err($p0: ref)
  returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7030, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7030, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7030, 31} true;
  assume {:verifier.code 0} true;
  $i2 := $ugt.i64($i1, 4294967295);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7030, 31} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7030, 10} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7030, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const ldv_undef_int: ref;
axiom (ldv_undef_int == $sub.ref(0, 103225));
procedure  ldv_undef_int()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8392, 9} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8392, 9} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8394, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const ldv_malloc_unknown_size: ref;
axiom (ldv_malloc_unknown_size == $sub.ref(0, 104257));
procedure  ldv_malloc_unknown_size()
  returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8316, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8316, 13} true;
  assume {:verifier.code 0} true;
  call $i0 := ldv_undef_int();
  call {:cexpr "tmp___1"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8318, 15} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8318, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8320, 11} true;
  assume {:verifier.code 0} true;
  call $p2 := external_allocated_data();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8322, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8322, 36} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i64($i3, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8322, 36} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8322, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8323, 15} true;
  assume {:verifier.code 0} true;
  call $i6 := ldv_is_err($p2);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8324, 24} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i64($i6, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8324, 24} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8324, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8326, 5} true;
  assume {:verifier.code 0} true;
  $p9 := $p2;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8328, 5} true;
  assume {:verifier.code 0} true;
  $p9 := $0.ref;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8331, 1} true;
  assume {:verifier.code 0} true;
  $r := $p9;
  $exn := false;
  return;
}
const external_allocated_data: ref;
axiom (external_allocated_data == $sub.ref(0, 105289));
procedure  external_allocated_data()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10996, 18} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10996, 18} true;
  assume {:verifier.code 0} true;
  call $p0 := external_alloc();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10996, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const external_alloc: ref;
axiom (external_alloc == $sub.ref(0, 106321));
procedure  external_alloc()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11065, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11065, 10} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet_pointer();
  call {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11065, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const ldv_EMGentry_exit_yurex_driver_exit_5_2: ref;
axiom (ldv_EMGentry_exit_yurex_driver_exit_5_2 == $sub.ref(0, 107353));
procedure  ldv_EMGentry_exit_yurex_driver_exit_5_2($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5421, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5421, 3} true;
  assume {:verifier.code 0} true;
  call yurex_driver_exit();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5423, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const yurex_driver_exit: ref;
axiom (yurex_driver_exit == $sub.ref(0, 108385));
procedure  yurex_driver_exit()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5367, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5367, 3} true;
  assume {:verifier.code 0} true;
  call ldv_usb_deregister_124(yurex_driver);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5369, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_deregister_124: ref;
axiom (ldv_usb_deregister_124 == $sub.ref(0, 109417));
procedure  ldv_usb_deregister_124($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6359, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6359, 3} true;
  assume {:verifier.code 0} true;
  call usb_deregister($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6360, 3} true;
  assume {:verifier.code 0} true;
  call ldv_usb_deregister($0.ref, $p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6362, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const usb_deregister: ref;
axiom (usb_deregister == $sub.ref(0, 110449));
procedure  usb_deregister($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11036, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11036, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_deregister: ref;
axiom (ldv_usb_deregister == $sub.ref(0, 111481));
procedure  ldv_usb_deregister($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5795, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5795, 3} true;
  assume {:verifier.code 0} true;
  call ldv_dispatch_deregister_3_1($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5797, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_dispatch_deregister_3_1: ref;
axiom (ldv_dispatch_deregister_3_1 == $sub.ref(0, 112513));
procedure  ldv_dispatch_deregister_3_1($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5439, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5439, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const yurex_probe: ref;
axiom (yurex_probe == $sub.ref(0, 113545));
procedure  yurex_probe($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $p53: ref;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $i42: i32;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i16;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i22: i32;
  var $i186: i64;
  var $i187: i1;
  var $p188: ref;
  var $i189: i32;
  var $i185: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4855, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume true;
  assume true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4855, 9} true;
  assume {:verifier.code 0} true;
  call $p6 := get_current();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4856, 8} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4856, 14} true;
  assume {:verifier.code 0} true;
  $M.2 := $store.i32($M.2, $p7, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4857, 18} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4857, 8} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4857, 16} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.ref($M.3, $p9, $p6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4858, 8} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4858, 13} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.ref($M.4, $p10, autoremove_wake_function);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4859, 32} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4859, 8} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4859, 23} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.ref($M.5, $p13, $p11);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4860, 32} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4860, 8} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4860, 23} true;
  assume {:verifier.code 0} true;
  $M.6 := $store.ref($M.6, $p16, $p14);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4861, 13} true;
  assume {:verifier.code 0} true;
  call $p17 := kzalloc(408, 208);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4862, 9} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4864, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64($p18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4864, 27} true;
  assume {:verifier.code 0} true;
  $i20 := $eq.i64($i19, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4864, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i20 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4866, 50} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4866, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref($p21, .str.12);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4868, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 12);
  goto $bb3;
$bb2:
  assume !(($i20 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5006, 7} true;
  assume {:verifier.code 0} true;
  $i186 := $p2i.ref.i64($p18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5006, 27} true;
  assume {:verifier.code 0} true;
  $i187 := $ne.i64($i186, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5006, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i187} true;
  goto $bb42, $bb43;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4872, 20} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(64, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4872, 3} true;
  assume {:verifier.code 0} true;
  call kref_init($p23);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4873, 23} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4873, 3} true;
  assume {:verifier.code 0} true;
  call __mutex_init($p24, .str.13, $p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4874, 25} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(328, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4874, 3} true;
  assume {:verifier.code 0} true;
  call $p26 := spinlock_check($p25);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4875, 31} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(328, 1));
  $p28 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(328, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4875, 55} true;
  assume {:verifier.code 0} true;
  $p29 := $bitcast.ref.ref($p28);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4875, 3} true;
  assume {:verifier.code 0} true;
  call __raw_spin_lock_init($p29, .str.14, $p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4877, 32} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(240, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4877, 3} true;
  assume {:verifier.code 0} true;
  call __init_waitqueue_head($p30, .str.15, $p5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4878, 13} true;
  assume {:verifier.code 0} true;
  call $p31 := interface_to_usbdev($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4879, 15} true;
  assume {:verifier.code 0} true;
  call $p32 := ldv_usb_get_dev_103($p31);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4879, 8} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4879, 13} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p33, $p32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4880, 8} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4880, 18} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p34, $p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4881, 27} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4881, 27} true;
  assume {:verifier.code 0} true;
  $p36 := $load.ref($M.7, $p35);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 29} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(0, 1));
  $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 34} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i8($M.7, $p38);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 11} true;
  assume {:verifier.code 0} true;
  $i40 := $zext.i8.i32($i39);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 9} true;
  assume {:verifier.code 0} true;
  $i41 := $slt.i32(0, $i40);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i41 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 7} true;
  assume {:verifier.code 0} true;
  $i42 := 0;
  goto $bb8;
$bb6:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i41 == 1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  goto $bb16;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4898, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4887, 29} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4887, 29} true;
  assume {:verifier.code 0} true;
  $p44 := $load.ref($M.7, $p43);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4887, 40} true;
  assume {:verifier.code 0} true;
  $i45 := $sext.i32.i64($i42);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4887, 38} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p44, $mul.ref($i45, 72));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4887, 60} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($add.ref($p44, $mul.ref($i45, 72)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4888, 13} true;
  assume {:verifier.code 0} true;
  call $i48 := usb_endpoint_is_int_in($p47);
  call {:cexpr "tmp___2"} boogie_si_record_i32($i48);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4890, 15} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i32($i48, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4890, 7} true;
  assume {:verifier.code 0} true;
  $p50 := $p47;
  assume {:branchcond $i49} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i49 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4887, 60} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4891, 42} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($add.ref($p50, $mul.ref(0, 10)), $mul.ref(2, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4891, 42} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i8($M.7, $p51);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4891, 10} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4891, 30} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p53, $i52);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4892, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4902, 27} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4902, 27} true;
  assume {:verifier.code 0} true;
  $i59 := $load.i8($M.7, $p58);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4902, 7} true;
  assume {:verifier.code 0} true;
  $i60 := $zext.i8.i32($i59);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4902, 47} true;
  assume {:verifier.code 0} true;
  $i61 := $eq.i32($i60, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4902, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb17, $bb18;
$bb13:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4895, 9} true;
  assume {:verifier.code 0} true;
  $i54 := $add.i32($i42, 1);
  call {:cexpr "i"} boogie_si_record_i32($i54);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 34} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i8($M.7, $p38);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 11} true;
  assume {:verifier.code 0} true;
  $i56 := $zext.i8.i32($i55);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 9} true;
  assume {:verifier.code 0} true;
  $i57 := $slt.i32($i54, $i56);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i57 == 1);
  assume {:verifier.code 0} true;
  $i42 := $i54;
  goto $bb8;
$bb15:
  assume !(($i57 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb16:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4897, 34} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb17:
  assume ($i61 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4905, 50} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4905, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref($p62, .str.16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4907, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 19);
  goto $bb3;
$bb18:
  assume !(($i61 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4911, 19} true;
  assume {:verifier.code 0} true;
  call $p63 := ldv_usb_alloc_urb_104(0, 208);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4911, 8} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4911, 17} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p64, $p63);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4913, 28} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4913, 28} true;
  assume {:verifier.code 0} true;
  $p66 := $load.ref($M.7, $p65);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4913, 7} true;
  assume {:verifier.code 0} true;
  $i67 := $p2i.ref.i64($p66);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4913, 37} true;
  assume {:verifier.code 0} true;
  $i68 := $eq.i64($i67, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4913, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i68 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4915, 50} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4915, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref($p69, .str.17);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4917, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 12);
  goto $bb3;
$bb21:
  assume !(($i68 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4921, 13} true;
  assume {:verifier.code 0} true;
  call $p70 := kmalloc(8, 208);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4922, 19} true;
  assume {:verifier.code 0} true;
  $p71 := $bitcast.ref.ref($p70);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4922, 8} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4922, 17} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p72, $p70);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4924, 28} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4924, 28} true;
  assume {:verifier.code 0} true;
  $p74 := $load.ref($M.7, $p73);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4924, 7} true;
  assume {:verifier.code 0} true;
  $i75 := $p2i.ref.i64($p74);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4924, 37} true;
  assume {:verifier.code 0} true;
  $i76 := $eq.i64($i75, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4924, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i76} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i76 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4926, 50} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4926, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref($p77, .str.18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4928, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 12);
  goto $bb3;
$bb24:
  assume !(($i76 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4932, 45} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4932, 45} true;
  assume {:verifier.code 0} true;
  $p79 := $load.ref($M.7, $p78);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4932, 70} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4932, 70} true;
  assume {:verifier.code 0} true;
  $p81 := $load.ref($M.7, $p80);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4932, 81} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($add.ref($p81, $mul.ref(0, 192)), $mul.ref(112, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4932, 13} true;
  assume {:verifier.code 0} true;
  call $p83 := ldv_usb_alloc_coherent_105($p79, 8, 208, $p82);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4933, 8} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4933, 20} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p84, $p83);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4935, 28} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4935, 28} true;
  assume {:verifier.code 0} true;
  $p86 := $load.ref($M.7, $p85);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4935, 7} true;
  assume {:verifier.code 0} true;
  $i87 := $p2i.ref.i64($p86);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4935, 40} true;
  assume {:verifier.code 0} true;
  $i88 := $eq.i64($i87, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4935, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i88 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4937, 50} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4937, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref($p89, .str.19);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4939, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 12);
  goto $bb3;
$bb27:
  assume !(($i88 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4943, 9} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4943, 9} true;
  assume {:verifier.code 0} true;
  $p91 := $load.ref($M.7, $p90);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4943, 20} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($add.ref($p91, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4943, 33} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p92, 33);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4944, 9} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4944, 9} true;
  assume {:verifier.code 0} true;
  $p94 := $load.ref($M.7, $p93);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4944, 20} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($add.ref($p94, $mul.ref(0, 8)), $mul.ref(1, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4944, 29} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p95, 9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4945, 9} true;
  assume {:verifier.code 0} true;
  $p96 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4945, 9} true;
  assume {:verifier.code 0} true;
  $p97 := $load.ref($M.7, $p96);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4945, 20} true;
  assume {:verifier.code 0} true;
  $p98 := $add.ref($add.ref($p97, $mul.ref(0, 8)), $mul.ref(2, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4945, 27} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i16($M.7, $p98, 512);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4946, 58} true;
  assume {:verifier.code 0} true;
  $p99 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(0, 1));
  $p100 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4946, 63} true;
  assume {:verifier.code 0} true;
  $i101 := $load.i8($M.7, $p100);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4946, 29} true;
  assume {:verifier.code 0} true;
  $i102 := $zext.i8.i16($i101);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4946, 9} true;
  assume {:verifier.code 0} true;
  $p103 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4946, 9} true;
  assume {:verifier.code 0} true;
  $p104 := $load.ref($M.7, $p103);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4946, 20} true;
  assume {:verifier.code 0} true;
  $p105 := $add.ref($add.ref($p104, $mul.ref(0, 8)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4946, 27} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i16($M.7, $p105, $i102);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4947, 9} true;
  assume {:verifier.code 0} true;
  $p106 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4947, 9} true;
  assume {:verifier.code 0} true;
  $p107 := $load.ref($M.7, $p106);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4947, 20} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($add.ref($p107, $mul.ref(0, 8)), $mul.ref(6, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4947, 28} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i16($M.7, $p108, 8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4948, 32} true;
  assume {:verifier.code 0} true;
  $p109 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4948, 32} true;
  assume {:verifier.code 0} true;
  $p110 := $load.ref($M.7, $p109);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4948, 13} true;
  assume {:verifier.code 0} true;
  call $i111 := __create_pipe($p110, 0);
  call {:cexpr "tmp___5"} boogie_si_record_i32($i111);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4949, 29} true;
  assume {:verifier.code 0} true;
  $p112 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4949, 29} true;
  assume {:verifier.code 0} true;
  $p113 := $load.ref($M.7, $p112);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4949, 44} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4949, 44} true;
  assume {:verifier.code 0} true;
  $p115 := $load.ref($M.7, $p114);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4949, 58} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4949:58: warning: over-approximating bitwise operation or;
  $i116 := $or.i32($i111, $sub.i32(0, 2147483648));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4949, 95} true;
  assume {:verifier.code 0} true;
  $p117 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4949, 95} true;
  assume {:verifier.code 0} true;
  $p118 := $load.ref($M.7, $p117);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4949, 73} true;
  assume {:verifier.code 0} true;
  $p119 := $bitcast.ref.ref($p118);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4950, 37} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4950, 37} true;
  assume {:verifier.code 0} true;
  $p121 := $load.ref($M.7, $p120);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4950, 79} true;
  assume {:verifier.code 0} true;
  $p122 := $bitcast.ref.ref($p18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4949, 3} true;
  assume {:verifier.code 0} true;
  call usb_fill_control_urb($p113, $p115, $i116, $p119, $p121, 8, yurex_control_callback, $p122);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4951, 43} true;
  assume {:verifier.code 0} true;
  $p123 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4951, 43} true;
  assume {:verifier.code 0} true;
  $p124 := $load.ref($M.7, $p123);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4951, 54} true;
  assume {:verifier.code 0} true;
  $p125 := $add.ref($add.ref($p124, $mul.ref(0, 192)), $mul.ref(100, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4951, 54} true;
  assume {:verifier.code 0} true;
  $i126 := $load.i32($M.7, $p125);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4951, 69} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4951:69: warning: over-approximating bitwise operation or;
  $i127 := $or.i32($i126, 4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4951, 9} true;
  assume {:verifier.code 0} true;
  $p128 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4951, 9} true;
  assume {:verifier.code 0} true;
  $p129 := $load.ref($M.7, $p128);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4951, 20} true;
  assume {:verifier.code 0} true;
  $p130 := $add.ref($add.ref($p129, $mul.ref(0, 192)), $mul.ref(100, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4951, 35} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p130, $i127);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4952, 14} true;
  assume {:verifier.code 0} true;
  call $p131 := ldv_usb_alloc_urb_106(0, 208);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4952, 8} true;
  assume {:verifier.code 0} true;
  $p132 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4952, 12} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p132, $p131);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4954, 28} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4954, 28} true;
  assume {:verifier.code 0} true;
  $p134 := $load.ref($M.7, $p133);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4954, 7} true;
  assume {:verifier.code 0} true;
  $i135 := $p2i.ref.i64($p134);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4954, 32} true;
  assume {:verifier.code 0} true;
  $i136 := $eq.i64($i135, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4954, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i136} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i136 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4956, 50} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4956, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref($p137, .str.20);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4958, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 12);
  goto $bb3;
$bb30:
  assume !(($i136 == 1));
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4962, 45} true;
  assume {:verifier.code 0} true;
  $p138 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4962, 45} true;
  assume {:verifier.code 0} true;
  $p139 := $load.ref($M.7, $p138);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4962, 70} true;
  assume {:verifier.code 0} true;
  $p140 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4962, 70} true;
  assume {:verifier.code 0} true;
  $p141 := $load.ref($M.7, $p140);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4962, 76} true;
  assume {:verifier.code 0} true;
  $p142 := $add.ref($add.ref($p141, $mul.ref(0, 192)), $mul.ref(112, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4962, 13} true;
  assume {:verifier.code 0} true;
  call $p143 := ldv_usb_alloc_coherent_107($p139, 8, 208, $p142);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4963, 8} true;
  assume {:verifier.code 0} true;
  $p144 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4963, 19} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p144, $p143);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4965, 28} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4965, 28} true;
  assume {:verifier.code 0} true;
  $p146 := $load.ref($M.7, $p145);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4965, 7} true;
  assume {:verifier.code 0} true;
  $i147 := $p2i.ref.i64($p146);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4965, 39} true;
  assume {:verifier.code 0} true;
  $i148 := $eq.i64($i147, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4965, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i148} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i148 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4967, 50} true;
  assume {:verifier.code 0} true;
  $p149 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4967, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref($p149, .str.21);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4969, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 12);
  goto $bb3;
$bb33:
  assume !(($i148 == 1));
  assume {:verifier.code 0} true;
  goto $bb34;
$bb34:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4973, 32} true;
  assume {:verifier.code 0} true;
  $p150 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4973, 32} true;
  assume {:verifier.code 0} true;
  $p151 := $load.ref($M.7, $p150);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4973, 58} true;
  assume {:verifier.code 0} true;
  $p152 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4973, 58} true;
  assume {:verifier.code 0} true;
  $i153 := $load.i8($M.7, $p152);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4973, 38} true;
  assume {:verifier.code 0} true;
  $i154 := $zext.i8.i32($i153);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4973, 13} true;
  assume {:verifier.code 0} true;
  call $i155 := __create_pipe($p151, $i154);
  call {:cexpr "tmp___7"} boogie_si_record_i32($i155);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4974, 25} true;
  assume {:verifier.code 0} true;
  $p156 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4974, 25} true;
  assume {:verifier.code 0} true;
  $p157 := $load.ref($M.7, $p156);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4974, 35} true;
  assume {:verifier.code 0} true;
  $p158 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4974, 35} true;
  assume {:verifier.code 0} true;
  $p159 := $load.ref($M.7, $p158);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4974, 49} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4974:49: warning: over-approximating bitwise operation or;
  $i160 := $or.i32($i155, 1073741952);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4974, 77} true;
  assume {:verifier.code 0} true;
  $p161 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4974, 77} true;
  assume {:verifier.code 0} true;
  $p162 := $load.ref($M.7, $p161);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4975, 42} true;
  assume {:verifier.code 0} true;
  $p163 := $bitcast.ref.ref($p18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4974, 3} true;
  assume {:verifier.code 0} true;
  call usb_fill_int_urb($p157, $p159, $i160, $p162, 8, yurex_interrupt, $p163, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4976, 38} true;
  assume {:verifier.code 0} true;
  $p164 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4976, 38} true;
  assume {:verifier.code 0} true;
  $p165 := $load.ref($M.7, $p164);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4976, 44} true;
  assume {:verifier.code 0} true;
  $p166 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(100, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4976, 44} true;
  assume {:verifier.code 0} true;
  $i167 := $load.i32($M.7, $p166);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4976, 59} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4976:59: warning: over-approximating bitwise operation or;
  $i168 := $or.i32($i167, 4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4976, 9} true;
  assume {:verifier.code 0} true;
  $p169 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4976, 9} true;
  assume {:verifier.code 0} true;
  $p170 := $load.ref($M.7, $p169);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4976, 15} true;
  assume {:verifier.code 0} true;
  $p171 := $add.ref($add.ref($p170, $mul.ref(0, 192)), $mul.ref(100, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4976, 30} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p171, $i168);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4977, 41} true;
  assume {:verifier.code 0} true;
  $p172 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4977, 41} true;
  assume {:verifier.code 0} true;
  $p173 := $load.ref($M.7, $p172);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4977, 13} true;
  assume {:verifier.code 0} true;
  call $i174 := ldv_usb_submit_urb_108($p173, 208);
  call {:cexpr "tmp___8"} boogie_si_record_i32($i174);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4979, 15} true;
  assume {:verifier.code 0} true;
  $i175 := $ne.i32($i174, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4979, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i175} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i175 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4982, 50} true;
  assume {:verifier.code 0} true;
  $p176 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4982, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref($p176, .str.22);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4984, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 5);
  goto $bb3;
$bb36:
  assume !(($i175 == 1));
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4988, 31} true;
  assume {:verifier.code 0} true;
  $p177 := $bitcast.ref.ref($p18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4988, 3} true;
  assume {:verifier.code 0} true;
  call usb_set_intfdata($p0, $p177);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4989, 8} true;
  assume {:verifier.code 0} true;
  $p178 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4989, 12} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p178, $sub.i64(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4990, 12} true;
  assume {:verifier.code 0} true;
  call $i179 := usb_register_dev($p0, yurex_class);
  call {:cexpr "retval"} boogie_si_record_i32($i179);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4992, 14} true;
  assume {:verifier.code 0} true;
  $i180 := $ne.i32($i179, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4992, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i180} true;
  goto $bb38, $bb39;
$bb38:
  assume ($i180 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4994, 50} true;
  assume {:verifier.code 0} true;
  $p181 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4994, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref($p181, .str.23);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4995, 5} true;
  assume {:verifier.code 0} true;
  call usb_set_intfdata($p0, $0.ref);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4997, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $i179;
  goto $bb3;
$bb39:
  assume !(($i180 == 1));
  assume {:verifier.code 0} true;
  goto $bb40;
$bb40:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5001, 50} true;
  assume {:verifier.code 0} true;
  $p182 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5002, 24} true;
  assume {:verifier.code 0} true;
  $p183 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5002, 24} true;
  assume {:verifier.code 0} true;
  $i184 := $load.i32($M.7, $p183);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5001, 3} true;
  assume {:verifier.code 0} true;
  call _dev_info.ref.ref.i32($p182, .str.24, $i184);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5004, 3} true;
  assume {:verifier.code 0} true;
  $i185 := 0;
  goto $bb41;
$bb41:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5014, 1} true;
  assume {:verifier.code 0} true;
  $r := $i185;
  $exn := false;
  return;
$bb42:
  assume ($i187 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5008, 21} true;
  assume {:verifier.code 0} true;
  $p188 := $add.ref($add.ref($p18, $mul.ref(0, 408)), $mul.ref(64, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5008, 5} true;
  assume {:verifier.code 0} true;
  call $i189 := kref_put($p188, yurex_delete);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5010, 3} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb43:
  assume !(($i187 == 1));
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5012, 3} true;
  assume {:verifier.code 0} true;
  $i185 := $i22;
  goto $bb41;
}
const yurex_disconnect: ref;
axiom (yurex_disconnect == $sub.ref(0, 114577));
procedure  yurex_disconnect($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5022, 22} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5022, 22} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5022, 22} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.7, $p1);
  call {:cexpr "minor"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5023, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := usb_get_intfdata($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5024, 9} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5025, 3} true;
  assume {:verifier.code 0} true;
  call usb_set_intfdata($p0, $0.ref);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5026, 3} true;
  assume {:verifier.code 0} true;
  call usb_deregister_dev($p0, yurex_class);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5027, 29} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5027, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_lock_109($p5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5028, 8} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5028, 18} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p6, $0.ref);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5029, 31} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5029, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_110($p7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5030, 22} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(232, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5030, 3} true;
  assume {:verifier.code 0} true;
  call kill_fasync($p8, 29, 131073);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5031, 20} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(240, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5031, 3} true;
  assume {:verifier.code 0} true;
  call __wake_up($p9, 1, 1, $0.ref);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5032, 19} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(64, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5032, 3} true;
  assume {:verifier.code 0} true;
  call $i11 := kref_put($p10, yurex_delete);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5033, 50} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5033, 3} true;
  assume {:verifier.code 0} true;
  call _dev_info.ref.ref.i32($p12, .str.35, $i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5036, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const usb_get_intfdata: ref;
axiom (usb_get_intfdata == $sub.ref(0, 115609));
procedure  usb_get_intfdata($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4460, 57} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4460, 57} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4460, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := dev_get_drvdata($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4462, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const usb_set_intfdata: ref;
axiom (usb_set_intfdata == $sub.ref(0, 116641));
procedure  usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4469, 27} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4469, 27} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4469, 3} true;
  assume {:verifier.code 0} true;
  call dev_set_drvdata($p2, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4471, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const usb_deregister_dev: ref;
axiom (usb_deregister_dev == $sub.ref(0, 117673));
procedure  usb_deregister_dev($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11039, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11039, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_lock_109: ref;
axiom (ldv_mutex_lock_109 == $sub.ref(0, 118705));
procedure  ldv_mutex_lock_109($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6223, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6223, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_lock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6225, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_unlock_110: ref;
axiom (ldv_mutex_unlock_110 == $sub.ref(0, 119737));
procedure  ldv_mutex_unlock_110($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6232, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6232, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_unlock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6234, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const kill_fasync: ref;
axiom (kill_fasync == $sub.ref(0, 120769));
procedure  kill_fasync($p0: ref, $i1: i32, $i2: i32)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11006, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "kill_fasync:arg:arg1"} boogie_si_record_i32($i1);
  call {:cexpr "kill_fasync:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11006, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __wake_up: ref;
axiom (__wake_up == $sub.ref(0, 121801));
procedure  __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10971, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
  call {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10971, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const yurex_delete: ref;
axiom (yurex_delete == $sub.ref(0, 122833));
procedure  yurex_delete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4597, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4597, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4597, 36} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 64), 408));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4598, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4598, 22} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p4, .str.1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4599, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4599, 23} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p5, .str.6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4600, 14} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4600, 23} true;
  assume {:verifier.code 0} true;
  $M.10 := $store.ref($M.10, $p6, .str.7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4601, 14} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4601, 21} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p7, .str.8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4602, 14} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4602, 14} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4602, 21} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i24($M.12, $p9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4602, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4602:21: warning: over-approximating bitwise operation and;
  $i11 := $and.i24($i10, $sub.i24(0, 262144));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4602, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4602:21: warning: over-approximating bitwise operation or;
  $i12 := $or.i24($i11, 97);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4602, 21} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.i24($M.12, $p9, $i12);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4603, 14} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4603, 20} true;
  assume {:verifier.code 0} true;
  $M.13 := $store.i8($M.13, $p13, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4604, 47} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4604, 47} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i8($M.13, $p14);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4604, 29} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i8.i64($i15);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4604, 53} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4604:53: warning: over-approximating bitwise operation and;
  $i17 := $and.i64($i16, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4604, 9} true;
  assume {:verifier.code 0} true;
  call $i18 := ldv__builtin_expect($i17, 0);
  call {:cexpr "tmp"} boogie_si_record_i64($i18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4606, 11} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i64($i18, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4606, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i19 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4608, 69} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4608, 69} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.7, $p20);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4608, 81} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4608, 5} true;
  assume {:verifier.code 0} true;
  call __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.8, .str.6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4611, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4614, 27} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4614, 27} true;
  assume {:verifier.code 0} true;
  $p24 := $load.ref($M.7, $p23);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4614, 3} true;
  assume {:verifier.code 0} true;
  call ldv_usb_put_dev_95($p24);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4616, 28} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4616, 28} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.7, $p25);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4616, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64($p26);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4616, 37} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.i64($i27, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4616, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i28 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4618, 23} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4618, 23} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.7, $p29);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4618, 5} true;
  assume {:verifier.code 0} true;
  call usb_kill_urb($p30);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4619, 30} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4619, 30} true;
  assume {:verifier.code 0} true;
  $p32 := $load.ref($M.7, $p31);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4619, 11} true;
  assume {:verifier.code 0} true;
  $p33 := $bitcast.ref.ref($p32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4619, 5} true;
  assume {:verifier.code 0} true;
  call kfree($p33);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4621, 30} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4621, 30} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.7, $p34);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4621, 9} true;
  assume {:verifier.code 0} true;
  $i36 := $p2i.ref.i64($p35);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4621, 42} true;
  assume {:verifier.code 0} true;
  $i37 := $ne.i64($i36, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4621, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb6:
  assume ($i37 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4623, 37} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4623, 37} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.7, $p38);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4623, 61} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4623, 61} true;
  assume {:verifier.code 0} true;
  $p41 := $load.ref($M.7, $p40);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4623, 80} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4623, 80} true;
  assume {:verifier.code 0} true;
  $p43 := $load.ref($M.7, $p42);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4623, 91} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($add.ref($p43, $mul.ref(0, 192)), $mul.ref(112, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4623, 91} true;
  assume {:verifier.code 0} true;
  $i45 := $load.i64($M.7, $p44);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4623, 7} true;
  assume {:verifier.code 0} true;
  call ldv_usb_free_coherent_96($p39, 8, $p41, $i45);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4625, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4628, 30} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4628, 30} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.7, $p46);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4628, 5} true;
  assume {:verifier.code 0} true;
  call ldv_usb_free_urb_97($p47);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4630, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4632, 28} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4632, 28} true;
  assume {:verifier.code 0} true;
  $p49 := $load.ref($M.7, $p48);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4632, 7} true;
  assume {:verifier.code 0} true;
  $i50 := $p2i.ref.i64($p49);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4632, 32} true;
  assume {:verifier.code 0} true;
  $i51 := $ne.i64($i50, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4632, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i51 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4634, 23} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4634, 23} true;
  assume {:verifier.code 0} true;
  $p53 := $load.ref($M.7, $p52);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4634, 5} true;
  assume {:verifier.code 0} true;
  call usb_kill_urb($p53);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4636, 30} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4636, 30} true;
  assume {:verifier.code 0} true;
  $p55 := $load.ref($M.7, $p54);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4636, 9} true;
  assume {:verifier.code 0} true;
  $i56 := $p2i.ref.i64($p55);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4636, 41} true;
  assume {:verifier.code 0} true;
  $i57 := $ne.i64($i56, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4636, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb12, $bb13;
$bb11:
  assume !(($i51 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb12:
  assume ($i57 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4638, 37} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4638, 37} true;
  assume {:verifier.code 0} true;
  $p59 := $load.ref($M.7, $p58);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4638, 61} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4638, 61} true;
  assume {:verifier.code 0} true;
  $p61 := $load.ref($M.7, $p60);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4638, 79} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4638, 79} true;
  assume {:verifier.code 0} true;
  $p63 := $load.ref($M.7, $p62);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4638, 85} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($add.ref($p63, $mul.ref(0, 192)), $mul.ref(112, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4638, 85} true;
  assume {:verifier.code 0} true;
  $i65 := $load.i64($M.7, $p64);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4638, 7} true;
  assume {:verifier.code 0} true;
  call ldv_usb_free_coherent_98($p59, 8, $p61, $i65);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4640, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume !(($i57 == 1));
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4643, 30} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 64), 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4643, 30} true;
  assume {:verifier.code 0} true;
  $p67 := $load.ref($M.7, $p66);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4643, 5} true;
  assume {:verifier.code 0} true;
  call ldv_usb_free_urb_99($p67);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4645, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4648, 9} true;
  assume {:verifier.code 0} true;
  $p68 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4648, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p68);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4650, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const kref_put: ref;
axiom (kref_put == $sub.ref(0, 123865));
procedure  kref_put($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4321, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4321, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := kref_sub($p0, 1, $p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4323, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const _dev_info: ref;
axiom (_dev_info == $sub.ref(0, 124897));
procedure  _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10982, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10982, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const kref_sub: ref;
axiom (kref_sub == $sub.ref(0, 125929));
procedure  kref_sub($p0: ref, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4293, 19} true;
  assume {:verifier.code 0} true;
  call {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4293, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4293, 43} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i64($i3, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4293, 43} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  call {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4294, 43} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4294, 43} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4294, 29} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i32.i64($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4294, 9} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv__builtin_expect($i8, 0);
  call {:cexpr "tmp"} boogie_si_record_i64($i9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4296, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i64($i9, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4296, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4298, 5} true;
  assume {:verifier.code 0} true;
  call warn_slowpath_null(.str.5, 71);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4300, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4303, 37} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i32($i5, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4303, 37} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i1.i32($i11);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4303, 23} true;
  assume {:verifier.code 0} true;
  $i13 := $sext.i32.i64($i12);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4303, 3} true;
  assume {:verifier.code 0} true;
  call $i14 := ldv__builtin_expect($i13, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4304, 54} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4304, 13} true;
  assume {:verifier.code 0} true;
  call $i16 := atomic_sub_and_test($i1, $p15);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4306, 15} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.i32($i16, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4306, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i17 == 1);
  call devirtbounce($p2, $p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4310, 5} true;
  assume {:verifier.code 0} true;
  $i18 := 1;
  goto $bb6;
$bb5:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4315, 1} true;
  assume {:verifier.code 0} true;
  $r := $i18;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4313, 3} true;
  assume {:verifier.code 0} true;
  $i18 := 0;
  goto $bb6;
}
const ldv__builtin_expect: ref;
axiom (ldv__builtin_expect == $sub.ref(0, 126961));
procedure  ldv__builtin_expect($i0: i64, $i1: i64)
  returns ($r: i64)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8187, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
  call {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8187, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const warn_slowpath_null: ref;
axiom (warn_slowpath_null == $sub.ref(0, 127993));
procedure  warn_slowpath_null($p0: ref, $i1: i32)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11057, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11057, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atomic_sub_and_test: ref;
axiom (atomic_sub_and_test == $sub.ref(0, 129025));
procedure  atomic_sub_and_test($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6013, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6013, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := ldv_linux_usb_dev_atomic_sub_and_test($i0, $p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6015, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_linux_usb_dev_atomic_sub_and_test: ref;
axiom (ldv_linux_usb_dev_atomic_sub_and_test == $sub.ref(0, 130057));
procedure  ldv_linux_usb_dev_atomic_sub_and_test($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6624, 19} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_linux_usb_dev_atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6624, 19} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6624, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i32($M.7, $p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6624, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $sub.i32($i3, $i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6624, 6} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6624, 14} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p5, $i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6625, 10} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6625, 10} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.7, $p6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6625, 18} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6625, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6626, 5} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6631, 1} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6629, 3} true;
  assume {:verifier.code 0} true;
  $i9 := 1;
  goto $bb3;
}
const __dynamic_dev_dbg: ref;
axiom (__dynamic_dev_dbg == $sub.ref(0, 131089));
procedure  __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10956, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10956, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
procedure  __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{
$bb1:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10956, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10956, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
procedure  __dynamic_dev_dbg.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64)
{
$bb2:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10956, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10956, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
procedure  __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10956, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10956, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_put_dev_95: ref;
axiom (ldv_usb_put_dev_95 == $sub.ref(0, 132121));
procedure  ldv_usb_put_dev_95($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6054, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6054, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_dev_usb_put_dev($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6056, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const usb_kill_urb: ref;
axiom (usb_kill_urb == $sub.ref(0, 133153));
procedure  usb_kill_urb($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11046, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11046, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const kfree: ref;
axiom (kfree == $sub.ref(0, 134185));
procedure  kfree($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11069, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11069, 3} true;
  assume {:verifier.code 0} true;
  call free_($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11070, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_free_coherent_96: ref;
axiom (ldv_usb_free_coherent_96 == $sub.ref(0, 135217));
procedure  ldv_usb_free_coherent_96($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6064, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_usb_free_coherent_96:arg:size"} boogie_si_record_i64($i1);
  call {:cexpr "ldv_usb_free_coherent_96:arg:dma"} boogie_si_record_i64($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6064, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_coherent_usb_free_coherent($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6066, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_free_urb_97: ref;
axiom (ldv_usb_free_urb_97 == $sub.ref(0, 136249));
procedure  ldv_usb_free_urb_97($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6073, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6073, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_urb_usb_free_urb($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6075, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_free_coherent_98: ref;
axiom (ldv_usb_free_coherent_98 == $sub.ref(0, 137281));
procedure  ldv_usb_free_coherent_98($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6083, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_usb_free_coherent_98:arg:size"} boogie_si_record_i64($i1);
  call {:cexpr "ldv_usb_free_coherent_98:arg:dma"} boogie_si_record_i64($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6083, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_coherent_usb_free_coherent($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6085, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_free_urb_99: ref;
axiom (ldv_usb_free_urb_99 == $sub.ref(0, 138313));
procedure  ldv_usb_free_urb_99($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6092, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6092, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_urb_usb_free_urb($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6094, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_usb_urb_usb_free_urb: ref;
axiom (ldv_linux_usb_urb_usb_free_urb == $sub.ref(0, 139345));
procedure  ldv_linux_usb_urb_usb_free_urb($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8145, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8145, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8145, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i64($i1, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8145, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8147, 54} true;
  assume {:verifier.code 0} true;
  $i3 := $M.14;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8147, 82} true;
  assume {:verifier.code 0} true;
  $i4 := $sgt.i32($i3, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8147, 82} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8147, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_usb_urb__less_initial_decrement($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8148, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $M.14;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8148, 63} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i6, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8148, 33} true;
  assume {:verifier.code 0} true;
  $M.14 := $i7;
  call {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8150, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8152, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_usb_urb__less_initial_decrement: ref;
axiom (ldv_assert_linux_usb_urb__less_initial_decrement == $sub.ref(0, 140377));
procedure  ldv_assert_linux_usb_urb__less_initial_decrement($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10891, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_usb_urb__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10891, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10891, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10893, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10895, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10897, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_usb_coherent_usb_free_coherent: ref;
axiom (ldv_linux_usb_coherent_usb_free_coherent == $sub.ref(0, 141409));
procedure  ldv_linux_usb_coherent_usb_free_coherent($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7844, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7844, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7844, 28} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i64($i1, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7844, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7846, 59} true;
  assume {:verifier.code 0} true;
  $i3 := $M.15;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7846, 97} true;
  assume {:verifier.code 0} true;
  $i4 := $sgt.i32($i3, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7846, 97} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7846, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_usb_coherent__less_initial_decrement($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7847, 45} true;
  assume {:verifier.code 0} true;
  $i6 := $M.15;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7847, 83} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i6, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7847, 43} true;
  assume {:verifier.code 0} true;
  $M.15 := $i7;
  call {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7849, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7851, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_usb_coherent__less_initial_decrement: ref;
axiom (ldv_assert_linux_usb_coherent__less_initial_decrement == $sub.ref(0, 142441));
procedure  ldv_assert_linux_usb_coherent__less_initial_decrement($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10250, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_usb_coherent__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10250, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10250, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10252, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10254, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10256, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 143473));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const ldv_linux_usb_dev_usb_put_dev: ref;
axiom (ldv_linux_usb_dev_usb_put_dev == $sub.ref(0, 144505));
procedure  ldv_linux_usb_dev_usb_put_dev($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7881, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7881, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7881, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i64($i1, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7881, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7883, 63} true;
  assume {:verifier.code 0} true;
  $i3 := $M.16;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7883, 100} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7883, 100} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7883, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_usb_dev__unincremented_counter_decrement($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7884, 54} true;
  assume {:verifier.code 0} true;
  $i6 := $M.16;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7884, 91} true;
  assume {:verifier.code 0} true;
  $i7 := $sgt.i32($i6, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7884, 91} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7884, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_usb_dev__less_initial_decrement($i8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7886, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $M.16;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7886, 46} true;
  assume {:verifier.code 0} true;
  $i10 := $sgt.i32($i9, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7886, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i10 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7887, 46} true;
  assume {:verifier.code 0} true;
  $i11 := $M.16;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7887, 83} true;
  assume {:verifier.code 0} true;
  $i12 := $add.i32($i11, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7887, 44} true;
  assume {:verifier.code 0} true;
  $M.16 := $i12;
  call {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32($i12);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7888, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i10 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7889, 44} true;
  assume {:verifier.code 0} true;
  $M.16 := 0;
  call {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7893, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_usb_dev__unincremented_counter_decrement: ref;
axiom (ldv_assert_linux_usb_dev__unincremented_counter_decrement == $sub.ref(0, 145537));
procedure  ldv_assert_linux_usb_dev__unincremented_counter_decrement($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10374, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_usb_dev__unincremented_counter_decrement:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10374, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10374, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10376, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10378, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10380, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_usb_dev__less_initial_decrement: ref;
axiom (ldv_assert_linux_usb_dev__less_initial_decrement == $sub.ref(0, 146569));
procedure  ldv_assert_linux_usb_dev__less_initial_decrement($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10386, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_usb_dev__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10386, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10386, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10388, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10390, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10392, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_kernel_locking_mutex_mutex_unlock_io_mutex_of_usb_yurex: ref;
axiom (ldv_linux_kernel_locking_mutex_mutex_unlock_io_mutex_of_usb_yurex == $sub.ref(0, 147601));
procedure  ldv_linux_kernel_locking_mutex_mutex_unlock_io_mutex_of_usb_yurex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8667, 73} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8667, 73} true;
  assume {:verifier.code 0} true;
  $i1 := $M.17;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8667, 73} true;
  assume {:verifier.code 0} true;
  $i2 := $trunc.i8.i1($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8667, 67} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8667, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8668, 64} true;
  assume {:verifier.code 0} true;
  $M.17 := 0;
  call {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_io_mutex_of_usb_yurex"} boogie_si_record_i8(0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8670, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;
axiom (ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 148633));
procedure  ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10447, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10447, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10447, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10449, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10451, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10453, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_kernel_locking_mutex_mutex_lock_io_mutex_of_usb_yurex: ref;
axiom (ldv_linux_kernel_locking_mutex_mutex_lock_io_mutex_of_usb_yurex == $sub.ref(0, 149665));
procedure  ldv_linux_kernel_locking_mutex_mutex_lock_io_mutex_of_usb_yurex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8592, 67} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8592, 67} true;
  assume {:verifier.code 0} true;
  $i1 := $M.17;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8592, 67} true;
  assume {:verifier.code 0} true;
  $i2 := $trunc.i8.i1($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8592, 65} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:8592:65: warning: over-approximating bitwise operation xor;
  $i3 := $xor.i1($i2, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8592, 65} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8592, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8593, 64} true;
  assume {:verifier.code 0} true;
  $M.17 := 1;
  call {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_io_mutex_of_usb_yurex"} boogie_si_record_i8(1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8595, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;
axiom (ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 150697));
procedure  ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10423, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10423, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10423, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10425, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10427, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10429, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const default_llseek: ref;
axiom (default_llseek == $sub.ref(0, 151729));
procedure  default_llseek($p0: ref, $i1: i64, $i2: i32)
  returns ($r: i64)
{
  var $i3: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10989, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "default_llseek:arg:arg1"} boogie_si_record_i64($i1);
  call {:cexpr "default_llseek:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10989, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10989, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const yurex_read: ref;
axiom (yurex_read == $sub.ref(0, 152761));
procedure  yurex_read($p0: ref, $p1: ref, $i2: i64, $p3: ref)
  returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i32: i64;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i31: i32;
  var $i38: i32;
  var $i13: i32;
  var $p39: ref;
  var $i40: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5126, 35} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(20, $zext.i32.i64(1)));
  call {:cexpr "yurex_read:arg:count"} boogie_si_record_i64($i2);
  assume true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5126, 35} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5126, 35} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.7, $p5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5126, 9} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5127, 29} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5127, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_lock_113($p8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5129, 28} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p7, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5129, 28} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.7, $p9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5129, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.i64($p10);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5129, 38} true;
  assume {:verifier.code 0} true;
  $i12 := $eq.i64($i11, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5129, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i12 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5131, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i32(0, 19);
  goto $bb3;
$bb2:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5154, 31} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p7, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5154, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_116($p39);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5156, 11} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.i32.i64($i13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5156, 3} true;
  assume {:verifier.code 0} true;
  $r := $i40;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5135, 64} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p7, $mul.ref(0, 408)), $mul.ref(328, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5135, 3} true;
  assume {:verifier.code 0} true;
  call ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p14);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5136, 25} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5136, 69} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p7, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5136, 69} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i64($M.7, $p16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5136, 16} true;
  assume {:verifier.code 0} true;
  call $i18 := snprintf.ref.i64.ref.i64($p15, 20, .str.2, $i17);
  call {:cexpr "bytes_read"} boogie_si_record_i32($i18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5137, 41} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p7, $mul.ref(0, 408)), $mul.ref(328, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5137, 3} true;
  assume {:verifier.code 0} true;
  call ldv_spin_unlock_irqrestore_101($p19, $u0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5139, 7} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i64($M.7, $p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5139, 15} true;
  assume {:verifier.code 0} true;
  $i21 := $sext.i32.i64($i18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5139, 13} true;
  assume {:verifier.code 0} true;
  $i22 := $slt.i64($i20, $i21);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5139, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i22 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5141, 40} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5141, 86} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i64($M.7, $p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5141, 68} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p23, $mul.ref($i24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5142, 41} true;
  assume {:verifier.code 0} true;
  $i26 := $sext.i32.i64($i18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5142, 63} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i64($M.7, $p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5142, 61} true;
  assume {:verifier.code 0} true;
  $i28 := $sub.i64($i26, $i27);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5141, 11} true;
  assume {:verifier.code 0} true;
  call $i29 := copy_to_user($p1, $p25, $i28);
  call {:cexpr "tmp"} boogie_si_record_i64($i29);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5144, 13} true;
  assume {:verifier.code 0} true;
  $i30 := $ne.i64($i29, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5144, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  $i38 := 0;
  goto $bb10;
$bb7:
  assume ($i30 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5146, 5} true;
  assume {:verifier.code 0} true;
  $i31 := $sub.i32(0, 14);
  goto $bb9;
$bb8:
  assume !(($i30 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5147, 66} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i64($M.7, $p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5147, 51} true;
  assume {:verifier.code 0} true;
  $i33 := $trunc.i64.i32($i32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5147, 49} true;
  assume {:verifier.code 0} true;
  $i34 := $sub.i32($i18, $i33);
  call {:cexpr "retval"} boogie_si_record_i32($i34);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5148, 15} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i64($M.7, $p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5148, 23} true;
  assume {:verifier.code 0} true;
  $i36 := $sext.i32.i64($i18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5148, 21} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i64($i35, $i36);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5148, 13} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p3, $i37);
  assume {:verifier.code 0} true;
  $i31 := $i34;
  goto $bb9;
$bb9:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5150, 3} true;
  assume {:verifier.code 0} true;
  $i38 := $i31;
  goto $bb10;
$bb10:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5139, 24} true;
  assume {:verifier.code 0} true;
  $i13 := $i38;
  goto $bb3;
}
const yurex_write: ref;
axiom (yurex_write == $sub.ref(0, 153793));
procedure  yurex_write($p0: ref, $p1: ref, $i2: i64, $p3: ref)
  returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i1;
  var $p99: ref;
  var $i100: i8;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p113: ref;
  var $i114: i8;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p98: ref;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i8;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $p133: ref;
  var $p134: ref;
  var $i111: i32;
  var $i112: i64;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i24;
  var $i144: i24;
  var $i145: i24;
  var $p146: ref;
  var $p147: ref;
  var $i148: i8;
  var $i149: i64;
  var $i150: i64;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i8;
  var $i159: i32;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i1;
  var $i164: i64;
  var $i165: i64;
  var $p166: ref;
  var $p167: ref;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i1;
  var $i173: i1;
  var $p174: ref;
  var $i175: i1;
  var $i176: i64;
  var $i25: i32;
  var $i177: i64;
  var $i135: i64;
  var $i178: i64;
  var $i179: i8;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i64;
  var $i184: i64;
  var $i185: i8;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $i190: i64;
  var $i191: i8;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $i196: i64;
  var $i197: i8;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5182, 10} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  call {:cexpr "yurex_write:arg:count"} boogie_si_record_i64($i2);
  assume true;
  assume true;
  assume true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5182, 10} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5185, 9} true;
  assume {:verifier.code 0} true;
  call $p8 := get_current();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5186, 8} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5186, 14} true;
  assume {:verifier.code 0} true;
  $M.18 := $store.i32($M.18, $p9, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5187, 18} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5187, 8} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5187, 16} true;
  assume {:verifier.code 0} true;
  $M.19 := $store.ref($M.19, $p11, $p8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5188, 8} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5188, 13} true;
  assume {:verifier.code 0} true;
  $M.20 := $store.ref($M.20, $p12, autoremove_wake_function);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5189, 32} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5189, 8} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5189, 23} true;
  assume {:verifier.code 0} true;
  $M.21 := $store.ref($M.21, $p15, $p13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5190, 32} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5190, 8} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5190, 23} true;
  assume {:verifier.code 0} true;
  $M.22 := $store.ref($M.22, $p18, $p16);
  call {:cexpr "yurex_write:arg:_min2"} boogie_si_record_i64($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5193, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $ult.i64(16, $i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5193, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i19 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5193, 11} true;
  assume {:verifier.code 0} true;
  $i20 := 16;
  goto $bb3;
$bb2:
  assume !(($i19 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5193, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $i2;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5193, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5194, 35} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5194, 35} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.7, $p21);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5194, 9} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p22);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5196, 13} true;
  assume {:verifier.code 0} true;
  $i24 := $eq.i64($i20, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5196, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i24 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5197, 5} true;
  assume {:verifier.code 0} true;
  $i25 := 0;
  goto $bb6;
$bb5:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5346, 11} true;
  assume {:verifier.code 0} true;
  $i177 := $sext.i32.i64($i25);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5346, 3} true;
  assume {:verifier.code 0} true;
  $i135 := $i177;
  goto $bb72;
$bb7:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5201, 29} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5201, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_lock_117($p26);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5203, 28} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5203, 28} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.7, $p27);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5203, 7} true;
  assume {:verifier.code 0} true;
  $i29 := $p2i.ref.i64($p28);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5203, 38} true;
  assume {:verifier.code 0} true;
  $i30 := $eq.i64($i29, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5203, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i30 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5205, 33} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5205, 5} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_118($p31);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5208, 5} true;
  assume {:verifier.code 0} true;
  $i25 := $sub.i32(0, 19);
  goto $bb6;
$bb9:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5212, 28} true;
  assume {:verifier.code 0} true;
  $p32 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5212, 13} true;
  assume {:verifier.code 0} true;
  call $i33 := copy_from_user($p32, $p1, $i20);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i33);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5214, 15} true;
  assume {:verifier.code 0} true;
  $i34 := $ne.i64($i33, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5214, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i34 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5216, 33} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5216, 5} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_119($p35);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5219, 5} true;
  assume {:verifier.code 0} true;
  $i25 := $sub.i32(0, 14);
  goto $bb6;
$bb12:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5223, 23} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5223, 23} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.7, $p36);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5223, 3} true;
  assume {:verifier.code 0} true;
  call $M.7 := $memset.i8($M.7, $p37, $sub.i8(0, 1), 8, false);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5226, 13} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5226, 13} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i8($M.23, $p38);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5226, 7} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.i8.i32($i39);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5226, 23} true;
  assume {:verifier.code 0} true;
  $i41 := $eq.i32($i40, 65);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5226, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i41 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5227, 5} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i41 == 1));
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5250, 3} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb17:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5230, 13} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5230, 13} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i8($M.23, $p42);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5230, 7} true;
  assume {:verifier.code 0} true;
  $i44 := $sext.i8.i32($i43);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5230, 23} true;
  assume {:verifier.code 0} true;
  $i45 := $eq.i32($i44, 76);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5230, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i45 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5231, 5} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5253, 41} true;
  assume {:verifier.code 0} true;
  $p99 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5253, 41} true;
  assume {:verifier.code 0} true;
  $i100 := $load.i8($M.23, $p99);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5253, 10} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5253, 10} true;
  assume {:verifier.code 0} true;
  $p102 := $load.ref($M.7, $p101);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5253, 23} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p102, $i100);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5254, 47} true;
  assume {:verifier.code 0} true;
  $p103 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5254, 47} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i8($M.23, $p103);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5254, 10} true;
  assume {:verifier.code 0} true;
  $p105 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5254, 10} true;
  assume {:verifier.code 0} true;
  $p106 := $load.ref($M.7, $p105);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5254, 22} true;
  assume {:verifier.code 0} true;
  $p107 := $add.ref($p106, $mul.ref(1, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5254, 29} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p107, $i104);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5255, 10} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5255, 10} true;
  assume {:verifier.code 0} true;
  $p109 := $load.ref($M.7, $p108);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5255, 22} true;
  assume {:verifier.code 0} true;
  $p110 := $add.ref($p109, $mul.ref(2, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5255, 29} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p110, 13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5256, 3} true;
  assume {:verifier.code 0} true;
  $i111, $i112 := 0, 0;
  goto $bb58;
$bb21:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5234, 13} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5234, 13} true;
  assume {:verifier.code 0} true;
  $i47 := $load.i8($M.23, $p46);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5234, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $sext.i8.i32($i47);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5234, 23} true;
  assume {:verifier.code 0} true;
  $i49 := $eq.i32($i48, 82);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5234, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i49 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5235, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb23:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5256, 3} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb25:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5238, 13} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5238, 13} true;
  assume {:verifier.code 0} true;
  $i51 := $load.i8($M.23, $p50);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5238, 7} true;
  assume {:verifier.code 0} true;
  $i52 := $sext.i8.i32($i51);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5238, 23} true;
  assume {:verifier.code 0} true;
  $i53 := $eq.i32($i52, 86);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5238, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i53 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5239, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume !(($i53 == 1));
  assume {:verifier.code 0} true;
  goto $bb29;
$bb28:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5259, 41} true;
  assume {:verifier.code 0} true;
  $p113 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5259, 41} true;
  assume {:verifier.code 0} true;
  $i114 := $load.i8($M.23, $p113);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5259, 10} true;
  assume {:verifier.code 0} true;
  $p115 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5259, 10} true;
  assume {:verifier.code 0} true;
  $p116 := $load.ref($M.7, $p115);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5259, 23} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p116, $i114);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5260, 10} true;
  assume {:verifier.code 0} true;
  $p117 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5260, 10} true;
  assume {:verifier.code 0} true;
  $p118 := $load.ref($M.7, $p117);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5260, 22} true;
  assume {:verifier.code 0} true;
  $p119 := $add.ref($p118, $mul.ref(1, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5260, 29} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p119, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5261, 10} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5261, 10} true;
  assume {:verifier.code 0} true;
  $p121 := $load.ref($M.7, $p120);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5261, 22} true;
  assume {:verifier.code 0} true;
  $p122 := $add.ref($p121, $mul.ref(2, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5261, 29} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p122, 13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5262, 3} true;
  assume {:verifier.code 0} true;
  $i111, $i112 := 0, 0;
  goto $bb58;
$bb29:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5242, 13} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5242, 13} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i8($M.23, $p54);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5242, 7} true;
  assume {:verifier.code 0} true;
  $i56 := $sext.i8.i32($i55);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5242, 23} true;
  assume {:verifier.code 0} true;
  $i57 := $eq.i32($i56, 83);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5242, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i57 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5243, 5} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb31:
  assume !(($i57 == 1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb32:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 15} true;
  assume {:verifier.code 0} true;
  $p123 := $add.ref($p7, $mul.ref(1, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 3} true;
  assume {:verifier.code 0} true;
  $p98 := $p123;
  goto $bb55;
$bb33:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 21} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 21} true;
  assume {:verifier.code 0} true;
  $i59 := $load.i8($M.23, $p58);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 15} true;
  assume {:verifier.code 0} true;
  $i60 := $sext.i8.i32($i59);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 31} true;
  assume {:verifier.code 0} true;
  $i61 := $eq.i32($i60, 57);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 37} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb34, $bb36;
$bb34:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 37} true;
  assume {:verifier.code 0} true;
  assume ($i61 == 1);
  goto $bb35;
$bb35:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5247, 5} true;
  assume {:verifier.code 0} true;
  $p98 := $p4;
  goto $bb55;
$bb36:
  assume !(($i61 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 46} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 46} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i8($M.23, $p62);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 40} true;
  assume {:verifier.code 0} true;
  $i64 := $sext.i8.i32($i63);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 56} true;
  assume {:verifier.code 0} true;
  $i65 := $eq.i32($i64, 56);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 63} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb37, $bb38;
$bb37:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 63} true;
  assume {:verifier.code 0} true;
  assume ($i65 == 1);
  goto $bb35;
$bb38:
  assume !(($i65 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 72} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 72} true;
  assume {:verifier.code 0} true;
  $i67 := $load.i8($M.23, $p66);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 66} true;
  assume {:verifier.code 0} true;
  $i68 := $sext.i8.i32($i67);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 82} true;
  assume {:verifier.code 0} true;
  $i69 := $eq.i32($i68, 55);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb39, $bb40;
$bb39:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 89} true;
  assume {:verifier.code 0} true;
  assume ($i69 == 1);
  goto $bb35;
$bb40:
  assume !(($i69 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 98} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 98} true;
  assume {:verifier.code 0} true;
  $i71 := $load.i8($M.23, $p70);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 92} true;
  assume {:verifier.code 0} true;
  $i72 := $sext.i8.i32($i71);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 108} true;
  assume {:verifier.code 0} true;
  $i73 := $eq.i32($i72, 54);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 115} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i73} true;
  goto $bb41, $bb42;
$bb41:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 115} true;
  assume {:verifier.code 0} true;
  assume ($i73 == 1);
  goto $bb35;
$bb42:
  assume !(($i73 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 124} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 124} true;
  assume {:verifier.code 0} true;
  $i75 := $load.i8($M.23, $p74);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 118} true;
  assume {:verifier.code 0} true;
  $i76 := $sext.i8.i32($i75);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 134} true;
  assume {:verifier.code 0} true;
  $i77 := $eq.i32($i76, 53);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 141} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i77} true;
  goto $bb43, $bb44;
$bb43:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 141} true;
  assume {:verifier.code 0} true;
  assume ($i77 == 1);
  goto $bb35;
$bb44:
  assume !(($i77 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 150} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 150} true;
  assume {:verifier.code 0} true;
  $i79 := $load.i8($M.23, $p78);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 144} true;
  assume {:verifier.code 0} true;
  $i80 := $sext.i8.i32($i79);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 160} true;
  assume {:verifier.code 0} true;
  $i81 := $eq.i32($i80, 52);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 167} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i81} true;
  goto $bb45, $bb46;
$bb45:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 167} true;
  assume {:verifier.code 0} true;
  assume ($i81 == 1);
  goto $bb35;
$bb46:
  assume !(($i81 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 176} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 176} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i8($M.23, $p82);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 170} true;
  assume {:verifier.code 0} true;
  $i84 := $sext.i8.i32($i83);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 186} true;
  assume {:verifier.code 0} true;
  $i85 := $eq.i32($i84, 51);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 193} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i85} true;
  goto $bb47, $bb48;
$bb47:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 193} true;
  assume {:verifier.code 0} true;
  assume ($i85 == 1);
  goto $bb35;
$bb48:
  assume !(($i85 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 202} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 202} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i8($M.23, $p86);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 196} true;
  assume {:verifier.code 0} true;
  $i88 := $sext.i8.i32($i87);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 212} true;
  assume {:verifier.code 0} true;
  $i89 := $eq.i32($i88, 50);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 219} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i89} true;
  goto $bb49, $bb50;
$bb49:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 219} true;
  assume {:verifier.code 0} true;
  assume ($i89 == 1);
  goto $bb35;
$bb50:
  assume !(($i89 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 228} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 228} true;
  assume {:verifier.code 0} true;
  $i91 := $load.i8($M.23, $p90);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 222} true;
  assume {:verifier.code 0} true;
  $i92 := $sext.i8.i32($i91);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 238} true;
  assume {:verifier.code 0} true;
  $i93 := $eq.i32($i92, 49);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 245} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i93} true;
  goto $bb51, $bb52;
$bb51:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 245} true;
  assume {:verifier.code 0} true;
  assume ($i93 == 1);
  goto $bb35;
$bb52:
  assume !(($i93 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 254} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 254} true;
  assume {:verifier.code 0} true;
  $i95 := $load.i8($M.23, $p94);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 248} true;
  assume {:verifier.code 0} true;
  $i96 := $sext.i8.i32($i95);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 264} true;
  assume {:verifier.code 0} true;
  $i97 := $eq.i32($i96, 48);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i97} true;
  goto $bb53, $bb54;
$bb53:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5246, 7} true;
  assume {:verifier.code 0} true;
  assume ($i97 == 1);
  goto $bb35;
$bb54:
  assume !(($i97 == 1));
  assume {:verifier.code 0} true;
  goto $bb56;
$bb55:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 3} true;
  assume {:verifier.code 0} true;
  goto $bb59;
$bb56:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5250, 3} true;
  assume {:verifier.code 0} true;
  goto $bb57;
$bb57:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5296, 31} true;
  assume {:verifier.code 0} true;
  $p134 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5296, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_120($p134);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5298, 3} true;
  assume {:verifier.code 0} true;
  $i135 := $sub.i64(0, 22);
  goto $bb72;
$bb58:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5303, 26} true;
  assume {:verifier.code 0} true;
  $p136 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(240, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5303, 3} true;
  assume {:verifier.code 0} true;
  call prepare_to_wait($p136, $p5, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5304, 14} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5304, 22} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p137, .str.1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5305, 14} true;
  assume {:verifier.code 0} true;
  $p138 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5305, 23} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p138, .str.9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5306, 14} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5306, 23} true;
  assume {:verifier.code 0} true;
  $M.10 := $store.ref($M.10, $p139, .str.7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5307, 14} true;
  assume {:verifier.code 0} true;
  $p140 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5307, 21} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p140, .str.10);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5308, 14} true;
  assume {:verifier.code 0} true;
  $p141 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5308, 14} true;
  assume {:verifier.code 0} true;
  $p142 := $bitcast.ref.ref($p141);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5308, 21} true;
  assume {:verifier.code 0} true;
  $i143 := $load.i24($M.12, $p142);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5308, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5308:21: warning: over-approximating bitwise operation and;
  $i144 := $and.i24($i143, $sub.i24(0, 262144));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5308, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5308:21: warning: over-approximating bitwise operation or;
  $i145 := $or.i24($i144, 514);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5308, 21} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.i24($M.12, $p142, $i145);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5309, 14} true;
  assume {:verifier.code 0} true;
  $p146 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5309, 20} true;
  assume {:verifier.code 0} true;
  $M.13 := $store.i8($M.13, $p146, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5310, 51} true;
  assume {:verifier.code 0} true;
  $p147 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5310, 51} true;
  assume {:verifier.code 0} true;
  $i148 := $load.i8($M.13, $p147);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5310, 33} true;
  assume {:verifier.code 0} true;
  $i149 := $zext.i8.i64($i148);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5310, 57} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5310:57: warning: over-approximating bitwise operation and;
  $i150 := $and.i64($i149, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5310, 13} true;
  assume {:verifier.code 0} true;
  call $i151 := ldv__builtin_expect($i150, 0);
  call {:cexpr "tmp___1"} boogie_si_record_i64($i151);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5312, 15} true;
  assume {:verifier.code 0} true;
  $i152 := $ne.i64($i151, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5312, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i152} true;
  goto $bb74, $bb75;
$bb59:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 3} true;
  assume {:verifier.code 0} true;
  goto $bb60;
$bb60:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 3} true;
  assume {:verifier.code 0} true;
  goto $bb61;
$bb61:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 3} true;
  assume {:verifier.code 0} true;
  goto $bb62;
$bb62:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 3} true;
  assume {:verifier.code 0} true;
  goto $bb63;
$bb63:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 3} true;
  assume {:verifier.code 0} true;
  goto $bb64;
$bb64:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 3} true;
  assume {:verifier.code 0} true;
  goto $bb65;
$bb65:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 3} true;
  assume {:verifier.code 0} true;
  goto $bb66;
$bb66:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5264, 3} true;
  assume {:verifier.code 0} true;
  goto $bb67;
$bb67:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5277, 8} true;
  assume {:verifier.code 0} true;
  call $i124 := simple_strtoull($p98, $0.ref, 0);
  call {:cexpr "c2"} boogie_si_record_i64($i124);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5279, 10} true;
  assume {:verifier.code 0} true;
  $p125 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5279, 10} true;
  assume {:verifier.code 0} true;
  $p126 := $load.ref($M.7, $p125);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5279, 23} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p126, 83);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5288, 7} true;
  assume {:verifier.code 0} true;
  goto $bb68;
$bb68:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5289, 5} true;
  assume {:verifier.code 0} true;
  goto $bb69;
$bb69:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 64} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5284:64: warning: over-approximating bitwise operation lshr;
  $i127 := $lshr.i64($i124, 32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 45} true;
  assume {:verifier.code 0} true;
  $i128 := $trunc.i64.i8($i127);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 10} true;
  assume {:verifier.code 0} true;
  $p129 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 10} true;
  assume {:verifier.code 0} true;
  $p130 := $load.ref($M.7, $p129);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 22} true;
  assume {:verifier.code 0} true;
  $p131 := $add.ref($p130, $mul.ref(1, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 43} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p131, $i128);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5285, 9} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5285:9: warning: over-approximating bitwise operation shl;
  $i132 := $shl.i64($i124, 8);
  call {:cexpr "c"} boogie_si_record_i64($i132);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5289, 5} true;
  assume {:verifier.code 0} true;
  goto $bb70;
$bb70:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 64} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5284:64: warning: over-approximating bitwise operation lshr;
  $i178 := $lshr.i64($i132, 32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 45} true;
  assume {:verifier.code 0} true;
  $i179 := $trunc.i64.i8($i178);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 10} true;
  assume {:verifier.code 0} true;
  $p180 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 10} true;
  assume {:verifier.code 0} true;
  $p181 := $load.ref($M.7, $p180);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 22} true;
  assume {:verifier.code 0} true;
  $p182 := $add.ref($p181, $mul.ref(2, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 43} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p182, $i179);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5285, 9} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5285:9: warning: over-approximating bitwise operation shl;
  $i183 := $shl.i64($i132, 8);
  call {:cexpr "c"} boogie_si_record_i64($i183);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5289, 5} true;
  assume {:verifier.code 0} true;
  goto $bb92;
$bb71:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5292, 3} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(6, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5292, 13} true;
  assume {:verifier.code 0} true;
  $M.23 := $store.i8($M.23, $p133, 13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5293, 3} true;
  assume {:verifier.code 0} true;
  $i111, $i112 := 1, $i124;
  goto $bb58;
$bb72:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5348, 1} true;
  assume {:verifier.code 0} true;
  $r := $i135;
  $exn := false;
  return;
$bb73:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5300, 3} true;
  assume {:verifier.code 0} true;
  $i111, $i112 := $u1, $u0;
  goto $bb58;
$bb74:
  assume ($i152 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5314, 69} true;
  assume {:verifier.code 0} true;
  $p153 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5314, 69} true;
  assume {:verifier.code 0} true;
  $p154 := $load.ref($M.7, $p153);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5314, 81} true;
  assume {:verifier.code 0} true;
  $p155 := $add.ref($add.ref($p154, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5315, 71} true;
  assume {:verifier.code 0} true;
  $p156 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5315, 71} true;
  assume {:verifier.code 0} true;
  $p157 := $load.ref($M.7, $p156);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5315, 64} true;
  assume {:verifier.code 0} true;
  $i158 := $load.i8($M.7, $p157);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5315, 58} true;
  assume {:verifier.code 0} true;
  $i159 := $zext.i8.i32($i158);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5314, 5} true;
  assume {:verifier.code 0} true;
  call __dynamic_dev_dbg.ref.ref.ref.ref.i32($p6, $p155, .str.10, .str.9, $i159);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5317, 3} true;
  assume {:verifier.code 0} true;
  goto $bb76;
$bb75:
  assume !(($i152 == 1));
  assume {:verifier.code 0} true;
  goto $bb76;
$bb76:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5320, 40} true;
  assume {:verifier.code 0} true;
  $p160 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5320, 40} true;
  assume {:verifier.code 0} true;
  $p161 := $load.ref($M.7, $p160);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5320, 12} true;
  assume {:verifier.code 0} true;
  call $i162 := ldv_usb_submit_urb_121($p161, 208);
  call {:cexpr "retval"} boogie_si_record_i32($i162);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5322, 14} true;
  assume {:verifier.code 0} true;
  $i163 := $sge.i32($i162, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5322, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i163} true;
  goto $bb77, $bb78;
$bb77:
  assume ($i163 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5324, 15} true;
  assume {:verifier.code 0} true;
  call $i164 := schedule_timeout(500);
  call {:cexpr "timeout"} boogie_si_record_i64($i164);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5326, 3} true;
  assume {:verifier.code 0} true;
  $i165 := $i164;
  goto $bb79;
$bb78:
  assume !(($i163 == 1));
  assume {:verifier.code 0} true;
  $i165 := 0;
  goto $bb79;
$bb79:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5329, 22} true;
  assume {:verifier.code 0} true;
  $p166 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(240, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5329, 3} true;
  assume {:verifier.code 0} true;
  call finish_wait($p166, $p5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5330, 31} true;
  assume {:verifier.code 0} true;
  $p167 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5330, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_122($p167);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5332, 14} true;
  assume {:verifier.code 0} true;
  $i168 := $slt.i32($i162, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5332, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i168} true;
  goto $bb80, $bb81;
$bb80:
  assume ($i168 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5334, 45} true;
  assume {:verifier.code 0} true;
  $p169 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5334, 45} true;
  assume {:verifier.code 0} true;
  $p170 := $load.ref($M.7, $p169);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5334, 57} true;
  assume {:verifier.code 0} true;
  $p171 := $add.ref($add.ref($p170, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5334, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref.ref.i32($p171, .str.11, .str.9, $i162);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5337, 5} true;
  assume {:verifier.code 0} true;
  $i25 := $i162;
  goto $bb6;
$bb81:
  assume !(($i168 == 1));
  assume {:verifier.code 0} true;
  goto $bb82;
$bb82:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5340, 11} true;
  assume {:verifier.code 0} true;
  $i172 := $ne.i32($i111, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5340, 16} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i172} true;
  goto $bb83, $bb84;
$bb83:
  assume ($i172 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5340, 27} true;
  assume {:verifier.code 0} true;
  $i173 := $ne.i64($i165, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5340, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i173} true;
  goto $bb86, $bb87;
$bb84:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5340, 16} true;
  assume {:verifier.code 0} true;
  assume !(($i172 == 1));
  goto $bb85;
$bb85:
  assume {:verifier.code 0} true;
  goto $bb88;
$bb86:
  assume ($i173 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5341, 10} true;
  assume {:verifier.code 0} true;
  $p174 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5341, 14} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p174, $i112);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5342, 3} true;
  assume {:verifier.code 0} true;
  goto $bb88;
$bb87:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5340, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i173 == 1));
  goto $bb85;
$bb88:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5344, 19} true;
  assume {:verifier.code 0} true;
  $i175 := $ne.i64($i165, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5344, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i175} true;
  goto $bb89, $bb90;
$bb89:
  assume ($i175 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5344, 11} true;
  assume {:verifier.code 0} true;
  $i176 := $i20;
  goto $bb91;
$bb90:
  assume !(($i175 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5344, 11} true;
  assume {:verifier.code 0} true;
  $i176 := $sub.i64(0, 5);
  goto $bb91;
$bb91:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5344, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5344, 3} true;
  assume {:verifier.code 0} true;
  $i135 := $i176;
  goto $bb72;
$bb92:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 64} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5284:64: warning: over-approximating bitwise operation lshr;
  $i184 := $lshr.i64($i183, 32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 45} true;
  assume {:verifier.code 0} true;
  $i185 := $trunc.i64.i8($i184);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 10} true;
  assume {:verifier.code 0} true;
  $p186 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 10} true;
  assume {:verifier.code 0} true;
  $p187 := $load.ref($M.7, $p186);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 22} true;
  assume {:verifier.code 0} true;
  $p188 := $add.ref($p187, $mul.ref(3, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 43} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p188, $i185);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5285, 9} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5285:9: warning: over-approximating bitwise operation shl;
  $i189 := $shl.i64($i183, 8);
  call {:cexpr "c"} boogie_si_record_i64($i189);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5289, 5} true;
  assume {:verifier.code 0} true;
  goto $bb93;
$bb93:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 64} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5284:64: warning: over-approximating bitwise operation lshr;
  $i190 := $lshr.i64($i189, 32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 45} true;
  assume {:verifier.code 0} true;
  $i191 := $trunc.i64.i8($i190);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 10} true;
  assume {:verifier.code 0} true;
  $p192 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 10} true;
  assume {:verifier.code 0} true;
  $p193 := $load.ref($M.7, $p192);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 22} true;
  assume {:verifier.code 0} true;
  $p194 := $add.ref($p193, $mul.ref(4, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 43} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p194, $i191);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5285, 9} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5285:9: warning: over-approximating bitwise operation shl;
  $i195 := $shl.i64($i189, 8);
  call {:cexpr "c"} boogie_si_record_i64($i195);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5289, 5} true;
  assume {:verifier.code 0} true;
  goto $bb94;
$bb94:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 64} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:5284:64: warning: over-approximating bitwise operation lshr;
  $i196 := $lshr.i64($i195, 32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 45} true;
  assume {:verifier.code 0} true;
  $i197 := $trunc.i64.i8($i196);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 10} true;
  assume {:verifier.code 0} true;
  $p198 := $add.ref($add.ref($p23, $mul.ref(0, 408)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 10} true;
  assume {:verifier.code 0} true;
  $p199 := $load.ref($M.7, $p198);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 22} true;
  assume {:verifier.code 0} true;
  $p200 := $add.ref($p199, $mul.ref(5, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5284, 43} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i8($M.7, $p200, $i197);
  assume {:verifier.code 0} true;
  goto $bb71;
}
const yurex_open: ref;
axiom (yurex_open == $sub.ref(0, 154825));
procedure  yurex_open($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5068, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5068, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := iminor($p0);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5070, 15} true;
  assume {:verifier.code 0} true;
  call $p3 := usb_find_interface(yurex_driver, $i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5072, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.i64($p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5072, 33} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i64($i4, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5072, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5074, 5} true;
  assume {:verifier.code 0} true;
  call $i6 := printk.ref.ref.i32(.str.3, .str.4, $i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5077, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 19);
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5096, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5081, 13} true;
  assume {:verifier.code 0} true;
  call $p8 := usb_get_intfdata($p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5082, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5084, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5084, 27} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i64($i10, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5084, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i11 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5086, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 19);
  goto $bb3;
$bb6:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5090, 19} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p9, $mul.ref(0, 408)), $mul.ref(64, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5090, 3} true;
  assume {:verifier.code 0} true;
  call kref_get($p12);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5091, 29} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p9, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5091, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_lock_111($p13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5092, 24} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5092, 9} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5092, 22} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p15, $p8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5093, 31} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p9, $mul.ref(0, 408)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5093, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_112($p16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5094, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
}
const yurex_release: ref;
axiom (yurex_release == $sub.ref(0, 155857));
procedure  yurex_release($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5103, 35} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5103, 35} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5103, 35} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.7, $p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5103, 9} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5104, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5104, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5104, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5105, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 19);
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5113, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5109, 19} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(64, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5109, 3} true;
  assume {:verifier.code 0} true;
  call $i9 := kref_put($p8, yurex_delete);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5111, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
}
const yurex_fasync: ref;
axiom (yurex_fasync == $sub.ref(0, 156889));
procedure  yurex_fasync($i0: i32, $p1: ref, $i2: i32)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5051, 35} true;
  assume {:verifier.code 0} true;
  call {:cexpr "yurex_fasync:arg:fd"} boogie_si_record_i32($i0);
  call {:cexpr "yurex_fasync:arg:on"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5051, 35} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5051, 35} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.7, $p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5051, 9} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5052, 44} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 408)), $mul.ref(232, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5052, 9} true;
  assume {:verifier.code 0} true;
  call $i7 := fasync_helper($i0, $p1, $i2, $p6);
  call {:cexpr "tmp"} boogie_si_record_i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5054, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const fasync_helper: ref;
axiom (fasync_helper == $sub.ref(0, 157921));
procedure  fasync_helper($i0: i32, $p1: ref, $i2: i32, $p3: ref)
  returns ($r: i32)
{
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11000, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "fasync_helper:arg:arg0"} boogie_si_record_i32($i0);
  call {:cexpr "fasync_helper:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11000, 10} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11000, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const iminor: ref;
axiom (iminor == $sub.ref(0, 158953));
procedure  iminor($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4448, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4448, 33} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(76, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4448, 33} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.7, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4448, 40} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4448:40: warning: over-approximating bitwise operation and;
  $i3 := $and.i32($i2, 1048575);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4448, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const usb_find_interface: ref;
axiom (usb_find_interface == $sub.ref(0, 159985));
procedure  usb_find_interface($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11043, 34} true;
  assume {:verifier.code 0} true;
  call {:cexpr "usb_find_interface:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11043, 34} true;
  assume {:verifier.code 0} true;
  call $p2 := external_alloc();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11043, 10} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11043, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const printk: ref;
axiom (printk == $sub.ref(0, 161017));
procedure  printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11025, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11025, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11025, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const kref_get: ref;
axiom (kref_get == $sub.ref(0, 162049));
procedure  kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4256, 38} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4256, 38} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4256, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := atomic_add_return(1, $p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4257, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $sle.i32($i2, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4257, 25} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  call {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4258, 49} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4258, 49} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4258, 33} true;
  assume {:verifier.code 0} true;
  $i7 := $sext.i32.i64($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4258, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := ldv__builtin_expect($i7, 0);
  call {:cexpr "tmp___2"} boogie_si_record_i64($i8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4260, 15} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i64($i8, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4260, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4262, 23} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i8.i1(1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4262, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4262:21: warning: over-approximating bitwise operation xor;
  $i11 := $xor.i1($i10, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4262, 21} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i1.i32($i11);
  call {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4263, 49} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4263, 49} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i1.i32($i13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4263, 35} true;
  assume {:verifier.code 0} true;
  $i15 := $sext.i32.i64($i14);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4263, 15} true;
  assume {:verifier.code 0} true;
  call $i16 := ldv__builtin_expect($i15, 0);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4265, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.i64($i16, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4265, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb3:
  assume ($i17 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4267, 7} true;
  assume {:verifier.code 0} true;
  call warn_slowpath_null(.str.5, 47);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4269, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4272, 49} true;
  assume {:verifier.code 0} true;
  $i18 := $ne.i32($i12, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4272, 49} true;
  assume {:verifier.code 0} true;
  $i19 := $zext.i1.i32($i18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4272, 35} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.i32.i64($i19);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4272, 15} true;
  assume {:verifier.code 0} true;
  call $i21 := ldv__builtin_expect($i20, 0);
  call {:cexpr "tmp___1"} boogie_si_record_i64($i21);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4274, 17} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i64($i21, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4274, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i22 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4276, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4278, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4281, 39} true;
  assume {:verifier.code 0} true;
  $i23 := $ne.i32($i4, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4281, 39} true;
  assume {:verifier.code 0} true;
  $i24 := $zext.i1.i32($i23);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4281, 23} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.i32.i64($i24);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4281, 3} true;
  assume {:verifier.code 0} true;
  call $i26 := ldv__builtin_expect($i25, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4283, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_lock_111: ref;
axiom (ldv_mutex_lock_111 == $sub.ref(0, 163081));
procedure  ldv_mutex_lock_111($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6241, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6241, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_lock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6243, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_unlock_112: ref;
axiom (ldv_mutex_unlock_112 == $sub.ref(0, 164113));
procedure  ldv_mutex_unlock_112($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6250, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6250, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_unlock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6252, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atomic_add_return: ref;
axiom (atomic_add_return == $sub.ref(0, 165145));
procedure  atomic_add_return($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6023, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6023, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := ldv_linux_usb_dev_atomic_add_return($i0, $p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6025, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_linux_usb_dev_atomic_add_return: ref;
axiom (ldv_linux_usb_dev_atomic_add_return == $sub.ref(0, 166177));
procedure  ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6671, 19} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_linux_usb_dev_atomic_add_return:arg:i"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6671, 19} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6671, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i32($M.7, $p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6671, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i32($i3, $i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6671, 6} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6671, 14} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p5, $i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6672, 14} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6672, 14} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.7, $p6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6672, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const get_current: ref;
axiom (get_current == $sub.ref(0, 167209));
procedure  get_current()
  returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4161, 5} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4161, 5} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  call $p3 := devirtbounce.1(0, current_task);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4176, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  call $p0 := devirtbounce.1(0, current_task);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4166, 3} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $u2, $p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4167, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4184, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
$bb4:
  call $p1 := devirtbounce.1(0, current_task);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4169, 3} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $u2, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4170, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb5:
  call $p2 := devirtbounce.1(0, current_task);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4172, 3} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $u2, $p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4173, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb6:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4179, 3} true;
  assume {:verifier.code 0} true;
  call __bad_percpu_size();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4180, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4182, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const autoremove_wake_function: ref;
axiom (autoremove_wake_function == $sub.ref(0, 168241));
procedure  autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref)
  returns ($r: i32)
{
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11061, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "autoremove_wake_function:arg:arg1"} boogie_si_record_i32($i1);
  call {:cexpr "autoremove_wake_function:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11061, 10} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11061, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const ldv_mutex_lock_117: ref;
axiom (ldv_mutex_lock_117 == $sub.ref(0, 169273));
procedure  ldv_mutex_lock_117($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6287, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6287, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_lock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6289, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_unlock_118: ref;
axiom (ldv_mutex_unlock_118 == $sub.ref(0, 170305));
procedure  ldv_mutex_unlock_118($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6296, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6296, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_unlock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6298, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const copy_from_user: ref;
axiom (copy_from_user == $sub.ref(0, 171337));
procedure  copy_from_user($p0: ref, $p1: ref, $i2: i64)
  returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4374, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4374, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4375, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32($sub.i32(0, 1), 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4375, 32} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4375, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4375, 9} true;
  assume {:verifier.code 0} true;
  call $i6 := ldv__builtin_expect($i5, 1);
  call {:cexpr "tmp"} boogie_si_record_i64($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4377, 11} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4377, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4379, 35} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i64.i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4379, 9} true;
  assume {:verifier.code 0} true;
  call $i9 := _copy_from_user($p0, $p1, $i8);
  call {:cexpr "n"} boogie_si_record_i64($i9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4381, 3} true;
  assume {:verifier.code 0} true;
  $i10 := $i9;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4383, 35} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($sub.i32(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4383, 54} true;
  assume {:verifier.code 0} true;
  $i12 := $uge.i64($i11, $i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4383, 54} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i1.i32($i12);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4383, 35} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i32.i64($i13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4383, 15} true;
  assume {:verifier.code 0} true;
  call $i15 := ldv__builtin_expect($i14, 1);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i15);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4385, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i64($i15, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4385, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4395, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
$bb4:
  assume ($i16 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4387, 37} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i64.i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4387, 11} true;
  assume {:verifier.code 0} true;
  call $i18 := _copy_from_user($p0, $p1, $i17);
  call {:cexpr "n"} boogie_si_record_i64($i18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4389, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $i18;
  goto $bb6;
$bb5:
  assume !(($i16 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4391, 7} true;
  assume {:verifier.code 0} true;
  call __copy_from_user_overflow();
  assume {:verifier.code 0} true;
  $i19 := $i2;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i10 := $i19;
  goto $bb3;
}
const ldv_mutex_unlock_119: ref;
axiom (ldv_mutex_unlock_119 == $sub.ref(0, 172369));
procedure  ldv_mutex_unlock_119($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6305, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6305, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_unlock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6307, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 173401));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i1);
const simple_strtoull: ref;
axiom (simple_strtoull == $sub.ref(0, 174433));
procedure  simple_strtoull($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i64)
{
  var $i3: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11033, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "simple_strtoull:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11033, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11033, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const ldv_mutex_unlock_120: ref;
axiom (ldv_mutex_unlock_120 == $sub.ref(0, 175465));
procedure  ldv_mutex_unlock_120($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6314, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6314, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_unlock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6316, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const prepare_to_wait: ref;
axiom (prepare_to_wait == $sub.ref(0, 176497));
procedure  prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11021, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11021, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_submit_urb_121: ref;
axiom (ldv_usb_submit_urb_121 == $sub.ref(0, 177529));
procedure  ldv_usb_submit_urb_121($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6324, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_usb_submit_urb_121:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6324, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6325, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_malloc_unknown_size();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6327, 18} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6327, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i64.i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6327, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const schedule_timeout: ref;
axiom (schedule_timeout == $sub.ref(0, 178561));
procedure  schedule_timeout($i0: i64)
  returns ($r: i64)
{
  var $i1: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11029, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11029, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11029, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const finish_wait: ref;
axiom (finish_wait == $sub.ref(0, 179593));
procedure  finish_wait($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11003, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11003, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_unlock_122: ref;
axiom (ldv_mutex_unlock_122 == $sub.ref(0, 180625));
procedure  ldv_mutex_unlock_122($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6334, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6334, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_unlock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6336, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dev_err: ref;
axiom (dev_err == $sub.ref(0, 181657));
procedure  dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10992, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10992, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
procedure  dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{
$bb1:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10992, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10992, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
procedure  dev_err.ref.ref($p0: ref, $p1: ref)
{
$bb2:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10992, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10992, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const might_fault: ref;
axiom (might_fault == $sub.ref(0, 182689));
procedure  might_fault()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11018, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11018, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _copy_from_user: ref;
axiom (_copy_from_user == $sub.ref(0, 183721));
procedure  _copy_from_user($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i64)
{
  var $i3: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10975, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10975, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10975, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const __copy_from_user_overflow: ref;
axiom (__copy_from_user_overflow == $sub.ref(0, 184753));
procedure  __copy_from_user_overflow()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10950, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10950, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __bad_percpu_size: ref;
axiom (__bad_percpu_size == $sub.ref(0, 185785));
procedure  __bad_percpu_size();
const ldv_mutex_lock_113: ref;
axiom (ldv_mutex_lock_113 == $sub.ref(0, 186817));
procedure  ldv_mutex_lock_113($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6259, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6259, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_lock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6261, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114: ref;
axiom (ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114 == $sub.ref(0, 187849));
procedure  ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6268, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6268, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_usb_yurex();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6269, 3} true;
  assume {:verifier.code 0} true;
  call __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6271, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const snprintf: ref;
axiom (snprintf == $sub.ref(0, 188881));
procedure  snprintf.ref.i64.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64)
  returns ($r: i32);
const ldv_spin_unlock_irqrestore_101: ref;
axiom (ldv_spin_unlock_irqrestore_101 == $sub.ref(0, 189913));
procedure  ldv_spin_unlock_irqrestore_101($p0: ref, $i1: i64)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6111, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_spin_unlock_irqrestore_101:arg:flags"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6111, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_usb_yurex();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6112, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_irqrestore($p0, $i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6114, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const copy_to_user: ref;
axiom (copy_to_user == $sub.ref(0, 190945));
procedure  copy_to_user($p0: ref, $p1: ref, $i2: i64)
  returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4406, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4406, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4407, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32($sub.i32(0, 1), 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4407, 32} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4407, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4407, 9} true;
  assume {:verifier.code 0} true;
  call $i6 := ldv__builtin_expect($i5, 1);
  call {:cexpr "tmp"} boogie_si_record_i64($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4409, 11} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4409, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4411, 33} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i64.i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4411, 9} true;
  assume {:verifier.code 0} true;
  call $i9 := _copy_to_user($p0, $p1, $i8);
  call {:cexpr "n"} boogie_si_record_i64($i9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4413, 3} true;
  assume {:verifier.code 0} true;
  $i10 := $i9;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4415, 35} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($sub.i32(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4415, 54} true;
  assume {:verifier.code 0} true;
  $i12 := $uge.i64($i11, $i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4415, 54} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i1.i32($i12);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4415, 35} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i32.i64($i13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4415, 15} true;
  assume {:verifier.code 0} true;
  call $i15 := ldv__builtin_expect($i14, 1);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i15);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4417, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i64($i15, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4417, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4427, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
$bb4:
  assume ($i16 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4419, 35} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i64.i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4419, 11} true;
  assume {:verifier.code 0} true;
  call $i18 := _copy_to_user($p0, $p1, $i17);
  call {:cexpr "n"} boogie_si_record_i64($i18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4421, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $i18;
  goto $bb6;
$bb5:
  assume !(($i16 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4423, 7} true;
  assume {:verifier.code 0} true;
  call __copy_to_user_overflow();
  assume {:verifier.code 0} true;
  $i19 := $i2;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i10 := $i19;
  goto $bb3;
}
const ldv_mutex_unlock_116: ref;
axiom (ldv_mutex_unlock_116 == $sub.ref(0, 191977));
procedure  ldv_mutex_unlock_116($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6278, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6278, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_mutex_mutex_unlock_io_mutex_of_usb_yurex($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6280, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _copy_to_user: ref;
axiom (_copy_to_user == $sub.ref(0, 193009));
procedure  _copy_to_user($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i64)
{
  var $i3: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10979, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10979, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10979, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const __copy_to_user_overflow: ref;
axiom (__copy_to_user_overflow == $sub.ref(0, 194041));
procedure  __copy_to_user_overflow()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10953, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10953, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_usb_yurex: ref;
axiom (ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_usb_yurex == $sub.ref(0, 195073));
procedure  ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_usb_yurex()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9307, 70} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9307, 70} true;
  assume {:verifier.code 0} true;
  $i0 := $M.24;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9307, 127} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9307, 127} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9307, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9308, 14} true;
  assume {:verifier.code 0} true;
  $i3 := $M.24;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9308, 71} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i3, 2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9308, 71} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9308, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9309, 60} true;
  assume {:verifier.code 0} true;
  $M.24 := 1;
  call {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_usb_yurex"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9311, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const spin_unlock_irqrestore: ref;
axiom (spin_unlock_irqrestore == $sub.ref(0, 196105));
procedure  spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4224, 39} true;
  assume {:verifier.code 0} true;
  call {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4224, 39} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4224, 58} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4224, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_unlock_irqrestore($p3, $i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4226, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_unlock_irqrestore: ref;
axiom (_raw_spin_unlock_irqrestore == $sub.ref(0, 197137));
procedure  _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10985, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10985, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;
axiom (ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 198169));
procedure  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10866, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10866, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10866, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10868, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10870, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10872, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_usb_yurex: ref;
axiom (ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_usb_yurex == $sub.ref(0, 199201));
procedure  ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_usb_yurex()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9296, 68} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9296, 68} true;
  assume {:verifier.code 0} true;
  $i0 := $M.24;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9296, 125} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9296, 125} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9296, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9297, 14} true;
  assume {:verifier.code 0} true;
  $i3 := $M.24;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9297, 71} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i3, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9297, 71} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9297, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9298, 60} true;
  assume {:verifier.code 0} true;
  $M.24 := 2;
  call {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_usb_yurex"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9300, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __ldv_linux_kernel_locking_spinlock_spin_lock: ref;
axiom (__ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 200233));
procedure  __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10962, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10962, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;
axiom (ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 201265));
procedure  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10842, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10842, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10842, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10844, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10846, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10848, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dev_set_drvdata: ref;
axiom (dev_set_drvdata == $sub.ref(0, 202297));
procedure  dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4439, 8} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4439, 8} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4439, 20} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p2, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4440, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dev_get_drvdata: ref;
axiom (dev_get_drvdata == $sub.ref(0, 203329));
procedure  dev_get_drvdata($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4433, 24} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4433, 24} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4433, 24} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.7, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4433, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const kzalloc: ref;
axiom (kzalloc == $sub.ref(0, 204361));
procedure  kzalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6045, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
  call {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6045, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_kzalloc($i0, $i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6047, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const kref_init: ref;
axiom (kref_init == $sub.ref(0, 205393));
procedure  kref_init($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4240, 22} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4240, 22} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4240, 3} true;
  assume {:verifier.code 0} true;
  call atomic_set($p1, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4242, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __mutex_init: ref;
axiom (__mutex_init == $sub.ref(0, 206425));
procedure  __mutex_init($p0: ref, $p1: ref, $p2: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10965, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10965, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const spinlock_check: ref;
axiom (spinlock_check == $sub.ref(0, 207457));
procedure  spinlock_check($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4217, 19} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4217, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4217, 38} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4217, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const __raw_spin_lock_init: ref;
axiom (__raw_spin_lock_init == $sub.ref(0, 208489));
procedure  __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10968, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10968, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __init_waitqueue_head: ref;
axiom (__init_waitqueue_head == $sub.ref(0, 209521));
procedure  __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10959, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10959, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const interface_to_usbdev: ref;
axiom (interface_to_usbdev == $sub.ref(0, 210553));
procedure  interface_to_usbdev($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4478, 41} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4478, 41} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
  $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4478, 45} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.7, $p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4479, 11} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4479, 39} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2032));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4479, 3} true;
  assume {:verifier.code 0} true;
  $r := $p5;
  $exn := false;
  return;
}
const ldv_usb_get_dev_103: ref;
axiom (ldv_usb_get_dev_103 == $sub.ref(0, 211585));
procedure  ldv_usb_get_dev_103($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6133, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6133, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := ldv_linux_usb_dev_usb_get_dev($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6135, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const usb_endpoint_is_int_in: ref;
axiom (usb_endpoint_is_int_in == $sub.ref(0, 212617));
procedure  usb_endpoint_is_int_in($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4345, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4345, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := usb_endpoint_xfer_int($p0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4347, 11} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4347, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4349, 15} true;
  assume {:verifier.code 0} true;
  call $i3 := usb_endpoint_dir_in($p0);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4351, 17} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4351, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  $i6 := 0;
  goto $bb6;
$bb3:
  assume ($i4 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4353, 5} true;
  assume {:verifier.code 0} true;
  $i5 := 1;
  goto $bb5;
$bb4:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  $i5 := 0;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4356, 3} true;
  assume {:verifier.code 0} true;
  $i6 := $i5;
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4359, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const ldv_usb_alloc_urb_104: ref;
axiom (ldv_usb_alloc_urb_104 == $sub.ref(0, 213649));
procedure  ldv_usb_alloc_urb_104($i0: i32, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6145, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_usb_alloc_urb_104:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
  call {:cexpr "ldv_usb_alloc_urb_104:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6145, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_linux_usb_urb_usb_alloc_urb();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6147, 24} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6147, 13} true;
  assume {:verifier.code 0} true;
  call $i4 := ldv_is_err($p3);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6148, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i64($i4, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6148, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6148, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6149, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_alloc_irq_check_alloc_flags($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6150, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_alloc_usb_lock_check_alloc_flags($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6152, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const kmalloc: ref;
axiom (kmalloc == $sub.ref(0, 214681));
procedure  kmalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6033, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
  call {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6033, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6034, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_malloc_unknown_size();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6035, 3} true;
  assume {:verifier.code 0} true;
  call ldv_after_alloc($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6037, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const ldv_usb_alloc_coherent_105: ref;
axiom (ldv_usb_alloc_coherent_105 == $sub.ref(0, 215713));
procedure  ldv_usb_alloc_coherent_105($p0: ref, $i1: i64, $i2: i32, $p3: ref)
  returns ($r: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6163, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_usb_alloc_coherent_105:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
  call {:cexpr "ldv_usb_alloc_coherent_105:arg:flags"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6163, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := ldv_linux_usb_coherent_usb_alloc_coherent();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6165, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv_is_err($p4);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6166, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6166, 22} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6166, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6167, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_alloc_irq_check_alloc_flags($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6168, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_alloc_usb_lock_check_alloc_flags($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6170, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const __create_pipe: ref;
axiom (__create_pipe == $sub.ref(0, 216745));
procedure  __create_pipe($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4557, 32} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4557, 32} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2032)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4557, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i32($M.7, $p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4557, 39} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4557:39: warning: over-approximating bitwise operation shl;
  $i4 := $shl.i32($i3, 8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4557, 57} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4557:57: warning: over-approximating bitwise operation shl;
  $i5 := $shl.i32($i1, 15);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4557, 45} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4557:45: warning: over-approximating bitwise operation or;
  $i6 := $or.i32($i4, $i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4557, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const yurex_control_callback: ref;
axiom (yurex_control_callback == $sub.ref(0, 217777));
procedure  yurex_control_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4574, 34} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4574, 34} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4574, 34} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.25, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4574, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4575, 17} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4575, 17} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.26, $p4);
  call {:cexpr "status"} boogie_si_record_i32($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4576, 14} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4576, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4578, 45} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4578, 45} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.27, $p7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4578, 51} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2032)), $mul.ref(144, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4578, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref.ref.i32($p9, .str.25, .str.26, $i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4580, 22} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p3, $mul.ref(0, 408)), $mul.ref(240, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4580, 5} true;
  assume {:verifier.code 0} true;
  call __wake_up($p10, 1, 1, $0.ref);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4582, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4587, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4585, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const usb_fill_control_urb: ref;
axiom (usb_fill_control_urb == $sub.ref(0, 218809));
procedure  usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4498, 8} true;
  assume {:verifier.code 0} true;
  call {:cexpr "usb_fill_control_urb:arg:pipe"} boogie_si_record_i32($i2);
  call {:cexpr "usb_fill_control_urb:arg:buffer_length"} boogie_si_record_i32($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4498, 8} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4498, 12} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p8, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4499, 8} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4499, 13} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p9, $i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4500, 8} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4500, 21} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p10, $p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4501, 8} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4501, 24} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p11, $p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4502, 8} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4502, 31} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p12, $i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4503, 8} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4503, 17} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p13, $p6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4504, 8} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4504, 16} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p14, $p7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4505, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_alloc_urb_106: ref;
axiom (ldv_usb_alloc_urb_106 == $sub.ref(0, 219841));
procedure  ldv_usb_alloc_urb_106($i0: i32, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6180, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_usb_alloc_urb_106:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
  call {:cexpr "ldv_usb_alloc_urb_106:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6180, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_linux_usb_urb_usb_alloc_urb();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6182, 24} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6182, 13} true;
  assume {:verifier.code 0} true;
  call $i4 := ldv_is_err($p3);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6183, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i64($i4, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6183, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6183, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6184, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_alloc_irq_check_alloc_flags($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6185, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_alloc_usb_lock_check_alloc_flags($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6187, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const ldv_usb_alloc_coherent_107: ref;
axiom (ldv_usb_alloc_coherent_107 == $sub.ref(0, 220873));
procedure  ldv_usb_alloc_coherent_107($p0: ref, $i1: i64, $i2: i32, $p3: ref)
  returns ($r: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6198, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_usb_alloc_coherent_107:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
  call {:cexpr "ldv_usb_alloc_coherent_107:arg:flags"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6198, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := ldv_linux_usb_coherent_usb_alloc_coherent();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6200, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv_is_err($p4);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6201, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6201, 22} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6201, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6202, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_alloc_irq_check_alloc_flags($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6203, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_alloc_usb_lock_check_alloc_flags($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6205, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const yurex_interrupt: ref;
axiom (yurex_interrupt == $sub.ref(0, 221905));
procedure  yurex_interrupt($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i24;
  var $i83: i24;
  var $i84: i24;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i24;
  var $i102: i24;
  var $i103: i24;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i8;
  var $i129: i64;
  var $i130: i64;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $p138: ref;
  var $i139: i8;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $p149: ref;
  var $i150: i8;
  var $i151: i64;
  var $i152: i64;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $i156: i64;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $p160: ref;
  var $i161: i8;
  var $i162: i64;
  var $i163: i64;
  var $p164: ref;
  var $p165: ref;
  var $i166: i64;
  var $i167: i64;
  var $p168: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4669, 34} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4669, 34} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4669, 34} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.28, $p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4669, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4670, 14} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4670, 14} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.7, $p7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4671, 17} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4671, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.29, $p9);
  call {:cexpr "status"} boogie_si_record_i32($i10);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4673, 14} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i10, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4673, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4674, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4699, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4677, 14} true;
  assume {:verifier.code 0} true;
  $i12 := $eq.i32($i10, $sub.i32(0, 75));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4677, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i12 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4678, 5} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4702, 43} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4702, 43} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.7, $p17);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4702, 55} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4703, 39} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4703, 39} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.7, $p20);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4703, 45} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(140, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4703, 45} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i32($M.7, $p22);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4702, 3} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref.ref.i32.i32($p19, .str.27, .str.28, 8, $i23);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4704, 3} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb8:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4681, 14} true;
  assume {:verifier.code 0} true;
  $i13 := $eq.i32($i10, $sub.i32(0, 104));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4681, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i13 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4682, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4704, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb12:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4685, 14} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i10, $sub.i32(0, 2));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4685, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i14 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4686, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4704, 3} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb16:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4689, 14} true;
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i10, $sub.i32(0, 108));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4689, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i15 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4690, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4704, 3} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb20:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4693, 14} true;
  assume {:verifier.code 0} true;
  $i16 := $eq.i32($i10, $sub.i32(0, 84));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4693, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i16 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4694, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb22:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb24;
$bb23:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4709, 3} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb24:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4697, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4712, 43} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4712, 43} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.7, $p24);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4712, 55} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4712, 3} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref.ref.i32($p26, .str.29, .str.28, $i10);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4715, 3} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb26:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4720, 13} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i8($M.7, $p8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4720, 7} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.i8.i32($i27);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4720, 18} true;
  assume {:verifier.code 0} true;
  $i29 := $eq.i32($i28, 67);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4720, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb30, $bb31;
$bb27:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4830, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb28:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4819, 40} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4819, 40} true;
  assume {:verifier.code 0} true;
  $p119 := $load.ref($M.7, $p118);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4819, 12} true;
  assume {:verifier.code 0} true;
  call $i120 := ldv_usb_submit_urb_102($p119, 32);
  call {:cexpr "retval"} boogie_si_record_i32($i120);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4821, 14} true;
  assume {:verifier.code 0} true;
  $i121 := $ne.i32($i120, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4821, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i121} true;
  goto $bb63, $bb64;
$bb29:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4717, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb30:
  assume ($i29 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4721, 5} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb31:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb32:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4732, 3} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb33:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4724, 13} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i8($M.7, $p8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4724, 7} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.i8.i32($i30);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4724, 18} true;
  assume {:verifier.code 0} true;
  $i32 := $eq.i32($i31, 82);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4724, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i32 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4725, 5} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume !(($i32 == 1));
  assume {:verifier.code 0} true;
  goto $bb37;
$bb36:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4735, 28} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p8, $mul.ref(6, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4735, 22} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i8($M.7, $p36);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4735, 7} true;
  assume {:verifier.code 0} true;
  $i38 := $zext.i8.i32($i37);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4735, 35} true;
  assume {:verifier.code 0} true;
  $i39 := $eq.i32($i38, 13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4735, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb43, $bb44;
$bb37:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4728, 13} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i8($M.7, $p8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4728, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i8.i32($i33);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4728, 18} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i32($i34, 33);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4728, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb38, $bb39;
$bb38:
  assume ($i35 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4729, 5} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb39:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb41;
$bb40:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4795, 18} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4795, 26} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p95, .str.1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4796, 18} true;
  assume {:verifier.code 0} true;
  $p96 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4796, 27} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p96, .str.28);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4797, 18} true;
  assume {:verifier.code 0} true;
  $p97 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4797, 27} true;
  assume {:verifier.code 0} true;
  $M.10 := $store.ref($M.10, $p97, .str.7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4798, 18} true;
  assume {:verifier.code 0} true;
  $p98 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4798, 25} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p98, .str.32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4799, 18} true;
  assume {:verifier.code 0} true;
  $p99 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4799, 18} true;
  assume {:verifier.code 0} true;
  $p100 := $bitcast.ref.ref($p99);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4799, 25} true;
  assume {:verifier.code 0} true;
  $i101 := $load.i24($M.12, $p100);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4799, 25} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4799:25: warning: over-approximating bitwise operation and;
  $i102 := $and.i24($i101, $sub.i24(0, 262144));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4799, 25} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4799:25: warning: over-approximating bitwise operation or;
  $i103 := $or.i24($i102, 179);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4799, 25} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.i24($M.12, $p100, $i103);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4800, 18} true;
  assume {:verifier.code 0} true;
  $p104 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4800, 24} true;
  assume {:verifier.code 0} true;
  $M.13 := $store.i8($M.13, $p104, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4801, 55} true;
  assume {:verifier.code 0} true;
  $p105 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4801, 55} true;
  assume {:verifier.code 0} true;
  $i106 := $load.i8($M.13, $p105);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4801, 33} true;
  assume {:verifier.code 0} true;
  $i107 := $zext.i8.i64($i106);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4801, 61} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4801:61: warning: over-approximating bitwise operation and;
  $i108 := $and.i64($i107, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4801, 13} true;
  assume {:verifier.code 0} true;
  call $i109 := ldv__builtin_expect($i108, 0);
  call {:cexpr "tmp___1"} boogie_si_record_i64($i109);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4803, 15} true;
  assume {:verifier.code 0} true;
  $i110 := $ne.i64($i109, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4803, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i110} true;
  goto $bb60, $bb61;
$bb41:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4732, 3} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb42:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4815, 3} true;
  assume {:verifier.code 0} true;
  goto $bb59;
$bb43:
  assume ($i39 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4737, 66} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(328, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4737, 5} true;
  assume {:verifier.code 0} true;
  call ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p40);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4738, 10} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4738, 14} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p41, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4750, 9} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume !(($i39 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4776, 20} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4776, 28} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p76, .str.1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4777, 20} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4777, 29} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p77, .str.28);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4778, 20} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4778, 29} true;
  assume {:verifier.code 0} true;
  $M.10 := $store.ref($M.10, $p78, .str.7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4779, 20} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4779, 27} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p79, .str.31);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4780, 20} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4780, 20} true;
  assume {:verifier.code 0} true;
  $p81 := $bitcast.ref.ref($p80);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4780, 27} true;
  assume {:verifier.code 0} true;
  $i82 := $load.i24($M.12, $p81);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4780, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4780:27: warning: over-approximating bitwise operation and;
  $i83 := $and.i24($i82, $sub.i24(0, 262144));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4780, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4780:27: warning: over-approximating bitwise operation or;
  $i84 := $or.i24($i83, 175);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4780, 27} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.i24($M.12, $p81, $i84);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4781, 20} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4781, 26} true;
  assume {:verifier.code 0} true;
  $M.13 := $store.i8($M.13, $p85, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4782, 57} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4782, 57} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i8($M.13, $p86);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4782, 35} true;
  assume {:verifier.code 0} true;
  $i88 := $zext.i8.i64($i87);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4782, 63} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4782:63: warning: over-approximating bitwise operation and;
  $i89 := $and.i64($i88, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4782, 15} true;
  assume {:verifier.code 0} true;
  call $i90 := ldv__builtin_expect($i89, 0);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i90);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4784, 17} true;
  assume {:verifier.code 0} true;
  $i91 := $ne.i64($i90, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4784, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i91} true;
  goto $bb56, $bb57;
$bb45:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4751, 7} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb46:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 21} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 21} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i64($M.7, $p42);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 41} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p8, $mul.ref(1, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 35} true;
  assume {:verifier.code 0} true;
  $i45 := $load.i8($M.7, $p44);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 27} true;
  assume {:verifier.code 0} true;
  $i46 := $zext.i8.i64($i45);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 25} true;
  assume {:verifier.code 0} true;
  $i47 := $add.i64($i43, $i46);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 10} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 14} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p48, $i47);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4744, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb47, $bb48;
$bb47:
  assume (1 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 23} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 23} true;
  assume {:verifier.code 0} true;
  $i50 := $load.i64($M.7, $p49);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4745:27: warning: over-approximating bitwise operation shl;
  $i51 := $shl.i64($i50, 8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 12} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 16} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p52, $i51);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4746, 5} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb48:
  assume !((1 == 1));
  assume {:verifier.code 0} true;
  goto $bb49;
$bb49:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4751, 7} true;
  assume {:verifier.code 0} true;
  goto $bb50;
$bb50:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 21} true;
  assume {:verifier.code 0} true;
  $p125 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 21} true;
  assume {:verifier.code 0} true;
  $i126 := $load.i64($M.7, $p125);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 41} true;
  assume {:verifier.code 0} true;
  $p127 := $add.ref($p8, $mul.ref(2, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 35} true;
  assume {:verifier.code 0} true;
  $i128 := $load.i8($M.7, $p127);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 27} true;
  assume {:verifier.code 0} true;
  $i129 := $zext.i8.i64($i128);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 25} true;
  assume {:verifier.code 0} true;
  $i130 := $add.i64($i126, $i129);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 10} true;
  assume {:verifier.code 0} true;
  $p131 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 14} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p131, $i130);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4744, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb66, $bb67;
$bb51:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4755, 16} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4755, 24} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p53, .str.1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4756, 16} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4756, 25} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p54, .str.28);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4757, 16} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4757, 25} true;
  assume {:verifier.code 0} true;
  $M.10 := $store.ref($M.10, $p55, .str.7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4758, 16} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4758, 23} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p56, .str.30);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4759, 16} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4759, 16} true;
  assume {:verifier.code 0} true;
  $p58 := $bitcast.ref.ref($p57);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4759, 23} true;
  assume {:verifier.code 0} true;
  $i59 := $load.i24($M.12, $p58);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4759, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4759:23: warning: over-approximating bitwise operation and;
  $i60 := $and.i24($i59, $sub.i24(0, 262144));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4759, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4759:23: warning: over-approximating bitwise operation or;
  $i61 := $or.i24($i60, 168);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4759, 23} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.i24($M.12, $p58, $i61);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4760, 16} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4760, 22} true;
  assume {:verifier.code 0} true;
  $M.13 := $store.i8($M.13, $p62, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4761, 49} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4761, 49} true;
  assume {:verifier.code 0} true;
  $i64 := $load.i8($M.13, $p63);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4761, 31} true;
  assume {:verifier.code 0} true;
  $i65 := $zext.i8.i64($i64);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4761, 55} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4761:55: warning: over-approximating bitwise operation and;
  $i66 := $and.i64($i65, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4761, 11} true;
  assume {:verifier.code 0} true;
  call $i67 := ldv__builtin_expect($i66, 0);
  call {:cexpr "tmp"} boogie_si_record_i64($i67);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4763, 13} true;
  assume {:verifier.code 0} true;
  $i68 := $ne.i64($i67, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4763, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb52, $bb53;
$bb52:
  assume ($i68 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4765, 71} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4765, 71} true;
  assume {:verifier.code 0} true;
  $p70 := $load.ref($M.7, $p69);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4765, 83} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($add.ref($p70, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4766, 69} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4766, 69} true;
  assume {:verifier.code 0} true;
  $i73 := $load.i64($M.7, $p72);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4765, 7} true;
  assume {:verifier.code 0} true;
  call __dynamic_dev_dbg.ref.ref.ref.ref.i64($p1, $p71, .str.30, .str.28, $i73);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4768, 5} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb53:
  assume !(($i68 == 1));
  assume {:verifier.code 0} true;
  goto $bb54;
$bb54:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4771, 43} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(328, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4771, 5} true;
  assume {:verifier.code 0} true;
  call ldv_spin_unlock_irqrestore_101($p74, $u0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4772, 24} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(232, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4772, 5} true;
  assume {:verifier.code 0} true;
  call kill_fasync($p75, 29, 131073);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4774, 3} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4792, 3} true;
  assume {:verifier.code 0} true;
  goto $bb59;
$bb56:
  assume ($i91 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4786, 75} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4786, 75} true;
  assume {:verifier.code 0} true;
  $p93 := $load.ref($M.7, $p92);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4786, 87} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($add.ref($p93, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4786, 7} true;
  assume {:verifier.code 0} true;
  call __dynamic_dev_dbg.ref.ref.ref($p2, $p94, .str.31);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4789, 5} true;
  assume {:verifier.code 0} true;
  goto $bb58;
$bb57:
  assume !(($i91 == 1));
  assume {:verifier.code 0} true;
  goto $bb58;
$bb58:
  assume {:verifier.code 0} true;
  goto $bb55;
$bb59:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4815, 3} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb60:
  assume ($i110 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4805, 73} true;
  assume {:verifier.code 0} true;
  $p111 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4805, 73} true;
  assume {:verifier.code 0} true;
  $p112 := $load.ref($M.7, $p111);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4805, 85} true;
  assume {:verifier.code 0} true;
  $p113 := $add.ref($add.ref($p112, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4806, 70} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($p8, $mul.ref(1, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4806, 64} true;
  assume {:verifier.code 0} true;
  $i115 := $load.i8($M.7, $p114);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4806, 58} true;
  assume {:verifier.code 0} true;
  $i116 := $zext.i8.i32($i115);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4805, 5} true;
  assume {:verifier.code 0} true;
  call __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p113, .str.32, .str.28, $i116);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4808, 3} true;
  assume {:verifier.code 0} true;
  goto $bb62;
$bb61:
  assume !(($i110 == 1));
  assume {:verifier.code 0} true;
  goto $bb62;
$bb62:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4811, 20} true;
  assume {:verifier.code 0} true;
  $p117 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(240, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4811, 3} true;
  assume {:verifier.code 0} true;
  call __wake_up($p117, 1, 1, $0.ref);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4813, 3} true;
  assume {:verifier.code 0} true;
  goto $bb59;
$bb63:
  assume ($i121 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4823, 45} true;
  assume {:verifier.code 0} true;
  $p122 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4823, 45} true;
  assume {:verifier.code 0} true;
  $p123 := $load.ref($M.7, $p122);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4823, 57} true;
  assume {:verifier.code 0} true;
  $p124 := $add.ref($add.ref($p123, $mul.ref(0, 1560)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4823, 5} true;
  assume {:verifier.code 0} true;
  call dev_err.ref.ref.ref.i32($p124, .str.33, .str.28, $i120);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4826, 3} true;
  assume {:verifier.code 0} true;
  goto $bb65;
$bb64:
  assume !(($i121 == 1));
  assume {:verifier.code 0} true;
  goto $bb65;
$bb65:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4828, 3} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb66:
  assume (1 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 23} true;
  assume {:verifier.code 0} true;
  $p132 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 23} true;
  assume {:verifier.code 0} true;
  $i133 := $load.i64($M.7, $p132);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4745:27: warning: over-approximating bitwise operation shl;
  $i134 := $shl.i64($i133, 8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 12} true;
  assume {:verifier.code 0} true;
  $p135 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 16} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p135, $i134);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4746, 5} true;
  assume {:verifier.code 0} true;
  goto $bb68;
$bb67:
  assume !((1 == 1));
  assume {:verifier.code 0} true;
  goto $bb68;
$bb68:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4751, 7} true;
  assume {:verifier.code 0} true;
  goto $bb69;
$bb69:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 21} true;
  assume {:verifier.code 0} true;
  $p136 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 21} true;
  assume {:verifier.code 0} true;
  $i137 := $load.i64($M.7, $p136);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 41} true;
  assume {:verifier.code 0} true;
  $p138 := $add.ref($p8, $mul.ref(3, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 35} true;
  assume {:verifier.code 0} true;
  $i139 := $load.i8($M.7, $p138);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 27} true;
  assume {:verifier.code 0} true;
  $i140 := $zext.i8.i64($i139);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 25} true;
  assume {:verifier.code 0} true;
  $i141 := $add.i64($i137, $i140);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 10} true;
  assume {:verifier.code 0} true;
  $p142 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 14} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p142, $i141);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4744, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb70, $bb71;
$bb70:
  assume (1 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 23} true;
  assume {:verifier.code 0} true;
  $p143 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 23} true;
  assume {:verifier.code 0} true;
  $i144 := $load.i64($M.7, $p143);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4745:27: warning: over-approximating bitwise operation shl;
  $i145 := $shl.i64($i144, 8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 12} true;
  assume {:verifier.code 0} true;
  $p146 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 16} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p146, $i145);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4746, 5} true;
  assume {:verifier.code 0} true;
  goto $bb72;
$bb71:
  assume !((1 == 1));
  assume {:verifier.code 0} true;
  goto $bb72;
$bb72:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4751, 7} true;
  assume {:verifier.code 0} true;
  goto $bb73;
$bb73:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 21} true;
  assume {:verifier.code 0} true;
  $p147 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 21} true;
  assume {:verifier.code 0} true;
  $i148 := $load.i64($M.7, $p147);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 41} true;
  assume {:verifier.code 0} true;
  $p149 := $add.ref($p8, $mul.ref(4, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 35} true;
  assume {:verifier.code 0} true;
  $i150 := $load.i8($M.7, $p149);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 27} true;
  assume {:verifier.code 0} true;
  $i151 := $zext.i8.i64($i150);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 25} true;
  assume {:verifier.code 0} true;
  $i152 := $add.i64($i148, $i151);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 10} true;
  assume {:verifier.code 0} true;
  $p153 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 14} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p153, $i152);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4744, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb74, $bb75;
$bb74:
  assume (1 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 23} true;
  assume {:verifier.code 0} true;
  $p154 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 23} true;
  assume {:verifier.code 0} true;
  $i155 := $load.i64($M.7, $p154);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4745:27: warning: over-approximating bitwise operation shl;
  $i156 := $shl.i64($i155, 8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 12} true;
  assume {:verifier.code 0} true;
  $p157 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 16} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p157, $i156);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4746, 5} true;
  assume {:verifier.code 0} true;
  goto $bb76;
$bb75:
  assume !((1 == 1));
  assume {:verifier.code 0} true;
  goto $bb76;
$bb76:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4751, 7} true;
  assume {:verifier.code 0} true;
  goto $bb77;
$bb77:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 21} true;
  assume {:verifier.code 0} true;
  $p158 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 21} true;
  assume {:verifier.code 0} true;
  $i159 := $load.i64($M.7, $p158);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 41} true;
  assume {:verifier.code 0} true;
  $p160 := $add.ref($p8, $mul.ref(5, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 35} true;
  assume {:verifier.code 0} true;
  $i161 := $load.i8($M.7, $p160);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 27} true;
  assume {:verifier.code 0} true;
  $i162 := $zext.i8.i64($i161);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 25} true;
  assume {:verifier.code 0} true;
  $i163 := $add.i64($i159, $i162);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 10} true;
  assume {:verifier.code 0} true;
  $p164 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4743, 14} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p164, $i163);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4744, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb78, $bb79;
$bb78:
  assume (0 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 23} true;
  assume {:verifier.code 0} true;
  $p165 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 23} true;
  assume {:verifier.code 0} true;
  $i166 := $load.i64($M.7, $p165);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4745:27: warning: over-approximating bitwise operation shl;
  $i167 := $shl.i64($i166, 8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 12} true;
  assume {:verifier.code 0} true;
  $p168 := $add.ref($add.ref($p6, $mul.ref(0, 408)), $mul.ref(400, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4745, 16} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i64($M.7, $p168, $i167);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4746, 5} true;
  assume {:verifier.code 0} true;
  goto $bb80;
$bb79:
  assume !((0 == 1));
  assume {:verifier.code 0} true;
  goto $bb80;
$bb80:
  assume {:verifier.code 0} true;
  goto $bb51;
}
const usb_fill_int_urb: ref;
axiom (usb_fill_int_urb == $sub.ref(0, 222937));
procedure  usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4518, 8} true;
  assume {:verifier.code 0} true;
  call {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
  call {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
  call {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4518, 8} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4518, 12} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p8, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4519, 8} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4519, 13} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p9, $i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4520, 8} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4520, 24} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p10, $p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4521, 8} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4521, 31} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p11, $i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4522, 8} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4522, 17} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p12, $p5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4523, 8} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4523, 16} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p13, $p6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4524, 27} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2032)), $mul.ref(28, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4524, 27} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i32($M.7, $p14);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4524, 33} true;
  assume {:verifier.code 0} true;
  $i16 := $eq.i32($i15, 3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4524, 39} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4524, 39} true;
  assume {:verifier.code 0} true;
  assume ($i16 == 1);
  goto $bb2;
$bb2:
  call {:cexpr "usb_fill_int_urb:arg:_max1"} boogie_si_record_i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4527, 19} true;
  assume {:verifier.code 0} true;
  $i20 := $sgt.i32($i7, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4527, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb6, $bb7;
$bb3:
  assume !(($i16 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4524, 62} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2032)), $mul.ref(28, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4524, 62} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i32($M.7, $p17);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4524, 68} true;
  assume {:verifier.code 0} true;
  $i19 := $eq.i32($i18, 5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4524, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4524, 7} true;
  assume {:verifier.code 0} true;
  assume ($i19 == 1);
  goto $bb2;
$bb5:
  assume !(($i19 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4532, 10} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4532, 19} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p27, $i7);
  assume {:verifier.code 0} true;
  goto $bb12;
$bb6:
  assume ($i20 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4527, 13} true;
  assume {:verifier.code 0} true;
  $i21 := $i7;
  goto $bb8;
$bb7:
  assume !(($i20 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4527, 13} true;
  assume {:verifier.code 0} true;
  $i21 := 1;
  goto $bb8;
$bb8:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4527, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4529, 22} true;
  assume {:verifier.code 0} true;
  $i22 := $slt.i32($i21, 16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4529, 16} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i22 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4529, 16} true;
  assume {:verifier.code 0} true;
  $i23 := $i21;
  goto $bb11;
$bb10:
  assume !(($i22 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4529, 16} true;
  assume {:verifier.code 0} true;
  $i23 := 16;
  goto $bb11;
$bb11:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4529, 16} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4530, 36} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i32($i23, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4530, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4530:23: warning: over-approximating bitwise operation shl;
  $i25 := $shl.i32(1, $i24);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4530, 10} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4530, 19} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p26, $i25);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4531, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4534, 8} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4534, 20} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p28, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4535, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_submit_urb_108: ref;
axiom (ldv_usb_submit_urb_108 == $sub.ref(0, 223969));
procedure  ldv_usb_submit_urb_108($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6213, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_usb_submit_urb_108:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6213, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6214, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_malloc_unknown_size();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6216, 18} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6216, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i64.i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6216, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const usb_register_dev: ref;
axiom (usb_register_dev == $sub.ref(0, 225001));
procedure  usb_register_dev($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11050, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11050, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11050, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100: ref;
axiom (ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100 == $sub.ref(0, 226033));
procedure  ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6101, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6101, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_usb_yurex();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6102, 3} true;
  assume {:verifier.code 0} true;
  call __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6104, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_submit_urb_102: ref;
axiom (ldv_usb_submit_urb_102 == $sub.ref(0, 227065));
procedure  ldv_usb_submit_urb_102($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6122, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_usb_submit_urb_102:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6122, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6123, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_malloc_unknown_size();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6125, 18} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6125, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i64.i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6125, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const ldv_linux_usb_coherent_usb_alloc_coherent: ref;
axiom (ldv_linux_usb_coherent_usb_alloc_coherent == $sub.ref(0, 228097));
procedure  ldv_linux_usb_coherent_usb_alloc_coherent()
  returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7830, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7830, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_undef_ptr();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7833, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7833, 40} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7833, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7834, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7840, 1} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7837, 43} true;
  assume {:verifier.code 0} true;
  $i3 := $M.15;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7837, 81} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i32($i3, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7837, 41} true;
  assume {:verifier.code 0} true;
  $M.15 := $i4;
  call {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7838, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const ldv_linux_usb_urb_usb_alloc_urb: ref;
axiom (ldv_linux_usb_urb_usb_alloc_urb == $sub.ref(0, 229129));
procedure  ldv_linux_usb_urb_usb_alloc_urb()
  returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8131, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8131, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_undef_ptr();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8134, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8134, 40} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8134, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8135, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8135, 5} true;
  assume {:verifier.code 0} true;
  $p4 := $p0;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8141, 1} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8138, 33} true;
  assume {:verifier.code 0} true;
  $i5 := $M.14;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8138, 61} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i32($i5, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8138, 31} true;
  assume {:verifier.code 0} true;
  $M.14 := $i6;
  call {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8139, 11} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8139, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $p0;
  goto $bb3;
}
const ldv_after_alloc: ref;
axiom (ldv_after_alloc == $sub.ref(0, 230161));
procedure  ldv_after_alloc($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11009, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11009, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const usb_endpoint_xfer_int: ref;
axiom (usb_endpoint_xfer_int == $sub.ref(0, 231193));
procedure  usb_endpoint_xfer_int($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4335, 23} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4335, 23} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4335, 23} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i8($M.7, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4335, 12} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i8.i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4335, 36} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i:4335:36: warning: over-approximating bitwise operation and;
  $i4 := $and.i32($i3, 3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4335, 41} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4335, 41} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4335, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const usb_endpoint_dir_in: ref;
axiom (usb_endpoint_dir_in == $sub.ref(0, 232225));
procedure  usb_endpoint_dir_in($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4329, 37} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4329, 37} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4329, 37} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i8($M.7, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4329, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $sext.i8.i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4329, 55} true;
  assume {:verifier.code 0} true;
  $i4 := $slt.i32($i3, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4329, 55} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4329, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const ldv_linux_usb_dev_usb_get_dev: ref;
axiom (ldv_linux_usb_dev_usb_get_dev == $sub.ref(0, 233257));
procedure  ldv_linux_usb_dev_usb_get_dev($p0: ref)
  returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7871, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7871, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7871, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i64($i1, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7871, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7872, 44} true;
  assume {:verifier.code 0} true;
  $i3 := $M.16;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7872, 81} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7872, 44} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i4 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7872, 88} true;
  assume {:verifier.code 0} true;
  $i5 := $M.16;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7872, 125} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i32($i5, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7872, 44} true;
  assume {:verifier.code 0} true;
  $i7 := $i6;
  goto $bb5;
$bb4:
  assume !(($i4 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7872, 44} true;
  assume {:verifier.code 0} true;
  $i7 := 1;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7872, 44} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7872, 42} true;
  assume {:verifier.code 0} true;
  $M.16 := $i7;
  call {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7873, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7875, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const atomic_set: ref;
axiom (atomic_set == $sub.ref(0, 234289));
procedure  atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4192, 6} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4192, 6} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4192, 14} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i32($M.7, $p2, $i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 4193, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_kzalloc: ref;
axiom (ldv_kzalloc == $sub.ref(0, 235321));
procedure  ldv_kzalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7598, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
  call {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7598, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7599, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_zalloc($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7600, 3} true;
  assume {:verifier.code 0} true;
  call ldv_after_alloc($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7602, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const ldv_zalloc: ref;
axiom (ldv_zalloc == $sub.ref(0, 236353));
procedure  ldv_zalloc($i0: i64)
  returns ($r: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8262, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8262, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := ldv_calloc(1, $i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8264, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const ldv_calloc: ref;
axiom (ldv_calloc == $sub.ref(0, 237385));
procedure  ldv_calloc($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8241, 13} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
  call {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8241, 13} true;
  assume {:verifier.code 0} true;
  call $i2 := ldv_undef_int();
  call {:cexpr "tmp___1"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8243, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8243, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8245, 11} true;
  assume {:verifier.code 0} true;
  call $p4 := calloc($i0, $i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8247, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8247, 36} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8247, 36} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8247, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8248, 15} true;
  assume {:verifier.code 0} true;
  call $i8 := ldv_is_err($p4);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8249, 24} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i64($i8, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8249, 24} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i1.i32($i9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8249, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i10);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8251, 5} true;
  assume {:verifier.code 0} true;
  $p11 := $p4;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8253, 5} true;
  assume {:verifier.code 0} true;
  $p11 := $0.ref;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8256, 1} true;
  assume {:verifier.code 0} true;
  $r := $p11;
  $exn := false;
  return;
}
const ldv_EMGentry_init_yurex_driver_init_5_9: ref;
axiom (ldv_EMGentry_init_yurex_driver_init_5_9 == $sub.ref(0, 238417));
procedure  ldv_EMGentry_init_yurex_driver_init_5_9($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5431, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5431, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := yurex_driver_init();
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5433, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const yurex_driver_init: ref;
axiom (yurex_driver_init == $sub.ref(0, 239449));
procedure  yurex_driver_init()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5358, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5358, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := ldv_usb_register_driver_123(yurex_driver, __this_module, .str.1);
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5360, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const ldv_usb_register_driver_123: ref;
axiom (ldv_usb_register_driver_123 == $sub.ref(0, 240481));
procedure  ldv_usb_register_driver_123($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6347, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6347, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := usb_register_driver($p0, $p1, $p2);
  call {:cexpr "tmp"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6349, 13} true;
  assume {:verifier.code 0} true;
  call $i4 := ldv_usb_register_driver($i3, $p0, $p1, $p2);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6351, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const usb_register_driver: ref;
axiom (usb_register_driver == $sub.ref(0, 241513));
procedure  usb_register_driver($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11054, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11054, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11054, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const ldv_usb_register_driver: ref;
axiom (ldv_usb_register_driver == $sub.ref(0, 242545));
procedure  ldv_usb_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref)
  returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5876, 10} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_usb_register_driver:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5876, 10} true;
  assume {:verifier.code 0} true;
  call $i4 := ldv_pre_usb_register_driver();
  call {:cexpr "arg0"} boogie_si_record_i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5877, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv_undef_int();
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5879, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5879, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5881, 21} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i4, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5881, 21} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5881, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5883, 5} true;
  assume {:verifier.code 0} true;
  call ldv_dispatch_register_4_2($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5885, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5888, 21} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i4, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5888, 21} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i1.i32($i9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5888, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i10);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5890, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5894, 1} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const ldv_pre_usb_register_driver: ref;
axiom (ldv_pre_usb_register_driver == $sub.ref(0, 243577));
procedure  ldv_pre_usb_register_driver()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8089, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8089, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := ldv_undef_int();
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8092, 14} true;
  assume {:verifier.code 0} true;
  $i1 := $slt.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8092, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8093, 40} true;
  assume {:verifier.code 0} true;
  $M.30 := 1;
  call {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8094, 5} true;
  assume {:verifier.code 0} true;
  $i2 := $i0;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8096, 5} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8099, 1} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_dispatch_register_4_2: ref;
axiom (ldv_dispatch_register_4_2 == $sub.ref(0, 244609));
procedure  ldv_dispatch_register_4_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5474, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5474, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := ldv_xmalloc(16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5475, 14} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5476, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5476, 18} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p3, $p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5477, 27} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5477, 3} true;
  assume {:verifier.code 0} true;
  call ldv_usb_dummy_factory_2($p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5479, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_xmalloc: ref;
axiom (ldv_xmalloc == $sub.ref(0, 245641));
procedure  ldv_xmalloc($i0: i64)
  returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8283, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8283, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := malloc($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8285, 14} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8285, 34} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i64($i2, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8285, 34} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8285, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8286, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv_is_err($p1);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8287, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8287, 22} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8287, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8289, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const ldv_usb_dummy_factory_2: ref;
axiom (ldv_usb_dummy_factory_2 == $sub.ref(0, 246673));
procedure  ldv_usb_dummy_factory_2($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5806, 10} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5806, 10} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5807, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5807, 28} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i64($i2, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5807, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5809, 40} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5809, 40} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.7, $p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5810, 14} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5810, 5} true;
  assume {:verifier.code 0} true;
  call ldv_free($p6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5812, 3} true;
  assume {:verifier.code 0} true;
  $p7 := $p5;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  $p7 := $u3;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5815, 3} true;
  assume {:verifier.code 0} true;
  call ldv_dispatch_instance_register_2_3($p7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5816, 3} true;
  assume {:verifier.code 0} true;
  call ldv_dispatch_instance_deregister_2_2($p7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5818, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_free: ref;
axiom (ldv_free == $sub.ref(0, 247705));
procedure  ldv_free($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8271, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8271, 3} true;
  assume {:verifier.code 0} true;
  call free_($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8273, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_dispatch_instance_register_2_3: ref;
axiom (ldv_dispatch_instance_register_2_3 == $sub.ref(0, 248737));
procedure  ldv_dispatch_instance_register_2_3($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5460, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5460, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := ldv_xmalloc(16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5461, 14} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5462, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5462, 18} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p3, $p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5463, 26} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5463, 3} true;
  assume {:verifier.code 0} true;
  call ldv_usb_usb_instance_1($p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5465, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_dispatch_instance_deregister_2_2: ref;
axiom (ldv_dispatch_instance_deregister_2_2 == $sub.ref(0, 249769));
procedure  ldv_dispatch_instance_deregister_2_2($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5451, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5451, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_usb_instance_1: ref;
axiom (ldv_usb_usb_instance_1 == $sub.ref(0, 250801));
procedure  ldv_usb_usb_instance_1($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5910, 10} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5910, 10} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5912, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5912, 28} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i64($i2, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5912, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5914, 40} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5914, 40} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.7, $p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5915, 14} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5915, 5} true;
  assume {:verifier.code 0} true;
  call ldv_free($p6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5917, 3} true;
  assume {:verifier.code 0} true;
  $p7 := $p5;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  $p7 := $u3;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5920, 9} true;
  assume {:verifier.code 0} true;
  call $p8 := ldv_xmalloc(1552);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5921, 34} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5922, 13} true;
  assume {:verifier.code 0} true;
  call $p10 := ldv_xmalloc(2024);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5923, 33} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5924, 77} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2032)), $mul.ref(144, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5924, 33} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p9, $mul.ref(0, 1560)), $mul.ref(48, 1));
  $p14 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 1560)), $mul.ref(48, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5924, 44} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p14, $p12);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5925, 13} true;
  assume {:verifier.code 0} true;
  call $p15 := ldv_xmalloc(32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5926, 34} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p15);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5927, 3} true;
  assume {:verifier.code 0} true;
  call ldv_ldv_pre_probe_129();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5929, 122} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5929, 122} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.7, $p17);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5928, 32} true;
  assume {:verifier.code 0} true;
  call $i19 := ldv_usb_instance_probe_1_13($p18, $p9, $p16);
  call {:cexpr "ldv_1_probe_retval_default"} boogie_si_record_i32($i19);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5932, 32} true;
  assume {:verifier.code 0} true;
  call $i20 := ldv_ldv_post_probe_130($i19);
  call {:cexpr "ldv_1_probe_retval_default"} boogie_si_record_i32($i20);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5933, 12} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5933, 3} true;
  assume {:verifier.code 0} true;
  call ldv_free($p21);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5934, 13} true;
  assume {:verifier.code 0} true;
  call $i22 := ldv_undef_int();
  call {:cexpr "tmp___3"} boogie_si_record_i32($i22);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5936, 15} true;
  assume {:verifier.code 0} true;
  $i23 := $ne.i32($i22, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5936, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i23 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5938, 43} true;
  assume {:verifier.code 0} true;
  $i24 := $eq.i32($i20, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5938, 43} true;
  assume {:verifier.code 0} true;
  $i25 := $zext.i1.i32($i24);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5938, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i25);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5939, 15} true;
  assume {:verifier.code 0} true;
  call $i26 := ldv_undef_int();
  call {:cexpr "tmp___2"} boogie_si_record_i32($i26);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5942, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $eq.i32($i26, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5942, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i23 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5997, 43} true;
  assume {:verifier.code 0} true;
  $i51 := $ne.i32($i20, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5997, 43} true;
  assume {:verifier.code 0} true;
  $i52 := $zext.i1.i32($i51);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5997, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i52);
  assume {:verifier.code 0} true;
  goto $bb34;
$bb6:
  assume ($i27 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5943, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i27 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5960, 53} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5960, 53} true;
  assume {:verifier.code 0} true;
  $p32 := $load.ref($M.7, $p31);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5960, 9} true;
  assume {:verifier.code 0} true;
  $i33 := $p2i.ref.i64($p32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5960, 63} true;
  assume {:verifier.code 0} true;
  $i34 := $ne.i64($i33, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5960, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb23, $bb24;
$bb9:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5946, 17} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i32($i26, 2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5946, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i28 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5947, 7} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5974, 53} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5974, 53} true;
  assume {:verifier.code 0} true;
  $p44 := $load.ref($M.7, $p43);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5974, 9} true;
  assume {:verifier.code 0} true;
  $i45 := $p2i.ref.i64($p44);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5974, 60} true;
  assume {:verifier.code 0} true;
  $i46 := $ne.i64($i45, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5974, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb30, $bb31;
$bb13:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5950, 17} true;
  assume {:verifier.code 0} true;
  $i29 := $eq.i32($i26, 3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5950, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i29 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5951, 7} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5982, 5} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb17:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5954, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $eq.i32($i26, 4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5954, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i30 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5955, 7} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5984, 5} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb21:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5958, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5987, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5988, 5} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb23:
  assume ($i34 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5962, 61} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(56, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5962, 61} true;
  assume {:verifier.code 0} true;
  $p36 := $load.ref($M.7, $p35);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5962, 7} true;
  assume {:verifier.code 0} true;
  call ldv_usb_instance_pre_1_10($p36, $p9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5964, 5} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5966, 53} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(64, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5966, 53} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.7, $p37);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5966, 9} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p38);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5966, 64} true;
  assume {:verifier.code 0} true;
  $i40 := $ne.i64($i39, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5966, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i40 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5968, 61} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(64, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5968, 61} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.7, $p41);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5968, 7} true;
  assume {:verifier.code 0} true;
  call ldv_usb_instance_post_1_9($p42, $p9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5970, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5972, 5} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5993, 62} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5993, 62} true;
  assume {:verifier.code 0} true;
  $p50 := $load.ref($M.7, $p49);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5993, 5} true;
  assume {:verifier.code 0} true;
  call ldv_usb_instance_release_1_4($p50, $p9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5995, 3} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb30:
  assume ($i46 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5976, 63} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(40, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5976, 63} true;
  assume {:verifier.code 0} true;
  $p48 := $load.ref($M.7, $p47);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5976, 7} true;
  assume {:verifier.code 0} true;
  call ldv_usb_instance_resume_1_7($p48, $p9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5978, 5} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb31:
  assume !(($i46 == 1));
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5980, 5} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb33:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5990, 5} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb34:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6001, 12} true;
  assume {:verifier.code 0} true;
  $p53 := $bitcast.ref.ref($p9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6001, 3} true;
  assume {:verifier.code 0} true;
  call ldv_free($p53);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6002, 12} true;
  assume {:verifier.code 0} true;
  $p54 := $bitcast.ref.ref($p11);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6002, 3} true;
  assume {:verifier.code 0} true;
  call ldv_free($p54);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6004, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_ldv_pre_probe_129: ref;
axiom (ldv_ldv_pre_probe_129 == $sub.ref(0, 251833));
procedure  ldv_ldv_pre_probe_129()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6446, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6446, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_net_register_reset_error_counter();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6447, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_register_reset_error_counter();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6448, 3} true;
  assume {:verifier.code 0} true;
  call ldv_pre_probe();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6450, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_instance_probe_1_13: ref;
axiom (ldv_usb_instance_probe_1_13 == $sub.ref(0, 252865));
procedure  ldv_usb_instance_probe_1_13($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5846, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5846, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := yurex_probe($p1, $p2);
  call {:cexpr "tmp"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5848, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const ldv_ldv_post_probe_130: ref;
axiom (ldv_ldv_post_probe_130 == $sub.ref(0, 253897));
procedure  ldv_ldv_post_probe_130($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6458, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_ldv_post_probe_130:arg:retval"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6458, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_net_register_check_return_value_probe($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6459, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_register_check_return_value_probe($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6460, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_post_probe($i0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6462, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ldv_usb_instance_pre_1_10: ref;
axiom (ldv_usb_instance_pre_1_10 == $sub.ref(0, 254929));
procedure  ldv_usb_instance_pre_1_10($p0: ref, $p1: ref)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5837, 3} true;
  assume {:verifier.code 0} true;
  call $i2 := devirtbounce.2($p0, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5837, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_instance_post_1_9: ref;
axiom (ldv_usb_instance_post_1_9 == $sub.ref(0, 255961));
procedure  ldv_usb_instance_post_1_9($p0: ref, $p1: ref)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5828, 3} true;
  assume {:verifier.code 0} true;
  call $i2 := devirtbounce.2($p0, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5828, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_instance_resume_1_7: ref;
axiom (ldv_usb_instance_resume_1_7 == $sub.ref(0, 256993));
procedure  ldv_usb_instance_resume_1_7($p0: ref, $p1: ref)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5866, 3} true;
  assume {:verifier.code 0} true;
  call $i2 := devirtbounce.2($p0, $p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5866, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_stop: ref;
axiom (ldv_stop == $sub.ref(0, 258025));
procedure  ldv_stop()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8179, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8179, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8181, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb2:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8183, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_usb_instance_release_1_4: ref;
axiom (ldv_usb_instance_release_1_4 == $sub.ref(0, 259057));
procedure  ldv_usb_instance_release_1_4($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5855, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5855, 3} true;
  assume {:verifier.code 0} true;
  call yurex_disconnect($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5857, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_net_register_check_return_value_probe: ref;
axiom (ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 260089));
procedure  ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7678, 7} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7678, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $M.31;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7678, 42} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7678, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7680, 62} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7680, 62} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7680, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_net_register__wrong_return_value($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7682, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7685, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_net_register_reset_error_counter();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7687, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_usb_register_check_return_value_probe: ref;
axiom (ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 261121));
procedure  ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8110, 7} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8110, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $M.30;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8110, 42} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8110, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8112, 62} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8112, 62} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8112, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_usb_register__wrong_return_value($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8114, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8117, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_register_reset_error_counter();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8119, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_post_probe: ref;
axiom (ldv_post_probe == $sub.ref(0, 262153));
procedure  ldv_post_probe($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7514, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7514, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_filter_positive_int($i0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7516, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ldv_filter_positive_int: ref;
axiom (ldv_filter_positive_int == $sub.ref(0, 263185));
procedure  ldv_filter_positive_int($i0: i32)
  returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7494, 18} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7494, 18} true;
  assume {:verifier.code 0} true;
  $i1 := $sle.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7494, 18} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7494, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7496, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const ldv_assert_linux_usb_register__wrong_return_value: ref;
axiom (ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 264217));
procedure  ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10804, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10804, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10804, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10806, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10808, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10810, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_usb_register_reset_error_counter: ref;
axiom (ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 265249));
procedure  ldv_linux_usb_register_reset_error_counter()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8103, 38} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8103, 38} true;
  assume {:verifier.code 0} true;
  $M.30 := 0;
  call {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8104, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_net_register__wrong_return_value: ref;
axiom (ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 266281));
procedure  ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10051, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10051, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10051, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10053, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10055, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10057, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_net_register_reset_error_counter: ref;
axiom (ldv_linux_net_register_reset_error_counter == $sub.ref(0, 267313));
procedure  ldv_linux_net_register_reset_error_counter()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7671, 38} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7671, 38} true;
  assume {:verifier.code 0} true;
  $M.31 := 0;
  call {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7672, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_pre_probe: ref;
axiom (ldv_pre_probe == $sub.ref(0, 268345));
procedure  ldv_pre_probe()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11015, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 11015, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 269377));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const ldv_dispatch_deregister_file_operations_instance_3_5_4: ref;
axiom (ldv_dispatch_deregister_file_operations_instance_3_5_4 == $sub.ref(0, 270409));
procedure  ldv_dispatch_deregister_file_operations_instance_3_5_4()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5445, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5445, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_dispatch_register_file_operations_instance_3_5_5: ref;
axiom (ldv_dispatch_register_file_operations_instance_3_5_5 == $sub.ref(0, 271441));
procedure  ldv_dispatch_register_file_operations_instance_3_5_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5488, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5488, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_xmalloc(4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5489, 14} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5490, 50} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5490, 3} true;
  assume {:verifier.code 0} true;
  call ldv_file_operations_file_operations_instance_0($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5492, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_file_operations_file_operations_instance_0: ref;
axiom (ldv_file_operations_file_operations_instance_0 == $sub.ref(0, 272473));
procedure  ldv_file_operations_file_operations_instance_0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5579, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5579, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := ldv_xmalloc(504);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5580, 25} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5581, 13} true;
  assume {:verifier.code 0} true;
  call $p3 := ldv_xmalloc(976);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5582, 26} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5583, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv_undef_int();
  call {:cexpr "tmp___1"} boogie_si_record_i32($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5584, 31} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.i32.i64($i5);
  call {:cexpr "ldv_0_size_cnt_write_size"} boogie_si_record_i64($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5590, 13} true;
  assume {:verifier.code 0} true;
  call $i7 := ldv_undef_int();
  call {:cexpr "tmp___3"} boogie_si_record_i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5592, 15} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5592, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5592, 7} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb2:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5592, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5613, 14} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5613, 5} true;
  assume {:verifier.code 0} true;
  call ldv_free($p21);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5614, 14} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5614, 5} true;
  assume {:verifier.code 0} true;
  call ldv_free($p22);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5616, 5} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5594, 98} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($u4, $mul.ref(0, 240)), $mul.ref(112, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5594, 98} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.7, $p9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5594, 25} true;
  assume {:verifier.code 0} true;
  call $i11 := ldv_file_operations_instance_probe_0_12($p10, $p4, $p2);
  call {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i11);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5597, 25} true;
  assume {:verifier.code 0} true;
  call $i12 := ldv_filter_err_code($i11);
  call {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i12);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5598, 15} true;
  assume {:verifier.code 0} true;
  call $i13 := ldv_undef_int();
  call {:cexpr "tmp___2"} boogie_si_record_i32($i13);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5600, 17} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i13, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5600, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i14 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5602, 36} true;
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i12, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5602, 36} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i1.i32($i15);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5602, 7} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i16);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5604, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i14 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5607, 36} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.i32($i12, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5607, 36} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.i1.i32($i17);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5607, 7} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i18);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5609, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5621, 13} true;
  assume {:verifier.code 0} true;
  call $i23 := ldv_undef_int();
  call {:cexpr "tmp___4"} boogie_si_record_i32($i23);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5624, 15} true;
  assume {:verifier.code 0} true;
  $i24 := $eq.i32($i23, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5624, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb11, $bb12;
$bb8:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5590, 13} true;
  assume {:verifier.code 0} true;
  call $i19 := ldv_undef_int();
  call {:cexpr "tmp___3"} boogie_si_record_i32($i19);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5592, 15} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i32($i19, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5592, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb9, $bb10;
$bb9:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5592, 7} true;
  assume {:verifier.code 0} true;
  assume ($i20 == 1);
  goto $bb4;
$bb10:
  assume !(($i20 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5592, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb11:
  assume ($i24 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5625, 5} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5639, 13} true;
  assume {:verifier.code 0} true;
  call $p27 := ldv_xmalloc(1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5641, 13} true;
  assume {:verifier.code 0} true;
  call $p28 := ldv_xmalloc(8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5642, 33} true;
  assume {:verifier.code 0} true;
  $p29 := $bitcast.ref.ref($p28);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5643, 40} true;
  assume {:verifier.code 0} true;
  $i30 := $ule.i64($i6, 2147479552);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5643, 40} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.i1.i32($i30);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5643, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i31);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5645, 99} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($u4, $mul.ref(0, 240)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5645, 99} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.7, $p32);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5644, 3} true;
  assume {:verifier.code 0} true;
  call ldv_file_operations_instance_write_0_4($p33, $p2, $p27, $i6, $p29);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5648, 3} true;
  assume {:verifier.code 0} true;
  call ldv_free($p27);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5649, 12} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p29);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5649, 3} true;
  assume {:verifier.code 0} true;
  call ldv_free($p34);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5651, 3} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb14:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5628, 15} true;
  assume {:verifier.code 0} true;
  $i25 := $eq.i32($i23, 2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5628, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i25 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5629, 5} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5654, 77} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($u4, $mul.ref(0, 240)), $mul.ref(128, 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5654, 77} true;
  assume {:verifier.code 0} true;
  $p36 := $load.ref($M.7, $p35);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5654, 3} true;
  assume {:verifier.code 0} true;
  call ldv_file_operations_instance_release_0_2($p36, $p4, $p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5657, 3} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb18:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5632, 15} true;
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i23, 3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5632, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i26 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5633, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5660, 13} true;
  assume {:verifier.code 0} true;
  call $i37 := ldv_undef_int();
  call {:cexpr "tmp___7"} boogie_si_record_i32($i37);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5663, 15} true;
  assume {:verifier.code 0} true;
  $i38 := $eq.i32($i37, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5663, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb25, $bb26;
$bb22:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5636, 3} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5711, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5712, 3} true;
  assume {:verifier.code 0} true;
  goto $bb41;
$bb24:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5621, 13} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb25:
  assume ($i38 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5664, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5678, 13} true;
  assume {:verifier.code 0} true;
  call $p41 := ldv_xmalloc(1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5680, 13} true;
  assume {:verifier.code 0} true;
  call $p42 := ldv_xmalloc(8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5681, 34} true;
  assume {:verifier.code 0} true;
  $p43 := $bitcast.ref.ref($p42);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5682, 3} true;
  assume {:verifier.code 0} true;
  call ldv_file_operations_instance_callback_0_25($u5, $p2, $p41, $i6, $p43);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5685, 3} true;
  assume {:verifier.code 0} true;
  call ldv_free($p41);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5686, 12} true;
  assume {:verifier.code 0} true;
  $p44 := $bitcast.ref.ref($p43);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5686, 3} true;
  assume {:verifier.code 0} true;
  call ldv_free($p44);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5688, 3} true;
  assume {:verifier.code 0} true;
  goto $bb38;
$bb28:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5667, 15} true;
  assume {:verifier.code 0} true;
  $i39 := $eq.i32($i37, 2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5667, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i39 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5668, 5} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume !(($i39 == 1));
  assume {:verifier.code 0} true;
  goto $bb32;
$bb31:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5691, 3} true;
  assume {:verifier.code 0} true;
  call ldv_file_operations_instance_callback_0_22($u6, $p2, $u0, $u1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5694, 3} true;
  assume {:verifier.code 0} true;
  goto $bb38;
$bb32:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5671, 15} true;
  assume {:verifier.code 0} true;
  $i40 := $eq.i32($i37, 3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5671, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb33, $bb34;
$bb33:
  assume ($i40 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5672, 5} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb34:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5697, 3} true;
  assume {:verifier.code 0} true;
  call ldv_file_operations_instance_callback_0_5($u7, $u1, $p2, $u1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5700, 3} true;
  assume {:verifier.code 0} true;
  goto $bb38;
$bb36:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5675, 3} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5703, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5704, 3} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb38:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5708, 3} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb39:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5706, 3} true;
  assume {:verifier.code 0} true;
  goto $bb38;
$bb40:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5716, 3} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb41:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5714, 3} true;
  assume {:verifier.code 0} true;
  goto $bb40;
}
const ldv_file_operations_instance_probe_0_12: ref;
axiom (ldv_file_operations_instance_probe_0_12 == $sub.ref(0, 273505));
procedure  ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5762, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5762, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := yurex_open($p1, $p2);
  call {:cexpr "tmp"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5764, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const ldv_filter_err_code: ref;
axiom (ldv_filter_err_code == $sub.ref(0, 274537));
procedure  ldv_filter_err_code($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7524, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7524, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_filter_positive_int($i0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7526, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ldv_file_operations_instance_write_0_4: ref;
axiom (ldv_file_operations_instance_write_0_4 == $sub.ref(0, 275569));
procedure  ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var $i5: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5784, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_file_operations_instance_write_0_4:arg:arg3"} boogie_si_record_i64($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5784, 3} true;
  assume {:verifier.code 0} true;
  call $i5 := yurex_write($p1, $p2, $i3, $p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5786, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_file_operations_instance_release_0_2: ref;
axiom (ldv_file_operations_instance_release_0_2 == $sub.ref(0, 276601));
procedure  ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5772, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5772, 3} true;
  assume {:verifier.code 0} true;
  call $i3 := yurex_release($p1, $p2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5774, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_file_operations_instance_callback_0_25: ref;
axiom (ldv_file_operations_instance_callback_0_25 == $sub.ref(0, 277633));
procedure  ldv_file_operations_instance_callback_0_25($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var $i5: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5740, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_file_operations_instance_callback_0_25:arg:arg3"} boogie_si_record_i64($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5740, 3} true;
  assume {:verifier.code 0} true;
  call $i5 := yurex_read($p1, $p2, $i3, $p4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5742, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_file_operations_instance_callback_0_22: ref;
axiom (ldv_file_operations_instance_callback_0_22 == $sub.ref(0, 278665));
procedure  ldv_file_operations_instance_callback_0_22($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var $i4: i64;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5728, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_file_operations_instance_callback_0_22:arg:arg2"} boogie_si_record_i64($i2);
  call {:cexpr "ldv_file_operations_instance_callback_0_22:arg:arg3"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5728, 3} true;
  assume {:verifier.code 0} true;
  call $i4 := default_llseek($p1, $i2, $i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5730, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_file_operations_instance_callback_0_5: ref;
axiom (ldv_file_operations_instance_callback_0_5 == $sub.ref(0, 279697));
procedure  ldv_file_operations_instance_callback_0_5($p0: ref, $i1: i32, $p2: ref, $i3: i32)
{
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5751, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_file_operations_instance_callback_0_5:arg:arg1"} boogie_si_record_i32($i1);
  call {:cexpr "ldv_file_operations_instance_callback_0_5:arg:arg3"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5751, 3} true;
  assume {:verifier.code 0} true;
  call $i4 := yurex_fasync($i1, $p2, $i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5753, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_entry_EMGentry_5: ref;
axiom (ldv_entry_EMGentry_5 == $sub.ref(0, 280729));
procedure  ldv_entry_EMGentry_5($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5504, 23} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5504, 23} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_EMGentry_init_yurex_driver_init_5_9($u8);
  call {:cexpr "ldv_5_ret_default"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5505, 23} true;
  assume {:verifier.code 0} true;
  call $i2 := ldv_ldv_post_init_125($i1);
  call {:cexpr "ldv_5_ret_default"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5506, 13} true;
  assume {:verifier.code 0} true;
  call $i3 := ldv_undef_int();
  call {:cexpr "tmp___0"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5508, 15} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5508, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5510, 34} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i2, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5510, 34} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5510, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i6);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5511, 5} true;
  assume {:verifier.code 0} true;
  call ldv_ldv_check_final_state_126();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5512, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5514, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5517, 34} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i2, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5517, 34} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5517, 5} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i8);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5518, 11} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv_undef_int();
  call {:cexpr "tmp"} boogie_si_record_i32($i9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5520, 13} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5520, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5536, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume ($i10 == 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5522, 7} true;
  assume {:verifier.code 0} true;
  call ldv_dispatch_register_file_operations_instance_3_5_5();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5523, 7} true;
  assume {:verifier.code 0} true;
  call ldv_dispatch_deregister_file_operations_instance_3_5_4();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5525, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5528, 5} true;
  assume {:verifier.code 0} true;
  call ldv_EMGentry_exit_yurex_driver_exit_5_2($u9);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5529, 5} true;
  assume {:verifier.code 0} true;
  call ldv_ldv_check_final_state_127();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5530, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5532, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const ldv_ldv_post_init_125: ref;
axiom (ldv_ldv_post_init_125 == $sub.ref(0, 281761));
procedure  ldv_ldv_post_init_125($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6370, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_ldv_post_init_125:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6370, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_net_register_reset_error_counter();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6371, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_register_reset_error_counter();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6372, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_post_init($i0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6374, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ldv_ldv_check_final_state_126: ref;
axiom (ldv_ldv_check_final_state_126 == $sub.ref(0, 282793));
procedure  ldv_ldv_check_final_state_126()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6381, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6381, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_arch_io_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6382, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_block_genhd_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6383, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_block_queue_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6384, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_block_request_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6385, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_drivers_base_class_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6386, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_fs_char_dev_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6387, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_fs_sysfs_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6388, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_rwlock_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6389, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_module_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6390, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6391, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6392, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_rcu_update_lock_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6393, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_rcu_srcu_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6394, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_lib_idr_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6395, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_mmc_sdio_func_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6396, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_net_rtnetlink_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6397, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_net_sock_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6398, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_coherent_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6399, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_gadget_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6400, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_urb_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6402, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_ldv_check_final_state_127: ref;
axiom (ldv_ldv_check_final_state_127 == $sub.ref(0, 283825));
procedure  ldv_ldv_check_final_state_127()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6409, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6409, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_arch_io_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6410, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_block_genhd_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6411, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_block_queue_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6412, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_block_request_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6413, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_drivers_base_class_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6414, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_fs_char_dev_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6415, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_fs_sysfs_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6416, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_locking_rwlock_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6417, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_module_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6418, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6419, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6420, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_rcu_update_lock_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6421, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_kernel_rcu_srcu_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6422, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_lib_idr_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6423, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_mmc_sdio_func_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6424, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_net_rtnetlink_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6425, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_net_sock_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6426, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_coherent_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6427, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_gadget_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6428, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_usb_urb_check_final_state();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6430, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_arch_io_check_final_state: ref;
axiom (ldv_linux_arch_io_check_final_state == $sub.ref(0, 284857));
procedure  ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6724, 50} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6724, 50} true;
  assume {:verifier.code 0} true;
  $i0 := $M.32;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6724, 74} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6724, 74} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6724, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_arch_io__more_initial_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6726, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_block_genhd_check_final_state: ref;
axiom (ldv_linux_block_genhd_check_final_state == $sub.ref(0, 285889));
procedure  ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6790, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6790, 54} true;
  assume {:verifier.code 0} true;
  $i0 := $M.33;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6790, 87} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6790, 87} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6790, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6792, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_block_queue_check_final_state: ref;
axiom (ldv_linux_block_queue_check_final_state == $sub.ref(0, 286921));
procedure  ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6831, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6831, 54} true;
  assume {:verifier.code 0} true;
  $i0 := $M.34;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6831, 88} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6831, 88} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6831, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_block_queue__more_initial_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6833, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_block_request_check_final_state: ref;
axiom (ldv_linux_block_request_check_final_state == $sub.ref(0, 287953));
procedure  ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6897, 47} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6897, 47} true;
  assume {:verifier.code 0} true;
  $i0 := $M.35;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6897, 78} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6897, 78} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6897, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_block_request__get_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6899, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_drivers_base_class_check_final_state: ref;
axiom (ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 288985));
procedure  ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6979, 59} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6979, 59} true;
  assume {:verifier.code 0} true;
  $i0 := $M.36;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6979, 105} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6979, 105} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6979, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6981, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_fs_char_dev_check_final_state: ref;
axiom (ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 290017));
procedure  ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7124, 52} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7124, 52} true;
  assume {:verifier.code 0} true;
  $i0 := $M.37;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7124, 92} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7124, 92} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7124, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7126, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_fs_sysfs_check_final_state: ref;
axiom (ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 291049));
procedure  ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7163, 51} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7163, 51} true;
  assume {:verifier.code 0} true;
  $i0 := $M.38;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7163, 76} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7163, 76} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7163, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7165, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_kernel_locking_rwlock_check_final_state: ref;
axiom (ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 292081));
procedure  ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7258, 61} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7258, 61} true;
  assume {:verifier.code 0} true;
  $i0 := $M.39;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7258, 99} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7258, 99} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7258, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7259, 62} true;
  assume {:verifier.code 0} true;
  $i3 := $M.40;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7259, 100} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i3, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7259, 100} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7259, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7261, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_kernel_module_check_final_state: ref;
axiom (ldv_linux_kernel_module_check_final_state == $sub.ref(0, 293113));
procedure  ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7329, 56} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7329, 56} true;
  assume {:verifier.code 0} true;
  $i0 := $M.41;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7329, 98} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7329, 98} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7329, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7331, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;
axiom (ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 294145));
procedure  ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7407, 62} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7407, 62} true;
  assume {:verifier.code 0} true;
  $i0 := $M.42;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7407, 112} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7407, 112} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7407, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7409, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;
axiom (ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 295177));
procedure  ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7446, 65} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7446, 65} true;
  assume {:verifier.code 0} true;
  $i0 := $M.43;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7446, 121} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7446, 121} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7446, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7448, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;
axiom (ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 296209));
procedure  ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7485, 59} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7485, 59} true;
  assume {:verifier.code 0} true;
  $i0 := $M.44;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7485, 103} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7485, 103} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7485, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7487, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_kernel_rcu_srcu_check_final_state: ref;
axiom (ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 297241));
procedure  ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7368, 52} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7368, 52} true;
  assume {:verifier.code 0} true;
  $i0 := $M.45;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7368, 90} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7368, 90} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7368, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7370, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_lib_idr_check_final_state: ref;
axiom (ldv_linux_lib_idr_check_final_state == $sub.ref(0, 298273));
procedure  ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9858, 42} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9858, 42} true;
  assume {:verifier.code 0} true;
  $i0 := $M.46;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9858, 64} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9858, 69} true;
  assume {:verifier.code 0} true;
  $i2 := 1;
  assume {:branchcond $i1} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9858, 69} true;
  assume {:verifier.code 0} true;
  assume ($i1 == 1);
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9858, 69} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9858, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_lib_idr__more_at_exit($i5);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9860, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb3:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9858, 72} true;
  assume {:verifier.code 0} true;
  $i3 := $M.46;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9858, 94} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i3, 3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9858, 69} true;
  assume {:verifier.code 0} true;
  $i2 := $i4;
  goto $bb2;
}
const ldv_linux_mmc_sdio_func_check_final_state: ref;
axiom (ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 299305));
procedure  ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7643, 69} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7643, 69} true;
  assume {:verifier.code 0} true;
  $i0 := $M.47;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7643, 54} true;
  assume {:verifier.code 0} true;
  $i1 := $zext.i16.i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7643, 106} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7643, 106} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7643, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7645, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_net_rtnetlink_check_final_state: ref;
axiom (ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 300337));
procedure  ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7762, 48} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7762, 48} true;
  assume {:verifier.code 0} true;
  $i0 := $M.48;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7762, 63} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7762, 63} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7762, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7764, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_net_sock_check_final_state: ref;
axiom (ldv_linux_net_sock_check_final_state == $sub.ref(0, 301369));
procedure  ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7816, 66} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7816, 66} true;
  assume {:verifier.code 0} true;
  $i0 := $M.49;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7816, 81} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7816, 81} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7816, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7818, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_usb_coherent_check_final_state: ref;
axiom (ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 302401));
procedure  ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7858, 55} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7858, 55} true;
  assume {:verifier.code 0} true;
  $i0 := $M.15;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7858, 93} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7858, 93} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7858, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7860, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_usb_gadget_check_final_state: ref;
axiom (ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 303433));
procedure  ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8076, 62} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8076, 62} true;
  assume {:verifier.code 0} true;
  $i0 := $M.50;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8076, 94} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8076, 94} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8076, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8078, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_usb_urb_check_final_state: ref;
axiom (ldv_linux_usb_urb_check_final_state == $sub.ref(0, 304465));
procedure  ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8159, 50} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8159, 50} true;
  assume {:verifier.code 0} true;
  $i0 := $M.14;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8159, 78} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8159, 78} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8159, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 8161, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;
axiom (ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 305497));
procedure  ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10903, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10903, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10903, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10905, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10907, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10909, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;
axiom (ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 306529));
procedure  ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10544, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10544, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10544, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10546, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10548, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10550, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;
axiom (ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 307561));
procedure  ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10262, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10262, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10262, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10264, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10266, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10268, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;
axiom (ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 308593));
procedure  ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10312, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10312, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10312, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10314, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10316, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10318, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;
axiom (ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 309625));
procedure  ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9879, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9879, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9879, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9881, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9883, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9885, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;
axiom (ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 310657));
procedure  ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10237, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10237, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10237, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10239, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10241, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10243, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_lib_idr__more_at_exit: ref;
axiom (ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 311689));
procedure  ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10013, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10013, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10013, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10015, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10017, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10019, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;
axiom (ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 312721));
procedure  ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10125, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10125, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10125, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10127, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10129, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10131, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;
axiom (ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 313753));
procedure  ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10299, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10299, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10299, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10301, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10303, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10305, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;
axiom (ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 314785));
procedure  ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10940, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10940, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10940, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10942, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10944, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10946, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;
axiom (ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 315817));
procedure  ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10361, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10361, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10361, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10363, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10365, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10367, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;
axiom (ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 316849));
procedure  ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10150, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10150, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10150, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10152, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10154, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10156, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;
axiom (ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 317881));
procedure  ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9928, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9928, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9928, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9930, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9932, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9934, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;
axiom (ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 318913));
procedure  ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9964, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9964, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9964, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9966, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9968, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 9970, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;
axiom (ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 319945));
procedure  ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10829, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10829, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10829, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10831, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10833, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10835, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;
axiom (ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 320977));
procedure  ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10088, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10088, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10088, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10090, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10092, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10094, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;
axiom (ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 322009));
procedure  ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10668, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10668, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10668, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10670, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10672, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10674, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_block_request__get_at_exit: ref;
axiom (ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 323041));
procedure  ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10606, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10606, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10606, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10608, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10610, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10612, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_block_queue__more_initial_at_exit: ref;
axiom (ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 324073));
procedure  ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10705, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10705, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10705, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10707, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10709, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10711, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;
axiom (ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 325105));
procedure  ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10766, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10766, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10766, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10768, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10770, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10772, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_assert_linux_arch_io__more_initial_at_exit: ref;
axiom (ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 326137));
procedure  ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10791, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10791, 9} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10791, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10793, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10795, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 10797, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_post_init: ref;
axiom (ldv_post_init == $sub.ref(0, 327169));
procedure  ldv_post_init($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7504, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7504, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_filter_positive_int($i0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7506, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 328201));
procedure {:entrypoint} main()
  returns ($r: i32)
{
$bb0:
  call $initialize();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5541, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5541, 3} true;
  assume {:verifier.code 0} true;
  call ldv_ldv_initialize_128();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5542, 3} true;
  assume {:verifier.code 0} true;
  call ldv_entry_EMGentry_5($0.ref);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 5544, 1} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const ldv_ldv_initialize_128: ref;
axiom (ldv_ldv_initialize_128 == $sub.ref(0, 329233));
procedure  ldv_ldv_initialize_128()
{
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6437, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6437, 3} true;
  assume {:verifier.code 0} true;
  call ldv_linux_lib_find_bit_initialize();
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 6439, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_linux_lib_find_bit_initialize: ref;
axiom (ldv_linux_lib_find_bit_initialize == $sub.ref(0, 330265));
procedure  ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7588, 14} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7588, 14} true;
  assume {:verifier.code 0} true;
  $i0 := $M.51;
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7588, 25} true;
  assume {:verifier.code 0} true;
  $i1 := $sgt.i32($i0, 0);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7588, 25} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7588, 3} true;
  assume {:verifier.code 0} true;
  call ldv_assume($i2);
  assume {:sourceloc "linux-4.0-rc1---drivers--usb--misc--yurex.ko.cil-bde5760b.i", 7590, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 331297));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 39, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 332329));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 333361));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 334393));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 59, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 335425));
procedure  __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 336457));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 337489));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 338521));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 339553));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 340585));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 341617));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 342649));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 343681));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 344713));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 345745));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 346777));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 347809));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 348841));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __VERIFIER_nondet_long: ref;
axiom (__VERIFIER_nondet_long == $sub.ref(0, 349873));
procedure  __VERIFIER_nondet_long()
  returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 12} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 12} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_long();
  call {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 35} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 40} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i64($i0, 9223372036854775807);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 35} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 147, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 350905));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 351937));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 352969));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 354001));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_unsigned_long: ref;
axiom (__VERIFIER_nondet_unsigned_long == $sub.ref(0, 355033));
procedure  __VERIFIER_nondet_unsigned_long()
  returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 169, 21} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 169, 21} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 170, 23} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
  call {:cexpr "min"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 23} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
  call {:cexpr "max"} boogie_si_record_i64($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i64($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.i64($i2, 18446744073709551615);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 57} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.i64($i2, 18446744073709551615);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.i64($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 174, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 356065));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 357097));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 358129));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 359161));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 360193));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 361225));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 362257));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 363289));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_ulong: ref;
axiom (__VERIFIER_nondet_ulong == $sub.ref(0, 364321));
procedure  __VERIFIER_nondet_ulong()
  returns ($r: i64)
{
  var $i0: i64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 21} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 21} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __VERIFIER_nondet_pointer: ref;
axiom (__VERIFIER_nondet_pointer == $sub.ref(0, 365353));
procedure  __VERIFIER_nondet_pointer()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 48} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 48} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet();
  call {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 41} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const __VERIFIER_nondet: ref;
axiom (__VERIFIER_nondet == $sub.ref(0, 366385));
procedure  __VERIFIER_nondet()
  returns ($r: ref);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 367417));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 368449));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 369481));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 544, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_begin: ref;
axiom (__VERIFIER_atomic_begin == $sub.ref(0, 370513));
procedure  __VERIFIER_atomic_begin()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  call corral_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 79} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_end: ref;
axiom (__VERIFIER_atomic_end == $sub.ref(0, 371545));
procedure  __VERIFIER_atomic_end()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  call corral_atomic_end();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 75} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const calloc: ref;
axiom (calloc == $sub.ref(0, 372577));
procedure  calloc($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 1} true;
  call {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
  call {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 21, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 22, 5} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 23, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $mul.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 23, 11} true;
  assume {:verifier.code 0} true;
  call $p6 := malloc($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 24, 24} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 24, 5} true;
  assume {:verifier.code 0} true;
  call $M.7 := $memset.i8($M.7, $p6, 0, $i7, false);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 25, 5} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:verifier.code 0} true;
  $p4 := $p6;
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 27, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 373609));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 374641));
procedure  __SMACK_static_init()
{
$bb0:
  $M.1 := 1;
  call {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
  $M.32 := 0;
  call {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
  $M.35 := 0;
  call {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
  $M.36 := 0;
  call {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
  $M.37 := 0;
  call {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
  $M.38 := 0;
  call {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
  $M.39 := 1;
  call {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
  $M.40 := 1;
  call {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
  $M.41 := 1;
  call {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
  $M.45 := 0;
  call {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
  $M.42 := 0;
  call {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
  $M.43 := 0;
  call {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
  $M.44 := 0;
  call {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
  $M.47 := 0;
  call {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
  $M.31 := 0;
  call {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
  $M.48 := 0;
  call {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
  $M.49 := 0;
  call {:cexpr "locksocknumber"} boogie_si_record_i32(0);
  $M.15 := 0;
  call {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
  $M.16 := 0;
  call {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
  $M.50 := 0;
  call {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
  $M.30 := 0;
  call {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
  $M.14 := 0;
  call {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
  $M.52 := 0;
  call {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
  $M.17 := 0;
  call {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_io_mutex_of_usb_yurex"} boogie_si_record_i8(0);
  $M.53 := 0;
  call {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
  $M.54 := 0;
  call {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
  $M.55 := 0;
  $M.56 := 0;
  $M.57 := 0;
  $M.58 := 0;
  $M.59 := 0;
  $M.60 := 0;
  $M.61 := 0;
  $M.62 := 0;
  $M.63 := 0;
  $M.64 := 0;
  $M.65 := 0;
  $M.66 := 0;
  $M.67 := 0;
  $M.68 := 0;
  $M.69 := 0;
  $M.70 := 0;
  $M.71 := 0;
  $M.72 := 0;
  $M.73 := 0;
  $M.74 := 0;
  $M.75 := 0;
  $M.76 := 0;
  $M.77 := 0;
  $M.78 := 0;
  $M.79 := 0;
  $M.80 := 0;
  $M.81 := 0;
  $M.82 := $0.ref;
  $M.83 := 0;
  $M.84 := $0.ref;
  $M.85 := 0;
  $M.86 := $0.ref;
  $M.87 := 0;
  $M.88 := $0.ref;
  $M.0 := 0;
  call {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
  $M.7 := $store.ref($M.7, yurex_driver, .str.1);
  $M.7 := $store.ref($M.7, $add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), yurex_probe);
  $M.7 := $store.ref($M.7, $add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), yurex_disconnect);
  $M.7 := $store.ref($M.7, $add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), yurex_table);
  $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
  $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
  $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
  $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
  $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
  $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref(yurex_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 0);
  $M.7 := $store.i8($M.7, .str.1, 121);
  $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.1, $mul.ref(0, 6)), $mul.ref(1, 1)), 117);
  $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.1, $mul.ref(0, 6)), $mul.ref(2, 1)), 114);
  $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.1, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
  $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.1, $mul.ref(0, 6)), $mul.ref(4, 1)), 120);
  $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.1, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
  $M.7 := $store.i16($M.7, yurex_table, 3);
  $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 3141);
  $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 4112);
  $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
  $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
  $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
  $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
  $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
  $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
  $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
  $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
  $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
  $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(yurex_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
  $M.89 := $store.ref($M.89, yurex_class, .str.34);
  $M.90 := $store.ref($M.90, $add.ref($add.ref(yurex_class, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
  $M.91 := $store.ref($M.91, $add.ref($add.ref(yurex_class, $mul.ref(0, 32)), $mul.ref(16, 1)), yurex_fops);
  $M.92 := $store.i32($M.92, $add.ref($add.ref(yurex_class, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
  $M.93 := __this_module;
  $M.94 := default_llseek;
  $M.95 := yurex_read;
  $M.96 := yurex_write;
  $M.97 := $0.ref;
  $M.98 := $0.ref;
  $M.99 := $0.ref;
  $M.100 := $0.ref;
  $M.101 := $0.ref;
  $M.102 := $0.ref;
  $M.103 := $0.ref;
  $M.104 := $0.ref;
  $M.105 := $0.ref;
  $M.106 := $0.ref;
  $M.107 := yurex_open;
  $M.108 := $0.ref;
  $M.109 := yurex_release;
  $M.110 := $0.ref;
  $M.111 := $0.ref;
  $M.112 := yurex_fasync;
  $M.113 := $0.ref;
  $M.114 := $0.ref;
  $M.115 := $0.ref;
  $M.116 := $0.ref;
  $M.117 := $0.ref;
  $M.118 := $0.ref;
  $M.119 := $0.ref;
  $M.120 := $0.ref;
  $M.121 := $0.ref;
  $M.122 := $0.ref;
  $M.24 := 1;
  call {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_usb_yurex"} boogie_si_record_i32(1);
  $M.46 := 0;
  call {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
  $M.34 := 0;
  call {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
  $M.33 := 0;
  call {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
  $M.123 := 1;
  call {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
  $M.124 := 1;
  call {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
  $M.125 := 1;
  call {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
  $M.126 := 1;
  call {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
  $M.127 := 1;
  call {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
  $M.128 := 1;
  call {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
  $M.129 := 1;
  call {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
  $M.130 := 0;
  call {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
  $M.131 := .str.1.64;
  $M.132 := 0;
  call {:cexpr "errno_global"} boogie_si_record_i32(0);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 375673));
procedure  devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $i1: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i1 := $eq.ref(yurex_delete, $p0);
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  call yurex_delete(arg);
  $exn := false;
  return;
$bb3:
  assume !(($i1 == 1));
  assume false;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 376705));
procedure  devirtbounce.1(funcPtr: ref, arg: ref)
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 377737));
procedure  devirtbounce.2(funcPtr: ref, arg: ref)
  returns ($r: i32)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

const $u0: i64;
const $u1: i32;
const $u2: ref;
const $u3: ref;
const $u4: ref;
const $u5: ref;
const $u6: ref;
const $u7: ref;
const $u8: ref;
const $u9: ref;
procedure  boogie_si_record_i16(x: i16);
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i64(x: i64);
procedure  boogie_si_record_i8(x: i8);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
