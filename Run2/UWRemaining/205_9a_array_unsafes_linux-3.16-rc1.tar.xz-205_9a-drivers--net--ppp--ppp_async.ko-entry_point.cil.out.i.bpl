// generated by SMACK version 2.4.1 for svcomp
// via /usr/local/bin/smack /proj/SMACK/SMACKBenchResults/data/sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out.i -x svcomp --verifier svcomp -t -q -bpl 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out.i.bpl

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (54 regions)
var $M.0: ref;
var $M.1: ref;
var $M.2: i32;
var $M.3: i32;
var $M.4: i32;
var $M.5: i32;
var $M.6: i32;
var $M.7: i32;
var $M.8: ref;
var $M.9: [ref] i8;
var $M.10: [ref] i8;
var $M.11: i32;
var $M.12: [ref] i8;
var $M.13: i32;
var $M.14: i64;
var $M.15: [ref] ref;
var $M.16: [ref] i16;
var $M.17: [ref] i8;
var $M.18: i32;
var $M.19: [ref] i32;
var $M.20: [ref] ref;
var $M.21: [ref] i32;
var $M.22: [ref] i32;
var $M.23: [ref] ref;
var $M.24: [ref] ref;
var $M.25: [ref] ref;
var $M.26: [ref] ref;
var $M.27: [ref] ref;
var $M.28: [ref] ref;
var $M.29: [ref] ref;
var $M.30: [ref] ref;
var $M.31: [ref] ref;
var $M.32: [ref] ref;
var $M.33: [ref] ref;
var $M.34: [ref] ref;
var $M.35: [ref] ref;
var $M.36: [ref] ref;
var $M.37: [ref] ref;
var $M.38: [ref] ref;
var $M.39: [ref] ref;
var $M.40: [ref] i32;
var $M.41: [ref] i32;
var $M.42: [ref] i32;
var $M.43: [ref] i32;
var $M.44: [ref] i32;
var $M.45: [ref] ref;
var $M.46: [ref] ref;
var $M.47: [ref] ref;
var $M.48: [ref] ref;
var $M.49: [ref] ref;
var $M.50: [ref] i32;
var $M.51: [ref] i64;
var $M.52: ref;
var $M.53: i32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 227506));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (i64);

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $srem.i1(i1: i1, i2: i1) returns (i1) { (if ($ne.i1.bool($smod.i1(i1, i2), 0) && $slt.i1.bool(i1, 0)) then $sub.i1($smod.i1(i1, i2), $smax.i1(i2, $sub.i1(0, i2))) else $smod.i1(i1, i2)) }
function {:inline} $srem.i5(i1: i5, i2: i5) returns (i5) { (if ($ne.i5.bool($smod.i5(i1, i2), 0) && $slt.i5.bool(i1, 0)) then $sub.i5($smod.i5(i1, i2), $smax.i5(i2, $sub.i5(0, i2))) else $smod.i5(i1, i2)) }
function {:inline} $srem.i6(i1: i6, i2: i6) returns (i6) { (if ($ne.i6.bool($smod.i6(i1, i2), 0) && $slt.i6.bool(i1, 0)) then $sub.i6($smod.i6(i1, i2), $smax.i6(i2, $sub.i6(0, i2))) else $smod.i6(i1, i2)) }
function {:inline} $srem.i8(i1: i8, i2: i8) returns (i8) { (if ($ne.i8.bool($smod.i8(i1, i2), 0) && $slt.i8.bool(i1, 0)) then $sub.i8($smod.i8(i1, i2), $smax.i8(i2, $sub.i8(0, i2))) else $smod.i8(i1, i2)) }
function {:inline} $srem.i16(i1: i16, i2: i16) returns (i16) { (if ($ne.i16.bool($smod.i16(i1, i2), 0) && $slt.i16.bool(i1, 0)) then $sub.i16($smod.i16(i1, i2), $smax.i16(i2, $sub.i16(0, i2))) else $smod.i16(i1, i2)) }
function {:inline} $srem.i24(i1: i24, i2: i24) returns (i24) { (if ($ne.i24.bool($smod.i24(i1, i2), 0) && $slt.i24.bool(i1, 0)) then $sub.i24($smod.i24(i1, i2), $smax.i24(i2, $sub.i24(0, i2))) else $smod.i24(i1, i2)) }
function {:inline} $srem.i32(i1: i32, i2: i32) returns (i32) { (if ($ne.i32.bool($smod.i32(i1, i2), 0) && $slt.i32.bool(i1, 0)) then $sub.i32($smod.i32(i1, i2), $smax.i32(i2, $sub.i32(0, i2))) else $smod.i32(i1, i2)) }
function {:inline} $srem.i40(i1: i40, i2: i40) returns (i40) { (if ($ne.i40.bool($smod.i40(i1, i2), 0) && $slt.i40.bool(i1, 0)) then $sub.i40($smod.i40(i1, i2), $smax.i40(i2, $sub.i40(0, i2))) else $smod.i40(i1, i2)) }
function {:inline} $srem.i48(i1: i48, i2: i48) returns (i48) { (if ($ne.i48.bool($smod.i48(i1, i2), 0) && $slt.i48.bool(i1, 0)) then $sub.i48($smod.i48(i1, i2), $smax.i48(i2, $sub.i48(0, i2))) else $smod.i48(i1, i2)) }
function {:inline} $srem.i56(i1: i56, i2: i56) returns (i56) { (if ($ne.i56.bool($smod.i56(i1, i2), 0) && $slt.i56.bool(i1, 0)) then $sub.i56($smod.i56(i1, i2), $smax.i56(i2, $sub.i56(0, i2))) else $smod.i56(i1, i2)) }
function {:inline} $srem.i64(i1: i64, i2: i64) returns (i64) { (if ($ne.i64.bool($smod.i64(i1, i2), 0) && $slt.i64.bool(i1, 0)) then $sub.i64($smod.i64(i1, i2), $smax.i64(i2, $sub.i64(0, i2))) else $smod.i64(i1, i2)) }
function {:inline} $srem.i80(i1: i80, i2: i80) returns (i80) { (if ($ne.i80.bool($smod.i80(i1, i2), 0) && $slt.i80.bool(i1, 0)) then $sub.i80($smod.i80(i1, i2), $smax.i80(i2, $sub.i80(0, i2))) else $smod.i80(i1, i2)) }
function {:inline} $srem.i88(i1: i88, i2: i88) returns (i88) { (if ($ne.i88.bool($smod.i88(i1, i2), 0) && $slt.i88.bool(i1, 0)) then $sub.i88($smod.i88(i1, i2), $smax.i88(i2, $sub.i88(0, i2))) else $smod.i88(i1, i2)) }
function {:inline} $srem.i96(i1: i96, i2: i96) returns (i96) { (if ($ne.i96.bool($smod.i96(i1, i2), 0) && $slt.i96.bool(i1, 0)) then $sub.i96($smod.i96(i1, i2), $smax.i96(i2, $sub.i96(0, i2))) else $smod.i96(i1, i2)) }
function {:inline} $srem.i128(i1: i128, i2: i128) returns (i128) { (if ($ne.i128.bool($smod.i128(i1, i2), 0) && $slt.i128.bool(i1, 0)) then $sub.i128($smod.i128(i1, i2), $smax.i128(i2, $sub.i128(0, i2))) else $smod.i128(i1, i2)) }
function {:inline} $srem.i160(i1: i160, i2: i160) returns (i160) { (if ($ne.i160.bool($smod.i160(i1, i2), 0) && $slt.i160.bool(i1, 0)) then $sub.i160($smod.i160(i1, i2), $smax.i160(i2, $sub.i160(0, i2))) else $smod.i160(i1, i2)) }
function {:inline} $srem.i256(i1: i256, i2: i256) returns (i256) { (if ($ne.i256.bool($smod.i256(i1, i2), 0) && $slt.i256.bool(i1, 0)) then $sub.i256($smod.i256(i1, i2), $smax.i256(i2, $sub.i256(0, i2))) else $smod.i256(i1, i2)) }
function {:inline} $urem.i1(i1: i1, i2: i1) returns (i1) { $smod.i1(i1, i2) }
function {:inline} $urem.i5(i1: i5, i2: i5) returns (i5) { $smod.i5(i1, i2) }
function {:inline} $urem.i6(i1: i6, i2: i6) returns (i6) { $smod.i6(i1, i2) }
function {:inline} $urem.i8(i1: i8, i2: i8) returns (i8) { $smod.i8(i1, i2) }
function {:inline} $urem.i16(i1: i16, i2: i16) returns (i16) { $smod.i16(i1, i2) }
function {:inline} $urem.i24(i1: i24, i2: i24) returns (i24) { $smod.i24(i1, i2) }
function {:inline} $urem.i32(i1: i32, i2: i32) returns (i32) { $smod.i32(i1, i2) }
function {:inline} $urem.i40(i1: i40, i2: i40) returns (i40) { $smod.i40(i1, i2) }
function {:inline} $urem.i48(i1: i48, i2: i48) returns (i48) { $smod.i48(i1, i2) }
function {:inline} $urem.i56(i1: i56, i2: i56) returns (i56) { $smod.i56(i1, i2) }
function {:inline} $urem.i64(i1: i64, i2: i64) returns (i64) { $smod.i64(i1, i2) }
function {:inline} $urem.i80(i1: i80, i2: i80) returns (i80) { $smod.i80(i1, i2) }
function {:inline} $urem.i88(i1: i88, i2: i88) returns (i88) { $smod.i88(i1, i2) }
function {:inline} $urem.i96(i1: i96, i2: i96) returns (i96) { $smod.i96(i1, i2) }
function {:inline} $urem.i128(i1: i128, i2: i128) returns (i128) { $smod.i128(i1, i2) }
function {:inline} $urem.i160(i1: i160, i2: i160) returns (i160) { $smod.i160(i1, i2) }
function {:inline} $urem.i256(i1: i256, i2: i256) returns (i256) { $smod.i256(i1, i2) }
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
axiom ($and.i1(0, 0) == 0);
axiom ($or.i1(0, 0) == 0);
axiom ($xor.i1(0, 0) == 0);
axiom ($and.i1(0, 1) == 0);
axiom ($or.i1(0, 1) == 1);
axiom ($xor.i1(0, 1) == 1);
axiom ($and.i1(1, 0) == 0);
axiom ($or.i1(1, 0) == 1);
axiom ($xor.i1(1, 0) == 1);
axiom ($and.i1(1, 1) == 1);
axiom ($or.i1(1, 1) == 1);
axiom ($xor.i1(1, 1) == 0);
axiom ($and.i32(32, 16) == 0);
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
// Integer load/store operations
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
// Conversion between integer types
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer load/store operations
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.i8(f: float) returns (i8);
function $bitcast.float.i16(f: float) returns (i16);
function $bitcast.float.i32(f: float) returns (i32);
function $bitcast.float.i64(f: float) returns (i64);
function $bitcast.float.i80(f: float) returns (i80);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.i80.float(i: i80) returns (float);
function $fp2si.float.i1(f: float) returns (i1);
function $fp2si.float.i5(f: float) returns (i5);
function $fp2si.float.i6(f: float) returns (i6);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2si.float.i80(f: float) returns (i80);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2si.float.i160(f: float) returns (i160);
function $fp2si.float.i256(f: float) returns (i256);
function $fp2ui.float.i1(f: float) returns (i1);
function $fp2ui.float.i5(f: float) returns (i5);
function $fp2ui.float.i6(f: float) returns (i6);
function $fp2ui.float.i8(f: float) returns (i8);
function $fp2ui.float.i16(f: float) returns (i16);
function $fp2ui.float.i24(f: float) returns (i24);
function $fp2ui.float.i32(f: float) returns (i32);
function $fp2ui.float.i40(f: float) returns (i40);
function $fp2ui.float.i48(f: float) returns (i48);
function $fp2ui.float.i56(f: float) returns (i56);
function $fp2ui.float.i64(f: float) returns (i64);
function $fp2ui.float.i80(f: float) returns (i80);
function $fp2ui.float.i88(f: float) returns (i88);
function $fp2ui.float.i96(f: float) returns (i96);
function $fp2ui.float.i128(f: float) returns (i128);
function $fp2ui.float.i160(f: float) returns (i160);
function $fp2ui.float.i256(f: float) returns (i256);
function $si2fp.i1.float(i: i1) returns (float);
function $si2fp.i5.float(i: i5) returns (float);
function $si2fp.i6.float(i: i6) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $si2fp.i128.float(i: i128) returns (float);
function $si2fp.i160.float(i: i160) returns (float);
function $si2fp.i256.float(i: i256) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $ui2fp.i5.float(i: i5) returns (float);
function $ui2fp.i6.float(i: i6) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $ui2fp.i160.float(i: i160) returns (float);
function $ui2fp.i256.float(i: i256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, f: float) returns ([ref] i8) { M[p := $bitcast.float.i8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const async_ops_group0: ref;
axiom (async_ops_group0 == $sub.ref(0, 2060));
const ppp_ldisc_group1: ref;
axiom (ppp_ldisc_group1 == $sub.ref(0, 3092));
const ldv_state_variable_1: ref;
axiom (ldv_state_variable_1 == $sub.ref(0, 4120));
const ref_cnt: ref;
axiom (ref_cnt == $sub.ref(0, 5148));
const ldv_state_variable_0: ref;
axiom (ldv_state_variable_0 == $sub.ref(0, 6176));
const ldv_state_variable_2: ref;
axiom (ldv_state_variable_2 == $sub.ref(0, 7204));
const ldv_retval_0: ref;
axiom (ldv_retval_0 == $sub.ref(0, 8232));
const ldv_retval_1: ref;
axiom (ldv_retval_1 == $sub.ref(0, 9260));
const last_index: ref;
axiom (last_index == $sub.ref(0, 10288));
const LDV_SKBS: ref;
axiom (LDV_SKBS == $sub.ref(0, 11320));
const {:count 15} set_impl: ref;
axiom (set_impl == $sub.ref(0, 12464));
const flag_time: ref;
axiom (flag_time == $sub.ref(0, 13492));
const jiffies: ref;
axiom (jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776)));
const crc_ccitt_table: ref;
axiom (crc_ccitt_table == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784)));
const ppp_ldisc: ref;
axiom (ppp_ldisc == $sub.ref(0, 14684));
const {:count 45} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 15753));
const {:count 4} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 16781));
const __this_module: ref;
axiom (__this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792)));
const {:count 43} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 17848));
const disc_data_lock: ref;
axiom (disc_data_lock == $sub.ref(0, 18944));
const .str: ref;
axiom (.str == $sub.ref(0, 19983));
const {:count 34} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 21041));
const {:count 25} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 22090));
const {:count 25} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 23139));
const async_ops: ref;
axiom (async_ops == $sub.ref(0, 24179));
const {:count 12} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 25215));
const {:count 16} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 26255));
const {:count 22} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 27301));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 28333));
const {:count 3} .str.1.30: ref;
axiom (.str.1.30 == $sub.ref(0, 29360));
const {:count 14} .str.31: ref;
axiom (.str.31 == $sub.ref(0, 30398));
const errno_global: ref;
axiom (errno_global == $sub.ref(0, 31426));
const __kmalloc: ref;
axiom (__kmalloc == $sub.ref(0, 32458));
procedure  __kmalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5444, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
  call {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5444, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_malloc($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5444, 2} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 33490));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const ldv_malloc: ref;
axiom (ldv_malloc == $sub.ref(0, 34522));
procedure  ldv_malloc($i0: i64)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5603, 13} true;
  assume {:verifier.code 1} true;
  call {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5603, 13} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5604, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5604, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5605, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5607, 11} true;
  assume {:verifier.code 0} true;
  call $p4 := malloc($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5609, 23} true;
  assume {:verifier.code 1} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5609, 41} true;
  assume {:verifier.code 1} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5609, 41} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5609, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5610, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $p4;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5613, 1} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 35554));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const ldv_zalloc: ref;
axiom (ldv_zalloc == $sub.ref(0, 36586));
procedure  ldv_zalloc($i0: i64)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5620, 13} true;
  assume {:verifier.code 1} true;
  call {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5620, 13} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5621, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5621, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5622, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5624, 11} true;
  assume {:verifier.code 0} true;
  call $p4 := calloc(1, $i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5626, 23} true;
  assume {:verifier.code 1} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5626, 41} true;
  assume {:verifier.code 1} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5626, 41} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5626, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5627, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $p4;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5630, 1} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const ldv__builtin_expect: ref;
axiom (ldv__builtin_expect == $sub.ref(0, 37618));
procedure  ldv__builtin_expect($i0: i64, $i1: i64)
  returns ($r: i64)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5672, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
  call {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5672, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const ldv_error: ref;
axiom (ldv_error == $sub.ref(0, 38650));
procedure  ldv_error()
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5657, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5657, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5659, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5661, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_initialize_ppp_channel_ops_2: ref;
axiom (ldv_initialize_ppp_channel_ops_2 == $sub.ref(0, 39682));
procedure  ldv_initialize_ppp_channel_ops_2()
{
  var $p0: ref;
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7054, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7054, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7055, 22} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7055, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $p0;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7056, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_target_type_1: ref;
axiom (ldv_target_type_1 == $sub.ref(0, 40714));
procedure  ldv_target_type_1()
{
  var $p0: ref;
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7063, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7063, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(1752);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7064, 22} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7064, 20} true;
  assume {:verifier.code 0} true;
  $M.1 := $p0;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7065, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 41746));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i64;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
$bb0:
  call $initialize();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7109, 9} true;
  assume {:verifier.code 1} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7109, 9} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_size_t();
  call {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i0);
  call {:cexpr "tmp"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7111, 13} true;
  assume {:verifier.code 0} true;
  call $p1 := ldv_zalloc(512);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7112, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7113, 13} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  call {:cexpr "tmp___1"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7115, 13} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i4);
  call {:cexpr "tmp___2"} boogie_si_record_i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7117, 13} true;
  assume {:verifier.code 0} true;
  call $p5 := ldv_zalloc(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7119, 13} true;
  assume {:verifier.code 0} true;
  call $p6 := ldv_zalloc(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7121, 13} true;
  assume {:verifier.code 0} true;
  call $p7 := ldv_zalloc(16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7122, 13} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7123, 13} true;
  assume {:verifier.code 1} true;
  call $i9 := __VERIFIER_nondet_size_t();
  call {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i9);
  call {:cexpr "tmp___6"} boogie_si_record_i64($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7125, 13} true;
  assume {:verifier.code 1} true;
  call $i10 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i10);
  call {:cexpr "tmp___7"} boogie_si_record_i32($i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7127, 13} true;
  assume {:verifier.code 0} true;
  call $p11 := ldv_zalloc(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7129, 13} true;
  assume {:verifier.code 0} true;
  call $p12 := ldv_zalloc(512);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7130, 14} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7131, 14} true;
  assume {:verifier.code 0} true;
  call $p14 := ldv_zalloc(512);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7132, 14} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7133, 14} true;
  assume {:verifier.code 0} true;
  call $p16 := ldv_zalloc(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7135, 14} true;
  assume {:verifier.code 0} true;
  call $p17 := ldv_zalloc(512);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7136, 13} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7137, 14} true;
  assume {:verifier.code 1} true;
  call $i19 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i19);
  call {:cexpr "tmp___13"} boogie_si_record_i64($i19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7139, 14} true;
  assume {:verifier.code 0} true;
  call $p20 := ldv_zalloc(232);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7140, 14} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7141, 14} true;
  assume {:verifier.code 1} true;
  call $i22 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i22);
  call {:cexpr "tmp___15"} boogie_si_record_i32($i22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7143, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7144, 24} true;
  assume {:verifier.code 0} true;
  $M.2 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7145, 11} true;
  assume {:verifier.code 0} true;
  $M.3 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7146, 24} true;
  assume {:verifier.code 0} true;
  $M.4 := 1;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7147, 24} true;
  assume {:verifier.code 0} true;
  $M.5 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7147, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7149, 14} true;
  assume {:verifier.code 1} true;
  call $i23 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i23);
  call {:cexpr "tmp___16"} boogie_si_record_i32($i23);
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  $i24 := $slt.i32($i23, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i24 == 1);
  assume {:verifier.code 0} true;
  $i27 := $eq.i32($i23, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb10, $bb11;
$bb4:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  $i25 := $slt.i32($i23, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i25 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7248, 7} true;
  assume {:verifier.code 0} true;
  $i92 := $M.4;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7248, 28} true;
  assume {:verifier.code 0} true;
  $i93 := $ne.i32($i92, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7248, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i93} true;
  goto $bb80, $bb81;
$bb6:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i23, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i26 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7286, 7} true;
  assume {:verifier.code 0} true;
  $i109 := $M.5;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7286, 28} true;
  assume {:verifier.code 0} true;
  $i110 := $ne.i32($i109, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7286, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i110} true;
  goto $bb110, $bb111;
$bb8:
  assume {:verifier.code 0} true;
  assume !(($i26 == 1));
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  goto $bb130;
$bb10:
  assume ($i27 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7152, 7} true;
  assume {:verifier.code 0} true;
  $i28 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7152, 28} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i32($i28, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7152, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb12, $bb13;
$bb11:
  assume {:verifier.code 0} true;
  assume !(($i27 == 1));
  goto $bb9;
$bb12:
  assume ($i29 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7153, 16} true;
  assume {:verifier.code 1} true;
  call $i30 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i30);
  call {:cexpr "tmp___17"} boogie_si_record_i32($i30);
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb78;
$bb14:
  assume {:verifier.code 0} true;
  $i31 := $slt.i32($i30, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i31 == 1);
  assume {:verifier.code 0} true;
  $i37 := $slt.i32($i30, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb28, $bb29;
$bb16:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  $i32 := $slt.i32($i30, 6);
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i32 == 1);
  assume {:verifier.code 0} true;
  $i36 := $slt.i32($i30, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb26, $bb27;
$bb18:
  assume !(($i32 == 1));
  assume {:verifier.code 0} true;
  $i33 := $slt.i32($i30, 7);
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i33 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7214, 9} true;
  assume {:verifier.code 0} true;
  $i78 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7214, 30} true;
  assume {:verifier.code 0} true;
  $i79 := $eq.i32($i78, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7214, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb64, $bb65;
$bb20:
  assume !(($i33 == 1));
  assume {:verifier.code 0} true;
  $i34 := $slt.i32($i30, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i34 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7221, 9} true;
  assume {:verifier.code 0} true;
  $i81 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7221, 30} true;
  assume {:verifier.code 0} true;
  $i82 := $eq.i32($i81, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7221, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb67, $bb68;
$bb22:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  $i35 := $eq.i32($i30, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i35 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7229, 9} true;
  assume {:verifier.code 0} true;
  $i84 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7229, 30} true;
  assume {:verifier.code 0} true;
  $i85 := $eq.i32($i84, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7229, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i85} true;
  goto $bb70, $bb71;
$bb24:
  assume {:verifier.code 0} true;
  assume !(($i35 == 1));
  goto $bb25;
$bb25:
  assume {:verifier.code 0} true;
  goto $bb76;
$bb26:
  assume ($i36 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7195, 9} true;
  assume {:verifier.code 0} true;
  $i65 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7195, 30} true;
  assume {:verifier.code 0} true;
  $i66 := $eq.i32($i65, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7195, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i66} true;
  goto $bb55, $bb56;
$bb27:
  assume !(($i36 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7203, 9} true;
  assume {:verifier.code 0} true;
  $i70 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7203, 30} true;
  assume {:verifier.code 0} true;
  $i71 := $eq.i32($i70, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7203, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i71} true;
  goto $bb58, $bb59;
$bb28:
  assume ($i37 == 1);
  assume {:verifier.code 0} true;
  $i39 := $slt.i32($i30, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb32, $bb33;
$bb29:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  $i38 := $slt.i32($i30, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i38 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7171, 9} true;
  assume {:verifier.code 0} true;
  $i49 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7171, 30} true;
  assume {:verifier.code 0} true;
  $i50 := $eq.i32($i49, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7171, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i50} true;
  goto $bb43, $bb44;
$bb31:
  assume !(($i38 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7183, 9} true;
  assume {:verifier.code 0} true;
  $i57 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7183, 30} true;
  assume {:verifier.code 0} true;
  $i58 := $eq.i32($i57, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7183, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i58} true;
  goto $bb49, $bb50;
$bb32:
  assume ($i39 == 1);
  assume {:verifier.code 0} true;
  $i40 := $eq.i32($i30, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb34, $bb35;
$bb33:
  assume !(($i39 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7164, 9} true;
  assume {:verifier.code 0} true;
  $i45 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7164, 30} true;
  assume {:verifier.code 0} true;
  $i46 := $eq.i32($i45, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7164, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb40, $bb41;
$bb34:
  assume ($i40 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7156, 9} true;
  assume {:verifier.code 0} true;
  $i41 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7156, 30} true;
  assume {:verifier.code 0} true;
  $i42 := $eq.i32($i41, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7156, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb36, $bb37;
$bb35:
  assume {:verifier.code 0} true;
  assume !(($i40 == 1));
  goto $bb25;
$bb36:
  assume ($i42 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7157, 26} true;
  assume {:verifier.code 0} true;
  $p43 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7157, 7} true;
  assume {:verifier.code 0} true;
  call $i44 := ppp_asynctty_write($p43, $p13, $p5, $i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7159, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7160, 5} true;
  assume {:verifier.code 0} true;
  goto $bb38;
$bb37:
  assume !(($i42 == 1));
  assume {:verifier.code 0} true;
  goto $bb38;
$bb38:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7162, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7244, 3} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb40:
  assume ($i46 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7165, 25} true;
  assume {:verifier.code 0} true;
  $p47 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7165, 7} true;
  assume {:verifier.code 0} true;
  call $i48 := ppp_asynctty_read($p47, $p15, $p16, $i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7166, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7167, 5} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb41:
  assume !(($i46 == 1));
  assume {:verifier.code 0} true;
  goto $bb42;
$bb42:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7169, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb43:
  assume ($i50 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7172, 25} true;
  assume {:verifier.code 0} true;
  $p51 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7172, 7} true;
  assume {:verifier.code 0} true;
  call $i52 := ppp_asynctty_poll($p51, $p2, $p8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7173, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7174, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume !(($i50 == 1));
  assume {:verifier.code 0} true;
  goto $bb45;
$bb45:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7176, 9} true;
  assume {:verifier.code 0} true;
  $i53 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7176, 30} true;
  assume {:verifier.code 0} true;
  $i54 := $eq.i32($i53, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7176, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb46, $bb47;
$bb46:
  assume ($i54 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7177, 25} true;
  assume {:verifier.code 0} true;
  $p55 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7177, 7} true;
  assume {:verifier.code 0} true;
  call $i56 := ppp_asynctty_poll($p55, $p2, $p8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7178, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7179, 5} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb47:
  assume !(($i54 == 1));
  assume {:verifier.code 0} true;
  goto $bb48;
$bb48:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7181, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb49:
  assume ($i58 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7184, 27} true;
  assume {:verifier.code 0} true;
  $p59 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7184, 7} true;
  assume {:verifier.code 0} true;
  call $i60 := ppp_asynctty_hangup($p59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7185, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7186, 5} true;
  assume {:verifier.code 0} true;
  goto $bb51;
$bb50:
  assume !(($i58 == 1));
  assume {:verifier.code 0} true;
  goto $bb51;
$bb51:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7188, 9} true;
  assume {:verifier.code 0} true;
  $i61 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7188, 30} true;
  assume {:verifier.code 0} true;
  $i62 := $eq.i32($i61, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7188, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb52, $bb53;
$bb52:
  assume ($i62 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7189, 27} true;
  assume {:verifier.code 0} true;
  $p63 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7189, 7} true;
  assume {:verifier.code 0} true;
  call $i64 := ppp_asynctty_hangup($p63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7190, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7191, 5} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb53:
  assume !(($i62 == 1));
  assume {:verifier.code 0} true;
  goto $bb54;
$bb54:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7193, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb55:
  assume ($i66 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7196, 26} true;
  assume {:verifier.code 0} true;
  $p67 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7196, 7} true;
  assume {:verifier.code 0} true;
  call ppp_asynctty_close($p67);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7197, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7198, 17} true;
  assume {:verifier.code 0} true;
  $i68 := $M.3;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7198, 25} true;
  assume {:verifier.code 0} true;
  $i69 := $sub.i32($i68, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7198, 15} true;
  assume {:verifier.code 0} true;
  $M.3 := $i69;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i69);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7199, 5} true;
  assume {:verifier.code 0} true;
  goto $bb57;
$bb56:
  assume !(($i66 == 1));
  assume {:verifier.code 0} true;
  goto $bb57;
$bb57:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7201, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb58:
  assume ($i71 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7204, 40} true;
  assume {:verifier.code 0} true;
  $p72 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7204, 22} true;
  assume {:verifier.code 0} true;
  call $i73 := ppp_asynctty_open($p72);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7204, 20} true;
  assume {:verifier.code 0} true;
  $M.6 := $i73;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32($i73);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7205, 11} true;
  assume {:verifier.code 0} true;
  $i74 := $M.6;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7205, 24} true;
  assume {:verifier.code 0} true;
  $i75 := $eq.i32($i74, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7205, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i75} true;
  goto $bb60, $bb61;
$bb59:
  assume !(($i71 == 1));
  assume {:verifier.code 0} true;
  goto $bb63;
$bb60:
  assume ($i75 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7206, 30} true;
  assume {:verifier.code 0} true;
  $M.2 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7207, 19} true;
  assume {:verifier.code 0} true;
  $i76 := $M.3;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7207, 27} true;
  assume {:verifier.code 0} true;
  $i77 := $add.i32($i76, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7207, 17} true;
  assume {:verifier.code 0} true;
  $M.3 := $i77;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i77);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7208, 7} true;
  assume {:verifier.code 0} true;
  goto $bb62;
$bb61:
  assume !(($i75 == 1));
  assume {:verifier.code 0} true;
  goto $bb62;
$bb62:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7210, 5} true;
  assume {:verifier.code 0} true;
  goto $bb63;
$bb63:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7212, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb64:
  assume ($i79 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7215, 27} true;
  assume {:verifier.code 0} true;
  $p80 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7215, 7} true;
  assume {:verifier.code 0} true;
  call ppp_asynctty_wakeup($p80);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7216, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7217, 5} true;
  assume {:verifier.code 0} true;
  goto $bb66;
$bb65:
  assume !(($i79 == 1));
  assume {:verifier.code 0} true;
  goto $bb66;
$bb66:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7219, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb67:
  assume ($i82 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7222, 28} true;
  assume {:verifier.code 0} true;
  $p83 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7222, 7} true;
  assume {:verifier.code 0} true;
  call ppp_asynctty_receive($p83, $p6, $p11, $i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7224, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7225, 5} true;
  assume {:verifier.code 0} true;
  goto $bb69;
$bb68:
  assume !(($i82 == 1));
  assume {:verifier.code 0} true;
  goto $bb69;
$bb69:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7227, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb70:
  assume ($i85 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7230, 26} true;
  assume {:verifier.code 0} true;
  $p86 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7230, 7} true;
  assume {:verifier.code 0} true;
  call $i87 := ppp_asynctty_ioctl($p86, $p18, $i10, $i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7231, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7232, 5} true;
  assume {:verifier.code 0} true;
  goto $bb72;
$bb71:
  assume !(($i85 == 1));
  assume {:verifier.code 0} true;
  goto $bb72;
$bb72:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7234, 9} true;
  assume {:verifier.code 0} true;
  $i88 := $M.2;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7234, 30} true;
  assume {:verifier.code 0} true;
  $i89 := $eq.i32($i88, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7234, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i89} true;
  goto $bb73, $bb74;
$bb73:
  assume ($i89 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7235, 26} true;
  assume {:verifier.code 0} true;
  $p90 := $M.1;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7235, 7} true;
  assume {:verifier.code 0} true;
  call $i91 := ppp_asynctty_ioctl($p90, $p18, $i10, $i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7236, 28} true;
  assume {:verifier.code 0} true;
  $M.2 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7237, 5} true;
  assume {:verifier.code 0} true;
  goto $bb75;
$bb74:
  assume !(($i89 == 1));
  assume {:verifier.code 0} true;
  goto $bb75;
$bb75:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7239, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb76:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7241, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7242, 5} true;
  assume {:verifier.code 0} true;
  goto $bb77;
$bb77:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7242, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb78:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7246, 3} true;
  assume {:verifier.code 0} true;
  goto $bb79;
$bb79:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7314, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb80:
  assume ($i93 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7249, 16} true;
  assume {:verifier.code 1} true;
  call $i94 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i94);
  call {:cexpr "tmp___18"} boogie_si_record_i32($i94);
  assume {:verifier.code 0} true;
  goto $bb82;
$bb81:
  assume !(($i93 == 1));
  assume {:verifier.code 0} true;
  goto $bb109;
$bb82:
  assume {:verifier.code 0} true;
  $i95 := $slt.i32($i94, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i95} true;
  goto $bb83, $bb84;
$bb83:
  assume ($i95 == 1);
  assume {:verifier.code 0} true;
  $i97 := $eq.i32($i94, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i97} true;
  goto $bb88, $bb89;
$bb84:
  assume !(($i95 == 1));
  assume {:verifier.code 0} true;
  $i96 := $eq.i32($i94, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i96} true;
  goto $bb85, $bb86;
$bb85:
  assume ($i96 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7260, 9} true;
  assume {:verifier.code 0} true;
  $i102 := $M.4;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7260, 30} true;
  assume {:verifier.code 0} true;
  $i103 := $eq.i32($i102, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7260, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb98, $bb99;
$bb86:
  assume {:verifier.code 0} true;
  assume !(($i96 == 1));
  goto $bb87;
$bb87:
  assume {:verifier.code 0} true;
  goto $bb107;
$bb88:
  assume ($i97 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7252, 9} true;
  assume {:verifier.code 0} true;
  $i98 := $M.4;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7252, 30} true;
  assume {:verifier.code 0} true;
  $i99 := $eq.i32($i98, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7252, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb90, $bb91;
$bb89:
  assume {:verifier.code 0} true;
  assume !(($i97 == 1));
  goto $bb87;
$bb90:
  assume ($i99 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7252, 38} true;
  assume {:verifier.code 0} true;
  $i100 := $M.3;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7252, 46} true;
  assume {:verifier.code 0} true;
  $i101 := $eq.i32($i100, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7252, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i101} true;
  goto $bb93, $bb94;
$bb91:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7252, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i99 == 1));
  goto $bb92;
$bb92:
  assume {:verifier.code 0} true;
  goto $bb96;
$bb93:
  assume ($i101 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7253, 7} true;
  assume {:verifier.code 0} true;
  call ppp_async_cleanup();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7254, 28} true;
  assume {:verifier.code 0} true;
  $M.4 := 2;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7255, 7} true;
  assume {:verifier.code 0} true;
  goto $bb95;
$bb94:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7252, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i101 == 1));
  goto $bb92;
$bb95:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7316, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7317, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
$bb96:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7258, 5} true;
  assume {:verifier.code 0} true;
  goto $bb97;
$bb97:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7282, 3} true;
  assume {:verifier.code 0} true;
  goto $bb109;
$bb98:
  assume ($i103 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7261, 22} true;
  assume {:verifier.code 0} true;
  call $i104 := ppp_async_init();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7261, 20} true;
  assume {:verifier.code 0} true;
  $M.7 := $i104;
  call {:cexpr "ldv_retval_1"} boogie_si_record_i32($i104);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7262, 11} true;
  assume {:verifier.code 0} true;
  $i105 := $M.7;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7262, 24} true;
  assume {:verifier.code 0} true;
  $i106 := $eq.i32($i105, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7262, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i106} true;
  goto $bb100, $bb101;
$bb99:
  assume !(($i103 == 1));
  assume {:verifier.code 0} true;
  goto $bb106;
$bb100:
  assume ($i106 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7263, 30} true;
  assume {:verifier.code 0} true;
  $M.4 := 3;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7264, 30} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7265, 9} true;
  assume {:verifier.code 0} true;
  call ldv_initialize_ppp_channel_ops_2();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7266, 30} true;
  assume {:verifier.code 0} true;
  $M.2 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7267, 9} true;
  assume {:verifier.code 0} true;
  call ldv_target_type_1();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7268, 7} true;
  assume {:verifier.code 0} true;
  goto $bb102;
$bb101:
  assume !(($i106 == 1));
  assume {:verifier.code 0} true;
  goto $bb102;
$bb102:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7270, 11} true;
  assume {:verifier.code 0} true;
  $i107 := $M.7;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7270, 24} true;
  assume {:verifier.code 0} true;
  $i108 := $ne.i32($i107, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7270, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i108} true;
  goto $bb103, $bb104;
$bb103:
  assume ($i108 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7271, 30} true;
  assume {:verifier.code 0} true;
  $M.4 := 2;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7272, 9} true;
  assume {:verifier.code 0} true;
  goto $bb95;
$bb104:
  assume !(($i108 == 1));
  assume {:verifier.code 0} true;
  goto $bb105;
$bb105:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7275, 5} true;
  assume {:verifier.code 0} true;
  goto $bb106;
$bb106:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7277, 5} true;
  assume {:verifier.code 0} true;
  goto $bb97;
$bb107:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7279, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7280, 5} true;
  assume {:verifier.code 0} true;
  goto $bb108;
$bb108:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7280, 5} true;
  assume {:verifier.code 0} true;
  goto $bb97;
$bb109:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7284, 3} true;
  assume {:verifier.code 0} true;
  goto $bb79;
$bb110:
  assume ($i110 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7287, 16} true;
  assume {:verifier.code 1} true;
  call $i111 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i111);
  call {:cexpr "tmp___19"} boogie_si_record_i32($i111);
  assume {:verifier.code 0} true;
  goto $bb112;
$bb111:
  assume !(($i110 == 1));
  assume {:verifier.code 0} true;
  goto $bb129;
$bb112:
  assume {:verifier.code 0} true;
  $i112 := $slt.i32($i111, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i112} true;
  goto $bb113, $bb114;
$bb113:
  assume ($i112 == 1);
  assume {:verifier.code 0} true;
  $i114 := $eq.i32($i111, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i114} true;
  goto $bb118, $bb119;
$bb114:
  assume !(($i112 == 1));
  assume {:verifier.code 0} true;
  $i113 := $eq.i32($i111, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i113} true;
  goto $bb115, $bb116;
$bb115:
  assume ($i113 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7297, 9} true;
  assume {:verifier.code 0} true;
  $i119 := $M.5;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7297, 30} true;
  assume {:verifier.code 0} true;
  $i120 := $eq.i32($i119, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7297, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i120} true;
  goto $bb124, $bb125;
$bb116:
  assume {:verifier.code 0} true;
  assume !(($i113 == 1));
  goto $bb117;
$bb117:
  assume {:verifier.code 0} true;
  goto $bb127;
$bb118:
  assume ($i114 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7290, 9} true;
  assume {:verifier.code 0} true;
  $i115 := $M.5;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7290, 30} true;
  assume {:verifier.code 0} true;
  $i116 := $eq.i32($i115, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7290, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i116} true;
  goto $bb120, $bb121;
$bb119:
  assume {:verifier.code 0} true;
  assume !(($i114 == 1));
  goto $bb117;
$bb120:
  assume ($i116 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7291, 22} true;
  assume {:verifier.code 0} true;
  $p117 := $M.0;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7291, 7} true;
  assume {:verifier.code 0} true;
  call $i118 := ppp_async_send($p117, $p21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7292, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7293, 5} true;
  assume {:verifier.code 0} true;
  goto $bb122;
$bb121:
  assume !(($i116 == 1));
  assume {:verifier.code 0} true;
  goto $bb122;
$bb122:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7295, 5} true;
  assume {:verifier.code 0} true;
  goto $bb123;
$bb123:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7307, 3} true;
  assume {:verifier.code 0} true;
  goto $bb129;
$bb124:
  assume ($i120 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7298, 23} true;
  assume {:verifier.code 0} true;
  $p121 := $M.0;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7298, 7} true;
  assume {:verifier.code 0} true;
  call $i122 := ppp_async_ioctl($p121, $i22, $i19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7299, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7300, 5} true;
  assume {:verifier.code 0} true;
  goto $bb126;
$bb125:
  assume !(($i120 == 1));
  assume {:verifier.code 0} true;
  goto $bb126;
$bb126:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7302, 5} true;
  assume {:verifier.code 0} true;
  goto $bb123;
$bb127:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7304, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7305, 5} true;
  assume {:verifier.code 0} true;
  goto $bb128;
$bb128:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7305, 5} true;
  assume {:verifier.code 0} true;
  goto $bb123;
$bb129:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7309, 3} true;
  assume {:verifier.code 0} true;
  goto $bb79;
$bb130:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7311, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7312, 3} true;
  assume {:verifier.code 0} true;
  goto $bb131;
$bb131:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7312, 3} true;
  assume {:verifier.code 0} true;
  goto $bb79;
}
const __VERIFIER_nondet_size_t: ref;
axiom (__VERIFIER_nondet_size_t == $sub.ref(0, 42778));
procedure  __VERIFIER_nondet_size_t()
  returns ($r: i64);
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 43810));
procedure  ldv_initialize()
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7561, 16} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7561, 16} true;
  assume {:verifier.code 0} true;
  $p0 := $M.8;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7561, 3} true;
  assume {:verifier.code 0} true;
  call ldv_set_init($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7562, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ppp_asynctty_write: ref;
axiom (ppp_asynctty_write == $sub.ref(0, 44842));
procedure  ppp_asynctty_write($p0: ref, $p1: ref, $p2: ref, $i3: i64)
  returns ($r: i64)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5923, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ppp_asynctty_write:arg:count"} boogie_si_record_i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5923, 3} true;
  assume {:verifier.code 0} true;
  $r := $sub.i64(0, 11);
  $exn := false;
  return;
}
const ppp_asynctty_read: ref;
axiom (ppp_asynctty_read == $sub.ref(0, 45874));
procedure  ppp_asynctty_read($p0: ref, $p1: ref, $p2: ref, $i3: i64)
  returns ($r: i64)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5916, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ppp_asynctty_read:arg:count"} boogie_si_record_i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5916, 3} true;
  assume {:verifier.code 0} true;
  $r := $sub.i64(0, 11);
  $exn := false;
  return;
}
const ppp_asynctty_poll: ref;
axiom (ppp_asynctty_poll == $sub.ref(0, 46906));
procedure  ppp_asynctty_poll($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6063, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6063, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const ppp_asynctty_hangup: ref;
axiom (ppp_asynctty_hangup == $sub.ref(0, 47938));
procedure  ppp_asynctty_hangup($p0: ref)
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5908, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5908, 3} true;
  assume {:verifier.code 0} true;
  call ppp_asynctty_close($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5909, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const ppp_asynctty_close: ref;
axiom (ppp_asynctty_close == $sub.ref(0, 48970));
procedure  ppp_asynctty_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5883, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5883, 3} true;
  assume {:verifier.code 0} true;
  call _raw_write_lock_irq(disc_data_lock);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5884, 32} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1608, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5884, 32} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.9, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5884, 8} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5885, 8} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1608, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5885, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p4, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5886, 3} true;
  assume {:verifier.code 0} true;
  call _raw_write_unlock_irq(disc_data_lock);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5887, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5887, 26} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5887, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5888, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5904, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5891, 35} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4656)), $mul.ref(416, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5891, 9} true;
  assume {:verifier.code 0} true;
  call $i8 := atomic_dec_and_test($p7);
  call {:cexpr "tmp"} boogie_si_record_i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5892, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i8, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5892, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i9 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5893, 16} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4656)), $mul.ref(424, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5893, 5} true;
  assume {:verifier.code 0} true;
  call down($p10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5894, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5896, 22} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p3, $mul.ref(0, 4656)), $mul.ref(376, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5896, 3} true;
  assume {:verifier.code 0} true;
  call tasklet_kill($p11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5897, 32} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p3, $mul.ref(0, 4656)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5897, 3} true;
  assume {:verifier.code 0} true;
  call ppp_unregister_channel($p12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5898, 24} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p3, $mul.ref(0, 4656)), $mul.ref(264, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5898, 24} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.9, $p13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5898, 3} true;
  assume {:verifier.code 0} true;
  call ldv_kfree_skb_12($p14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5899, 25} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p3, $mul.ref(0, 4656)), $mul.ref(280, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5899, 3} true;
  assume {:verifier.code 0} true;
  call skb_queue_purge($p15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5900, 24} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p3, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5900, 24} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.9, $p16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5900, 3} true;
  assume {:verifier.code 0} true;
  call ldv_kfree_skb_13($p17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5901, 9} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5901, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5902, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const ppp_asynctty_open: ref;
axiom (ppp_asynctty_open == $sub.ref(0, 50002));
procedure  ppp_asynctty_open($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i14: i32;
  var $i9: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5827, 29} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5827, 29} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5827, 29} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.9, $p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5827, 35} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5827, 35} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.9, $p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5827, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5827, 41} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i64($i7, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5827, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5830, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $sub.i32(0, 95);
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5877, 1} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5834, 9} true;
  assume {:verifier.code 0} true;
  call $p10 := kzalloc(4656, 208);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5835, 8} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5836, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $p2i.ref.i64($p11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5836, 26} true;
  assume {:verifier.code 0} true;
  $i13 := $eq.i64($i12, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5836, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i13 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5837, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 12);
  goto $bb7;
$bb6:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5875, 3} true;
  assume {:verifier.code 0} true;
  $i9 := $i14;
  goto $bb3;
$bb8:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5840, 7} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5840, 11} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p15, $p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5841, 7} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(20, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5841, 11} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p16, 1500);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5842, 24} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5842, 3} true;
  assume {:verifier.code 0} true;
  call $p18 := spinlock_check($p17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5843, 30} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(24, 1));
  $p20 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(24, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5843, 49} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5843, 3} true;
  assume {:verifier.code 0} true;
  call __raw_spin_lock_init($p21, .str.1, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5845, 24} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(96, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5845, 3} true;
  assume {:verifier.code 0} true;
  call $p23 := spinlock_check($p22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5846, 30} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(96, 1));
  $p25 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(96, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5846, 49} true;
  assume {:verifier.code 0} true;
  $p26 := $bitcast.ref.ref($p25);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5846, 3} true;
  assume {:verifier.code 0} true;
  call __raw_spin_lock_init($p26, .str.2, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5848, 7} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(176, 1));
  $p28 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(176, 1)), $mul.ref(0, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5848, 16} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p28, $sub.i32(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5849, 7} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(176, 1));
  $p30 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(176, 1)), $mul.ref(3, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5849, 16} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p30, 1610612736);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5850, 7} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(208, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5850, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p31, $sub.i32(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5851, 38} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(560, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5851, 14} true;
  assume {:verifier.code 0} true;
  $p33 := $bitcast.ref.ref($p32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5851, 7} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(240, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5851, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p34, $p32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5852, 38} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(560, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5852, 14} true;
  assume {:verifier.code 0} true;
  $p36 := $bitcast.ref.ref($p35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5852, 7} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(248, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5852, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p37, $p35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5853, 7} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(272, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5853, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p38, $sub.i32(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5854, 29} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(280, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5854, 3} true;
  assume {:verifier.code 0} true;
  call skb_queue_head_init($p39);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5855, 22} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(376, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5855, 48} true;
  assume {:verifier.code 0} true;
  $i41 := $p2i.ref.i64($p11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5855, 3} true;
  assume {:verifier.code 0} true;
  call tasklet_init($p40, ppp_async_process, $i41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5856, 20} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(416, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5856, 3} true;
  assume {:verifier.code 0} true;
  call atomic_set($p42, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5857, 19} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(424, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5857, 3} true;
  assume {:verifier.code 0} true;
  call sema_init($p43, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5858, 22} true;
  assume {:verifier.code 0} true;
  $p44 := $bitcast.ref.ref($p11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5858, 7} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(520, 1));
  $p46 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(520, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5858, 20} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p46, $p10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5859, 7} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(520, 1));
  $p48 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(520, 1)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5859, 16} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p48, async_ops);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5860, 7} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(520, 1));
  $p50 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(520, 1)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5860, 16} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p50, 1500);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5861, 13} true;
  assume {:verifier.code 0} true;
  call $i51 := tty_get_baud_rate($p0);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i51);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5863, 7} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(520, 1));
  $p53 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(520, 1)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5863, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p53, $i51);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5864, 36} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p11, $mul.ref(0, 4656)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5864, 9} true;
  assume {:verifier.code 0} true;
  call $i55 := ppp_register_channel($p54);
  call {:cexpr "err"} boogie_si_record_i32($i55);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5865, 11} true;
  assume {:verifier.code 0} true;
  $i56 := $ne.i32($i55, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5865, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i56 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5866, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume !(($i56 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5873, 9} true;
  assume {:verifier.code 0} true;
  $p60 := $bitcast.ref.ref($p11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5873, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p60);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5873, 3} true;
  assume {:verifier.code 0} true;
  $i14 := $i55;
  goto $bb7;
$bb12:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5869, 20} true;
  assume {:verifier.code 0} true;
  $p57 := $bitcast.ref.ref($p11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5869, 8} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1608, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5869, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p58, $p10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5870, 8} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1320, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5870, 21} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p59, 65536);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5871, 3} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb3;
}
const ppp_asynctty_wakeup: ref;
axiom (ppp_asynctty_wakeup == $sub.ref(0, 51034));
procedure  ppp_asynctty_wakeup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6100, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6100, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := ap_get($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6102, 51} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1296, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6102, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(5, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6103, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6103, 26} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i64($i3, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6103, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6104, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6112, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6107, 48} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6107, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(0, $p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6108, 26} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4656)), $mul.ref(376, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6108, 3} true;
  assume {:verifier.code 0} true;
  call tasklet_schedule($p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6109, 3} true;
  assume {:verifier.code 0} true;
  call ap_put($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6110, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const ppp_asynctty_receive: ref;
axiom (ppp_asynctty_receive == $sub.ref(0, 52066));
procedure  ppp_asynctty_receive($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6075, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ppp_asynctty_receive:arg:count"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6075, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := ap_get($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6077, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6077, 26} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6077, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6078, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6094, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6081, 34} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4656)), $mul.ref(96, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6081, 13} true;
  assume {:verifier.code 0} true;
  call $p8 := spinlock_check($p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6082, 11} true;
  assume {:verifier.code 0} true;
  call $i9 := _raw_spin_lock_irqsave($p8);
  call {:cexpr "flags"} boogie_si_record_i64($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6083, 3} true;
  assume {:verifier.code 0} true;
  call ppp_async_input($p4, $p1, $p2, $i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6084, 32} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p4, $mul.ref(0, 4656)), $mul.ref(96, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6084, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_irqrestore($p10, $i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6085, 65} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p4, $mul.ref(0, 4656)), $mul.ref(280, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6085, 13} true;
  assume {:verifier.code 0} true;
  call $i12 := skb_queue_empty($p11);
  call {:cexpr "tmp___1"} boogie_si_record_i32($i12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6086, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $eq.i32($i12, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6086, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i13 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6087, 28} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p4, $mul.ref(0, 4656)), $mul.ref(376, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6087, 5} true;
  assume {:verifier.code 0} true;
  call tasklet_schedule($p14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6088, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6090, 3} true;
  assume {:verifier.code 0} true;
  call ap_put($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6091, 3} true;
  assume {:verifier.code 0} true;
  call tty_unthrottle($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6092, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const ppp_asynctty_ioctl: ref;
axiom (ppp_asynctty_ioctl == $sub.ref(0, 53098));
procedure  ppp_asynctty_ioctl($p0: ref, $p1: ref, $i2: i32, $i3: i64)
  returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i20: i32;
  var $i8: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5941, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ppp_asynctty_ioctl:arg:cmd"} boogie_si_record_i32($i2);
  call {:cexpr "ppp_asynctty_ioctl:arg:arg"} boogie_si_record_i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5941, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := ap_get($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5943, 7} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5944, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5944, 26} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i64($i6, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5944, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5945, 5} true;
  assume {:verifier.code 0} true;
  $i8 := $sub.i32(0, 6);
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6058, 1} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
$bb4:
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  $i9 := $slt.i32($i2, 21515);
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i9 == 1);
  assume {:verifier.code 0} true;
  $i13 := $slt.i32($i2, $sub.i32(0, 2147191722));
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb15, $bb16;
$bb7:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  $i10 := $slt.i32($i2, 21531);
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i10 == 1);
  assume {:verifier.code 0} true;
  $i12 := $eq.i32($i2, 21515);
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb13, $bb14;
$bb9:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i2, 21531);
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i11 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6020, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  call $i28 := devirtbounce(0, 0, $p5);
  call {:cexpr "__ret_pu___1"} boogie_si_record_i32($i28);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6034, 3} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb11:
  assume {:verifier.code 0} true;
  assume !(($i11 == 1));
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb40;
$bb13:
  assume ($i12 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6012, 11} true;
  assume {:verifier.code 0} true;
  $i25 := $eq.i64($i3, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6012, 18} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb30, $bb32;
$bb14:
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb12;
$bb15:
  assume ($i13 == 1);
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i2, $sub.i32(0, 2147191753));
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb19, $bb20;
$bb16:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i2, $sub.i32(0, 2147191722));
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i14 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5980, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5981, 40} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p4, $mul.ref(0, 4656)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5981, 18} true;
  assume {:verifier.code 0} true;
  call $i22 := ppp_unit_number($p21);
  call {:cexpr "__pu_val___0"} boogie_si_record_i32($i22);
  call $i23 := devirtbounce(0, $i22, $p5);
  call {:cexpr "__ret_pu___0"} boogie_si_record_i32($i23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5994, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb18:
  assume {:verifier.code 0} true;
  assume !(($i14 == 1));
  goto $bb12;
$bb19:
  assume ($i15 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5952, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5953, 38} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p4, $mul.ref(0, 4656)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5953, 14} true;
  assume {:verifier.code 0} true;
  call $i17 := ppp_channel_index($p16);
  call {:cexpr "__pu_val"} boogie_si_record_i32($i17);
  call $i18 := devirtbounce(0, $i17, $p5);
  call {:cexpr "__ret_pu"} boogie_si_record_i32($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5963, 3} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume {:verifier.code 0} true;
  assume !(($i15 == 1));
  goto $bb12;
$bb21:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5972, 16} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i32($i18, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5972, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i19 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5973, 5} true;
  assume {:verifier.code 0} true;
  $i20 := $sub.i32(0, 14);
  goto $bb24;
$bb23:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6055, 3} true;
  assume {:verifier.code 0} true;
  call ap_put($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6056, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $i20;
  goto $bb3;
$bb25:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5977, 3} true;
  assume {:verifier.code 0} true;
  $i20 := 0;
  goto $bb24;
$bb26:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6005, 20} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i32($i23, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6005, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb27, $bb28;
$bb27:
  assume ($i24 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6006, 5} true;
  assume {:verifier.code 0} true;
  $i20 := $sub.i32(0, 14);
  goto $bb24;
$bb28:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6010, 3} true;
  assume {:verifier.code 0} true;
  $i20 := 0;
  goto $bb24;
$bb30:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6012, 18} true;
  assume {:verifier.code 0} true;
  assume ($i25 == 1);
  goto $bb31;
$bb31:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6013, 5} true;
  assume {:verifier.code 0} true;
  call ppp_async_flush_output($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6014, 3} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb32:
  assume !(($i25 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6012, 25} true;
  assume {:verifier.code 0} true;
  $i26 := $eq.i64($i3, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6012, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb33, $bb34;
$bb33:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6012, 7} true;
  assume {:verifier.code 0} true;
  assume ($i26 == 1);
  goto $bb31;
$bb34:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6016, 9} true;
  assume {:verifier.code 0} true;
  call $i27 := n_tty_ioctl_helper($p0, $p1, $i2, $i3);
  call {:cexpr "err"} boogie_si_record_i32($i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6017, 3} true;
  assume {:verifier.code 0} true;
  $i20 := $i27;
  goto $bb24;
$bb36:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6045, 20} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i32($i28, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6045, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i29 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6046, 5} true;
  assume {:verifier.code 0} true;
  $i20 := $sub.i32(0, 14);
  goto $bb24;
$bb38:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6050, 3} true;
  assume {:verifier.code 0} true;
  $i20 := 0;
  goto $bb24;
$bb40:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6052, 9} true;
  assume {:verifier.code 0} true;
  call $i30 := tty_mode_ioctl($p0, $p1, $i2, $i3);
  call {:cexpr "err"} boogie_si_record_i32($i30);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6053, 3} true;
  assume {:verifier.code 0} true;
  goto $bb41;
$bb41:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6053, 3} true;
  assume {:verifier.code 0} true;
  $i20 := $i30;
  goto $bb24;
}
const ldv_stop: ref;
axiom (ldv_stop == $sub.ref(0, 54130));
procedure  ldv_stop()
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5664, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5664, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5666, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5668, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ppp_async_cleanup: ref;
axiom (ppp_async_cleanup == $sub.ref(0, 55162));
procedure  ppp_async_cleanup()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7038, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7038, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := tty_unregister_ldisc(3);
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7039, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7039, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7040, 5} true;
  assume {:verifier.code 0} true;
  call $i2 := printk.ref(.str.7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7041, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7043, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ppp_async_init: ref;
axiom (ppp_async_init == $sub.ref(0, 56194));
procedure  ppp_async_init()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6121, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6121, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := tty_register_ldisc(3, ppp_ldisc);
  call {:cexpr "err"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6122, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6122, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6123, 5} true;
  assume {:verifier.code 0} true;
  call $i2 := printk.ref.i32(.str.8, $i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6124, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6126, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const ppp_async_send: ref;
axiom (ppp_async_send == $sub.ref(0, 57226));
procedure  ppp_async_send($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i9: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6571, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6571, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6571, 33} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.9, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6571, 8} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6572, 3} true;
  assume {:verifier.code 0} true;
  call $i5 := ppp_async_push($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6573, 63} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6573, 9} true;
  assume {:verifier.code 0} true;
  call $i7 := test_and_set_bit(1, $p6);
  call {:cexpr "tmp"} boogie_si_record_i32($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6574, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6574, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6575, 5} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6583, 1} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6578, 7} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p4, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6578, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p10, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6579, 7} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p4, $mul.ref(0, 4656)), $mul.ref(232, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6579, 16} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p11, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6580, 3} true;
  assume {:verifier.code 0} true;
  call $i12 := ppp_async_push($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6581, 3} true;
  assume {:verifier.code 0} true;
  $i9 := 1;
  goto $bb3;
}
const ppp_async_ioctl: ref;
axiom (ppp_async_ioctl == $sub.ref(0, 58258));
procedure  ppp_async_ioctl($p0: ref, $i1: i32, $i2: i64)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i112: i1;
  var $i113: i32;
  var $p114: ref;
  var $i35: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6158, 33} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
  call {:cexpr "ppp_async_ioctl:arg:cmd"} boogie_si_record_i32($i1);
  call {:cexpr "ppp_async_ioctl:arg:arg"} boogie_si_record_i64($i2);
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6158, 33} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6158, 33} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.9, $p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6158, 8} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6159, 10} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.i64.ref($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6160, 7} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i9 := $slt.i32($i1, 1074033746);
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i9 == 1);
  assume {:verifier.code 0} true;
  $i19 := $slt.i32($i1, $sub.i32(0, 2147191720));
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb23, $bb24;
$bb3:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  $i10 := $slt.i32($i1, 1074033751);
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i10 == 1);
  assume {:verifier.code 0} true;
  $i16 := $slt.i32($i1, 1074033748);
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb17, $bb18;
$bb5:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  $i11 := $slt.i32($i1, 1074033753);
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i11 == 1);
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i1, 1074033751);
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb15, $bb16;
$bb7:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  $i12 := $slt.i32($i1, 1075868751);
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i12 == 1);
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i1, 1074033753);
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb13, $bb14;
$bb9:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  $i13 := $eq.i32($i1, 1075868751);
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i13 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6301, 28} true;
  assume {:verifier.code 0} true;
  $p83 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6301, 13} true;
  assume {:verifier.code 0} true;
  call $i84 := copy_from_user($p83, $p7, 32);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i84);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6302, 15} true;
  assume {:verifier.code 0} true;
  $i85 := $ne.i64($i84, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6302, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i85} true;
  goto $bb66, $bb67;
$bb11:
  assume {:verifier.code 0} true;
  assume !(($i13 == 1));
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb82;
$bb13:
  assume ($i14 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6192, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  call $p36 := devirtbounce.1(0, $p8, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6193, 3} true;
  assume {:verifier.code 0} true;
  $p37 := $extractvalue.ref($p36, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6193, 3} true;
  assume {:verifier.code 0} true;
  $i38 := $extractvalue.i64($p36, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6193, 3} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p37);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6193, 3} true;
  assume {:verifier.code 0} true;
  $i40 := $trunc.i64.i32($i39);
  call {:cexpr "__ret_gu"} boogie_si_record_i32($i40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6195, 9} true;
  assume {:verifier.code 0} true;
  $i41 := $trunc.i64.i32($i38);
  call {:cexpr "val"} boogie_si_record_i32($i41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6196, 16} true;
  assume {:verifier.code 0} true;
  $i42 := $ne.i32($i40, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6196, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb46, $bb47;
$bb14:
  assume {:verifier.code 0} true;
  assume !(($i14 == 1));
  goto $bb12;
$bb15:
  assume ($i15 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6239, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6240, 91} true;
  assume {:verifier.code 0} true;
  $p55 := $bitcast.ref.ref($p7);
  call $p56 := devirtbounce.1(0, $p55, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6240, 3} true;
  assume {:verifier.code 0} true;
  $p57 := $extractvalue.ref($p56, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6240, 3} true;
  assume {:verifier.code 0} true;
  $i58 := $extractvalue.i64($p56, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6240, 3} true;
  assume {:verifier.code 0} true;
  $i59 := $p2i.ref.i64($p57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6240, 3} true;
  assume {:verifier.code 0} true;
  $i60 := $trunc.i64.i32($i59);
  call {:cexpr "__ret_gu___0"} boogie_si_record_i32($i60);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6242, 18} true;
  assume {:verifier.code 0} true;
  $i61 := $trunc.i64.i32($i58);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6242, 7} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(176, 1));
  $p63 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(176, 1)), $mul.ref(0, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6242, 16} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p63, $i61);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6243, 20} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.i32($i60, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6243, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb53, $bb54;
$bb16:
  assume {:verifier.code 0} true;
  assume !(($i15 == 1));
  goto $bb12;
$bb17:
  assume ($i16 == 1);
  assume {:verifier.code 0} true;
  $i18 := $eq.i32($i1, 1074033746);
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb21, $bb22;
$bb18:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i1, 1074033748);
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i17 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6282, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6283, 91} true;
  assume {:verifier.code 0} true;
  $p70 := $bitcast.ref.ref($p7);
  call $p71 := devirtbounce.1(0, $p70, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6283, 3} true;
  assume {:verifier.code 0} true;
  $p72 := $extractvalue.ref($p71, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6283, 3} true;
  assume {:verifier.code 0} true;
  $i73 := $extractvalue.i64($p71, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6283, 3} true;
  assume {:verifier.code 0} true;
  $i74 := $p2i.ref.i64($p72);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6283, 3} true;
  assume {:verifier.code 0} true;
  $i75 := $trunc.i64.i32($i74);
  call {:cexpr "__ret_gu___1"} boogie_si_record_i32($i75);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6285, 15} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.i64.i32($i73);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6285, 7} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(208, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6285, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p77, $i76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6286, 20} true;
  assume {:verifier.code 0} true;
  $i78 := $ne.i32($i75, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6286, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i78} true;
  goto $bb60, $bb61;
$bb20:
  assume {:verifier.code 0} true;
  assume !(($i17 == 1));
  goto $bb12;
$bb21:
  assume ($i18 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6349, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  call $p105 := devirtbounce.1(0, $p8, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6350, 3} true;
  assume {:verifier.code 0} true;
  $p106 := $extractvalue.ref($p105, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6350, 3} true;
  assume {:verifier.code 0} true;
  $i107 := $extractvalue.i64($p105, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6350, 3} true;
  assume {:verifier.code 0} true;
  $i108 := $p2i.ref.i64($p106);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6350, 3} true;
  assume {:verifier.code 0} true;
  $i109 := $trunc.i64.i32($i108);
  call {:cexpr "__ret_gu___2"} boogie_si_record_i32($i109);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6352, 9} true;
  assume {:verifier.code 0} true;
  $i110 := $trunc.i64.i32($i107);
  call {:cexpr "val"} boogie_si_record_i32($i110);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6353, 20} true;
  assume {:verifier.code 0} true;
  $i111 := $ne.i32($i109, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6353, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i111} true;
  goto $bb76, $bb77;
$bb22:
  assume {:verifier.code 0} true;
  assume !(($i18 == 1));
  goto $bb12;
$bb23:
  assume ($i19 == 1);
  assume {:verifier.code 0} true;
  $i25 := $slt.i32($i1, $sub.i32(0, 2147191723));
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb35, $bb36;
$bb24:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  $i20 := $slt.i32($i1, $sub.i32(0, 2147191718));
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb25, $bb26;
$bb25:
  assume ($i20 == 1);
  assume {:verifier.code 0} true;
  $i24 := $eq.i32($i1, $sub.i32(0, 2147191720));
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb33, $bb34;
$bb26:
  assume !(($i20 == 1));
  assume {:verifier.code 0} true;
  $i21 := $slt.i32($i1, $sub.i32(0, 2145356720));
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb27, $bb28;
$bb27:
  assume ($i21 == 1);
  assume {:verifier.code 0} true;
  $i23 := $eq.i32($i1, $sub.i32(0, 2147191718));
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb31, $bb32;
$bb28:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  $i22 := $eq.i32($i1, $sub.i32(0, 2145356720));
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i22 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6293, 49} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(176, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6293, 28} true;
  assume {:verifier.code 0} true;
  $p80 := $bitcast.ref.ref($p79);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6293, 9} true;
  assume {:verifier.code 0} true;
  call $i81 := copy_to_user($p7, $p80, 32);
  call {:cexpr "tmp"} boogie_si_record_i64($i81);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6294, 11} true;
  assume {:verifier.code 0} true;
  $i82 := $ne.i64($i81, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6294, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb63, $bb64;
$bb30:
  assume {:verifier.code 0} true;
  assume !(($i22 == 1));
  goto $bb12;
$bb31:
  assume ($i23 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6164, 20} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6164, 20} true;
  assume {:verifier.code 0} true;
  $i29 := $load.i32($M.9, $p28);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6164, 32} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6164, 32} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i32($M.9, $p30);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6164, 26} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6164:26: warning: over-approximating bitwise operation or;
  $i32 := $or.i32($i29, $i31);
  call {:cexpr "val"} boogie_si_record_i32($i32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6165, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  call $i33 := devirtbounce(0, $i32, $p8);
  call {:cexpr "__ret_pu"} boogie_si_record_i32($i33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6176, 3} true;
  assume {:verifier.code 0} true;
  goto $bb41;
$bb32:
  assume {:verifier.code 0} true;
  assume !(($i23 == 1));
  goto $bb12;
$bb33:
  assume ($i24 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6207, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6208, 22} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(176, 1));
  $p50 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(176, 1)), $mul.ref(0, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6208, 18} true;
  assume {:verifier.code 0} true;
  $i51 := $load.i32($M.9, $p50);
  call {:cexpr "__pu_val___0"} boogie_si_record_i32($i51);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6220, 29} true;
  assume {:verifier.code 0} true;
  $p52 := $bitcast.ref.ref($p7);
  call $i53 := devirtbounce(0, $i51, $p52);
  call {:cexpr "__ret_pu___0"} boogie_si_record_i32($i53);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6221, 3} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb34:
  assume {:verifier.code 0} true;
  assume !(($i24 == 1));
  goto $bb12;
$bb35:
  assume ($i25 == 1);
  assume {:verifier.code 0} true;
  $i27 := $eq.i32($i1, $sub.i32(0, 2147191725));
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb39, $bb40;
$bb36:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i1, $sub.i32(0, 2147191723));
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i26 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6250, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6251, 22} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(208, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6251, 22} true;
  assume {:verifier.code 0} true;
  $i66 := $load.i32($M.9, $p65);
  call {:cexpr "__pu_val___1"} boogie_si_record_i32($i66);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6263, 29} true;
  assume {:verifier.code 0} true;
  $p67 := $bitcast.ref.ref($p7);
  call $i68 := devirtbounce(0, $i66, $p67);
  call {:cexpr "__ret_pu___1"} boogie_si_record_i32($i68);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6264, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb38:
  assume {:verifier.code 0} true;
  assume !(($i26 == 1));
  goto $bb12;
$bb39:
  assume ($i27 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6317, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6318, 22} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(20, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6318, 22} true;
  assume {:verifier.code 0} true;
  $i102 := $load.i32($M.9, $p101);
  call {:cexpr "__pu_val___2"} boogie_si_record_i32($i102);
  call $i103 := devirtbounce(0, $i102, $p8);
  call {:cexpr "__ret_pu___2"} boogie_si_record_i32($i103);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6331, 3} true;
  assume {:verifier.code 0} true;
  goto $bb72;
$bb40:
  assume {:verifier.code 0} true;
  assume !(($i27 == 1));
  goto $bb12;
$bb41:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6185, 16} true;
  assume {:verifier.code 0} true;
  $i34 := $ne.i32($i33, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6185, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb42, $bb43;
$bb42:
  assume ($i34 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6186, 5} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 14);
  goto $bb44;
$bb43:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6368, 3} true;
  assume {:verifier.code 0} true;
  $r := $i35;
  $exn := false;
  return;
$bb45:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6190, 3} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb44;
$bb46:
  assume ($i42 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6197, 5} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 14);
  goto $bb44;
$bb47:
  assume !(($i42 == 1));
  assume {:verifier.code 0} true;
  goto $bb48;
$bb48:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6200, 34} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6200:34: warning: over-approximating bitwise operation and;
  $i43 := $and.i32($i41, $sub.i32(0, 251658241));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6200, 7} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6200, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p44, $i43);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6201, 23} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(96, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6201, 3} true;
  assume {:verifier.code 0} true;
  call spin_lock_irq($p45);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6202, 34} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6202:34: warning: over-approximating bitwise operation and;
  $i46 := $and.i32($i41, 251658240);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6202, 7} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6202, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p47, $i46);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6203, 25} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(96, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6203, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_irq($p48);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6205, 3} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb44;
$bb49:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6232, 20} true;
  assume {:verifier.code 0} true;
  $i54 := $ne.i32($i53, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6232, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i54 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6233, 5} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 14);
  goto $bb44;
$bb51:
  assume !(($i54 == 1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6237, 3} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb44;
$bb53:
  assume ($i64 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6244, 5} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 14);
  goto $bb44;
$bb54:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6248, 3} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb44;
$bb56:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6275, 20} true;
  assume {:verifier.code 0} true;
  $i69 := $ne.i32($i68, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6275, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb57, $bb58;
$bb57:
  assume ($i69 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6276, 5} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 14);
  goto $bb44;
$bb58:
  assume !(($i69 == 1));
  assume {:verifier.code 0} true;
  goto $bb59;
$bb59:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6280, 3} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb44;
$bb60:
  assume ($i78 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6287, 5} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 14);
  goto $bb44;
$bb61:
  assume !(($i78 == 1));
  assume {:verifier.code 0} true;
  goto $bb62;
$bb62:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6291, 3} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb44;
$bb63:
  assume ($i82 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6295, 5} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 14);
  goto $bb44;
$bb64:
  assume !(($i82 == 1));
  assume {:verifier.code 0} true;
  goto $bb65;
$bb65:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6299, 3} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb44;
$bb66:
  assume ($i85 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6303, 5} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 14);
  goto $bb44;
$bb67:
  assume !(($i85 == 1));
  assume {:verifier.code 0} true;
  goto $bb68;
$bb68:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6306, 13} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(2, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6306, 13} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i32($M.10, $p86);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6306, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6306:21: warning: over-approximating bitwise operation and;
  $i88 := $and.i32($i87, $sub.i32(0, 1073741825));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6306, 3} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(2, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6306, 11} true;
  assume {:verifier.code 0} true;
  $M.10 := $store.i32($M.10, $p89, $i88);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6307, 13} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(3, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6307, 13} true;
  assume {:verifier.code 0} true;
  $i91 := $load.i32($M.10, $p90);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6307, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6307:21: warning: over-approximating bitwise operation or;
  $i92 := $or.i32($i91, 1610612736);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6307, 3} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(3, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6307, 11} true;
  assume {:verifier.code 0} true;
  $M.10 := $store.i32($M.10, $p93, $i92);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6309, 13} true;
  assume {:verifier.code 0} true;
  $i94 := $ugt.i64(32, 63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6309, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i94} true;
  goto $bb69, $bb70;
$bb69:
  assume ($i94 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6310, 35} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(176, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6310, 13} true;
  assume {:verifier.code 0} true;
  $p96 := $bitcast.ref.ref($p95);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6310, 13} true;
  assume {:verifier.code 0} true;
  $p97 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6310, 13} true;
  assume {:verifier.code 0} true;
  call $M.9 := $memcpy.i8($M.9, $M.10, $p96, $p97, 32, false);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6311, 3} true;
  assume {:verifier.code 0} true;
  goto $bb71;
$bb70:
  assume !(($i94 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6312, 35} true;
  assume {:verifier.code 0} true;
  $p98 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(176, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6312, 13} true;
  assume {:verifier.code 0} true;
  $p99 := $bitcast.ref.ref($p98);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6312, 13} true;
  assume {:verifier.code 0} true;
  $p100 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6312, 13} true;
  assume {:verifier.code 0} true;
  call $M.9 := $memcpy.i8($M.9, $M.10, $p99, $p100, 32, false);
  assume {:verifier.code 0} true;
  goto $bb71;
$bb71:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6315, 3} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb44;
$bb72:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6342, 20} true;
  assume {:verifier.code 0} true;
  $i104 := $ne.i32($i103, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6342, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i104} true;
  goto $bb73, $bb74;
$bb73:
  assume ($i104 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6343, 5} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 14);
  goto $bb44;
$bb74:
  assume !(($i104 == 1));
  assume {:verifier.code 0} true;
  goto $bb75;
$bb75:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6347, 3} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb44;
$bb76:
  assume ($i111 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6354, 5} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 14);
  goto $bb44;
$bb77:
  assume !(($i111 == 1));
  assume {:verifier.code 0} true;
  goto $bb78;
$bb78:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6357, 11} true;
  assume {:verifier.code 0} true;
  $i112 := $sle.i32($i110, 1499);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6357, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i112} true;
  goto $bb79, $bb80;
$bb79:
  assume ($i112 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6359, 3} true;
  assume {:verifier.code 0} true;
  $i113 := 1500;
  goto $bb81;
$bb80:
  assume !(($i112 == 1));
  assume {:verifier.code 0} true;
  $i113 := $i110;
  goto $bb81;
$bb81:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6361, 7} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($add.ref($p6, $mul.ref(0, 4656)), $mul.ref(20, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6361, 11} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p114, $i113);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6363, 3} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb44;
$bb82:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6366, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb83:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6366, 3} true;
  assume {:verifier.code 0} true;
  $i35 := $sub.i32(0, 25);
  goto $bb44;
}
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 59290));
procedure  ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7614, 30} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7614, 30} true;
  assume {:verifier.code 0} true;
  $p0 := $M.8;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7614, 13} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_set_is_empty($p0);
  call {:cexpr "tmp___7"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7615, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7615, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7616, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7617, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7619, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_set_is_empty: ref;
axiom (ldv_set_is_empty == $sub.ref(0, 60322));
procedure  ldv_set_is_empty($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7503, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7503, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7503, 22} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7503, 22} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7503, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const might_fault: ref;
axiom (might_fault == $sub.ref(0, 61354));
procedure  might_fault()
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7680, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7680, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const spin_lock_irq: ref;
axiom (spin_lock_irq == $sub.ref(0, 62386));
procedure  spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5414, 30} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5414, 30} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5414, 39} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5414, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_lock_irq($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5415, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const spin_unlock_irq: ref;
axiom (spin_unlock_irq == $sub.ref(0, 63418));
procedure  spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5428, 32} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5428, 32} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5428, 41} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5428, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_unlock_irq($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5429, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const copy_to_user: ref;
axiom (copy_to_user == $sub.ref(0, 64450));
procedure  copy_to_user($p0: ref, $p1: ref, $i2: i64)
  returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i13: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5497, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5497, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := __builtinx_object_size.ref.i32($p1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5497, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  call {:cexpr "tmp"} boogie_si_record_i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5498, 8} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i4);
  call {:cexpr "sz"} boogie_si_record_i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5499, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5500, 36} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.i32($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5500, 36} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5500, 33} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i32.i64($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5500, 13} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv__builtin_expect($i8, 1);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5501, 15} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i64($i9, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5501, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5502, 33} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5502, 9} true;
  assume {:verifier.code 0} true;
  call $i12 := _copy_to_user($p0, $p1, $i11);
  call {:cexpr "n"} boogie_si_record_i64($i12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5503, 3} true;
  assume {:verifier.code 0} true;
  $i13 := $i12;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5504, 35} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i32.i64($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5504, 54} true;
  assume {:verifier.code 0} true;
  $i15 := $uge.i64($i14, $i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5504, 54} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i1.i32($i15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5504, 35} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5504, 15} true;
  assume {:verifier.code 0} true;
  call $i18 := ldv__builtin_expect($i17, 1);
  call {:cexpr "tmp___1"} boogie_si_record_i64($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5505, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i64($i18, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5505, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5511, 3} true;
  assume {:verifier.code 0} true;
  $r := $i13;
  $exn := false;
  return;
$bb4:
  assume ($i19 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5506, 35} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5506, 11} true;
  assume {:verifier.code 0} true;
  call $i21 := _copy_to_user($p0, $p1, $i20);
  call {:cexpr "n"} boogie_si_record_i64($i21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5507, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $i21;
  goto $bb6;
$bb5:
  assume !(($i19 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5508, 7} true;
  assume {:verifier.code 0} true;
  call __copy_to_user_overflow();
  assume {:verifier.code 0} true;
  $i22 := $i2;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i13 := $i22;
  goto $bb3;
}
const copy_from_user: ref;
axiom (copy_from_user == $sub.ref(0, 65482));
procedure  copy_from_user($p0: ref, $p1: ref, $i2: i64)
  returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i13: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5473, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5473, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := __builtinx_object_size.ref.i32($p0, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5473, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  call {:cexpr "tmp"} boogie_si_record_i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5474, 8} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i4);
  call {:cexpr "sz"} boogie_si_record_i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5475, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5476, 36} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.i32($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5476, 36} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5476, 33} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i32.i64($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5476, 13} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv__builtin_expect($i8, 1);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5477, 15} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i64($i9, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5477, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5478, 35} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5478, 9} true;
  assume {:verifier.code 0} true;
  call $i12 := _copy_from_user($p0, $p1, $i11);
  call {:cexpr "n"} boogie_si_record_i64($i12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5479, 3} true;
  assume {:verifier.code 0} true;
  $i13 := $i12;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5480, 35} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i32.i64($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5480, 54} true;
  assume {:verifier.code 0} true;
  $i15 := $uge.i64($i14, $i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5480, 54} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i1.i32($i15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5480, 35} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5480, 15} true;
  assume {:verifier.code 0} true;
  call $i18 := ldv__builtin_expect($i17, 1);
  call {:cexpr "tmp___1"} boogie_si_record_i64($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5481, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i64($i18, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5481, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5487, 3} true;
  assume {:verifier.code 0} true;
  $r := $i13;
  $exn := false;
  return;
$bb4:
  assume ($i19 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5482, 37} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5482, 11} true;
  assume {:verifier.code 0} true;
  call $i21 := _copy_from_user($p0, $p1, $i20);
  call {:cexpr "n"} boogie_si_record_i64($i21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5483, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $i21;
  goto $bb6;
$bb5:
  assume !(($i19 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5484, 7} true;
  assume {:verifier.code 0} true;
  call __copy_from_user_overflow();
  assume {:verifier.code 0} true;
  $i22 := $i2;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i13 := $i22;
  goto $bb3;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 66514));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i1);
const __builtinx_object_size: ref;
axiom (__builtinx_object_size == $sub.ref(0, 67546));
procedure  __builtinx_object_size()
  returns ($r: i32);
procedure  __builtinx_object_size.ref.i32(p.0: ref, p.1: i32)
  returns ($r: i32);
const _copy_from_user: ref;
axiom (_copy_from_user == $sub.ref(0, 68578));
procedure  _copy_from_user($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i64)
{
  var $i3: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7636, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7636, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7636, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const __copy_from_user_overflow: ref;
axiom (__copy_from_user_overflow == $sub.ref(0, 69610));
procedure  __copy_from_user_overflow()
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7623, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7623, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _copy_to_user: ref;
axiom (_copy_to_user == $sub.ref(0, 70642));
procedure  _copy_to_user($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i64)
{
  var $i3: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7640, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7640, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7640, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const __copy_to_user_overflow: ref;
axiom (__copy_to_user_overflow == $sub.ref(0, 71674));
procedure  __copy_to_user_overflow()
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7626, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7626, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_unlock_irq: ref;
axiom (_raw_spin_unlock_irq == $sub.ref(0, 72706));
procedure  _raw_spin_unlock_irq($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7662, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7662, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_lock_irq: ref;
axiom (_raw_spin_lock_irq == $sub.ref(0, 73738));
procedure  _raw_spin_lock_irq($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7652, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7652, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ppp_async_push: ref;
axiom (ppp_async_push == $sub.ref(0, 74770));
procedure  ppp_async_push($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i1;
  var $i47: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i70: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i48: i32;
  var $i49: i32;
  var $i75: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i6: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6598, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6598, 13} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6598, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.9, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6600, 63} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6600, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := test_and_set_bit(2, $p3);
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6601, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6601, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6602, 5} true;
  assume {:verifier.code 0} true;
  $i6 := 0;
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6667, 1} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6605, 22} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6605, 3} true;
  assume {:verifier.code 0} true;
  call spin_lock_bh($p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6605, 3} true;
  assume {:verifier.code 0} true;
  $i8, $i9 := 0, 0;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6597, 8} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6607, 69} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6607, 13} true;
  assume {:verifier.code 0} true;
  call $i11 := test_and_clear_bit(0, $p10);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6608, 15} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i11, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6608, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i12 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6610, 3} true;
  assume {:verifier.code 0} true;
  $i13 := 0;
  goto $bb8;
$bb7:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  $i13 := $i9;
  goto $bb8;
$bb8:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 19} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i13, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 24} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i14 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 47} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(240, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 47} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.9, $p15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 27} true;
  assume {:verifier.code 0} true;
  $i17 := $p2i.ref.i64($p16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 74} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(248, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 74} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.9, $p18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 54} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 52} true;
  assume {:verifier.code 0} true;
  $i21 := $ult.i64($i17, $i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb12, $bb13;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 24} true;
  assume {:verifier.code 0} true;
  assume !(($i14 == 1));
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  goto $bb22;
$bb12:
  assume ($i21 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6613, 47} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(248, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6613, 47} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.9, $p22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6613, 36} true;
  assume {:verifier.code 0} true;
  $i24 := $p2i.ref.i64($p23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6613, 20} true;
  assume {:verifier.code 0} true;
  $i25 := $trunc.i64.i32($i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6613, 82} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(240, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6613, 82} true;
  assume {:verifier.code 0} true;
  $p27 := $load.ref($M.9, $p26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6613, 71} true;
  assume {:verifier.code 0} true;
  $i28 := $p2i.ref.i64($p27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6613, 55} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.i64.i32($i28);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6613, 53} true;
  assume {:verifier.code 0} true;
  $i30 := $sub.i32($i25, $i29);
  call {:cexpr "avail"} boogie_si_record_i32($i30);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6614, 51} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1296, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6614, 5} true;
  assume {:verifier.code 0} true;
  call set_bit(5, $p31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6615, 21} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6615, 21} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.9, $p32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6615, 27} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p33, $mul.ref(0, 272)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6615, 27} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.9, $p34);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6615, 67} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(240, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6615, 67} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.9, $p36);
  call $i38 := devirtbounce.2($p35, $p2, $p37, $i30);
  call {:cexpr "sent"} boogie_si_record_i32($i38);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6616, 14} true;
  assume {:verifier.code 0} true;
  $i39 := $slt.i32($i38, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6616, 9} true;
  assume {:verifier.code 0} true;
  $i40 := $i8;
  assume {:branchcond $i39} true;
  goto $bb14, $bb15;
$bb13:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6612, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i21 == 1));
  goto $bb11;
$bb14:
  assume ($i39 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6597, 8} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6617, 7} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i39 == 1));
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6655, 50} true;
  assume {:verifier.code 0} true;
  $p81 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6655, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(2, $p81);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6656, 27} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6656, 27} true;
  assume {:verifier.code 0} true;
  $p83 := $load.ref($M.9, $p82);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6656, 7} true;
  assume {:verifier.code 0} true;
  $i84 := $p2i.ref.i64($p83);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6656, 32} true;
  assume {:verifier.code 0} true;
  $i85 := $ne.i64($i84, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6656, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i85} true;
  goto $bb45, $bb46;
$bb17:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6620, 20} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(240, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6620, 20} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.9, $p41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6620, 27} true;
  assume {:verifier.code 0} true;
  $i43 := $sext.i32.i64($i38);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6620, 25} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p42, $mul.ref($i43, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6620, 9} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(240, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6620, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p45, $p44);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6621, 14} true;
  assume {:verifier.code 0} true;
  $i46 := $slt.i32($i38, $i30);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6621, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i46 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6623, 5} true;
  assume {:verifier.code 0} true;
  $i47 := 1;
  goto $bb20;
$bb19:
  assume !(($i46 == 1));
  assume {:verifier.code 0} true;
  $i47 := $i13;
  goto $bb20;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6625, 5} true;
  assume {:verifier.code 0} true;
  $i48, $i49 := $i8, $i47;
  goto $bb21;
$bb21:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6650, 3} true;
  assume {:verifier.code 0} true;
  $i8, $i9 := $i48, $i49;
  goto $bb5;
$bb22:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 27} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(240, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 27} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.9, $p50);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 7} true;
  assume {:verifier.code 0} true;
  $i52 := $p2i.ref.i64($p51);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 55} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(248, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 55} true;
  assume {:verifier.code 0} true;
  $p54 := $load.ref($M.9, $p53);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 35} true;
  assume {:verifier.code 0} true;
  $i55 := $p2i.ref.i64($p54);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 32} true;
  assume {:verifier.code 0} true;
  $i56 := $uge.i64($i52, $i55);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 60} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i56 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 83} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 83} true;
  assume {:verifier.code 0} true;
  $p58 := $load.ref($M.9, $p57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 63} true;
  assume {:verifier.code 0} true;
  $i59 := $p2i.ref.i64($p58);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 88} true;
  assume {:verifier.code 0} true;
  $i60 := $ne.i64($i59, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i60} true;
  goto $bb26, $bb27;
$bb24:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 60} true;
  assume {:verifier.code 0} true;
  assume !(($i56 == 1));
  goto $bb25;
$bb25:
  assume {:verifier.code 0} true;
  goto $bb31;
$bb26:
  assume ($i60 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6629, 15} true;
  assume {:verifier.code 0} true;
  call $i61 := ppp_async_encode($p0);
  call {:cexpr "tmp___1"} boogie_si_record_i32($i61);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6630, 17} true;
  assume {:verifier.code 0} true;
  $i62 := $ne.i32($i61, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6630, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb28, $bb29;
$bb27:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6628, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i60 == 1));
  goto $bb25;
$bb28:
  assume ($i62 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6631, 54} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6631, 7} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6633, 5} true;
  assume {:verifier.code 0} true;
  $i64 := 1;
  goto $bb30;
$bb29:
  assume !(($i62 == 1));
  assume {:verifier.code 0} true;
  $i64 := $i8;
  goto $bb30;
$bb30:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6635, 5} true;
  assume {:verifier.code 0} true;
  $i48, $i49 := $i64, $i13;
  goto $bb21;
$bb31:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6638, 50} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6638, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(2, $p65);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6639, 74} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6639, 13} true;
  assume {:verifier.code 0} true;
  call $i67 := constant_test_bit(0, $p66);
  call {:cexpr "tmp___2"} boogie_si_record_i32($i67);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 15} true;
  assume {:verifier.code 0} true;
  $i68 := $eq.i32($i67, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i68 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 36} true;
  assume {:verifier.code 0} true;
  $i69 := $ne.i32($i13, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 41} true;
  assume {:verifier.code 0} true;
  $i70 := $i8;
  assume {:branchcond $i69} true;
  goto $bb35, $bb37;
$bb33:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i68 == 1));
  goto $bb34;
$bb34:
  assume {:verifier.code 0} true;
  goto $bb41;
$bb35:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 41} true;
  assume {:verifier.code 0} true;
  assume ($i69 == 1);
  goto $bb36;
$bb36:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6597, 8} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6641, 5} true;
  assume {:verifier.code 0} true;
  $i75 := $i70;
  goto $bb40;
$bb37:
  assume !(($i69 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 64} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 64} true;
  assume {:verifier.code 0} true;
  $p72 := $load.ref($M.9, $p71);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 44} true;
  assume {:verifier.code 0} true;
  $i73 := $p2i.ref.i64($p72);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 69} true;
  assume {:verifier.code 0} true;
  $i74 := $eq.i64($i73, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 7} true;
  assume {:verifier.code 0} true;
  $i70 := $i8;
  assume {:branchcond $i74} true;
  goto $bb38, $bb39;
$bb38:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 7} true;
  assume {:verifier.code 0} true;
  assume ($i74 == 1);
  goto $bb36;
$bb39:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6640, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i74 == 1));
  goto $bb34;
$bb40:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6652, 24} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6652, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_bh($p80);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6653, 3} true;
  assume {:verifier.code 0} true;
  $i6 := $i75;
  goto $bb3;
$bb41:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6644, 67} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6644, 13} true;
  assume {:verifier.code 0} true;
  call $i77 := test_and_set_bit(2, $p76);
  call {:cexpr "tmp___3"} boogie_si_record_i32($i77);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6645, 15} true;
  assume {:verifier.code 0} true;
  $i78 := $ne.i32($i77, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6645, 7} true;
  assume {:verifier.code 0} true;
  $i79 := $i8;
  assume {:branchcond $i78} true;
  goto $bb42, $bb43;
$bb42:
  assume ($i78 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6597, 8} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6646, 5} true;
  assume {:verifier.code 0} true;
  $i75 := $i79;
  goto $bb40;
$bb43:
  assume !(($i78 == 1));
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6645, 18} true;
  assume {:verifier.code 0} true;
  $i48, $i49 := $i8, $i13;
  goto $bb21;
$bb45:
  assume ($i85 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6657, 26} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6657, 26} true;
  assume {:verifier.code 0} true;
  $p87 := $load.ref($M.9, $p86);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6657, 5} true;
  assume {:verifier.code 0} true;
  call ldv_kfree_skb_16($p87);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6658, 9} true;
  assume {:verifier.code 0} true;
  $p88 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6658, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p88, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6659, 52} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6659, 5} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p89);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6661, 3} true;
  assume {:verifier.code 0} true;
  $i90 := 1;
  goto $bb47;
$bb46:
  assume !(($i85 == 1));
  assume {:verifier.code 0} true;
  $i90 := $i40;
  goto $bb47;
$bb47:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6663, 18} true;
  assume {:verifier.code 0} true;
  $p91 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(248, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6663, 18} true;
  assume {:verifier.code 0} true;
  $p92 := $load.ref($M.9, $p91);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6663, 7} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(240, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6663, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p93, $p92);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6664, 24} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6664, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_bh($p94);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6665, 3} true;
  assume {:verifier.code 0} true;
  $i6 := $i90;
  goto $bb3;
}
const test_and_set_bit: ref;
axiom (test_and_set_bit == $sub.ref(0, 75802));
procedure  test_and_set_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5288, 32} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  call {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
  assume true;
  call devirtbounce.3(0, $p1, $p2, $i0, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5288, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.12, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5288, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i8.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5288, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5288, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5288, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const spin_lock_bh: ref;
axiom (spin_lock_bh == $sub.ref(0, 76834));
procedure  spin_lock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5407, 29} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5407, 29} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5407, 38} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5407, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_lock_bh($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5408, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const test_and_clear_bit: ref;
axiom (test_and_clear_bit == $sub.ref(0, 77866));
procedure  test_and_clear_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5297, 32} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  call {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
  assume true;
  call devirtbounce.3(0, $p1, $p2, $i0, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5297, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.12, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5297, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i8.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5297, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5297, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5297, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const set_bit: ref;
axiom (set_bit == $sub.ref(0, 78898));
procedure  set_bit($i0: i64, $p1: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5272, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
  call devirtbounce.4(0, $p1, $i0, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5272, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ppp_async_encode: ref;
axiom (ppp_async_encode == $sub.ref(0, 79930));
procedure  ppp_async_encode($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i21: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $p61: ref;
  var $p60: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i16;
  var $i65: i16;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p77: ref;
  var $p76: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i16;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i1;
  var $i97: i32;
  var $i99: i64;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i1;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i114: i16;
  var $i115: i32;
  var $i116: i16;
  var $i117: i8;
  var $i118: i32;
  var $i119: i8;
  var $i120: i16;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i124: i32;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i8;
  var $p142: ref;
  var $i143: i8;
  var $p141: ref;
  var $i144: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i113: i32;
  var $i148: i1;
  var $i98: i32;
  var $i152: i64;
  var $i153: i64;
  var $i154: i1;
  var $i145: i32;
  var $p146: ref;
  var $i147: i32;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i155: i32;
  var $p156: ref;
  var $i157: i32;
  var $i149: i32;
  var $p150: ref;
  var $i151: i32;
  var $i158: i32;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i16;
  var $p165: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i64;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i181: i64;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $i185: i32;
  var $i186: i8;
  var $p188: ref;
  var $i189: i8;
  var $p187: ref;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i1;
  var $p194: ref;
  var $i195: i32;
  var $i196: i64;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $i204: i64;
  var $p205: ref;
  var $i206: i8;
  var $i207: i32;
  var $i208: i32;
  var $i209: i8;
  var $p211: ref;
  var $i212: i8;
  var $p210: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i166: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6438, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6438, 33} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(560, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6438, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6439, 7} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(248, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6439, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p3, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6440, 7} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(240, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6440, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p4, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6441, 11} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(232, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6441, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.9, $p5);
  call {:cexpr "i"} boogie_si_record_i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6442, 15} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6442, 15} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.9, $p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6442, 22} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6442, 22} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.9, $p9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6443, 22} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6443, 22} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.9, $p11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6443, 29} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p12, $mul.ref(0, 232)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6443, 29} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i32($M.9, $p13);
  call {:cexpr "count"} boogie_si_record_i32($i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6444, 19} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(236, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6444, 19} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i16($M.9, $p15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6444, 9} true;
  assume {:verifier.code 0} true;
  $i17 := $zext.i16.i32($i16);
  call {:cexpr "fcs"} boogie_si_record_i32($i17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6445, 9} true;
  assume {:verifier.code 0} true;
  call $i18 := get_unaligned_be16($p10);
  call {:cexpr "tmp"} boogie_si_record_i16($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6446, 11} true;
  assume {:verifier.code 0} true;
  $i19 := $zext.i16.i32($i18);
  call {:cexpr "proto"} boogie_si_record_i32($i19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 18} true;
  assume {:verifier.code 0} true;
  $i20 := $eq.i32($i19, 49185);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 27} true;
  assume {:verifier.code 0} true;
  $i21 := 0;
  assume {:branchcond $i20} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i20 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 52} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p10, $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 45} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i8($M.9, $p22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 30} true;
  assume {:verifier.code 0} true;
  $i24 := $zext.i8.i32($i23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 59} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i32($i24, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 66} true;
  assume {:verifier.code 0} true;
  $i21 := 0;
  assume {:branchcond $i25} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 27} true;
  assume {:verifier.code 0} true;
  assume !(($i20 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 66} true;
  assume {:verifier.code 0} true;
  $i30 := $zext.i1.i32($i21);
  call {:cexpr "islcp"} boogie_si_record_i32($i30);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6448, 9} true;
  assume {:verifier.code 0} true;
  $i31 := $eq.i32($i6, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6448, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i25 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 91} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p10, $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 84} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i8($M.9, $p26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 69} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.i8.i32($i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 98} true;
  assume {:verifier.code 0} true;
  $i29 := $ule.i32($i28, 7);
  assume {:verifier.code 0} true;
  $i21 := $i29;
  goto $bb3;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6447, 66} true;
  assume {:verifier.code 0} true;
  assume !(($i25 == 1));
  goto $bb3;
$bb6:
  assume ($i31 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6449, 15} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.i32($i30, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6449, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb8, $bb9;
$bb7:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  $i85, $p86 := $i17, $p1;
  goto $bb34;
$bb8:
  assume ($i32 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6450, 7} true;
  assume {:verifier.code 0} true;
  call async_lcp_peek($p0, $p10, $i14, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6451, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i32 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 16} true;
  assume {:verifier.code 0} true;
  $i33 := $ne.i32($i30, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 21} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb11, $bb13;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 21} true;
  assume {:verifier.code 0} true;
  assume ($i33 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6455, 17} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p2, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6456, 16} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p2, 126);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6457, 5} true;
  assume {:verifier.code 0} true;
  $p45 := $p44;
  goto $bb18;
$bb13:
  assume !(($i33 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 24} true;
  assume {:verifier.code 0} true;
  $i34 := $M.13;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 34} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i32($i34, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 40} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb14, $bb15;
$bb14:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 40} true;
  assume {:verifier.code 0} true;
  assume ($i35 == 1);
  goto $bb12;
$bb15:
  assume !(($i35 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 67} true;
  assume {:verifier.code 0} true;
  $i36 := $M.14;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 82} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(256, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 82} true;
  assume {:verifier.code 0} true;
  $i38 := $load.i64($M.9, $p37);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 110} true;
  assume {:verifier.code 0} true;
  $i39 := $M.13;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 94} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.i32.i64($i39);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 92} true;
  assume {:verifier.code 0} true;
  $i41 := $add.i64($i38, $i40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 75} true;
  assume {:verifier.code 0} true;
  $i42 := $sub.i64($i36, $i41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 122} true;
  assume {:verifier.code 0} true;
  $i43 := $sge.i64($i42, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6453, 9} true;
  assume {:verifier.code 0} true;
  assume ($i43 == 1);
  goto $bb12;
$bb17:
  assume !(($i43 == 1));
  assume {:verifier.code 0} true;
  $p45 := $p1;
  goto $bb18;
$bb18:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6459, 21} true;
  assume {:verifier.code 0} true;
  $i46 := $M.14;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6459, 9} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(256, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6459, 19} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i64($M.9, $p47, $i46);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6461, 14} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6461, 14} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i32($M.9, $p48);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6461, 20} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6461:20: warning: over-approximating bitwise operation and;
  $i50 := $and.i32($i49, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6461, 26} true;
  assume {:verifier.code 0} true;
  $i51 := $eq.i32($i50, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6461, 32} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb19, $bb21;
$bb19:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6461, 32} true;
  assume {:verifier.code 0} true;
  assume ($i51 == 1);
  goto $bb20;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6462, 21} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1));
  $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1)), $mul.ref(7, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6462, 17} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i32($M.9, $p54);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6462, 30} true;
  assume {:verifier.code 0} true;
  $i56 := $slt.i32($i55, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6462, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb24, $bb25;
$bb21:
  assume !(($i51 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6461, 41} true;
  assume {:verifier.code 0} true;
  $i52 := $ne.i32($i30, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6461, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb22, $bb23;
$bb22:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6461, 9} true;
  assume {:verifier.code 0} true;
  assume ($i52 == 1);
  goto $bb20;
$bb23:
  assume !(($i52 == 1));
  assume {:verifier.code 0} true;
  $i83, $p84 := 65535, $p45;
  goto $bb33;
$bb24:
  assume ($i56 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6464, 19} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($p45, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6465, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p45, 125);
  $i58 := $add.i64(1, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6467, 19} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($p45, $mul.ref($i58, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6468, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p57, $sub.i8(0, 33));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6469, 7} true;
  assume {:verifier.code 0} true;
  $p60 := $p59;
  goto $bb26;
$bb25:
  assume !(($i56 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6471, 19} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p45, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6472, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p45, $sub.i8(0, 1));
  assume {:verifier.code 0} true;
  $p60 := $p61;
  goto $bb26;
$bb26:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6474, 39} true;
  assume {:verifier.code 0} true;
  $i62 := $trunc.i32.i16(65535);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6474, 32} true;
  assume {:verifier.code 0} true;
  $i63 := $zext.i16.i32($i62);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6474, 32} true;
  assume {:verifier.code 0} true;
  $i64 := $trunc.i32.i16($i63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6474, 17} true;
  assume {:verifier.code 0} true;
  call $i65 := crc_ccitt_byte($i64, $sub.i8(0, 1));
  call {:cexpr "tmp___4"} boogie_si_record_i16($i65);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6475, 13} true;
  assume {:verifier.code 0} true;
  $i66 := $zext.i16.i32($i65);
  call {:cexpr "fcs"} boogie_si_record_i32($i66);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6476, 17} true;
  assume {:verifier.code 0} true;
  $i67 := $ne.i32($i30, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6476, 22} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i67} true;
  goto $bb27, $bb29;
$bb27:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6476, 22} true;
  assume {:verifier.code 0} true;
  assume ($i67 == 1);
  goto $bb28;
$bb28:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6478, 19} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p60, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6479, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p60, 125);
  $i74 := $add.i64(1, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6481, 19} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p60, $mul.ref($i74, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6482, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p73, 35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6483, 7} true;
  assume {:verifier.code 0} true;
  $p76 := $p75;
  goto $bb32;
$bb29:
  assume !(($i67 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6476, 30} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1));
  $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1)), $mul.ref(0, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6476, 26} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i32($M.9, $p69);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6476, 39} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6476:39: warning: over-approximating bitwise operation and;
  $i71 := $and.i32($i70, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6476, 45} true;
  assume {:verifier.code 0} true;
  $i72 := $ne.i32($i71, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6476, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i72} true;
  goto $bb30, $bb31;
$bb30:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6476, 11} true;
  assume {:verifier.code 0} true;
  assume ($i72 == 1);
  goto $bb28;
$bb31:
  assume !(($i72 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6485, 19} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p60, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6486, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p60, 3);
  assume {:verifier.code 0} true;
  $p76 := $p77;
  goto $bb32;
$bb32:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6488, 39} true;
  assume {:verifier.code 0} true;
  $i78 := $trunc.i32.i16($i66);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6488, 32} true;
  assume {:verifier.code 0} true;
  $i79 := $zext.i16.i32($i78);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6488, 32} true;
  assume {:verifier.code 0} true;
  $i80 := $trunc.i32.i16($i79);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6488, 17} true;
  assume {:verifier.code 0} true;
  call $i81 := crc_ccitt_byte($i80, 3);
  call {:cexpr "tmp___8"} boogie_si_record_i16($i81);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6489, 13} true;
  assume {:verifier.code 0} true;
  $i82 := $zext.i16.i32($i81);
  call {:cexpr "fcs"} boogie_si_record_i32($i82);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6490, 5} true;
  assume {:verifier.code 0} true;
  $i83, $p84 := $i82, $p76;
  goto $bb33;
$bb33:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6492, 3} true;
  assume {:verifier.code 0} true;
  $i85, $p86 := $i83, $p84;
  goto $bb34;
$bb34:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6494, 36} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(560, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6494, 12} true;
  assume {:verifier.code 0} true;
  $p88 := $bitcast.ref.ref($p87);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6494, 42} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($p88, $mul.ref(4090, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 9} true;
  assume {:verifier.code 0} true;
  $i90 := $slt.i32($i6, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 17} true;
  assume {:verifier.code 0} true;
  $i91, $p92, $i93 := $i85, $p86, $i6;
  assume {:branchcond $i90} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i90 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 17} true;
  assume {:verifier.code 0} true;
  $p94, $i95, $i96 := $p86, $i85, $i6;
  goto $bb38;
$bb36:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 17} true;
  assume {:verifier.code 0} true;
  assume !(($i90 == 1));
  goto $bb37;
$bb37:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 17} true;
  assume {:verifier.code 0} true;
  $i158, $p159, $i160 := $i91, $p92, $i93;
  goto $bb64;
$bb38:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 17} true;
  assume {:verifier.code 0} true;
  $i98 := $i96;
  goto $bb59;
$bb39:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6498, 9} true;
  assume {:verifier.code 0} true;
  $i97 := $add.i32($i98, 1);
  call {:cexpr "i"} boogie_si_record_i32($i97);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6499, 22} true;
  assume {:verifier.code 0} true;
  $i99 := $sext.i32.i64($i98);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6499, 20} true;
  assume {:verifier.code 0} true;
  $p100 := $add.ref($p10, $mul.ref($i99, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6499, 13} true;
  assume {:verifier.code 0} true;
  $i101 := $load.i8($M.9, $p100);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6499, 7} true;
  assume {:verifier.code 0} true;
  $i102 := $zext.i8.i32($i101);
  call {:cexpr "c"} boogie_si_record_i32($i102);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 10} true;
  assume {:verifier.code 0} true;
  $i103 := $eq.i32($i97, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 15} true;
  assume {:verifier.code 0} true;
  $p104, $i105, $i106, $i107 := $p94, $i95, $i97, $i102;
  assume {:branchcond $i103} true;
  goto $bb40, $bb41;
$bb40:
  assume ($i103 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 20} true;
  assume {:verifier.code 0} true;
  $i108 := $eq.i32($i102, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 26} true;
  assume {:verifier.code 0} true;
  $p104, $i105, $i106, $i107 := $p94, $i95, $i97, $i102;
  assume {:branchcond $i108} true;
  goto $bb43, $bb44;
$bb41:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 15} true;
  assume {:verifier.code 0} true;
  assume !(($i103 == 1));
  goto $bb42;
$bb42:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6498, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6499, 7} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb47;
$bb43:
  assume ($i108 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 39} true;
  assume {:verifier.code 0} true;
  $p109 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 39} true;
  assume {:verifier.code 0} true;
  $i110 := $load.i32($M.9, $p109);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 45} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6500:45: warning: over-approximating bitwise operation and;
  $i111 := $and.i32($i110, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 45} true;
  assume {:verifier.code 0} true;
  $i112 := $ne.i32($i111, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 7} true;
  assume {:verifier.code 0} true;
  $i113, $p104, $i105, $i106, $i107 := $i97, $p94, $i95, $i97, $i102;
  assume {:branchcond $i112} true;
  goto $bb45, $bb46;
$bb44:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 26} true;
  assume {:verifier.code 0} true;
  assume !(($i108 == 1));
  goto $bb42;
$bb45:
  assume ($i112 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 9} true;
  assume {:verifier.code 0} true;
  $i148 := $slt.i32($i113, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 17} true;
  assume {:verifier.code 0} true;
  $i149, $p150, $i151 := $i95, $p94, $i113;
  assume {:branchcond $i148} true;
  goto $bb60, $bb61;
$bb46:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6500, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i112 == 1));
  goto $bb42;
$bb47:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6504, 36} true;
  assume {:verifier.code 0} true;
  $i114 := $trunc.i32.i16($i105);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6504, 29} true;
  assume {:verifier.code 0} true;
  $i115 := $zext.i16.i32($i114);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6504, 29} true;
  assume {:verifier.code 0} true;
  $i116 := $trunc.i32.i16($i115);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6504, 55} true;
  assume {:verifier.code 0} true;
  $i117 := $trunc.i32.i8($i107);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6504, 48} true;
  assume {:verifier.code 0} true;
  $i118 := $zext.i8.i32($i117);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6504, 48} true;
  assume {:verifier.code 0} true;
  $i119 := $trunc.i32.i8($i118);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6504, 14} true;
  assume {:verifier.code 0} true;
  call $i120 := crc_ccitt_byte($i116, $i119);
  call {:cexpr "tmp___10"} boogie_si_record_i16($i120);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6505, 9} true;
  assume {:verifier.code 0} true;
  $i121 := $zext.i16.i32($i120);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 14} true;
  assume {:verifier.code 0} true;
  $i122 := $ne.i32($i30, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 19} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i122} true;
  goto $bb48, $bb49;
$bb48:
  assume ($i122 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 24} true;
  assume {:verifier.code 0} true;
  $i123 := $sle.i32($i107, 31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 31} true;
  assume {:verifier.code 0} true;
  $i124 := $i107;
  assume {:branchcond $i123} true;
  goto $bb51, $bb53;
$bb49:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 19} true;
  assume {:verifier.code 0} true;
  assume !(($i122 == 1));
  goto $bb50;
$bb50:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 39} true;
  assume {:verifier.code 0} true;
  $p125 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 47} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6506:47: warning: over-approximating bitwise operation ashr;
  $i126 := $ashr.i32($i107, 5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 35} true;
  assume {:verifier.code 0} true;
  $i127 := $sext.i32.i64($i126);
  $p128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1)), $mul.ref($i127, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 35} true;
  assume {:verifier.code 0} true;
  $i129 := $load.i32($M.9, $p128);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 70} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6506:70: warning: over-approximating bitwise operation and;
  $i130 := $and.i32($i107, 31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 64} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6506:64: warning: over-approximating bitwise operation shl;
  $i131 := $shl.i32(1, $i130);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 53} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6506:53: warning: over-approximating bitwise operation and;
  $i132 := $and.i32($i129, $i131);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 78} true;
  assume {:verifier.code 0} true;
  $i133 := $ne.i32($i132, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $i107;
  assume {:branchcond $i133} true;
  goto $bb54, $bb55;
$bb51:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 31} true;
  assume {:verifier.code 0} true;
  assume ($i123 == 1);
  goto $bb52;
$bb52:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6508, 15} true;
  assume {:verifier.code 0} true;
  $p134 := $add.ref($p104, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6509, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p104, 125);
  $i135 := $add.i64(1, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6511, 15} true;
  assume {:verifier.code 0} true;
  $p136 := $add.ref($p104, $mul.ref($i135, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6512, 41} true;
  assume {:verifier.code 0} true;
  $i137 := $trunc.i32.i8($i124);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6512, 34} true;
  assume {:verifier.code 0} true;
  $i138 := $sext.i8.i32($i137);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6512, 58} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6512:58: warning: over-approximating bitwise operation xor;
  $i139 := $xor.i32($i138, 32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6512, 17} true;
  assume {:verifier.code 0} true;
  $i140 := $trunc.i32.i8($i139);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6512, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p134, $i140);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6513, 3} true;
  assume {:verifier.code 0} true;
  $p141 := $p136;
  goto $bb56;
$bb53:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 31} true;
  assume {:verifier.code 0} true;
  assume !(($i123 == 1));
  goto $bb50;
$bb54:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6506, 7} true;
  assume {:verifier.code 0} true;
  assume ($i133 == 1);
  goto $bb52;
$bb55:
  assume !(($i133 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6515, 15} true;
  assume {:verifier.code 0} true;
  $p142 := $add.ref($p104, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6516, 17} true;
  assume {:verifier.code 0} true;
  $i143 := $trunc.i32.i8($i107);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6516, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p104, $i143);
  assume {:verifier.code 0} true;
  $p141 := $p142;
  goto $bb56;
$bb56:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 9} true;
  assume {:verifier.code 0} true;
  $i144 := $slt.i32($i106, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 17} true;
  assume {:verifier.code 0} true;
  $i145, $p146, $i147 := $i121, $p141, $i106;
  assume {:branchcond $i144} true;
  goto $bb57, $bb58;
$bb57:
  assume ($i144 == 1);
  assume {:verifier.code 0} true;
  $p94, $i95, $i96 := $p141, $i121, $i106;
  goto $bb38;
$bb58:
  assume !(($i144 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 17} true;
  assume {:verifier.code 0} true;
  $i91, $p92, $i93 := $i145, $p146, $i147;
  goto $bb37;
$bb59:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 20} true;
  assume {:verifier.code 0} true;
  $i152 := $p2i.ref.i64($p94);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 42} true;
  assume {:verifier.code 0} true;
  $i153 := $p2i.ref.i64($p89);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 40} true;
  assume {:verifier.code 0} true;
  $i154 := $ult.i64($i152, $i153);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 7} true;
  assume {:verifier.code 0} true;
  $i155, $p156, $i157 := $i95, $p94, $i98;
  assume {:branchcond $i154} true;
  goto $bb62, $bb63;
$bb60:
  assume ($i148 == 1);
  assume {:verifier.code 0} true;
  $i98 := $i113;
  goto $bb59;
$bb61:
  assume !(($i148 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 17} true;
  assume {:verifier.code 0} true;
  $i158, $p159, $i160 := $i149, $p150, $i151;
  goto $bb64;
$bb62:
  assume ($i154 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6520, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb63:
  assume !(($i154 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6519, 7} true;
  assume {:verifier.code 0} true;
  $i158, $p159, $i160 := $i155, $p156, $i157;
  goto $bb64;
$bb64:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb65;
$bb65:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6523, 9} true;
  assume {:verifier.code 0} true;
  $i161 := $slt.i32($i160, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6523, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i161} true;
  goto $bb66, $bb67;
$bb66:
  assume ($i161 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6524, 9} true;
  assume {:verifier.code 0} true;
  $p162 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(248, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6524, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p162, $p159);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6525, 9} true;
  assume {:verifier.code 0} true;
  $p163 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(232, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6525, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p163, $i160);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6526, 16} true;
  assume {:verifier.code 0} true;
  $i164 := $trunc.i32.i16($i158);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6526, 9} true;
  assume {:verifier.code 0} true;
  $p165 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(236, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6526, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i16($M.9, $p165, $i164);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6527, 5} true;
  assume {:verifier.code 0} true;
  $i166 := 0;
  goto $bb68;
$bb67:
  assume !(($i161 == 1));
  assume {:verifier.code 0} true;
  goto $bb69;
$bb68:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6565, 1} true;
  assume {:verifier.code 0} true;
  $r := $i166;
  $exn := false;
  return;
$bb69:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6530, 9} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6530:9: warning: over-approximating bitwise operation xor;
  $i167 := $xor.i32($i158, $sub.i32(0, 1));
  call {:cexpr "fcs"} boogie_si_record_i32($i167);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6531, 11} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6531:11: warning: over-approximating bitwise operation and;
  $i168 := $and.i32($i167, 255);
  call {:cexpr "c"} boogie_si_record_i32($i168);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 14} true;
  assume {:verifier.code 0} true;
  $i169 := $ne.i32($i30, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 19} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i169} true;
  goto $bb70, $bb71;
$bb70:
  assume ($i169 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 24} true;
  assume {:verifier.code 0} true;
  $i170 := $sle.i32($i168, 31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 31} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i170} true;
  goto $bb73, $bb75;
$bb71:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 19} true;
  assume {:verifier.code 0} true;
  assume !(($i169 == 1));
  goto $bb72;
$bb72:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 39} true;
  assume {:verifier.code 0} true;
  $p171 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 47} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6532:47: warning: over-approximating bitwise operation ashr;
  $i172 := $ashr.i32($i168, 5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 35} true;
  assume {:verifier.code 0} true;
  $i173 := $sext.i32.i64($i172);
  $p174 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1)), $mul.ref($i173, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 35} true;
  assume {:verifier.code 0} true;
  $i175 := $load.i32($M.9, $p174);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 70} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6532:70: warning: over-approximating bitwise operation and;
  $i176 := $and.i32($i168, 31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 64} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6532:64: warning: over-approximating bitwise operation shl;
  $i177 := $shl.i32(1, $i176);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 53} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6532:53: warning: over-approximating bitwise operation and;
  $i178 := $and.i32($i175, $i177);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 78} true;
  assume {:verifier.code 0} true;
  $i179 := $ne.i32($i178, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i179} true;
  goto $bb76, $bb77;
$bb73:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 31} true;
  assume {:verifier.code 0} true;
  assume ($i170 == 1);
  goto $bb74;
$bb74:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6534, 15} true;
  assume {:verifier.code 0} true;
  $p180 := $add.ref($p159, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6535, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p159, 125);
  $i181 := $add.i64(1, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6537, 15} true;
  assume {:verifier.code 0} true;
  $p182 := $add.ref($p159, $mul.ref($i181, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6538, 41} true;
  assume {:verifier.code 0} true;
  $i183 := $trunc.i32.i8($i168);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6538, 34} true;
  assume {:verifier.code 0} true;
  $i184 := $sext.i8.i32($i183);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6538, 58} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6538:58: warning: over-approximating bitwise operation xor;
  $i185 := $xor.i32($i184, 32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6538, 17} true;
  assume {:verifier.code 0} true;
  $i186 := $trunc.i32.i8($i185);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6538, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p180, $i186);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6539, 3} true;
  assume {:verifier.code 0} true;
  $p187 := $p182;
  goto $bb78;
$bb75:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 31} true;
  assume {:verifier.code 0} true;
  assume !(($i170 == 1));
  goto $bb72;
$bb76:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6532, 7} true;
  assume {:verifier.code 0} true;
  assume ($i179 == 1);
  goto $bb74;
$bb77:
  assume !(($i179 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6541, 15} true;
  assume {:verifier.code 0} true;
  $p188 := $add.ref($p159, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6542, 17} true;
  assume {:verifier.code 0} true;
  $i189 := $trunc.i32.i8($i168);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6542, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p159, $i189);
  assume {:verifier.code 0} true;
  $p187 := $p188;
  goto $bb78;
$bb78:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6544, 12} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6544:12: warning: over-approximating bitwise operation ashr;
  $i190 := $ashr.i32($i167, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6544, 18} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6544:18: warning: over-approximating bitwise operation and;
  $i191 := $and.i32($i190, 255);
  call {:cexpr "c"} boogie_si_record_i32($i191);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 14} true;
  assume {:verifier.code 0} true;
  $i192 := $ne.i32($i30, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 19} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i192} true;
  goto $bb79, $bb80;
$bb79:
  assume ($i192 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 24} true;
  assume {:verifier.code 0} true;
  $i193 := $sle.i32($i191, 31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 31} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i193} true;
  goto $bb82, $bb84;
$bb80:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 19} true;
  assume {:verifier.code 0} true;
  assume !(($i192 == 1));
  goto $bb81;
$bb81:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 39} true;
  assume {:verifier.code 0} true;
  $p194 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 47} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6545:47: warning: over-approximating bitwise operation ashr;
  $i195 := $ashr.i32($i191, 5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 35} true;
  assume {:verifier.code 0} true;
  $i196 := $sext.i32.i64($i195);
  $p197 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1)), $mul.ref($i196, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 35} true;
  assume {:verifier.code 0} true;
  $i198 := $load.i32($M.9, $p197);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 70} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6545:70: warning: over-approximating bitwise operation and;
  $i199 := $and.i32($i191, 31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 64} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6545:64: warning: over-approximating bitwise operation shl;
  $i200 := $shl.i32(1, $i199);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 53} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6545:53: warning: over-approximating bitwise operation and;
  $i201 := $and.i32($i198, $i200);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 78} true;
  assume {:verifier.code 0} true;
  $i202 := $ne.i32($i201, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i202} true;
  goto $bb85, $bb86;
$bb82:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 31} true;
  assume {:verifier.code 0} true;
  assume ($i193 == 1);
  goto $bb83;
$bb83:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6547, 15} true;
  assume {:verifier.code 0} true;
  $p203 := $add.ref($p187, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6548, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p187, 125);
  $i204 := $add.i64(1, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6550, 15} true;
  assume {:verifier.code 0} true;
  $p205 := $add.ref($p187, $mul.ref($i204, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6551, 41} true;
  assume {:verifier.code 0} true;
  $i206 := $trunc.i32.i8($i191);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6551, 34} true;
  assume {:verifier.code 0} true;
  $i207 := $sext.i8.i32($i206);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6551, 58} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6551:58: warning: over-approximating bitwise operation xor;
  $i208 := $xor.i32($i207, 32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6551, 17} true;
  assume {:verifier.code 0} true;
  $i209 := $trunc.i32.i8($i208);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6551, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p203, $i209);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6552, 3} true;
  assume {:verifier.code 0} true;
  $p210 := $p205;
  goto $bb87;
$bb84:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 31} true;
  assume {:verifier.code 0} true;
  assume !(($i193 == 1));
  goto $bb81;
$bb85:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6545, 7} true;
  assume {:verifier.code 0} true;
  assume ($i202 == 1);
  goto $bb83;
$bb86:
  assume !(($i202 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6554, 15} true;
  assume {:verifier.code 0} true;
  $p211 := $add.ref($p187, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6555, 17} true;
  assume {:verifier.code 0} true;
  $i212 := $trunc.i32.i8($i191);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6555, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p187, $i212);
  assume {:verifier.code 0} true;
  $p210 := $p211;
  goto $bb87;
$bb87:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6558, 13} true;
  assume {:verifier.code 0} true;
  $p213 := $add.ref($p210, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6559, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p210, 126);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6560, 7} true;
  assume {:verifier.code 0} true;
  $p214 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(248, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6560, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p214, $p213);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6561, 26} true;
  assume {:verifier.code 0} true;
  $p215 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6561, 26} true;
  assume {:verifier.code 0} true;
  $p216 := $load.ref($M.9, $p215);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6561, 3} true;
  assume {:verifier.code 0} true;
  call ldv_consume_skb_15($p216);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6562, 7} true;
  assume {:verifier.code 0} true;
  $p217 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6562, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p217, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6563, 3} true;
  assume {:verifier.code 0} true;
  $i166 := 1;
  goto $bb68;
}
const clear_bit: ref;
axiom (clear_bit == $sub.ref(0, 80962));
procedure  clear_bit($i0: i64, $p1: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5279, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
  call devirtbounce.4(0, $p1, $i0, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5279, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const constant_test_bit: ref;
axiom (constant_test_bit == $sub.ref(0, 81994));
procedure  constant_test_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 63} true;
  assume {:verifier.code 0} true;
  call {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 63} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5303:63: warning: over-approximating bitwise operation ashr;
  $i2 := $ashr.i64($i0, 6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 41} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1, $mul.ref($i2, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 34} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.9, $p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 74} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 83} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5303:83: warning: over-approximating bitwise operation and;
  $i6 := $and.i32($i5, 63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 70} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i32.i64($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 70} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5303:70: warning: over-approximating bitwise operation lshr;
  $i8 := $lshr.i64($i4, $i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i64.i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 90} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5303:90: warning: over-approximating bitwise operation and;
  $i10 := $and.i32($i9, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5303, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const spin_unlock_bh: ref;
axiom (spin_unlock_bh == $sub.ref(0, 83026));
procedure  spin_unlock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5421, 31} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5421, 31} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5421, 40} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5421, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_unlock_bh($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5422, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_kfree_skb_16: ref;
axiom (ldv_kfree_skb_16 == $sub.ref(0, 84058));
procedure  ldv_kfree_skb_16($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7387, 16} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7387, 16} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7387, 3} true;
  assume {:verifier.code 0} true;
  call ldv_skb_free($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7388, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_skb_free: ref;
axiom (ldv_skb_free == $sub.ref(0, 85090));
procedure  ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7568, 18} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7568, 18} true;
  assume {:verifier.code 0} true;
  $p1 := $M.8;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7568, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7568, 3} true;
  assume {:verifier.code 0} true;
  call ldv_set_remove($p1, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7569, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_set_remove: ref;
axiom (ldv_set_remove == $sub.ref(0, 86122));
procedure  ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7452, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7452, 13} true;
  assume {:verifier.code 0} true;
  $i2 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7452, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32(0, $i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7452, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7452, 9} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7452, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7454, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 1);
  goto $bb7;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7453, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7456, 25} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.i32.i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7456, 25} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7456, 25} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.15, $p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7456, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7456, 40} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7456, 37} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i64($i9, $i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7456, 9} true;
  assume {:verifier.code 0} true;
  $i12 := $i4;
  assume {:branchcond $i11} true;
  goto $bb8, $bb9;
$bb6:
  assume !(($i15 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7452, 9} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7463, 21} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i5, $sub.i32(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7463, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb12, $bb13;
$bb8:
  assume ($i11 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7458, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $i12;
  goto $bb7;
$bb9:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7461, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i32($i4, 1);
  call {:cexpr "i"} boogie_si_record_i32($i13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7452, 13} true;
  assume {:verifier.code 0} true;
  $i14 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7452, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $slt.i32($i13, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7452, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb11, $bb6;
$bb11:
  assume ($i15 == 1);
  assume {:verifier.code 0} true;
  $i4 := $i13;
  goto $bb4;
$bb12:
  assume ($i16 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7464, 23} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i5, 1);
  call {:cexpr "i"} boogie_si_record_i32($i17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7466, 15} true;
  assume {:verifier.code 0} true;
  $i18 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7466, 13} true;
  assume {:verifier.code 0} true;
  $i19 := $slt.i32($i17, $i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7466, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb14, $bb15;
$bb13:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb14:
  assume ($i19 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7466, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $i17;
  goto $bb17;
$bb15:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7466, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i19 == 1));
  goto $bb16;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7468, 9} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb17:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7467, 7} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7470, 25} true;
  assume {:verifier.code 0} true;
  $i21 := $sext.i32.i64($i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7470, 25} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7470, 25} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.15, $p22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7470, 18} true;
  assume {:verifier.code 0} true;
  $i24 := $sub.i32($i20, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7470, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.i32.i64($i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7470, 7} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7470, 23} true;
  assume {:verifier.code 0} true;
  $M.15 := $store.ref($M.15, $p26, $p23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7471, 13} true;
  assume {:verifier.code 0} true;
  $i27 := $add.i32($i20, 1);
  call {:cexpr "i"} boogie_si_record_i32($i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7466, 15} true;
  assume {:verifier.code 0} true;
  $i28 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7466, 13} true;
  assume {:verifier.code 0} true;
  $i29 := $slt.i32($i27, $i28);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7466, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb21, $bb19;
$bb19:
  assume !(($i29 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7466, 11} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7473, 18} true;
  assume {:verifier.code 0} true;
  $i30 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7473, 29} true;
  assume {:verifier.code 0} true;
  $i31 := $sub.i32($i30, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7473, 16} true;
  assume {:verifier.code 0} true;
  $M.11 := $i31;
  call {:cexpr "last_index"} boogie_si_record_i32($i31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7474, 3} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume ($i29 == 1);
  assume {:verifier.code 0} true;
  $i20 := $i27;
  goto $bb17;
$bb22:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7476, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_unlock_bh: ref;
axiom (_raw_spin_unlock_bh == $sub.ref(0, 87154));
procedure  _raw_spin_unlock_bh($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7659, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7659, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const get_unaligned_be16: ref;
axiom (get_unaligned_be16 == $sub.ref(0, 88186));
procedure  get_unaligned_be16($p0: ref)
  returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5766, 24} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5766, 24} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5766, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := __be16_to_cpup($p1);
  call {:cexpr "tmp"} boogie_si_record_i16($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5767, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const async_lcp_peek: ref;
axiom (async_lcp_peek == $sub.ref(0, 89218));
procedure  async_lcp_peek($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i64;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i23: i16;
  var $i24: i32;
  var $i25: i16;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i21: i32;
  var $i22: i32;
  var $i36: i32;
  var $i20: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i1;
  var $i44: i1;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i56: i1;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p55: ref;
  var $p64: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $p78: ref;
  var $i79: i1;
  var $p49: ref;
  var $i50: i32;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6954, 15} true;
  assume {:verifier.code 0} true;
  call {:cexpr "async_lcp_peek:arg:len"} boogie_si_record_i32($i2);
  call {:cexpr "async_lcp_peek:arg:inbound"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6954, 15} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p1, $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6955, 13} true;
  assume {:verifier.code 0} true;
  $i5 := $add.i32($i2, $sub.i32(0, 2));
  call {:cexpr "len"} boogie_si_record_i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6956, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $sle.i32($i5, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6956, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6957, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7033, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6960, 16} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i8($M.9, $p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6960, 10} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i8.i32($i7);
  call {:cexpr "code"} boogie_si_record_i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6961, 12} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i8, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6961, 17} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i9 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6961, 25} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i8, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6961, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb8, $bb9;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6961, 17} true;
  assume {:verifier.code 0} true;
  assume !(($i9 == 1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  goto $bb10;
$bb8:
  assume ($i10 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6962, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb9:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6961, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i10 == 1));
  goto $bb7;
$bb10:
  $i11 := $add.i64(2, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6965, 47} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p1, $mul.ref($i11, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6965, 9} true;
  assume {:verifier.code 0} true;
  call $i13 := get_unaligned_be16($p12);
  call {:cexpr "tmp"} boogie_si_record_i16($i13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6966, 10} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i16.i32($i13);
  call {:cexpr "dlen"} boogie_si_record_i32($i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6967, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $slt.i32($i5, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6967, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i15 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6968, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb12:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6971, 16} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i3, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6971, 8} true;
  assume {:verifier.code 0} true;
  $i17 := (if ($i16 == 1) then 2 else 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6971, 30} true;
  assume {:verifier.code 0} true;
  $i18 := $eq.i32($i17, $i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6971, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i18 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6980, 11} true;
  assume {:verifier.code 0} true;
  $i19 := $slt.i32(1, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6980, 9} true;
  assume {:verifier.code 0} true;
  $i20 := 65535;
  assume {:branchcond $i19} true;
  goto $bb16, $bb17;
$bb15:
  assume !(($i18 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6996, 15} true;
  assume {:verifier.code 0} true;
  $i44 := $ne.i32($i3, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6996, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb31, $bb32;
$bb16:
  assume ($i19 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6980, 9} true;
  assume {:verifier.code 0} true;
  $i21, $i22 := 1, 65535;
  goto $bb19;
$bb17:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6980, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i19 == 1));
  goto $bb18;
$bb18:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb19:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6981, 7} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6976, 37} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.i32.i16($i22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6976, 30} true;
  assume {:verifier.code 0} true;
  $i24 := $zext.i16.i32($i23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6976, 30} true;
  assume {:verifier.code 0} true;
  $i25 := $trunc.i32.i16($i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6976, 64} true;
  assume {:verifier.code 0} true;
  $i26 := $sext.i32.i64($i21);
  $i27 := $add.i64(2, $i26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6976, 62} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p1, $mul.ref($i27, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6976, 55} true;
  assume {:verifier.code 0} true;
  $i29 := $load.i8($M.9, $p28);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6976, 49} true;
  assume {:verifier.code 0} true;
  $i30 := $zext.i8.i32($i29);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6976, 49} true;
  assume {:verifier.code 0} true;
  $i31 := $trunc.i32.i8($i30);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6976, 15} true;
  assume {:verifier.code 0} true;
  call $i32 := crc_ccitt_byte($i25, $i31);
  call {:cexpr "tmp___0"} boogie_si_record_i16($i32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6977, 11} true;
  assume {:verifier.code 0} true;
  $i33 := $zext.i16.i32($i32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6978, 11} true;
  assume {:verifier.code 0} true;
  $i34 := $add.i32($i21, 1);
  call {:cexpr "i"} boogie_si_record_i32($i34);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6980, 11} true;
  assume {:verifier.code 0} true;
  $i35 := $slt.i32($i34, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6980, 9} true;
  assume {:verifier.code 0} true;
  $i36 := $i33;
  assume {:branchcond $i35} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i35 == 1);
  assume {:verifier.code 0} true;
  $i21, $i22 := $i34, $i33;
  goto $bb19;
$bb22:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6980, 9} true;
  assume {:verifier.code 0} true;
  $i20 := $i36;
  goto $bb18;
$bb23:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6984, 17} true;
  assume {:verifier.code 0} true;
  $i37 := $eq.i32($i3, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6984, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i37 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6985, 11} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(272, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6985, 19} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p38, $i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6986, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb25:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6989, 15} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(272, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6989, 15} true;
  assume {:verifier.code 0} true;
  $i40 := $load.i32($M.9, $p39);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6989, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6989:23: warning: over-approximating bitwise operation xor;
  $i41 := $xor.i32($i40, $i20);
  call {:cexpr "fcs"} boogie_si_record_i32($i41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6990, 9} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(272, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6990, 17} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p42, $sub.i32(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6991, 13} true;
  assume {:verifier.code 0} true;
  $i43 := $ne.i32($i41, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6991, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb27, $bb28;
$bb27:
  assume ($i43 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6992, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb28:
  assume !(($i43 == 1));
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6995, 3} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  $i45 := $add.i64(2, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7000, 15} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p1, $mul.ref($i45, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7001, 15} true;
  assume {:verifier.code 0} true;
  $i47 := $add.i32($i14, $sub.i32(0, 4));
  call {:cexpr "dlen"} boogie_si_record_i32($i47);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 13} true;
  assume {:verifier.code 0} true;
  $i48 := $sgt.i32($i47, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 17} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb34, $bb35;
$bb31:
  assume ($i44 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6997, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb32:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:verifier.code 0} true;
  goto $bb30;
$bb34:
  assume ($i48 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 17} true;
  assume {:verifier.code 0} true;
  $p49, $i50 := $p46, $i47;
  goto $bb37;
$bb35:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 17} true;
  assume {:verifier.code 0} true;
  assume !(($i48 == 1));
  goto $bb36;
$bb36:
  assume {:verifier.code 0} true;
  goto $bb61;
$bb37:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 33} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($p49, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 26} true;
  assume {:verifier.code 0} true;
  $i81 := $load.i8($M.9, $p80);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 20} true;
  assume {:verifier.code 0} true;
  $i82 := $zext.i8.i32($i81);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 40} true;
  assume {:verifier.code 0} true;
  $i83 := $sle.i32($i82, $i50);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 49} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i83} true;
  goto $bb57, $bb58;
$bb38:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7004, 17} true;
  assume {:verifier.code 0} true;
  $i51 := $load.i8($M.9, $p49);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7004, 11} true;
  assume {:verifier.code 0} true;
  $i52 := $zext.i8.i32($i51);
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:verifier.code 0} true;
  $i53 := $slt.i32($i52, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb40, $bb41;
$bb40:
  assume ($i53 == 1);
  assume {:verifier.code 0} true;
  $i56 := $eq.i32($i52, 1);
  assume {:verifier.code 0} true;
  $p55 := $p49;
  assume {:branchcond $i56} true;
  goto $bb45, $bb46;
$bb41:
  assume !(($i53 == 1));
  assume {:verifier.code 0} true;
  $i54 := $eq.i32($i52, 2);
  assume {:verifier.code 0} true;
  $p55 := $p49;
  assume {:branchcond $i54} true;
  goto $bb42, $bb43;
$bb42:
  assume ($i54 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7015, 47} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($p49, $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7015, 9} true;
  assume {:verifier.code 0} true;
  call $i66 := get_unaligned_be32($p65);
  call {:cexpr "val"} boogie_si_record_i32($i66);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7016, 15} true;
  assume {:verifier.code 0} true;
  $i67 := $ne.i32($i3, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7016, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i67} true;
  goto $bb51, $bb52;
$bb43:
  assume {:verifier.code 0} true;
  assume !(($i54 == 1));
  goto $bb44;
$bb44:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb45:
  assume ($i56 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7006, 51} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($p49, $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7006, 13} true;
  assume {:verifier.code 0} true;
  call $i58 := get_unaligned_be16($p57);
  call {:cexpr "tmp___1"} boogie_si_record_i16($i58);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7007, 9} true;
  assume {:verifier.code 0} true;
  $i59 := $zext.i16.i32($i58);
  call {:cexpr "val"} boogie_si_record_i32($i59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7008, 15} true;
  assume {:verifier.code 0} true;
  $i60 := $ne.i32($i3, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7008, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i60} true;
  goto $bb47, $bb48;
$bb46:
  assume {:verifier.code 0} true;
  assume !(($i56 == 1));
  goto $bb44;
$bb47:
  assume ($i60 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7009, 9} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(20, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7009, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p61, $i59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7010, 3} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb48:
  assume !(($i60 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7011, 9} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(520, 1));
  $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(520, 1)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7011, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p63, $i59);
  assume {:verifier.code 0} true;
  goto $bb49;
$bb49:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7013, 3} true;
  assume {:verifier.code 0} true;
  $p64 := $p49;
  goto $bb50;
$bb50:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7024, 30} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($p64, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7024, 23} true;
  assume {:verifier.code 0} true;
  $i72 := $load.i8($M.9, $p71);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7024, 17} true;
  assume {:verifier.code 0} true;
  $i73 := $zext.i8.i32($i72);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7024, 15} true;
  assume {:verifier.code 0} true;
  $i74 := $sub.i32($i50, $i73);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7025, 40} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p64, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7025, 33} true;
  assume {:verifier.code 0} true;
  $i76 := $load.i8($M.9, $p75);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7025, 17} true;
  assume {:verifier.code 0} true;
  $i77 := $zext.i8.i64($i76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7025, 15} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($p64, $mul.ref($i77, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 13} true;
  assume {:verifier.code 0} true;
  $i79 := $sgt.i32($i74, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 17} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb55, $bb56;
$bb51:
  assume ($i67 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7017, 9} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(208, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7017, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p68, $i66);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7018, 3} true;
  assume {:verifier.code 0} true;
  goto $bb53;
$bb52:
  assume !(($i67 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7019, 9} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1));
  $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(176, 1)), $mul.ref(0, 4));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7019, 18} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p70, $i66);
  assume {:verifier.code 0} true;
  goto $bb53;
$bb53:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7021, 3} true;
  assume {:verifier.code 0} true;
  $p64 := $p49;
  goto $bb50;
$bb54:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7022, 3} true;
  assume {:verifier.code 0} true;
  $p64 := $p55;
  goto $bb50;
$bb55:
  assume ($i79 == 1);
  assume {:verifier.code 0} true;
  $p49, $i50 := $p78, $i74;
  goto $bb37;
$bb56:
  assume !(($i79 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 17} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb57:
  assume ($i83 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 74} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($p49, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 67} true;
  assume {:verifier.code 0} true;
  $i85 := $load.i8($M.9, $p84);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 52} true;
  assume {:verifier.code 0} true;
  $i86 := $zext.i8.i32($i85);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 81} true;
  assume {:verifier.code 0} true;
  $i87 := $ugt.i32($i86, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb59, $bb60;
$bb58:
  assume !(($i83 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 49} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb59:
  assume ($i87 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7028, 5} true;
  assume {:verifier.code 0} true;
  goto $bb38;
$bb60:
  assume !(($i87 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7027, 7} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb61:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7031, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const crc_ccitt_byte: ref;
axiom (crc_ccitt_byte == $sub.ref(0, 90250));
procedure  crc_ccitt_byte($i0: i16, $i1: i8)
  returns ($r: i16)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 19} true;
  assume {:verifier.code 0} true;
  call {:cexpr "crc_ccitt_byte:arg:crc"} boogie_si_record_i16($i0);
  call {:cexpr "crc_ccitt_byte:arg:c"} boogie_si_record_i8($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 19} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i16.i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5752:29: warning: over-approximating bitwise operation ashr;
  $i3 := $ashr.i32($i2, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 78} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i16.i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 90} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i8.i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 88} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5752:88: warning: over-approximating bitwise operation xor;
  $i6 := $xor.i32($i4, $i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 99} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5752:99: warning: over-approximating bitwise operation and;
  $i7 := $and.i32($i6, 255);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 61} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i32.i64($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 61} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref(crc_ccitt_table, $mul.ref(0, 512)), $mul.ref($i8, 2));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 61} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i16($M.16, $p9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 37} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i16.i32($i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 35} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5752:35: warning: over-approximating bitwise operation xor;
  $i12 := $xor.i32($i3, $i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.i32.i16($i12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5752, 3} true;
  assume {:verifier.code 0} true;
  $r := $i13;
  $exn := false;
  return;
}
const ldv_consume_skb_15: ref;
axiom (ldv_consume_skb_15 == $sub.ref(0, 91282));
procedure  ldv_consume_skb_15($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7380, 16} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7380, 16} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7380, 3} true;
  assume {:verifier.code 0} true;
  call ldv_skb_free($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7381, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const get_unaligned_be32: ref;
axiom (get_unaligned_be32 == $sub.ref(0, 92314));
procedure  get_unaligned_be32($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5774, 24} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5774, 24} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5774, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := __be32_to_cpup($p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5775, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __be32_to_cpup: ref;
axiom (__be32_to_cpup == $sub.ref(0, 93346));
procedure  __be32_to_cpup($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5347, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5347, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __swab32p($p0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5348, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __swab32p: ref;
axiom (__swab32p == $sub.ref(0, 94378));
procedure  __swab32p($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5339, 19} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5339, 19} true;
  assume {:verifier.code 0} true;
  $i1 := $load.i32($M.9, $p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5339, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := __fswab32($i1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5340, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __fswab32: ref;
axiom (__fswab32 == $sub.ref(0, 95410));
procedure  __fswab32($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5323, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5323, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __arch_swab32($i0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5324, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __arch_swab32: ref;
axiom (__arch_swab32 == $sub.ref(0, 96442));
procedure  __arch_swab32($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5310, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
  call $i1 := devirtbounce.5(0, $i0);
  call {:cexpr "val"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5310, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __be16_to_cpup: ref;
axiom (__be16_to_cpup == $sub.ref(0, 97474));
procedure  __be16_to_cpup($p0: ref)
  returns ($r: i16)
{
  var $i1: i16;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5355, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5355, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __swab16p($p0);
  call {:cexpr "tmp"} boogie_si_record_i16($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5356, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __swab16p: ref;
axiom (__swab16p == $sub.ref(0, 98506));
procedure  __swab16p($p0: ref)
  returns ($r: i16)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5331, 25} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5331, 25} true;
  assume {:verifier.code 0} true;
  $i1 := $load.i16($M.9, $p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5331, 19} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i16.i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5331, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i32.i16($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5331, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := __fswab16($i3);
  call {:cexpr "tmp"} boogie_si_record_i16($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5332, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const __fswab16: ref;
axiom (__fswab16 == $sub.ref(0, 99538));
procedure  __fswab16($i0: i16)
  returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 36} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 36} true;
  assume {:verifier.code 0} true;
  $i1 := $zext.i16.i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 46} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5316:46: warning: over-approximating bitwise operation shl;
  $i2 := $shl.i32($i1, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i32.i16($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 20} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i16.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 71} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 81} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5316:81: warning: over-approximating bitwise operation ashr;
  $i6 := $ashr.i32($i5, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 62} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i32.i16($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 55} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i16.i32($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 53} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5316:53: warning: over-approximating bitwise operation or;
  $i9 := $or.i32($i4, $i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i32.i16($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5316, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const _raw_spin_lock_bh: ref;
axiom (_raw_spin_lock_bh == $sub.ref(0, 100570));
procedure  _raw_spin_lock_bh($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7649, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7649, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const tty_register_ldisc: ref;
axiom (tty_register_ldisc == $sub.ref(0, 101602));
procedure  tty_register_ldisc($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7753, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "tty_register_ldisc:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7753, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7753, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const printk: ref;
axiom (printk == $sub.ref(0, 102634));
procedure  printk.ref($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7712, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7712, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7712, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
procedure  printk.ref.i32($p0: ref, p.1: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7712, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7712, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7712, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const tty_unregister_ldisc: ref;
axiom (tty_unregister_ldisc == $sub.ref(0, 103666));
procedure  tty_unregister_ldisc($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7761, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "tty_unregister_ldisc:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7761, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7761, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ap_get: ref;
axiom (ap_get == $sub.ref(0, 104698));
procedure  ap_get($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5795, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5795, 3} true;
  assume {:verifier.code 0} true;
  call _raw_read_lock(disc_data_lock);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5796, 32} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1608, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5796, 32} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.9, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5796, 8} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5797, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.i64($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5797, 26} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i64($i4, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5797, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5798, 22} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p3, $mul.ref(0, 4656)), $mul.ref(416, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5798, 5} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5799, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5801, 3} true;
  assume {:verifier.code 0} true;
  call _raw_read_unlock(disc_data_lock);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5802, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const ppp_channel_index: ref;
axiom (ppp_channel_index == $sub.ref(0, 105730));
procedure  ppp_channel_index($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7688, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7688, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7688, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ppp_unit_number: ref;
axiom (ppp_unit_number == $sub.ref(0, 106762));
procedure  ppp_unit_number($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7705, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7705, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7705, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ppp_async_flush_output: ref;
axiom (ppp_async_flush_output == $sub.ref(0, 107794));
procedure  ppp_async_flush_output($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i1;
  var $p16: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6673, 22} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6673, 22} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6673, 3} true;
  assume {:verifier.code 0} true;
  call spin_lock_bh($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6674, 18} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(248, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6674, 18} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.9, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6674, 7} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(240, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6674, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p4, $p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6675, 27} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6675, 27} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.9, $p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6675, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6675, 32} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6675, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6676, 26} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6676, 26} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.9, $p9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6676, 5} true;
  assume {:verifier.code 0} true;
  call ldv_kfree_skb_17($p10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6677, 9} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(224, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6677, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p11, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6678, 52} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6678, 5} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6680, 3} true;
  assume {:verifier.code 0} true;
  $i13 := 1;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  $i13 := 0;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6682, 24} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6682, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_bh($p14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6683, 12} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i32($i13, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6683, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i15 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6684, 29} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6684, 5} true;
  assume {:verifier.code 0} true;
  call ppp_output_wakeup($p16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6685, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6687, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const n_tty_ioctl_helper: ref;
axiom (n_tty_ioctl_helper == $sub.ref(0, 108826));
procedure  n_tty_ioctl_helper($p0: ref, $p1: ref, $i2: i32, $i3: i64)
  returns ($r: i32)
{
  var $i4: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7684, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "n_tty_ioctl_helper:arg:arg2"} boogie_si_record_i32($i2);
  call {:cexpr "n_tty_ioctl_helper:arg:arg3"} boogie_si_record_i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7684, 10} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7684, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const tty_mode_ioctl: ref;
axiom (tty_mode_ioctl == $sub.ref(0, 109858));
procedure  tty_mode_ioctl($p0: ref, $p1: ref, $i2: i32, $i3: i64)
  returns ($r: i32)
{
  var $i4: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7749, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "tty_mode_ioctl:arg:arg2"} boogie_si_record_i32($i2);
  call {:cexpr "tty_mode_ioctl:arg:arg3"} boogie_si_record_i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7749, 10} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7749, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const ap_put: ref;
axiom (ap_put == $sub.ref(0, 110890));
procedure  ap_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5809, 35} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5809, 35} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(416, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5809, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := atomic_dec_and_test($p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5810, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5810, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5811, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(424, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5811, 5} true;
  assume {:verifier.code 0} true;
  call up($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5812, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5814, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atomic_dec_and_test: ref;
axiom (atomic_dec_and_test == $sub.ref(0, 111922));
procedure  atomic_dec_and_test($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5380, 135} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5380, 135} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  call devirtbounce.6(0, $p2, $p1, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5382, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.17, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5382, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i8.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5382, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5382, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5382, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const up: ref;
axiom (up == $sub.ref(0, 112954));
procedure  up($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7767, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7767, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_kfree_skb_17: ref;
axiom (ldv_kfree_skb_17 == $sub.ref(0, 113986));
procedure  ldv_kfree_skb_17($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7394, 16} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7394, 16} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7394, 3} true;
  assume {:verifier.code 0} true;
  call ldv_skb_free($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7395, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ppp_output_wakeup: ref;
axiom (ppp_output_wakeup == $sub.ref(0, 115018));
procedure  ppp_output_wakeup($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7697, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7697, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_read_lock: ref;
axiom (_raw_read_lock == $sub.ref(0, 116050));
procedure  _raw_read_lock($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7643, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7643, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atomic_inc: ref;
axiom (atomic_inc == $sub.ref(0, 117082));
procedure  atomic_inc($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5372, 126} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5372, 126} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  call devirtbounce.7(0, $p1, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5373, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_read_unlock: ref;
axiom (_raw_read_unlock == $sub.ref(0, 118114));
procedure  _raw_read_unlock($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7646, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7646, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const spinlock_check: ref;
axiom (spinlock_check == $sub.ref(0, 119146));
procedure  spinlock_check($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5401, 19} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5401, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5401, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5401, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const _raw_spin_lock_irqsave: ref;
axiom (_raw_spin_lock_irqsave == $sub.ref(0, 120178));
procedure  _raw_spin_lock_irqsave($p0: ref)
  returns ($r: i64)
{
  var $i1: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7656, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7656, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7656, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ppp_async_input: ref;
axiom (ppp_async_input == $sub.ref(0, 121210));
procedure  ppp_async_input($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i24: i32;
  var $i37: i32;
  var $i38: i1;
  var $i11: i32;
  var $i12: i32;
  var $i39: i32;
  var $i10: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i58: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i65: i1;
  var $i68: i64;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i75: i32;
  var $i76: i1;
  var $i67: i32;
  var $i77: i32;
  var $i66: i32;
  var $i74: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $i85: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $p120: ref;
  var $i121: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i8;
  var $i127: i32;
  var $i128: i32;
  var $i129: i8;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p119: ref;
  var $p86: ref;
  var $p134: ref;
  var $p84: ref;
  var $i135: i1;
  var $i136: i64;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i64;
  var $i141: i1;
  var $i142: i64;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $p150: ref;
  var $i151: i1;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i8;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i64;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $i189: i64;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i194: i32;
  var $p195: ref;
  var $i196: i32;
  var $i197: i32;
  var $p198: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6814, 14} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ppp_async_input:arg:count"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6814, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6814, 14} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.9, $p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6814, 8} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6814:8: warning: over-approximating bitwise operation xor;
  $i6 := $xor.i32($i5, $sub.i32(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6814, 20} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6814:20: warning: over-approximating bitwise operation and;
  $i7 := $and.i32($i6, 251658240);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6814, 34} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6814, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6830, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $slt.i32(0, $i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6830, 9} true;
  assume {:verifier.code 0} true;
  $i10 := 0;
  assume {:branchcond $i9} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb3:
  assume ($i9 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6830, 9} true;
  assume {:verifier.code 0} true;
  $i11, $i12 := 0, 0;
  goto $bb6;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6830, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i9 == 1));
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6815, 7} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb6:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6831, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6819, 23} true;
  assume {:verifier.code 0} true;
  $i13 := $sext.i32.i64($i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6819, 21} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p1, $mul.ref($i13, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6819, 15} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i8($M.9, $p14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6819, 9} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i8.i32($i15);
  call {:cexpr "c"} boogie_si_record_i32($i16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 9} true;
  assume {:verifier.code 0} true;
  $i17 := $p2i.ref.i64($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 31} true;
  assume {:verifier.code 0} true;
  $i18 := $ne.i64($i17, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 62} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i18 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 96} true;
  assume {:verifier.code 0} true;
  $i19 := $sext.i32.i64($i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 94} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p2, $mul.ref($i19, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 86} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i8($M.9, $p20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 65} true;
  assume {:verifier.code 0} true;
  $i22 := $sext.i8.i32($i21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 116} true;
  assume {:verifier.code 0} true;
  $i23 := $ne.i32($i22, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb11, $bb12;
$bb9:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 62} true;
  assume {:verifier.code 0} true;
  assume !(($i18 == 1));
  goto $bb10;
$bb10:
  assume {:verifier.code 0} true;
  goto $bb14;
$bb11:
  assume ($i23 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6821, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $i12;
  goto $bb13;
$bb12:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6820, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i23 == 1));
  goto $bb10;
$bb13:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6828, 11} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i32($i11, 1);
  call {:cexpr "i"} boogie_si_record_i32($i37);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6830, 11} true;
  assume {:verifier.code 0} true;
  $i38 := $slt.i32($i37, $i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6830, 9} true;
  assume {:verifier.code 0} true;
  $i39 := $i24;
  assume {:branchcond $i38} true;
  goto $bb15, $bb16;
$bb14:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6824, 13} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6824:13: warning: over-approximating bitwise operation and;
  $i25 := $and.i32($i16, 128);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6824, 20} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.i32($i25, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6824, 10} true;
  assume {:verifier.code 0} true;
  $i27 := (if ($i26 == 1) then 33554432 else 16777216);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6824, 48} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6824:48: warning: over-approximating bitwise operation or;
  $i28 := $or.i32($i27, $i12);
  call {:cexpr "s"} boogie_si_record_i32($i28);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6825, 13} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6825:13: warning: over-approximating bitwise operation ashr;
  $i29 := $ashr.i32($i16, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6825, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6825:19: warning: over-approximating bitwise operation xor;
  $i30 := $xor.i32($i29, $i16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6825, 24} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6825:24: warning: over-approximating bitwise operation and;
  $i31 := $and.i32($i30, 15);
  call {:cexpr "c"} boogie_si_record_i32($i31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6826, 17} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6826:17: warning: over-approximating bitwise operation ashr;
  $i32 := $ashr.i32(27030, $i31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6826, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6826:23: warning: over-approximating bitwise operation and;
  $i33 := $and.i32($i32, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6826, 10} true;
  assume {:verifier.code 0} true;
  $i34 := $ne.i32($i33, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6826, 10} true;
  assume {:verifier.code 0} true;
  $i35 := (if ($i34 == 1) then 134217728 else 67108864);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6826, 51} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6826:51: warning: over-approximating bitwise operation or;
  $i36 := $or.i32($i35, $i28);
  call {:cexpr "s"} boogie_si_record_i32($i36);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6826, 5} true;
  assume {:verifier.code 0} true;
  $i24 := $i36;
  goto $bb13;
$bb15:
  assume ($i38 == 1);
  assume {:verifier.code 0} true;
  $i11, $i12 := $i37, $i24;
  goto $bb6;
$bb16:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6830, 9} true;
  assume {:verifier.code 0} true;
  $i10 := $i39;
  goto $bb5;
$bb17:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6834, 21} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6834, 21} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.9, $p40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6834, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6834:27: warning: over-approximating bitwise operation or;
  $i42 := $or.i32($i41, $i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6834, 9} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6834, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p43, $i42);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6835, 3} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  call {:cexpr "ppp_async_input:arg:count"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6931, 13} true;
  assume {:verifier.code 0} true;
  $i44 := $sgt.i32($i3, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6931, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i44 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6931, 7} true;
  assume {:verifier.code 0} true;
  $p45, $p46, $i47 := $p1, $p2, $i3;
  goto $bb22;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6931, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i44 == 1));
  goto $bb21;
$bb21:
  assume {:verifier.code 0} true;
  goto $bb106;
$bb22:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6932, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 12} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 12} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i32($M.9, $p48);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 18} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6839:18: warning: over-approximating bitwise operation and;
  $i50 := $and.i32($i49, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 24} true;
  assume {:verifier.code 0} true;
  $i51 := $ne.i32($i50, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 30} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i51 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 65} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i8($M.9, $p45);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 33} true;
  assume {:verifier.code 0} true;
  $i53 := $zext.i8.i32($i52);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 71} true;
  assume {:verifier.code 0} true;
  $i54 := $eq.i32($i53, 125);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb27, $bb28;
$bb25:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i51 == 1));
  goto $bb26;
$bb26:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6842, 9} true;
  assume {:verifier.code 0} true;
  call $i58 := scan_ordinary($p0, $p45, $i47);
  call {:cexpr "n"} boogie_si_record_i32($i58);
  assume {:verifier.code 0} true;
  $p55, $i56, $i57 := $p45, $i47, $i58;
  goto $bb29;
$bb27:
  assume ($i54 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6841, 3} true;
  assume {:verifier.code 0} true;
  $p55, $i56, $i57 := $p45, $i47, 1;
  goto $bb29;
$bb28:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6839, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i54 == 1));
  goto $bb26;
$bb29:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6845, 7} true;
  assume {:verifier.code 0} true;
  $i59 := $p2i.ref.i64($p46);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6845, 29} true;
  assume {:verifier.code 0} true;
  $i60 := $ne.i64($i59, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6845, 60} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i60} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i60 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6845, 68} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6845, 68} true;
  assume {:verifier.code 0} true;
  $i62 := $load.i32($M.9, $p61);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6845, 74} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6845:74: warning: over-approximating bitwise operation and;
  $i63 := $and.i32($i62, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6845, 80} true;
  assume {:verifier.code 0} true;
  $i64 := $eq.i32($i63, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6845, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb33, $bb34;
$bb31:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6845, 60} true;
  assume {:verifier.code 0} true;
  assume !(($i60 == 1));
  goto $bb32;
$bb32:
  assume {:verifier.code 0} true;
  $i78 := 0;
  goto $bb47;
$bb33:
  assume ($i64 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6856, 11} true;
  assume {:verifier.code 0} true;
  $i65 := $slt.i32(0, $i57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6856, 9} true;
  assume {:verifier.code 0} true;
  $i66 := 0;
  assume {:branchcond $i65} true;
  goto $bb35, $bb36;
$bb34:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6845, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i64 == 1));
  goto $bb32;
$bb35:
  assume ($i65 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6856, 9} true;
  assume {:verifier.code 0} true;
  $i67 := 0;
  goto $bb38;
$bb36:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6856, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i65 == 1));
  goto $bb37;
$bb37:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb38:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6857, 7} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6849, 25} true;
  assume {:verifier.code 0} true;
  $i68 := $sext.i32.i64($i67);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6849, 23} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($p46, $mul.ref($i68, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6849, 15} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i8($M.9, $p69);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6849, 9} true;
  assume {:verifier.code 0} true;
  $i71 := $sext.i8.i32($i70);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6850, 11} true;
  assume {:verifier.code 0} true;
  $i72 := $ne.i32($i71, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6850, 9} true;
  assume {:verifier.code 0} true;
  $i73 := $i71;
  assume {:branchcond $i72} true;
  goto $bb40, $bb41;
$bb40:
  assume ($i72 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6849, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6851, 7} true;
  assume {:verifier.code 0} true;
  $i74 := $i73;
  goto $bb42;
$bb41:
  assume !(($i72 == 1));
  assume {:verifier.code 0} true;
  goto $bb43;
$bb42:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6861, 3} true;
  assume {:verifier.code 0} true;
  $i78 := $i74;
  goto $bb47;
$bb43:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6854, 11} true;
  assume {:verifier.code 0} true;
  $i75 := $add.i32($i67, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6856, 11} true;
  assume {:verifier.code 0} true;
  $i76 := $slt.i32($i75, $i57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6856, 9} true;
  assume {:verifier.code 0} true;
  $i77 := $i71;
  assume {:branchcond $i76} true;
  goto $bb44, $bb45;
$bb44:
  assume ($i76 == 1);
  assume {:verifier.code 0} true;
  $i67 := $i75;
  goto $bb38;
$bb45:
  assume !(($i76 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6856, 9} true;
  assume {:verifier.code 0} true;
  $i66 := $i77;
  goto $bb37;
$bb46:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6856, 13} true;
  assume {:verifier.code 0} true;
  $i74 := $i66;
  goto $bb42;
$bb47:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6863, 9} true;
  assume {:verifier.code 0} true;
  $i79 := $ne.i32($i78, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6863, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb48, $bb49;
$bb48:
  assume ($i79 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6864, 21} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6864, 21} true;
  assume {:verifier.code 0} true;
  $i81 := $load.i32($M.9, $p80);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6864, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6864:27: warning: over-approximating bitwise operation or;
  $i82 := $or.i32($i81, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6864, 9} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6864, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p83, $i82);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6865, 3} true;
  assume {:verifier.code 0} true;
  $p84 := $p55;
  goto $bb50;
$bb49:
  assume !(($i79 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6866, 9} true;
  assume {:verifier.code 0} true;
  $i85 := $sgt.i32($i57, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6866, 13} true;
  assume {:verifier.code 0} true;
  $p86 := $p55;
  assume {:branchcond $i85} true;
  goto $bb51, $bb52;
$bb50:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6899, 9} true;
  assume {:verifier.code 0} true;
  $i135 := $sge.i32($i57, $i56);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6899, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i135} true;
  goto $bb76, $bb77;
$bb51:
  assume ($i85 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6866, 21} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6866, 21} true;
  assume {:verifier.code 0} true;
  $i88 := $load.i32($M.9, $p87);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6866, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6866:27: warning: over-approximating bitwise operation and;
  $i89 := $and.i32($i88, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6866, 33} true;
  assume {:verifier.code 0} true;
  $i90 := $eq.i32($i89, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6866, 7} true;
  assume {:verifier.code 0} true;
  $p86 := $p55;
  assume {:branchcond $i90} true;
  goto $bb54, $bb55;
$bb52:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6866, 13} true;
  assume {:verifier.code 0} true;
  assume !(($i85 == 1));
  goto $bb53;
$bb53:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $p134 := $p86;
  goto $bb75;
$bb54:
  assume ($i90 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6867, 15} true;
  assume {:verifier.code 0} true;
  $p91 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(264, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6867, 15} true;
  assume {:verifier.code 0} true;
  $p92 := $load.ref($M.9, $p91);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6868, 9} true;
  assume {:verifier.code 0} true;
  $i93 := $p2i.ref.i64($p92);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6868, 29} true;
  assume {:verifier.code 0} true;
  $i94 := $eq.i64($i93, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6868, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i94} true;
  goto $bb56, $bb57;
$bb55:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6866, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i90 == 1));
  goto $bb53;
$bb56:
  assume ($i94 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6869, 54} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(20, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6869, 54} true;
  assume {:verifier.code 0} true;
  $i96 := $load.i32($M.9, $p95);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6869, 58} true;
  assume {:verifier.code 0} true;
  $i97 := $add.i32($i96, 6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6869, 13} true;
  assume {:verifier.code 0} true;
  call $p98 := ldv_dev_alloc_skb_18($i97);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6870, 11} true;
  assume {:verifier.code 0} true;
  $i99 := $p2i.ref.i64($p98);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6870, 31} true;
  assume {:verifier.code 0} true;
  $i100 := $eq.i64($i99, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6870, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb58, $bb59;
$bb57:
  assume !(($i94 == 1));
  assume {:verifier.code 0} true;
  $p102 := $p92;
  goto $bb62;
$bb58:
  assume ($i100 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6871, 9} true;
  assume {:verifier.code 0} true;
  goto $bb60;
$bb59:
  assume !(($i100 == 1));
  assume {:verifier.code 0} true;
  goto $bb61;
$bb60:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6938, 3} true;
  assume {:verifier.code 0} true;
  call $i194 := printk.ref(.str.6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6939, 19} true;
  assume {:verifier.code 0} true;
  $p195 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6939, 19} true;
  assume {:verifier.code 0} true;
  $i196 := $load.i32($M.9, $p195);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6939, 25} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6939:25: warning: over-approximating bitwise operation or;
  $i197 := $or.i32($i196, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6939, 7} true;
  assume {:verifier.code 0} true;
  $p198 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6939, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p198, $i197);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6940, 3} true;
  assume {:verifier.code 0} true;
  goto $bb107;
$bb61:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6874, 11} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(264, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6874, 16} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p101, $p98);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6875, 5} true;
  assume {:verifier.code 0} true;
  $p102 := $p98;
  goto $bb62;
$bb62:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6877, 14} true;
  assume {:verifier.code 0} true;
  $p103 := $add.ref($add.ref($p102, $mul.ref(0, 232)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6877, 14} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i32($M.9, $p103);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6877, 18} true;
  assume {:verifier.code 0} true;
  $i105 := $eq.i32($i104, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6877, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i105} true;
  goto $bb63, $bb64;
$bb63:
  assume ($i105 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6878, 43} true;
  assume {:verifier.code 0} true;
  $i106 := $load.i8($M.9, $p55);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6878, 11} true;
  assume {:verifier.code 0} true;
  $i107 := $zext.i8.i32($i106);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6878, 49} true;
  assume {:verifier.code 0} true;
  $i108 := $ne.i32($i107, 255);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6878, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i108} true;
  goto $bb65, $bb66;
$bb64:
  assume !(($i105 == 1));
  assume {:verifier.code 0} true;
  goto $bb68;
$bb65:
  assume ($i108 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6879, 33} true;
  assume {:verifier.code 0} true;
  $i109 := $load.i8($M.9, $p55);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6879, 27} true;
  assume {:verifier.code 0} true;
  $i110 := $zext.i8.i32($i109);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6879, 38} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6879:38: warning: over-approximating bitwise operation and;
  $i111 := $and.i32($i110, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6879, 43} true;
  assume {:verifier.code 0} true;
  $i112 := $add.i32($i111, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6879, 9} true;
  assume {:verifier.code 0} true;
  call skb_reserve($p102, $i112);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6880, 7} true;
  assume {:verifier.code 0} true;
  goto $bb67;
$bb66:
  assume !(($i108 == 1));
  assume {:verifier.code 0} true;
  goto $bb67;
$bb67:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6882, 5} true;
  assume {:verifier.code 0} true;
  goto $bb68;
$bb68:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6884, 11} true;
  assume {:verifier.code 0} true;
  call $i113 := skb_tailroom($p102);
  call {:cexpr "tmp"} boogie_si_record_i32($i113);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6885, 13} true;
  assume {:verifier.code 0} true;
  $i114 := $slt.i32($i113, $i57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6885, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i114} true;
  goto $bb69, $bb70;
$bb69:
  assume ($i114 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6886, 23} true;
  assume {:verifier.code 0} true;
  $p115 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6886, 23} true;
  assume {:verifier.code 0} true;
  $i116 := $load.i32($M.9, $p115);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6886, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6886:29: warning: over-approximating bitwise operation or;
  $i117 := $or.i32($i116, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6886, 11} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6886, 17} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p118, $i117);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6887, 5} true;
  assume {:verifier.code 0} true;
  $p119 := $p55;
  goto $bb71;
$bb70:
  assume !(($i114 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6888, 12} true;
  assume {:verifier.code 0} true;
  call $p120 := skb_put($p102, $i57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6889, 15} true;
  assume {:verifier.code 0} true;
  $i121 := $sext.i32.i64($i57);
  call {:cexpr "__len"} boogie_si_record_i64($i121);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6890, 15} true;
  assume {:verifier.code 0} true;
  call $M.9 := $memcpy.i8($M.9, $M.9, $p120, $p55, $i121, false);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6891, 16} true;
  assume {:verifier.code 0} true;
  $p122 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6891, 16} true;
  assume {:verifier.code 0} true;
  $i123 := $load.i32($M.9, $p122);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6891, 22} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6891:22: warning: over-approximating bitwise operation and;
  $i124 := $and.i32($i123, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6891, 28} true;
  assume {:verifier.code 0} true;
  $i125 := $ne.i32($i124, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6891, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i125} true;
  goto $bb72, $bb73;
$bb71:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6897, 3} true;
  assume {:verifier.code 0} true;
  $p134 := $p119;
  goto $bb75;
$bb72:
  assume ($i125 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6892, 30} true;
  assume {:verifier.code 0} true;
  $i126 := $load.i8($M.9, $p120);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6892, 15} true;
  assume {:verifier.code 0} true;
  $i127 := $zext.i8.i32($i126);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6892, 34} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6892:34: warning: over-approximating bitwise operation xor;
  $i128 := $xor.i32($i127, 32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6892, 15} true;
  assume {:verifier.code 0} true;
  $i129 := $trunc.i32.i8($i128);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6892, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p120, $i129);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6893, 25} true;
  assume {:verifier.code 0} true;
  $p130 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6893, 25} true;
  assume {:verifier.code 0} true;
  $i131 := $load.i32($M.9, $p130);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6893, 31} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6893:31: warning: over-approximating bitwise operation and;
  $i132 := $and.i32($i131, $sub.i32(0, 3));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6893, 13} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6893, 19} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p133, $i132);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6894, 7} true;
  assume {:verifier.code 0} true;
  goto $bb74;
$bb73:
  assume !(($i125 == 1));
  assume {:verifier.code 0} true;
  goto $bb74;
$bb74:
  assume {:verifier.code 0} true;
  $p119 := $p55;
  goto $bb71;
$bb75:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $p84 := $p134;
  goto $bb50;
$bb76:
  assume ($i135 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6900, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb77:
  assume !(($i135 == 1));
  assume {:verifier.code 0} true;
  goto $bb79;
$bb78:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6936, 3} true;
  assume {:verifier.code 0} true;
  goto $bb107;
$bb79:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6903, 21} true;
  assume {:verifier.code 0} true;
  $i136 := $sext.i32.i64($i57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6903, 19} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($p84, $mul.ref($i136, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6903, 13} true;
  assume {:verifier.code 0} true;
  $i138 := $load.i8($M.9, $p137);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6903, 7} true;
  assume {:verifier.code 0} true;
  $i139 := $zext.i8.i32($i138);
  call {:cexpr "c"} boogie_si_record_i32($i139);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 7} true;
  assume {:verifier.code 0} true;
  $i140 := $p2i.ref.i64($p46);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 29} true;
  assume {:verifier.code 0} true;
  $i141 := $ne.i64($i140, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 60} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i141} true;
  goto $bb80, $bb81;
$bb80:
  assume ($i141 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 94} true;
  assume {:verifier.code 0} true;
  $i142 := $sext.i32.i64($i57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 92} true;
  assume {:verifier.code 0} true;
  $p143 := $add.ref($p46, $mul.ref($i142, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 84} true;
  assume {:verifier.code 0} true;
  $i144 := $load.i8($M.9, $p143);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 63} true;
  assume {:verifier.code 0} true;
  $i145 := $sext.i8.i32($i144);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 114} true;
  assume {:verifier.code 0} true;
  $i146 := $ne.i32($i145, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i146} true;
  goto $bb83, $bb84;
$bb81:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 60} true;
  assume {:verifier.code 0} true;
  assume !(($i141 == 1));
  goto $bb82;
$bb82:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6907, 9} true;
  assume {:verifier.code 0} true;
  $i151 := $eq.i32($i139, 126);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6907, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i151} true;
  goto $bb86, $bb87;
$bb83:
  assume ($i146 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6905, 21} true;
  assume {:verifier.code 0} true;
  $p147 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6905, 21} true;
  assume {:verifier.code 0} true;
  $i148 := $load.i32($M.9, $p147);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6905, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6905:27: warning: over-approximating bitwise operation or;
  $i149 := $or.i32($i148, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6905, 9} true;
  assume {:verifier.code 0} true;
  $p150 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6905, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p150, $i149);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6906, 3} true;
  assume {:verifier.code 0} true;
  goto $bb85;
$bb84:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6904, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i146 == 1));
  goto $bb82;
$bb85:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6923, 9} true;
  assume {:verifier.code 0} true;
  $i184 := $add.i32($i57, 1);
  call {:cexpr "n"} boogie_si_record_i32($i184);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6924, 15} true;
  assume {:verifier.code 0} true;
  $i185 := $sext.i32.i64($i184);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6924, 13} true;
  assume {:verifier.code 0} true;
  $p186 := $add.ref($p84, $mul.ref($i185, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6925, 7} true;
  assume {:verifier.code 0} true;
  $i187 := $p2i.ref.i64($p46);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6925, 29} true;
  assume {:verifier.code 0} true;
  $i188 := $ne.i64($i187, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6925, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i188} true;
  goto $bb101, $bb102;
$bb86:
  assume ($i151 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6908, 5} true;
  assume {:verifier.code 0} true;
  call process_input_packet($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6909, 3} true;
  assume {:verifier.code 0} true;
  goto $bb88;
$bb87:
  assume !(($i151 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6910, 9} true;
  assume {:verifier.code 0} true;
  $i152 := $eq.i32($i139, 125);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6910, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i152} true;
  goto $bb89, $bb90;
$bb88:
  assume {:verifier.code 0} true;
  goto $bb85;
$bb89:
  assume ($i152 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6911, 21} true;
  assume {:verifier.code 0} true;
  $p153 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6911, 21} true;
  assume {:verifier.code 0} true;
  $i154 := $load.i32($M.9, $p153);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6911, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6911:27: warning: over-approximating bitwise operation or;
  $i155 := $or.i32($i154, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6911, 9} true;
  assume {:verifier.code 0} true;
  $p156 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6911, 15} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p156, $i155);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6912, 3} true;
  assume {:verifier.code 0} true;
  goto $bb91;
$bb90:
  assume !(($i152 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6913, 13} true;
  assume {:verifier.code 0} true;
  $p157 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6913, 13} true;
  assume {:verifier.code 0} true;
  $p158 := $load.ref($M.9, $p157);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6913, 19} true;
  assume {:verifier.code 0} true;
  $p159 := $add.ref($add.ref($p158, $mul.ref(0, 1752)), $mul.ref(1120, 1));
  $p160 := $add.ref($add.ref($add.ref($p158, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6913, 27} true;
  assume {:verifier.code 0} true;
  $i161 := $load.i32($M.9, $p160);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6913, 35} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6913:35: warning: over-approximating bitwise operation and;
  $i162 := $and.i32($i161, 1024);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6913, 44} true;
  assume {:verifier.code 0} true;
  $i163 := $ne.i32($i162, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6913, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i163} true;
  goto $bb92, $bb93;
$bb91:
  assume {:verifier.code 0} true;
  goto $bb88;
$bb92:
  assume ($i163 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6914, 20} true;
  assume {:verifier.code 0} true;
  $p164 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6914, 20} true;
  assume {:verifier.code 0} true;
  $p165 := $load.ref($M.9, $p164);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6914, 26} true;
  assume {:verifier.code 0} true;
  $p166 := $add.ref($add.ref($p165, $mul.ref(0, 1752)), $mul.ref(1120, 1));
  $p167 := $add.ref($add.ref($add.ref($p165, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(17, 1));
  $p168 := $add.ref($add.ref($add.ref($add.ref($p165, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(17, 1)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6914, 15} true;
  assume {:verifier.code 0} true;
  $i169 := $load.i8($M.9, $p168);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6914, 9} true;
  assume {:verifier.code 0} true;
  $i170 := $zext.i8.i32($i169);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6914, 42} true;
  assume {:verifier.code 0} true;
  $i171 := $eq.i32($i170, $i139);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6914, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i171} true;
  goto $bb94, $bb95;
$bb93:
  assume !(($i163 == 1));
  assume {:verifier.code 0} true;
  goto $bb100;
$bb94:
  assume ($i171 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6915, 21} true;
  assume {:verifier.code 0} true;
  $p172 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6915, 21} true;
  assume {:verifier.code 0} true;
  $p173 := $load.ref($M.9, $p172);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6915, 7} true;
  assume {:verifier.code 0} true;
  call start_tty($p173);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6916, 5} true;
  assume {:verifier.code 0} true;
  goto $bb96;
$bb95:
  assume !(($i171 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6917, 20} true;
  assume {:verifier.code 0} true;
  $p174 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6917, 20} true;
  assume {:verifier.code 0} true;
  $p175 := $load.ref($M.9, $p174);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6917, 26} true;
  assume {:verifier.code 0} true;
  $p176 := $add.ref($add.ref($p175, $mul.ref(0, 1752)), $mul.ref(1120, 1));
  $p177 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(17, 1));
  $p178 := $add.ref($add.ref($add.ref($add.ref($p175, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(17, 1)), $mul.ref(9, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6917, 15} true;
  assume {:verifier.code 0} true;
  $i179 := $load.i8($M.9, $p178);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6917, 9} true;
  assume {:verifier.code 0} true;
  $i180 := $zext.i8.i32($i179);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6917, 42} true;
  assume {:verifier.code 0} true;
  $i181 := $eq.i32($i180, $i139);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6917, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i181} true;
  goto $bb97, $bb98;
$bb96:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6921, 3} true;
  assume {:verifier.code 0} true;
  goto $bb100;
$bb97:
  assume ($i181 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6918, 20} true;
  assume {:verifier.code 0} true;
  $p182 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6918, 20} true;
  assume {:verifier.code 0} true;
  $p183 := $load.ref($M.9, $p182);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6918, 7} true;
  assume {:verifier.code 0} true;
  call stop_tty($p183);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6919, 5} true;
  assume {:verifier.code 0} true;
  goto $bb99;
$bb98:
  assume !(($i181 == 1));
  assume {:verifier.code 0} true;
  goto $bb99;
$bb99:
  assume {:verifier.code 0} true;
  goto $bb96;
$bb100:
  assume {:verifier.code 0} true;
  goto $bb91;
$bb101:
  assume ($i188 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6926, 21} true;
  assume {:verifier.code 0} true;
  $i189 := $sext.i32.i64($i184);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6926, 19} true;
  assume {:verifier.code 0} true;
  $p190 := $add.ref($p46, $mul.ref($i189, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6927, 3} true;
  assume {:verifier.code 0} true;
  $p191 := $p190;
  goto $bb103;
$bb102:
  assume !(($i188 == 1));
  assume {:verifier.code 0} true;
  $p191 := $p46;
  goto $bb103;
$bb103:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6929, 17} true;
  assume {:verifier.code 0} true;
  $i192 := $sub.i32($i56, $i184);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6931, 13} true;
  assume {:verifier.code 0} true;
  $i193 := $sgt.i32($i192, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6931, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i193} true;
  goto $bb104, $bb105;
$bb104:
  assume ($i193 == 1);
  assume {:verifier.code 0} true;
  $p45, $p46, $i47 := $p186, $p191, $i192;
  goto $bb22;
$bb105:
  assume !(($i193 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6931, 7} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb106:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6931, 15} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb107:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6942, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const spin_unlock_irqrestore: ref;
axiom (spin_unlock_irqrestore == $sub.ref(0, 122242));
procedure  spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5435, 39} true;
  assume {:verifier.code 0} true;
  call {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5435, 39} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5435, 48} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5435, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_unlock_irqrestore($p3, $i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5436, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_queue_empty: ref;
axiom (skb_queue_empty == $sub.ref(0, 123274));
procedure  skb_queue_empty($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5527, 58} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5527, 58} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5527, 58} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.9, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5527, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5527, 84} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5527, 67} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5527, 64} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i3, $i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5527, 64} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5527, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const tasklet_schedule: ref;
axiom (tasklet_schedule == $sub.ref(0, 124306));
procedure  tasklet_schedule($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5738, 62} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5738, 62} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5738, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := test_and_set_bit(0, $p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5739, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5739, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5740, 5} true;
  assume {:verifier.code 0} true;
  call __tasklet_schedule($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5741, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5743, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const tty_unthrottle: ref;
axiom (tty_unthrottle == $sub.ref(0, 125338));
procedure  tty_unthrottle($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7764, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7764, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __tasklet_schedule: ref;
axiom (__tasklet_schedule == $sub.ref(0, 126370));
procedure  __tasklet_schedule($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7632, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7632, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_unlock_irqrestore: ref;
axiom (_raw_spin_unlock_irqrestore == $sub.ref(0, 127402));
procedure  _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7665, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7665, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const scan_ordinary: ref;
axiom (scan_ordinary == $sub.ref(0, 128434));
procedure  scan_ordinary($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i32)
{
  var $i3: i1;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i12: i1;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i11: i32;
  var $i14: i32;
  var $i21: i32;
  var $i22: i1;
  var $i5: i32;
  var $i23: i32;
  var $i4: i32;
  var $i20: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6706, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "scan_ordinary:arg:count"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6706, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32(0, $i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6706, 7} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6706, 7} true;
  assume {:verifier.code 0} true;
  $i5 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6706, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6707, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6699, 21} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.i32.i64($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6699, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1, $mul.ref($i6, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6699, 13} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i8($M.9, $p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6699, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i8.i32($i8);
  call {:cexpr "c"} boogie_si_record_i32($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 10} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i32($i9, 125);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $i5;
  assume {:branchcond $i10} true;
  goto $bb6, $bb8;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 17} true;
  assume {:verifier.code 0} true;
  assume ($i10 == 1);
  goto $bb7;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6701, 5} true;
  assume {:verifier.code 0} true;
  $i20 := $i11;
  goto $bb16;
$bb8:
  assume !(($i10 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 22} true;
  assume {:verifier.code 0} true;
  $i12 := $eq.i32($i9, 126);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 30} true;
  assume {:verifier.code 0} true;
  $i11 := $i5;
  assume {:branchcond $i12} true;
  goto $bb9, $bb10;
$bb9:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 30} true;
  assume {:verifier.code 0} true;
  assume ($i12 == 1);
  goto $bb7;
$bb10:
  assume !(($i12 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 36} true;
  assume {:verifier.code 0} true;
  $i13 := $sle.i32($i9, 31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 42} true;
  assume {:verifier.code 0} true;
  $i14 := $i5;
  assume {:branchcond $i13} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i13 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 50} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(208, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 50} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.9, $p15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 67} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6700:67: warning: over-approximating bitwise operation shl;
  $i17 := $shl.i32(1, $i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 56} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6700:56: warning: over-approximating bitwise operation and;
  $i18 := $and.i32($i16, $i17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 74} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i32($i18, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 7} true;
  assume {:verifier.code 0} true;
  $i11, $i14 := $i5, $i5;
  assume {:branchcond $i19} true;
  goto $bb14, $bb15;
$bb12:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 42} true;
  assume {:verifier.code 0} true;
  assume !(($i13 == 1));
  goto $bb13;
$bb13:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb14:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 7} true;
  assume {:verifier.code 0} true;
  assume ($i19 == 1);
  goto $bb7;
$bb15:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6700, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i19 == 1));
  goto $bb13;
$bb16:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6711, 3} true;
  assume {:verifier.code 0} true;
  $r := $i20;
  $exn := false;
  return;
$bb17:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6704, 9} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i32($i14, 1);
  call {:cexpr "i"} boogie_si_record_i32($i21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6706, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $slt.i32($i21, $i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6706, 7} true;
  assume {:verifier.code 0} true;
  $i23 := $i21;
  assume {:branchcond $i22} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i22 == 1);
  assume {:verifier.code 0} true;
  $i5 := $i21;
  goto $bb4;
$bb19:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6706, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $i23;
  goto $bb3;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6706, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $i4;
  goto $bb16;
}
const ldv_dev_alloc_skb_18: ref;
axiom (ldv_dev_alloc_skb_18 == $sub.ref(0, 129466));
procedure  ldv_dev_alloc_skb_18($i0: i32)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7402, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_dev_alloc_skb_18:arg:length"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7402, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := ldv_skb_alloc();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7402, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7403, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const skb_reserve: ref;
axiom (skb_reserve == $sub.ref(0, 130498));
procedure  skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5579, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5579, 20} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5579, 20} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.9, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5579, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5579, 25} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p3, $mul.ref($i4, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5579, 8} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5579, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p6, $p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5580, 20} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5580, 20} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.9, $p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5580, 25} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i32($i8, $i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5580, 8} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5580, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p10, $i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5581, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_tailroom: ref;
axiom (skb_tailroom == $sub.ref(0, 131530));
procedure  skb_tailroom($p0: ref)
  returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i4: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5572, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5572, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := skb_is_nonlinear($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5572, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i8($i1);
  call {:cexpr "tmp"} boogie_si_record_i8($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 17} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i8.i1($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 11} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 54} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 54} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.9, $p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 80} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 80} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.9, $p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 58} true;
  assume {:verifier.code 0} true;
  $i9 := $sub.i32($i6, $i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $i9;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5573, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const skb_put: ref;
axiom (skb_put == $sub.ref(0, 132562));
procedure  skb_put($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7724, 27} true;
  assume {:verifier.code 0} true;
  call {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7724, 27} true;
  assume {:verifier.code 0} true;
  call $p2 := external_alloc();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7724, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const process_input_packet: ref;
axiom (process_input_packet == $sub.ref(0, 133594));
procedure  process_input_packet($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i8;
  var $i24: i32;
  var $i25: i8;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i30: i32;
  var $i15: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i8;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6726, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6726, 13} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(264, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6726, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.9, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6727, 12} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6727, 12} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.9, $p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6727, 18} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6727:18: warning: over-approximating bitwise operation and;
  $i5 := $and.i32($i4, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6727, 24} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6727, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6728, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6789, 7} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6789, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p73, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6790, 7} true;
  assume {:verifier.code 0} true;
  $i74 := $p2i.ref.i64($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6790, 27} true;
  assume {:verifier.code 0} true;
  $i75 := $ne.i64($i74, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6790, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i75} true;
  goto $bb41, $bb42;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6731, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6731, 27} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i64($i7, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6731, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6732, 5} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6798, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb8:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6735, 12} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6735, 12} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.9, $p9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6736, 14} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6736, 14} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.9, $p11);
  call {:cexpr "len"} boogie_si_record_i32($i12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6737, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $ule.i32($i12, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6737, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i13 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6738, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb10:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6750, 11} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i12, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6750, 7} true;
  assume {:verifier.code 0} true;
  $i15 := 65535;
  assume {:branchcond $i14} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i14 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6750, 7} true;
  assume {:verifier.code 0} true;
  $i16, $p17, $i18 := 65535, $p10, $i12;
  goto $bb15;
$bb13:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6750, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i14 == 1));
  goto $bb14;
$bb14:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb15:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6751, 5} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6745, 9} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p17, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6746, 35} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i32.i16($i16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6746, 28} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i16.i32($i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6746, 28} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.i32.i16($i21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6746, 53} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i8($M.9, $p17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6746, 47} true;
  assume {:verifier.code 0} true;
  $i24 := $zext.i8.i32($i23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6746, 47} true;
  assume {:verifier.code 0} true;
  $i25 := $trunc.i32.i8($i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6746, 13} true;
  assume {:verifier.code 0} true;
  call $i26 := crc_ccitt_byte($i22, $i25);
  call {:cexpr "tmp___0"} boogie_si_record_i16($i26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6747, 9} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i16.i32($i26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6748, 13} true;
  assume {:verifier.code 0} true;
  $i28 := $sub.i32($i18, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6750, 11} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i32($i28, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6750, 7} true;
  assume {:verifier.code 0} true;
  $i30 := $i27;
  assume {:branchcond $i29} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i29 == 1);
  assume {:verifier.code 0} true;
  $i16, $p17, $i18 := $i27, $p19, $i28;
  goto $bb15;
$bb18:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6750, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $i30;
  goto $bb14;
$bb19:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6754, 11} true;
  assume {:verifier.code 0} true;
  $i31 := $ne.i32($i15, 61624);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6754, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i31 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6755, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb21:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6758, 22} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6758, 22} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i32($M.9, $p32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6758, 26} true;
  assume {:verifier.code 0} true;
  $i34 := $sub.i32($i33, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6758, 3} true;
  assume {:verifier.code 0} true;
  call skb_trim($p2, $i34);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6759, 12} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6759, 12} true;
  assume {:verifier.code 0} true;
  $p36 := $load.ref($M.9, $p35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6760, 22} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i8($M.9, $p36);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6760, 7} true;
  assume {:verifier.code 0} true;
  $i38 := $zext.i8.i32($i37);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6760, 25} true;
  assume {:verifier.code 0} true;
  $i39 := $eq.i32($i38, 255);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6760, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i39 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 28} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p36, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 24} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i8($M.9, $p40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 9} true;
  assume {:verifier.code 0} true;
  $i42 := $zext.i8.i32($i41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 35} true;
  assume {:verifier.code 0} true;
  $i43 := $ne.i32($i42, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 41} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb25, $bb27;
$bb24:
  assume !(($i39 == 1));
  assume {:verifier.code 0} true;
  $p48 := $p36;
  goto $bb31;
$bb25:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 41} true;
  assume {:verifier.code 0} true;
  assume ($i43 == 1);
  goto $bb26;
$bb26:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6762, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb27:
  assume !(($i43 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 49} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 49} true;
  assume {:verifier.code 0} true;
  $i45 := $load.i32($M.9, $p44);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 53} true;
  assume {:verifier.code 0} true;
  $i46 := $ule.i32($i45, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb28, $bb29;
$bb28:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6761, 9} true;
  assume {:verifier.code 0} true;
  assume ($i46 == 1);
  goto $bb26;
$bb29:
  assume !(($i46 == 1));
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6765, 9} true;
  assume {:verifier.code 0} true;
  call $p47 := skb_pull($p2, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6766, 3} true;
  assume {:verifier.code 0} true;
  $p48 := $p47;
  goto $bb31;
$bb31:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6768, 26} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i8($M.9, $p48);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6768, 11} true;
  assume {:verifier.code 0} true;
  $i50 := $zext.i8.i32($i49);
  call {:cexpr "proto"} boogie_si_record_i32($i50);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6769, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6769:19: warning: over-approximating bitwise operation and;
  $i51 := $and.i32($i50, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6769, 19} true;
  assume {:verifier.code 0} true;
  $i52 := $ne.i32($i51, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i52 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6770, 15} true;
  assume {:verifier.code 0} true;
  call $p53 := skb_push($p2, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6771, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p53, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6772, 3} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb33:
  assume !(($i52 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6773, 14} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6773, 14} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i32($M.9, $p54);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6773, 18} true;
  assume {:verifier.code 0} true;
  $i56 := $ule.i32($i55, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6773, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb35, $bb36;
$bb34:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6783, 27} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6783, 27} true;
  assume {:verifier.code 0} true;
  $i66 := $load.i32($M.9, $p65);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6783, 16} true;
  assume {:verifier.code 0} true;
  $i67 := $trunc.i32.i8($i66);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6783, 8} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(40, 1));
  $p69 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(40, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6783, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i8($M.9, $p69, $i67);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6784, 24} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(280, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6784, 3} true;
  assume {:verifier.code 0} true;
  call skb_queue_tail($p70, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6785, 7} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(264, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6785, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p71, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6786, 7} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($add.ref($p0, $mul.ref(0, 4656)), $mul.ref(12, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6786, 13} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p72, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6787, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb35:
  assume ($i56 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6774, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb36:
  assume !(($i56 == 1));
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6777, 20} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:6777:20: warning: over-approximating bitwise operation shl;
  $i57 := $shl.i32($i50, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6777, 47} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p48, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6777, 43} true;
  assume {:verifier.code 0} true;
  $i59 := $load.i8($M.9, $p58);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6777, 28} true;
  assume {:verifier.code 0} true;
  $i60 := $zext.i8.i32($i59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6777, 26} true;
  assume {:verifier.code 0} true;
  $i61 := $add.i32($i57, $i60);
  call {:cexpr "proto"} boogie_si_record_i32($i61);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6778, 15} true;
  assume {:verifier.code 0} true;
  $i62 := $eq.i32($i61, 49185);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6778, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb38, $bb39;
$bb38:
  assume ($i62 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6779, 40} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6779, 40} true;
  assume {:verifier.code 0} true;
  $i64 := $load.i32($M.9, $p63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6779, 7} true;
  assume {:verifier.code 0} true;
  call async_lcp_peek($p0, $p48, $i64, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6780, 5} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb39:
  assume !(($i62 == 1));
  assume {:verifier.code 0} true;
  goto $bb40;
$bb40:
  assume {:verifier.code 0} true;
  goto $bb34;
$bb41:
  assume ($i75 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6791, 5} true;
  assume {:verifier.code 0} true;
  call skb_trim($p2, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6792, 15} true;
  assume {:verifier.code 0} true;
  call $i76 := skb_headroom($p2);
  call {:cexpr "tmp___2"} boogie_si_record_i32($i76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6793, 29} true;
  assume {:verifier.code 0} true;
  $i77 := $sub.i32(0, $i76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6793, 5} true;
  assume {:verifier.code 0} true;
  call skb_reserve($p2, $i77);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6794, 3} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb42:
  assume !(($i75 == 1));
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6796, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
}
const start_tty: ref;
axiom (start_tty == $sub.ref(0, 134626));
procedure  start_tty($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7736, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7736, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const stop_tty: ref;
axiom (stop_tty == $sub.ref(0, 135658));
procedure  stop_tty($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7739, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7739, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_trim: ref;
axiom (skb_trim == $sub.ref(0, 136690));
procedure  skb_trim($p0: ref, $i1: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7733, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "skb_trim:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7733, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_pull: ref;
axiom (skb_pull == $sub.ref(0, 137722));
procedure  skb_pull($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7716, 27} true;
  assume {:verifier.code 0} true;
  call {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7716, 27} true;
  assume {:verifier.code 0} true;
  call $p2 := external_alloc();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7716, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const skb_push: ref;
axiom (skb_push == $sub.ref(0, 138754));
procedure  skb_push($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7720, 27} true;
  assume {:verifier.code 0} true;
  call {:cexpr "skb_push:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7720, 27} true;
  assume {:verifier.code 0} true;
  call $p2 := external_alloc();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7720, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const skb_queue_tail: ref;
axiom (skb_queue_tail == $sub.ref(0, 139786));
procedure  skb_queue_tail($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7730, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7730, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_headroom: ref;
axiom (skb_headroom == $sub.ref(0, 140818));
procedure  skb_headroom($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 39} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 39} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 39} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.9, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 75} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 75} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.9, $p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 63} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 47} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i64.i32($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 45} true;
  assume {:verifier.code 0} true;
  $i9 := $sub.i32($i4, $i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5565, 3} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
}
const external_alloc: ref;
axiom (external_alloc == $sub.ref(0, 141850));
procedure  external_alloc()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7771, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7771, 10} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet_pointer();
  call {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7771, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const skb_is_nonlinear: ref;
axiom (skb_is_nonlinear == $sub.ref(0, 142882));
procedure  skb_is_nonlinear($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5556, 31} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5556, 31} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(108, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5556, 31} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.9, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5556, 40} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5556, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const ldv_skb_alloc: ref;
axiom (ldv_skb_alloc == $sub.ref(0, 143914));
procedure  ldv_skb_alloc()
  returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7548, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7548, 13} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(232);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7549, 9} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7549, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7550, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.ref($p2, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7550, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7553, 17} true;
  assume {:verifier.code 0} true;
  $p5 := $M.8;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7553, 5} true;
  assume {:verifier.code 0} true;
  call ldv_set_add($p5, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7554, 12} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7554, 5} true;
  assume {:verifier.code 0} true;
  $p4 := $p0;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7551, 5} true;
  assume {:verifier.code 0} true;
  $p4 := $0.ref;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7557, 1} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const ldv_set_add: ref;
axiom (ldv_set_add == $sub.ref(0, 144946));
procedure  ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7425, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7425, 13} true;
  assume {:verifier.code 0} true;
  $i2 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7425, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32(0, $i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7425, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7425, 9} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7425, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7427, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7426, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7429, 25} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7429, 25} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7429, 25} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.15, $p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7429, 9} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7429, 40} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7429, 37} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i64($i8, $i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7429, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb8, $bb9;
$bb6:
  assume !(($i13 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7425, 9} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7435, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7435, 18} true;
  assume {:verifier.code 0} true;
  $i15 := $slt.i32($i14, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7435, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb13, $bb14;
$bb8:
  assume ($i10 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7430, 7} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7442, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7433, 11} true;
  assume {:verifier.code 0} true;
  $i11 := $add.i32($i4, 1);
  call {:cexpr "i"} boogie_si_record_i32($i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7425, 13} true;
  assume {:verifier.code 0} true;
  $i12 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7425, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $slt.i32($i11, $i12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7425, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb12, $bb6;
$bb12:
  assume ($i13 == 1);
  assume {:verifier.code 0} true;
  $i4 := $i11;
  goto $bb4;
$bb13:
  assume ($i15 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7436, 14} true;
  assume {:verifier.code 0} true;
  $i16 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7436, 5} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7436, 5} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7436, 26} true;
  assume {:verifier.code 0} true;
  $M.15 := $store.ref($M.15, $p18, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7437, 18} true;
  assume {:verifier.code 0} true;
  $i19 := $M.11;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7437, 29} true;
  assume {:verifier.code 0} true;
  $i20 := $add.i32($i19, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7437, 16} true;
  assume {:verifier.code 0} true;
  $M.11 := $i20;
  call {:cexpr "last_index"} boogie_si_record_i32($i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7438, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7440, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
}
const kzalloc: ref;
axiom (kzalloc == $sub.ref(0, 145978));
procedure  kzalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5458, 29} true;
  assume {:verifier.code 0} true;
  call {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
  call {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5458, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i:5458:29: warning: over-approximating bitwise operation or;
  $i2 := $or.i32($i1, 32768);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5458, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := kmalloc($i0, $i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5459, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const __raw_spin_lock_init: ref;
axiom (__raw_spin_lock_init == $sub.ref(0, 147010));
procedure  __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7629, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7629, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_queue_head_init: ref;
axiom (skb_queue_head_init == $sub.ref(0, 148042));
procedure  skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5545, 26} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5545, 26} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5545, 3} true;
  assume {:verifier.code 0} true;
  call $p3 := spinlock_check($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5546, 32} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
  $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5546, 46} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5546, 3} true;
  assume {:verifier.code 0} true;
  call __raw_spin_lock_init($p6, .str.3, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5547, 3} true;
  assume {:verifier.code 0} true;
  call __skb_queue_head_init($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5548, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ppp_async_process: ref;
axiom (ppp_async_process == $sub.ref(0, 149074));
procedure  ppp_async_process($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p6: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6378, 8} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ppp_async_process:arg:arg"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6378, 8} true;
  assume {:verifier.code 0} true;
  $p1 := $i2p.i64.ref($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6387, 34} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4656)), $mul.ref(280, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6387, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := ldv_skb_dequeue_14($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6388, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.i64($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6388, 27} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i64($i4, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6388, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6388, 7} true;
  assume {:verifier.code 0} true;
  $p6 := $p3;
  goto $bb4;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6388, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb11;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6389, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6381, 33} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p6, $mul.ref(0, 232)), $mul.ref(40, 1));
  $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 232)), $mul.ref(40, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6381, 28} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i8($M.9, $p8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6381, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.i8.i32($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6381, 40} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i32($i10, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6381, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i11 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6382, 27} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p1, $mul.ref(0, 4656)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6382, 5} true;
  assume {:verifier.code 0} true;
  call ppp_input_error($p12, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6383, 3} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6385, 19} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p1, $mul.ref(0, 4656)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6385, 3} true;
  assume {:verifier.code 0} true;
  call ppp_input($p13, $p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6387, 9} true;
  assume {:verifier.code 0} true;
  call $p14 := ldv_skb_dequeue_14($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6388, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6388, 27} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i64($i15, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6388, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i16 == 1);
  assume {:verifier.code 0} true;
  $p6 := $p14;
  goto $bb4;
$bb10:
  assume !(($i16 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6388, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6392, 70} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p1, $mul.ref(0, 4656)), $mul.ref(168, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6392, 9} true;
  assume {:verifier.code 0} true;
  call $i18 := constant_test_bit(0, $p17);
  call {:cexpr "tmp"} boogie_si_record_i32($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6393, 11} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i32($i18, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6393, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i19 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6394, 15} true;
  assume {:verifier.code 0} true;
  call $i20 := ppp_async_push($p1);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6395, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $ne.i32($i20, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6395, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb14, $bb15;
$bb13:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb17;
$bb14:
  assume ($i21 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6396, 31} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p1, $mul.ref(0, 4656)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6396, 7} true;
  assume {:verifier.code 0} true;
  call ppp_output_wakeup($p22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6397, 5} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6399, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 6401, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const tasklet_init: ref;
axiom (tasklet_init == $sub.ref(0, 150106));
procedure  tasklet_init($p0: ref, $p1: ref, $i2: i64)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7742, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "tasklet_init:arg:arg2"} boogie_si_record_i64($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7742, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atomic_set: ref;
axiom (atomic_set == $sub.ref(0, 151138));
procedure  atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5365, 6} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5365, 6} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5365, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p2, $i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5366, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const sema_init: ref;
axiom (sema_init == $sub.ref(0, 152170));
procedure  sema_init($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5696, 19} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(96, $zext.i32.i64(1)));
  call {:cexpr "sema_init:arg:val"} boogie_si_record_i32($i1);
  assume true;
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5696, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p6 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5696, 42} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5696, 52} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p7, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5697, 19} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5697, 30} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p9, $sub.i32(0, 559067475));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5698, 19} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5698, 34} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p11, $sub.i32(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5699, 19} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5699, 30} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p13, $i2p.i64.ref($sub.i64(0, 1)));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5700, 19} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
  $p16 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5700, 36} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p16, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5701, 19} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
  $p19 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1));
  $p20 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5701, 47} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p20, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5702, 19} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
  $p23 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1));
  $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5702, 47} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p24, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5703, 19} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
  $p27 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5703, 37} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p27, .str.4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5704, 19} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
  $p30 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5704, 36} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p30, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5705, 19} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
  $p33 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5705, 35} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i64($M.9, $p33, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5706, 19} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5706, 25} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p34, $i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5707, 43} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5707, 19} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1));
  $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5707, 34} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p37, $p35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5708, 43} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5708, 19} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1));
  $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5708, 34} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p40, $p38);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5709, 10} true;
  assume {:verifier.code 0} true;
  $p41 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5709, 10} true;
  assume {:verifier.code 0} true;
  $p42 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5709, 10} true;
  assume {:verifier.code 0} true;
  call $M.9 := $memcpy.i8($M.9, $M.9, $p41, $p42, 96, false);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5710, 27} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
  $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5710, 3} true;
  assume {:verifier.code 0} true;
  call lockdep_init_map($p44, .str.5, $p2, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5711, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const tty_get_baud_rate: ref;
axiom (tty_get_baud_rate == $sub.ref(0, 153202));
procedure  tty_get_baud_rate($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5724, 38} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5724, 38} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5724, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := tty_termios_baud_rate($p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5725, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ppp_register_channel: ref;
axiom (ppp_register_channel == $sub.ref(0, 154234));
procedure  ppp_register_channel($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7701, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7701, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7701, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const kfree: ref;
axiom (kfree == $sub.ref(0, 155266));
procedure  kfree($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7775, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7775, 3} true;
  assume {:verifier.code 0} true;
  call free_($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7776, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 156298));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const tty_termios_baud_rate: ref;
axiom (tty_termios_baud_rate == $sub.ref(0, 157330));
procedure  tty_termios_baud_rate($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7757, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7757, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7757, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const lockdep_init_map: ref;
axiom (lockdep_init_map == $sub.ref(0, 158362));
procedure  lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7677, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7677, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ppp_input_error: ref;
axiom (ppp_input_error == $sub.ref(0, 159394));
procedure  ppp_input_error($p0: ref, $i1: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7694, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ppp_input_error:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7694, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ppp_input: ref;
axiom (ppp_input == $sub.ref(0, 160426));
procedure  ppp_input($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7691, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7691, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_skb_dequeue_14: ref;
axiom (ldv_skb_dequeue_14 == $sub.ref(0, 161458));
procedure  ldv_skb_dequeue_14($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7373, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7373, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := ldv_skb_alloc();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7373, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7374, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const __skb_queue_head_init: ref;
axiom (__skb_queue_head_init == $sub.ref(0, 162490));
procedure  __skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5534, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5534, 9} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5535, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5535, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p2, $p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5536, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5536, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p3, $p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5537, 9} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5537, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $store.i32($M.9, $p4, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5538, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const kmalloc: ref;
axiom (kmalloc == $sub.ref(0, 163522));
procedure  kmalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5450, 13} true;
  assume {:verifier.code 0} true;
  call {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
  call {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5450, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := __kmalloc($i0, $i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 5451, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const _raw_write_lock_irq: ref;
axiom (_raw_write_lock_irq == $sub.ref(0, 164554));
procedure  _raw_write_lock_irq($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7668, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7668, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_write_unlock_irq: ref;
axiom (_raw_write_unlock_irq == $sub.ref(0, 165586));
procedure  _raw_write_unlock_irq($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7671, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7671, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const down: ref;
axiom (down == $sub.ref(0, 166618));
procedure  down($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7674, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7674, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const tasklet_kill: ref;
axiom (tasklet_kill == $sub.ref(0, 167650));
procedure  tasklet_kill($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7745, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7745, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ppp_unregister_channel: ref;
axiom (ppp_unregister_channel == $sub.ref(0, 168682));
procedure  ppp_unregister_channel($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7708, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7708, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_kfree_skb_12: ref;
axiom (ldv_kfree_skb_12 == $sub.ref(0, 169714));
procedure  ldv_kfree_skb_12($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7358, 16} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7358, 16} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7358, 3} true;
  assume {:verifier.code 0} true;
  call ldv_skb_free($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7359, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_queue_purge: ref;
axiom (skb_queue_purge == $sub.ref(0, 170746));
procedure  skb_queue_purge($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7727, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7727, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_kfree_skb_13: ref;
axiom (ldv_kfree_skb_13 == $sub.ref(0, 171778));
procedure  ldv_kfree_skb_13($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7365, 16} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7365, 16} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7365, 3} true;
  assume {:verifier.code 0} true;
  call ldv_skb_free($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7366, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_set_init: ref;
axiom (ldv_set_init == $sub.ref(0, 172810));
procedure  ldv_set_init($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7414, 14} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7414, 14} true;
  assume {:verifier.code 0} true;
  $M.11 := 0;
  call {:cexpr "last_index"} boogie_si_record_i32(0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_async.ko-entry_point.cil.out-tt6wpj4_.i", 7415, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 173842));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 39, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 174874));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 175906));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 176938));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 59, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 177970));
procedure  __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 179002));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 180034));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 181066));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 182098));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 183130));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 184162));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 185194));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 186226));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 187258));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 188290));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 189322));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 190354));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __VERIFIER_nondet_unsigned_int: ref;
axiom (__VERIFIER_nondet_unsigned_int == $sub.ref(0, 191386));
procedure  __VERIFIER_nondet_unsigned_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 136, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 136, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 137, 22} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
  call {:cexpr "min"} boogie_si_record_i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 22} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
  call {:cexpr "max"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.i32($i2, 4294967295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.i32($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 56} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.i32($i2, 4294967295);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.i32($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 141, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 192418));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 193450));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 194482));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 195514));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 196546));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_unsigned_long: ref;
axiom (__VERIFIER_nondet_unsigned_long == $sub.ref(0, 197578));
procedure  __VERIFIER_nondet_unsigned_long()
  returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 169, 21} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 169, 21} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 170, 23} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
  call {:cexpr "min"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 23} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
  call {:cexpr "max"} boogie_si_record_i64($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i64($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.i64($i2, 18446744073709551615);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 57} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.i64($i2, 18446744073709551615);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.i64($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 174, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 198610));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 199642));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 200674));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 201706));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 202738));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 203770));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 204802));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 205834));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_uint: ref;
axiom (__VERIFIER_nondet_uint == $sub.ref(0, 206866));
procedure  __VERIFIER_nondet_uint()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __VERIFIER_nondet_ulong: ref;
axiom (__VERIFIER_nondet_ulong == $sub.ref(0, 207898));
procedure  __VERIFIER_nondet_ulong()
  returns ($r: i64)
{
  var $i0: i64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 21} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 21} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __VERIFIER_nondet_pointer: ref;
axiom (__VERIFIER_nondet_pointer == $sub.ref(0, 208930));
procedure  __VERIFIER_nondet_pointer()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 48} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 48} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet();
  call {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 41} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const __VERIFIER_nondet: ref;
axiom (__VERIFIER_nondet == $sub.ref(0, 209962));
procedure  __VERIFIER_nondet()
  returns ($r: ref);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 210994));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 212026));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 213058));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 544, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_begin: ref;
axiom (__VERIFIER_atomic_begin == $sub.ref(0, 214090));
procedure  __VERIFIER_atomic_begin()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  call corral_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 79} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_end: ref;
axiom (__VERIFIER_atomic_end == $sub.ref(0, 215122));
procedure  __VERIFIER_atomic_end()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  call corral_atomic_end();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 75} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const calloc: ref;
axiom (calloc == $sub.ref(0, 216154));
procedure  calloc($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 1} true;
  call {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
  call {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 21, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 22, 5} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 23, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $mul.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 23, 11} true;
  assume {:verifier.code 0} true;
  call $p6 := malloc($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 24, 24} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 24, 5} true;
  assume {:verifier.code 0} true;
  call $M.9 := $memset.i8($M.9, $p6, 0, $i7, false);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 25, 5} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:verifier.code 0} true;
  $p4 := $p6;
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 27, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 217186));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i1);
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 218218));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 219250));
procedure  __SMACK_static_init()
{
$bb0:
  $M.18 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  $M.0 := $0.ref;
  $M.1 := $0.ref;
  $M.2 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  $M.3 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  $M.4 := 0;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
  $M.5 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  $M.6 := 0;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
  $M.7 := 0;
  call {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
  $M.11 := 0;
  call {:cexpr "last_index"} boogie_si_record_i32(0);
  $M.8 := $0.ref;
  $M.15 := $store.ref($M.15, set_impl, $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
  $M.15 := $store.ref($M.15, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
  $M.13 := 250;
  call {:cexpr "flag_time"} boogie_si_record_i32(250);
  $M.19 := $store.i32($M.19, ppp_ldisc, 21507);
  $M.20 := $store.ref($M.20, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(8, 1)), .str.9);
  $M.21 := $store.i32($M.21, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(16, 1)), 0);
  $M.22 := $store.i32($M.22, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(20, 1)), 0);
  $M.23 := $store.ref($M.23, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(24, 1)), ppp_asynctty_open);
  $M.24 := $store.ref($M.24, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(32, 1)), ppp_asynctty_close);
  $M.25 := $store.ref($M.25, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(40, 1)), $0.ref);
  $M.26 := $store.ref($M.26, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(48, 1)), $0.ref);
  $M.27 := $store.ref($M.27, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(56, 1)), ppp_asynctty_read);
  $M.28 := $store.ref($M.28, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(64, 1)), ppp_asynctty_write);
  $M.29 := $store.ref($M.29, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(72, 1)), ppp_asynctty_ioctl);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(80, 1)), $0.ref);
  $M.31 := $store.ref($M.31, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(88, 1)), $0.ref);
  $M.32 := $store.ref($M.32, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(96, 1)), ppp_asynctty_poll);
  $M.33 := $store.ref($M.33, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(104, 1)), ppp_asynctty_hangup);
  $M.34 := $store.ref($M.34, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(112, 1)), ppp_asynctty_receive);
  $M.35 := $store.ref($M.35, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(120, 1)), ppp_asynctty_wakeup);
  $M.36 := $store.ref($M.36, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(128, 1)), $0.ref);
  $M.37 := $store.ref($M.37, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(136, 1)), $0.ref);
  $M.38 := $store.ref($M.38, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(144, 1)), $0.ref);
  $M.39 := $store.ref($M.39, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(152, 1)), __this_module);
  $M.40 := $store.i32($M.40, $add.ref($add.ref(ppp_ldisc, $mul.ref(0, 168)), $mul.ref(160, 1)), 0);
  $M.41 := $store.i32($M.41, disc_data_lock, 0);
  $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref($add.ref($add.ref(disc_data_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.43 := $store.i32($M.43, $add.ref($add.ref(disc_data_lock, $mul.ref(0, 72)), $mul.ref(8, 1)), $sub.i32(0, 558948627));
  $M.44 := $store.i32($M.44, $add.ref($add.ref(disc_data_lock, $mul.ref(0, 72)), $mul.ref(12, 1)), $sub.i32(0, 1));
  $M.45 := $store.ref($M.45, $add.ref($add.ref(disc_data_lock, $mul.ref(0, 72)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
  $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref(disc_data_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
  $M.47 := $store.ref($M.47, $add.ref($add.ref($add.ref($add.ref(disc_data_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref($add.ref(disc_data_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.49 := $store.ref($M.49, $add.ref($add.ref($add.ref(disc_data_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str);
  $M.50 := $store.i32($M.50, $add.ref($add.ref($add.ref(disc_data_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
  $M.51 := $store.i64($M.51, $add.ref($add.ref($add.ref(disc_data_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
  $M.9 := $store.ref($M.9, async_ops, ppp_async_send);
  $M.9 := $store.ref($M.9, $add.ref($add.ref(async_ops, $mul.ref(0, 16)), $mul.ref(8, 1)), ppp_async_ioctl);
  $M.9 := $store.i8($M.9, .str.4, 40);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(1, 1)), 42);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(2, 1)), 115);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(3, 1)), 101);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(4, 1)), 109);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(5, 1)), 41);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(6, 1)), 46);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(7, 1)), 108);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(8, 1)), 111);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(9, 1)), 99);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(10, 1)), 107);
  $M.9 := $store.i8($M.9, $add.ref($add.ref(.str.4, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
  $M.52 := .str.1.30;
  $M.53 := 0;
  call {:cexpr "errno_global"} boogie_si_record_i32(0);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 220282));
procedure  devirtbounce(funcPtr: ref, arg: i32, arg1: ref)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i2 := $eq.ref(__builtinx_object_size, $p0);
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  call $i1 := __builtinx_object_size();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume !(($i2 == 1));
  assume false;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 221314));
procedure  devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64)
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 222346));
procedure  devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i2 := $eq.ref(__builtinx_object_size, $p0);
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  call $i1 := __builtinx_object_size();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume !(($i2 == 1));
  assume false;
}
const devirtbounce.3: ref;
axiom (devirtbounce.3 == $sub.ref(0, 223378));
procedure  devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.4: ref;
axiom (devirtbounce.4 == $sub.ref(0, 224410));
procedure  devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.5: ref;
axiom (devirtbounce.5 == $sub.ref(0, 225442));
procedure  devirtbounce.5(funcPtr: ref, arg: i32)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i2 := $eq.ref(__builtinx_object_size, $p0);
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  call $i1 := __builtinx_object_size();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume !(($i2 == 1));
  assume false;
}
const devirtbounce.6: ref;
axiom (devirtbounce.6 == $sub.ref(0, 226474));
procedure  devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.7: ref;
axiom (devirtbounce.7 == $sub.ref(0, 227506));
procedure  devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
procedure  $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

procedure  boogie_si_record_i16(x: i16);
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i64(x: i64);
procedure  boogie_si_record_i8(x: i8);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
