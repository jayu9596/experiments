// generated by SMACK version 2.4.1 for svcomp
// via /usr/local/bin/smack /proj/SMACK/SMACKBenchResults/data/sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out.i -x svcomp --verifier svcomp -t -q -bpl 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out.i.bpl

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (330 regions)
var $M.0: [ref] i8;
var $M.1: [ref] i8;
var $M.2: [ref] i64;
var $M.3: [ref] ref;
var $M.4: [ref] ref;
var $M.5: [ref] ref;
var $M.6: [ref] ref;
var $M.7: [ref] i24;
var $M.8: [ref] i8;
var $M.9: [ref] ref;
var $M.10: i64;
var $M.11: [ref] i8;
var $M.12: [ref] i16;
var $M.13: [ref] i8;
var $M.14: [ref] i8;
var $M.15: ref;
var $M.16: i32;
var $M.17: [ref] ref;
var $M.18: [ref] i8;
var $M.19: i32;
var $M.20: i32;
var $M.21: ref;
var $M.22: i32;
var $M.23: i32;
var $M.24: i32;
var $M.25: i32;
var $M.26: i32;
var $M.27: i32;
var $M.28: i32;
var $M.29: i32;
var $M.30: i32;
var $M.31: i32;
var $M.32: i64;
var $M.33: ref;
var $M.34: i8;
var $M.35: i8;
var $M.36: i8;
var $M.37: i8;
var $M.38: i8;
var $M.39: i8;
var $M.40: i8;
var $M.41: i8;
var $M.42: i64;
var $M.43: ref;
var $M.44: i8;
var $M.45: i8;
var $M.46: i8;
var $M.47: i8;
var $M.48: i8;
var $M.49: i8;
var $M.50: i8;
var $M.51: i8;
var $M.52: i8;
var $M.53: i64;
var $M.54: ref;
var $M.55: i8;
var $M.56: i8;
var $M.57: i8;
var $M.58: i8;
var $M.59: i8;
var $M.60: i8;
var $M.61: i8;
var $M.62: i8;
var $M.63: i8;
var $M.64: i8;
var $M.65: i8;
var $M.66: i8;
var $M.67: i8;
var $M.68: i8;
var $M.69: i64;
var $M.70: ref;
var $M.71: i8;
var $M.72: i8;
var $M.73: i8;
var $M.74: i8;
var $M.75: i8;
var $M.76: i8;
var $M.77: i8;
var $M.78: i8;
var $M.79: i8;
var $M.80: i8;
var $M.81: i8;
var $M.82: i8;
var $M.83: i8;
var $M.84: i64;
var $M.85: ref;
var $M.86: i8;
var $M.87: i8;
var $M.88: i8;
var $M.89: i8;
var $M.90: i8;
var $M.91: i8;
var $M.92: i8;
var $M.93: i8;
var $M.94: i8;
var $M.95: i8;
var $M.96: i8;
var $M.97: i8;
var $M.98: i8;
var $M.99: i8;
var $M.100: i8;
var $M.101: i8;
var $M.102: i8;
var $M.103: i8;
var $M.104: i8;
var $M.105: i8;
var $M.106: i8;
var $M.107: i8;
var $M.108: i64;
var $M.109: ref;
var $M.110: i8;
var $M.111: i8;
var $M.112: i8;
var $M.113: i8;
var $M.114: i8;
var $M.115: i8;
var $M.116: i8;
var $M.117: i8;
var $M.118: i8;
var $M.119: i8;
var $M.120: i8;
var $M.121: i8;
var $M.122: i8;
var $M.123: i8;
var $M.124: i64;
var $M.125: ref;
var $M.126: i8;
var $M.127: i8;
var $M.128: i8;
var $M.129: i8;
var $M.130: i8;
var $M.131: i8;
var $M.132: i8;
var $M.133: i8;
var $M.134: i8;
var $M.135: i8;
var $M.136: i8;
var $M.137: i8;
var $M.138: i8;
var $M.139: i64;
var $M.140: ref;
var $M.141: i8;
var $M.142: i8;
var $M.143: i8;
var $M.144: i8;
var $M.145: i8;
var $M.146: i8;
var $M.147: i8;
var $M.148: i8;
var $M.149: ref;
var $M.150: ref;
var $M.151: ref;
var $M.152: ref;
var $M.153: ref;
var $M.154: ref;
var $M.155: ref;
var $M.156: ref;
var $M.157: ref;
var $M.158: ref;
var $M.159: ref;
var $M.160: ref;
var $M.161: ref;
var $M.162: ref;
var $M.163: ref;
var $M.164: ref;
var $M.165: ref;
var $M.166: ref;
var $M.167: ref;
var $M.168: ref;
var $M.169: ref;
var $M.170: ref;
var $M.171: ref;
var $M.172: ref;
var $M.173: ref;
var $M.174: ref;
var $M.175: ref;
var $M.176: ref;
var $M.177: ref;
var $M.178: ref;
var $M.179: ref;
var $M.180: ref;
var $M.181: ref;
var $M.182: ref;
var $M.183: ref;
var $M.184: ref;
var $M.185: ref;
var $M.186: ref;
var $M.187: ref;
var $M.188: ref;
var $M.189: ref;
var $M.190: ref;
var $M.191: ref;
var $M.192: ref;
var $M.193: ref;
var $M.194: ref;
var $M.195: ref;
var $M.196: ref;
var $M.197: ref;
var $M.198: ref;
var $M.199: ref;
var $M.200: ref;
var $M.201: ref;
var $M.202: ref;
var $M.203: ref;
var $M.204: ref;
var $M.205: ref;
var $M.206: ref;
var $M.207: ref;
var $M.208: ref;
var $M.209: i64;
var $M.210: ref;
var $M.211: i8;
var $M.212: i8;
var $M.213: i8;
var $M.214: i8;
var $M.215: i8;
var $M.216: i8;
var $M.217: i8;
var $M.218: i8;
var $M.219: i8;
var $M.220: i8;
var $M.221: i8;
var $M.222: i8;
var $M.223: i8;
var $M.224: i8;
var $M.225: i64;
var $M.226: ref;
var $M.227: i8;
var $M.228: i8;
var $M.229: i8;
var $M.230: i8;
var $M.231: i8;
var $M.232: i8;
var $M.233: i8;
var $M.234: i8;
var $M.235: i8;
var $M.236: i8;
var $M.237: i8;
var $M.238: i8;
var $M.239: i8;
var $M.240: i8;
var $M.241: i8;
var $M.242: i8;
var $M.243: i8;
var $M.244: i8;
var $M.245: i8;
var $M.246: i8;
var $M.247: i8;
var $M.248: i8;
var $M.249: i8;
var $M.250: i8;
var $M.251: i8;
var $M.252: i8;
var $M.253: i8;
var $M.254: i8;
var $M.255: i8;
var $M.256: i8;
var $M.257: i8;
var $M.258: i8;
var $M.259: i8;
var $M.260: i8;
var $M.261: i8;
var $M.262: i8;
var $M.263: i8;
var $M.264: i8;
var $M.265: i8;
var $M.266: i8;
var $M.267: i8;
var $M.268: i8;
var $M.269: i8;
var $M.270: i8;
var $M.271: i8;
var $M.272: i8;
var $M.273: i8;
var $M.274: i8;
var $M.275: i8;
var $M.276: i8;
var $M.277: i8;
var $M.278: i8;
var $M.279: i8;
var $M.280: i8;
var $M.281: i8;
var $M.282: i8;
var $M.283: i8;
var $M.284: i8;
var $M.285: i8;
var $M.286: i8;
var $M.287: i8;
var $M.288: i8;
var $M.289: i8;
var $M.290: i8;
var $M.291: i8;
var $M.292: i8;
var $M.293: i8;
var $M.294: i8;
var $M.295: i8;
var $M.296: i8;
var $M.297: i8;
var $M.298: i8;
var $M.299: i8;
var $M.300: i8;
var $M.301: i8;
var $M.302: i8;
var $M.303: i8;
var $M.304: i8;
var $M.305: i8;
var $M.306: i8;
var $M.307: i8;
var $M.308: i8;
var $M.309: i8;
var $M.310: i8;
var $M.311: i8;
var $M.312: i8;
var $M.313: i8;
var $M.314: i64;
var $M.315: ref;
var $M.316: i8;
var $M.317: i8;
var $M.318: i8;
var $M.319: i8;
var $M.320: i8;
var $M.321: i8;
var $M.322: i8;
var $M.323: i8;
var $M.324: i8;
var $M.325: i8;
var $M.326: i8;
var $M.327: i8;
var $M.328: ref;
var $M.329: i32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 268894));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (i64);

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $srem.i1(i1: i1, i2: i1) returns (i1) { (if ($ne.i1.bool($smod.i1(i1, i2), 0) && $slt.i1.bool(i1, 0)) then $sub.i1($smod.i1(i1, i2), $smax.i1(i2, $sub.i1(0, i2))) else $smod.i1(i1, i2)) }
function {:inline} $srem.i5(i1: i5, i2: i5) returns (i5) { (if ($ne.i5.bool($smod.i5(i1, i2), 0) && $slt.i5.bool(i1, 0)) then $sub.i5($smod.i5(i1, i2), $smax.i5(i2, $sub.i5(0, i2))) else $smod.i5(i1, i2)) }
function {:inline} $srem.i6(i1: i6, i2: i6) returns (i6) { (if ($ne.i6.bool($smod.i6(i1, i2), 0) && $slt.i6.bool(i1, 0)) then $sub.i6($smod.i6(i1, i2), $smax.i6(i2, $sub.i6(0, i2))) else $smod.i6(i1, i2)) }
function {:inline} $srem.i8(i1: i8, i2: i8) returns (i8) { (if ($ne.i8.bool($smod.i8(i1, i2), 0) && $slt.i8.bool(i1, 0)) then $sub.i8($smod.i8(i1, i2), $smax.i8(i2, $sub.i8(0, i2))) else $smod.i8(i1, i2)) }
function {:inline} $srem.i16(i1: i16, i2: i16) returns (i16) { (if ($ne.i16.bool($smod.i16(i1, i2), 0) && $slt.i16.bool(i1, 0)) then $sub.i16($smod.i16(i1, i2), $smax.i16(i2, $sub.i16(0, i2))) else $smod.i16(i1, i2)) }
function {:inline} $srem.i24(i1: i24, i2: i24) returns (i24) { (if ($ne.i24.bool($smod.i24(i1, i2), 0) && $slt.i24.bool(i1, 0)) then $sub.i24($smod.i24(i1, i2), $smax.i24(i2, $sub.i24(0, i2))) else $smod.i24(i1, i2)) }
function {:inline} $srem.i32(i1: i32, i2: i32) returns (i32) { (if ($ne.i32.bool($smod.i32(i1, i2), 0) && $slt.i32.bool(i1, 0)) then $sub.i32($smod.i32(i1, i2), $smax.i32(i2, $sub.i32(0, i2))) else $smod.i32(i1, i2)) }
function {:inline} $srem.i40(i1: i40, i2: i40) returns (i40) { (if ($ne.i40.bool($smod.i40(i1, i2), 0) && $slt.i40.bool(i1, 0)) then $sub.i40($smod.i40(i1, i2), $smax.i40(i2, $sub.i40(0, i2))) else $smod.i40(i1, i2)) }
function {:inline} $srem.i48(i1: i48, i2: i48) returns (i48) { (if ($ne.i48.bool($smod.i48(i1, i2), 0) && $slt.i48.bool(i1, 0)) then $sub.i48($smod.i48(i1, i2), $smax.i48(i2, $sub.i48(0, i2))) else $smod.i48(i1, i2)) }
function {:inline} $srem.i56(i1: i56, i2: i56) returns (i56) { (if ($ne.i56.bool($smod.i56(i1, i2), 0) && $slt.i56.bool(i1, 0)) then $sub.i56($smod.i56(i1, i2), $smax.i56(i2, $sub.i56(0, i2))) else $smod.i56(i1, i2)) }
function {:inline} $srem.i64(i1: i64, i2: i64) returns (i64) { (if ($ne.i64.bool($smod.i64(i1, i2), 0) && $slt.i64.bool(i1, 0)) then $sub.i64($smod.i64(i1, i2), $smax.i64(i2, $sub.i64(0, i2))) else $smod.i64(i1, i2)) }
function {:inline} $srem.i80(i1: i80, i2: i80) returns (i80) { (if ($ne.i80.bool($smod.i80(i1, i2), 0) && $slt.i80.bool(i1, 0)) then $sub.i80($smod.i80(i1, i2), $smax.i80(i2, $sub.i80(0, i2))) else $smod.i80(i1, i2)) }
function {:inline} $srem.i88(i1: i88, i2: i88) returns (i88) { (if ($ne.i88.bool($smod.i88(i1, i2), 0) && $slt.i88.bool(i1, 0)) then $sub.i88($smod.i88(i1, i2), $smax.i88(i2, $sub.i88(0, i2))) else $smod.i88(i1, i2)) }
function {:inline} $srem.i96(i1: i96, i2: i96) returns (i96) { (if ($ne.i96.bool($smod.i96(i1, i2), 0) && $slt.i96.bool(i1, 0)) then $sub.i96($smod.i96(i1, i2), $smax.i96(i2, $sub.i96(0, i2))) else $smod.i96(i1, i2)) }
function {:inline} $srem.i128(i1: i128, i2: i128) returns (i128) { (if ($ne.i128.bool($smod.i128(i1, i2), 0) && $slt.i128.bool(i1, 0)) then $sub.i128($smod.i128(i1, i2), $smax.i128(i2, $sub.i128(0, i2))) else $smod.i128(i1, i2)) }
function {:inline} $srem.i160(i1: i160, i2: i160) returns (i160) { (if ($ne.i160.bool($smod.i160(i1, i2), 0) && $slt.i160.bool(i1, 0)) then $sub.i160($smod.i160(i1, i2), $smax.i160(i2, $sub.i160(0, i2))) else $smod.i160(i1, i2)) }
function {:inline} $srem.i256(i1: i256, i2: i256) returns (i256) { (if ($ne.i256.bool($smod.i256(i1, i2), 0) && $slt.i256.bool(i1, 0)) then $sub.i256($smod.i256(i1, i2), $smax.i256(i2, $sub.i256(0, i2))) else $smod.i256(i1, i2)) }
function {:inline} $urem.i1(i1: i1, i2: i1) returns (i1) { $smod.i1(i1, i2) }
function {:inline} $urem.i5(i1: i5, i2: i5) returns (i5) { $smod.i5(i1, i2) }
function {:inline} $urem.i6(i1: i6, i2: i6) returns (i6) { $smod.i6(i1, i2) }
function {:inline} $urem.i8(i1: i8, i2: i8) returns (i8) { $smod.i8(i1, i2) }
function {:inline} $urem.i16(i1: i16, i2: i16) returns (i16) { $smod.i16(i1, i2) }
function {:inline} $urem.i24(i1: i24, i2: i24) returns (i24) { $smod.i24(i1, i2) }
function {:inline} $urem.i32(i1: i32, i2: i32) returns (i32) { $smod.i32(i1, i2) }
function {:inline} $urem.i40(i1: i40, i2: i40) returns (i40) { $smod.i40(i1, i2) }
function {:inline} $urem.i48(i1: i48, i2: i48) returns (i48) { $smod.i48(i1, i2) }
function {:inline} $urem.i56(i1: i56, i2: i56) returns (i56) { $smod.i56(i1, i2) }
function {:inline} $urem.i64(i1: i64, i2: i64) returns (i64) { $smod.i64(i1, i2) }
function {:inline} $urem.i80(i1: i80, i2: i80) returns (i80) { $smod.i80(i1, i2) }
function {:inline} $urem.i88(i1: i88, i2: i88) returns (i88) { $smod.i88(i1, i2) }
function {:inline} $urem.i96(i1: i96, i2: i96) returns (i96) { $smod.i96(i1, i2) }
function {:inline} $urem.i128(i1: i128, i2: i128) returns (i128) { $smod.i128(i1, i2) }
function {:inline} $urem.i160(i1: i160, i2: i160) returns (i160) { $smod.i160(i1, i2) }
function {:inline} $urem.i256(i1: i256, i2: i256) returns (i256) { $smod.i256(i1, i2) }
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
axiom ($and.i1(0, 0) == 0);
axiom ($or.i1(0, 0) == 0);
axiom ($xor.i1(0, 0) == 0);
axiom ($and.i1(0, 1) == 0);
axiom ($or.i1(0, 1) == 1);
axiom ($xor.i1(0, 1) == 1);
axiom ($and.i1(1, 0) == 0);
axiom ($or.i1(1, 0) == 1);
axiom ($xor.i1(1, 0) == 1);
axiom ($and.i1(1, 1) == 1);
axiom ($or.i1(1, 1) == 1);
axiom ($xor.i1(1, 1) == 0);
axiom ($and.i32(32, 16) == 0);
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
// Integer load/store operations
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
// Conversion between integer types
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer load/store operations
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.i8(f: float) returns (i8);
function $bitcast.float.i16(f: float) returns (i16);
function $bitcast.float.i32(f: float) returns (i32);
function $bitcast.float.i64(f: float) returns (i64);
function $bitcast.float.i80(f: float) returns (i80);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.i80.float(i: i80) returns (float);
function $fp2si.float.i1(f: float) returns (i1);
function $fp2si.float.i5(f: float) returns (i5);
function $fp2si.float.i6(f: float) returns (i6);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2si.float.i80(f: float) returns (i80);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2si.float.i160(f: float) returns (i160);
function $fp2si.float.i256(f: float) returns (i256);
function $fp2ui.float.i1(f: float) returns (i1);
function $fp2ui.float.i5(f: float) returns (i5);
function $fp2ui.float.i6(f: float) returns (i6);
function $fp2ui.float.i8(f: float) returns (i8);
function $fp2ui.float.i16(f: float) returns (i16);
function $fp2ui.float.i24(f: float) returns (i24);
function $fp2ui.float.i32(f: float) returns (i32);
function $fp2ui.float.i40(f: float) returns (i40);
function $fp2ui.float.i48(f: float) returns (i48);
function $fp2ui.float.i56(f: float) returns (i56);
function $fp2ui.float.i64(f: float) returns (i64);
function $fp2ui.float.i80(f: float) returns (i80);
function $fp2ui.float.i88(f: float) returns (i88);
function $fp2ui.float.i96(f: float) returns (i96);
function $fp2ui.float.i128(f: float) returns (i128);
function $fp2ui.float.i160(f: float) returns (i160);
function $fp2ui.float.i256(f: float) returns (i256);
function $si2fp.i1.float(i: i1) returns (float);
function $si2fp.i5.float(i: i5) returns (float);
function $si2fp.i6.float(i: i6) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $si2fp.i128.float(i: i128) returns (float);
function $si2fp.i160.float(i: i160) returns (float);
function $si2fp.i256.float(i: i256) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $ui2fp.i5.float(i: i5) returns (float);
function $ui2fp.i6.float(i: i6) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $ui2fp.i160.float(i: i160) returns (float);
function $ui2fp.i256.float(i: i256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, f: float) returns ([ref] i8) { M[p := $bitcast.float.i8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const __ksymtab_ei_open: ref;
axiom (__ksymtab_ei_open == $sub.ref(0, 2068));
const {:count 8} __kstrtab_ei_open: ref;
axiom (__kstrtab_ei_open == $sub.ref(0, 3100));
const {:count 34} .str.34: ref;
axiom (.str.34 == $sub.ref(0, 4158));
const __ksymtab_ei_close: ref;
axiom (__ksymtab_ei_close == $sub.ref(0, 5198));
const {:count 9} __kstrtab_ei_close: ref;
axiom (__kstrtab_ei_close == $sub.ref(0, 6231));
const .str: ref;
axiom (.str == $sub.ref(0, 7281));
const {:count 63} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 8368));
const __ksymtab_ei_start_xmit: ref;
axiom (__ksymtab_ei_start_xmit == $sub.ref(0, 9408));
const {:count 14} __kstrtab_ei_start_xmit: ref;
axiom (__kstrtab_ei_start_xmit == $sub.ref(0, 10446));
const {:count 5} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 11475));
const {:count 16} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 12515));
const {:count 120} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 13659));
const {:count 46} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 14729));
const {:count 47} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 15800));
const {:count 43} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 16867));
const {:count 49} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 17940));
const pv_irq_ops: ref;
axiom (pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776)));
const {:count 34} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 18998));
const __ksymtab_ei_get_stats: ref;
axiom (__ksymtab_ei_get_stats == $sub.ref(0, 20038));
const {:count 13} __kstrtab_ei_get_stats: ref;
axiom (__kstrtab_ei_get_stats == $sub.ref(0, 21075));
const __ksymtab_ei_set_multicast_list: ref;
axiom (__ksymtab_ei_set_multicast_list == $sub.ref(0, 22115));
const {:count 22} __kstrtab_ei_set_multicast_list: ref;
axiom (__kstrtab_ei_set_multicast_list == $sub.ref(0, 23161));
const __ksymtab_ei_tx_timeout: ref;
axiom (__ksymtab_ei_tx_timeout == $sub.ref(0, 24201));
const {:count 14} __kstrtab_ei_tx_timeout: ref;
axiom (__kstrtab_ei_tx_timeout == $sub.ref(0, 25239));
const jiffies: ref;
axiom (jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784)));
const {:count 16} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 26279));
const {:count 43} .str.11: ref;
axiom (.str.11 == $sub.ref(0, 27346));
const {:count 16} .str.12: ref;
axiom (.str.12 == $sub.ref(0, 28386));
const {:count 15} .str.13: ref;
axiom (.str.13 == $sub.ref(0, 29425));
const {:count 19} .str.14: ref;
axiom (.str.14 == $sub.ref(0, 30468));
const __ksymtab_ei_interrupt: ref;
axiom (__ksymtab_ei_interrupt == $sub.ref(0, 31508));
const {:count 13} __kstrtab_ei_interrupt: ref;
axiom (__kstrtab_ei_interrupt == $sub.ref(0, 32545));
const {:count 60} .str.15: ref;
axiom (.str.15 == $sub.ref(0, 33629));
const {:count 15} .str.16: ref;
axiom (.str.16 == $sub.ref(0, 34668));
const {:count 23} .str.17: ref;
axiom (.str.17 == $sub.ref(0, 35715));
const {:count 29} .str.18: ref;
axiom (.str.18 == $sub.ref(0, 36768));
const {:count 43} .str.19: ref;
axiom (.str.19 == $sub.ref(0, 37835));
const {:count 24} .str.20: ref;
axiom (.str.20 == $sub.ref(0, 38883));
const {:count 38} .str.29: ref;
axiom (.str.29 == $sub.ref(0, 39945));
const {:count 38} .str.30: ref;
axiom (.str.30 == $sub.ref(0, 41007));
const {:count 42} .str.23: ref;
axiom (.str.23 == $sub.ref(0, 42073));
const {:count 11} .str.24: ref;
axiom (.str.24 == $sub.ref(0, 43108));
const {:count 46} .str.25: ref;
axiom (.str.25 == $sub.ref(0, 44178));
const {:count 40} .str.26: ref;
axiom (.str.26 == $sub.ref(0, 45242));
const {:count 45} .str.27: ref;
axiom (.str.27 == $sub.ref(0, 46311));
const {:count 32} .str.28: ref;
axiom (.str.28 == $sub.ref(0, 47367));
const LDV_SKBS: ref;
axiom (LDV_SKBS == $sub.ref(0, 48399));
const last_index: ref;
axiom (last_index == $sub.ref(0, 49427));
const {:count 15} set_impl: ref;
axiom (set_impl == $sub.ref(0, 50571));
const {:count 14} .str.21: ref;
axiom (.str.21 == $sub.ref(0, 51609));
const {:count 18} .str.22: ref;
axiom (.str.22 == $sub.ref(0, 52651));
const __ksymtab_ei_poll: ref;
axiom (__ksymtab_ei_poll == $sub.ref(0, 53691));
const {:count 8} __kstrtab_ei_poll: ref;
axiom (__kstrtab_ei_poll == $sub.ref(0, 54723));
const ei_netdev_ops: ref;
axiom (ei_netdev_ops == $sub.ref(0, 56227));
const __ksymtab_ei_netdev_ops: ref;
axiom (__ksymtab_ei_netdev_ops == $sub.ref(0, 57267));
const {:count 14} __kstrtab_ei_netdev_ops: ref;
axiom (__kstrtab_ei_netdev_ops == $sub.ref(0, 58305));
const __ksymtab___alloc_ei_netdev: ref;
axiom (__ksymtab___alloc_ei_netdev == $sub.ref(0, 59345));
const {:count 18} __kstrtab___alloc_ei_netdev: ref;
axiom (__kstrtab___alloc_ei_netdev == $sub.ref(0, 60387));
const {:count 6} .str.31: ref;
axiom (.str.31 == $sub.ref(0, 61417));
const msg_enable: ref;
axiom (msg_enable == $sub.ref(0, 62445));
const version_printed: ref;
axiom (version_printed == $sub.ref(0, 63473));
const {:count 4} .str.32: ref;
axiom (.str.32 == $sub.ref(0, 64501));
const {:count 69} version: ref;
axiom (version == $sub.ref(0, 65594));
const {:count 31} .str.33: ref;
axiom (.str.33 == $sub.ref(0, 66649));
const __ksymtab_NS8390_init: ref;
axiom (__ksymtab_NS8390_init == $sub.ref(0, 67689));
const {:count 12} __kstrtab_NS8390_init: ref;
axiom (__kstrtab_NS8390_init == $sub.ref(0, 68725));
const ei_netdev_ops_group1: ref;
axiom (ei_netdev_ops_group1 == $sub.ref(0, 69757));
const ldv_state_variable_1: ref;
axiom (ldv_state_variable_1 == $sub.ref(0, 70785));
const ref_cnt: ref;
axiom (ref_cnt == $sub.ref(0, 71813));
const ldv_state_variable_0: ref;
axiom (ldv_state_variable_0 == $sub.ref(0, 72841));
const ldv_state_variable_2: ref;
axiom (ldv_state_variable_2 == $sub.ref(0, 73869));
const ldv_retval_1: ref;
axiom (ldv_retval_1 == $sub.ref(0, 74897));
const ldv_retval_0: ref;
axiom (ldv_retval_0 == $sub.ref(0, 75925));
const ldv_retval_2: ref;
axiom (ldv_retval_2 == $sub.ref(0, 76953));
const ldv_retval_4: ref;
axiom (ldv_retval_4 == $sub.ref(0, 77981));
const ldv_retval_3: ref;
axiom (ldv_retval_3 == $sub.ref(0, 79009));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 80041));
const {:count 3} .str.1.67: ref;
axiom (.str.1.67 == $sub.ref(0, 81068));
const {:count 14} .str.68: ref;
axiom (.str.68 == $sub.ref(0, 82106));
const errno_global: ref;
axiom (errno_global == $sub.ref(0, 83134));
const ei_open: ref;
axiom (ei_open == $sub.ref(0, 84166));
procedure  ei_open($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6609, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6609, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __ei_open($p0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6610, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 85198));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const __ei_open: ref;
axiom (__ei_open == $sub.ref(0, 86230));
procedure  __ei_open($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5659, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5659, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5660, 14} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5661, 12} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1048, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5661, 12} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, $p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5661, 27} true;
  assume {:verifier.code 0} true;
  $i5 := $sle.i32($i4, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5661, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5662, 10} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1048, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5662, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p6, 50);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5663, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5665, 40} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5665, 13} true;
  assume {:verifier.code 0} true;
  call $p8 := spinlock_check($p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5666, 11} true;
  assume {:verifier.code 0} true;
  call $i9 := _raw_spin_lock_irqsave($p8);
  call {:cexpr "flags"} boogie_si_record_i64($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5667, 3} true;
  assume {:verifier.code 0} true;
  call __NS8390_init($p0, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5668, 3} true;
  assume {:verifier.code 0} true;
  call netif_start_queue($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5669, 38} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5669, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_irqrestore($p10, $i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5670, 13} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5670, 21} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i8($M.0, $p11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5670, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5670:21: warning: over-approximating bitwise operation and;
  $i13 := $and.i8($i12, $sub.i8(0, 17));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5670, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p11, $i13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5671, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const netdev_priv: ref;
axiom (netdev_priv == $sub.ref(0, 87262));
procedure  netdev_priv($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5532, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5532, 11} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5532, 23} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, $mul.ref(3264, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5532, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const spinlock_check: ref;
axiom (spinlock_check == $sub.ref(0, 88294));
procedure  spinlock_check($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5263, 19} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5263, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5263, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5263, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const _raw_spin_lock_irqsave: ref;
axiom (_raw_spin_lock_irqsave == $sub.ref(0, 89326));
procedure  _raw_spin_lock_irqsave($p0: ref)
  returns ($r: i64)
{
  var $i1: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7518, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7518, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7518, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __NS8390_init: ref;
axiom (__NS8390_init == $sub.ref(0, 90358));
procedure  __NS8390_init($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i8;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i8;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i8;
  var $i146: i32;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i8;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i8;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i8;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $p184: ref;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $i188: i32;
  var $i189: i32;
  var $i190: i32;
  var $i191: i8;
  var $i192: i32;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i8;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i32;
  var $i213: i32;
  var $i214: i8;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i8;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6523, 21} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__NS8390_init:arg:startp"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6523, 21} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6523, 21} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, $p2);
  call {:cexpr "e8390_base"} boogie_si_record_i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6524, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6525, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 29} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 55} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 27} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i8($M.0, $p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 12} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i8.i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 63} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 12} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 89} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 115} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p11, $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 87} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i8($M.0, $p12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 72} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i8.i32($i13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 123} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i32($i14, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 72} true;
  assume {:verifier.code 0} true;
  $i16 := (if ($i15 == 1) then 75 else 73);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 12} true;
  assume {:verifier.code 0} true;
  $i17 := $i16;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 12} true;
  assume {:verifier.code 0} true;
  $i17 := 72;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6526, 12} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6527, 12} true;
  assume {:verifier.code 0} true;
  $i18 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6527, 3} true;
  assume {:verifier.code 0} true;
  call outb(33, $i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6528, 15} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i32.i8($i17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6528, 8} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i8.i32($i19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6528, 8} true;
  assume {:verifier.code 0} true;
  $i21 := $trunc.i32.i8($i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6528, 47} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6528, 73} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i32($i22, 14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6528, 3} true;
  assume {:verifier.code 0} true;
  call outb($i21, $i23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6529, 18} true;
  assume {:verifier.code 0} true;
  $i24 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6529, 44} true;
  assume {:verifier.code 0} true;
  $i25 := $add.i32($i24, 10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6529, 3} true;
  assume {:verifier.code 0} true;
  call outb(0, $i25);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6530, 18} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6530, 44} true;
  assume {:verifier.code 0} true;
  $i27 := $add.i32($i26, 11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6530, 3} true;
  assume {:verifier.code 0} true;
  call outb(0, $i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6531, 19} true;
  assume {:verifier.code 0} true;
  $i28 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6531, 45} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i32($i28, 12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6531, 3} true;
  assume {:verifier.code 0} true;
  call outb(32, $i29);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6532, 18} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6532, 44} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i32($i30, 13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6532, 3} true;
  assume {:verifier.code 0} true;
  call outb(2, $i31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6533, 24} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(73, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6533, 24} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i8($M.0, $p32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6533, 8} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i8.i32($i33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6533, 8} true;
  assume {:verifier.code 0} true;
  $i35 := $trunc.i32.i8($i34);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6533, 46} true;
  assume {:verifier.code 0} true;
  $i36 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6533, 72} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i32($i36, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6533, 3} true;
  assume {:verifier.code 0} true;
  call outb($i35, $i37);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6535, 13} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6535, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p38, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6536, 13} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6536, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p39, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6537, 24} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(74, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6537, 24} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i8($M.0, $p40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6537, 8} true;
  assume {:verifier.code 0} true;
  $i42 := $zext.i8.i32($i41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6537, 8} true;
  assume {:verifier.code 0} true;
  $i43 := $trunc.i32.i8($i42);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6537, 46} true;
  assume {:verifier.code 0} true;
  $i44 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6537, 72} true;
  assume {:verifier.code 0} true;
  $i45 := $add.i32($i44, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6537, 3} true;
  assume {:verifier.code 0} true;
  call outb($i43, $i45);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6538, 40} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(75, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6538, 40} true;
  assume {:verifier.code 0} true;
  $i47 := $load.i8($M.0, $p46);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6538, 15} true;
  assume {:verifier.code 0} true;
  $i48 := $zext.i8.i32($i47);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6538, 50} true;
  assume {:verifier.code 0} true;
  $i49 := $add.i32($i48, 255);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6538, 8} true;
  assume {:verifier.code 0} true;
  $i50 := $trunc.i32.i8($i49);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6538, 66} true;
  assume {:verifier.code 0} true;
  $i51 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6538, 92} true;
  assume {:verifier.code 0} true;
  $i52 := $add.i32($i51, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6538, 3} true;
  assume {:verifier.code 0} true;
  call outb($i50, $i52);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6539, 38} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(74, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6539, 38} true;
  assume {:verifier.code 0} true;
  $i54 := $load.i8($M.0, $p53);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6539, 13} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(76, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6539, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p55, $i54);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6540, 24} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(75, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6540, 24} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i8($M.0, $p56);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6540, 8} true;
  assume {:verifier.code 0} true;
  $i58 := $zext.i8.i32($i57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6540, 8} true;
  assume {:verifier.code 0} true;
  $i59 := $trunc.i32.i8($i58);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6540, 42} true;
  assume {:verifier.code 0} true;
  $i60 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6540, 68} true;
  assume {:verifier.code 0} true;
  $i61 := $add.i32($i60, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6540, 3} true;
  assume {:verifier.code 0} true;
  call outb($i59, $i61);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6541, 20} true;
  assume {:verifier.code 0} true;
  $i62 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6541, 46} true;
  assume {:verifier.code 0} true;
  $i63 := $add.i32($i62, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6541, 3} true;
  assume {:verifier.code 0} true;
  call outb($sub.i8(0, 1), $i63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6542, 18} true;
  assume {:verifier.code 0} true;
  $i64 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6542, 44} true;
  assume {:verifier.code 0} true;
  $i65 := $add.i32($i64, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6542, 3} true;
  assume {:verifier.code 0} true;
  call outb(0, $i65);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6543, 12} true;
  assume {:verifier.code 0} true;
  $i66 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6543, 3} true;
  assume {:verifier.code 0} true;
  call outb(97, $i66);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6559, 7} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6560, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p68 := $load.ref($M.0, $p67);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 14} true;
  assume {:verifier.code 0} true;
  $i69 := $load.i8($M.1, $p68);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 60} true;
  assume {:verifier.code 0} true;
  $i70 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 106} true;
  assume {:verifier.code 0} true;
  $i71 := $add.i32($i70, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 3} true;
  assume {:verifier.code 0} true;
  call outb($i69, $i71);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $i73 := $load.i32($M.0, $p72);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6548:29: warning: over-approximating bitwise operation and;
  $i74 := $and.i32($i73, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 35} true;
  assume {:verifier.code 0} true;
  $i75 := $ne.i32($i74, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i75} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i75 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 27} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 73} true;
  assume {:verifier.code 0} true;
  $i77 := $add.i32($i76, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 15} true;
  assume {:verifier.code 0} true;
  call $i78 := inb($i77);
  call {:cexpr "tmp___1"} boogie_si_record_i8($i78);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  $i79 := $zext.i8.i32($i78);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p81 := $load.ref($M.0, $p80);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 32} true;
  assume {:verifier.code 0} true;
  $i82 := $load.i8($M.1, $p81);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 26} true;
  assume {:verifier.code 0} true;
  $i83 := $zext.i8.i32($i82);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 23} true;
  assume {:verifier.code 0} true;
  $i84 := $ne.i32($i79, $i83);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb8, $bb9;
$bb7:
  assume !(($i75 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb8:
  assume ($i84 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6551, 7} true;
  assume {:verifier.code 0} true;
  call $i85 := netdev_err.ref.ref.i32($p0, .str.34, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6553, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i84 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6555, 3} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6560, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p109 := $load.ref($M.0, $p108);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 30} true;
  assume {:verifier.code 0} true;
  $p110 := $add.ref($p109, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 14} true;
  assume {:verifier.code 0} true;
  $i111 := $load.i8($M.1, $p110);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 60} true;
  assume {:verifier.code 0} true;
  $i112 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 86} true;
  assume {:verifier.code 0} true;
  $i113 := $add.i32($i112, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 106} true;
  assume {:verifier.code 0} true;
  $i114 := $add.i32($i113, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 3} true;
  assume {:verifier.code 0} true;
  call outb($i111, $i114);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $p115 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $i116 := $load.i32($M.0, $p115);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6548:29: warning: over-approximating bitwise operation and;
  $i117 := $and.i32($i116, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 35} true;
  assume {:verifier.code 0} true;
  $i118 := $ne.i32($i117, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i118} true;
  goto $bb17, $bb18;
$bb13:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6563, 24} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(74, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6563, 24} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i8($M.0, $p86);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6563, 8} true;
  assume {:verifier.code 0} true;
  $i88 := $zext.i8.i32($i87);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6563, 8} true;
  assume {:verifier.code 0} true;
  $i89 := $trunc.i32.i8($i88);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6563, 46} true;
  assume {:verifier.code 0} true;
  $i90 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6563, 72} true;
  assume {:verifier.code 0} true;
  $i91 := $add.i32($i90, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6563, 3} true;
  assume {:verifier.code 0} true;
  call outb($i89, $i91);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6564, 12} true;
  assume {:verifier.code 0} true;
  $i92 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6564, 3} true;
  assume {:verifier.code 0} true;
  call outb(33, $i92);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6566, 13} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6566, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p93, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6567, 13} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6567, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p94, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6568, 13} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6568, 19} true;
  assume {:verifier.code 0} true;
  $i96 := $load.i8($M.0, $p95);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6568, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6568:19: warning: over-approximating bitwise operation and;
  $i97 := $and.i8($i96, $sub.i8(0, 9));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6568, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p95, $i97);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6569, 14} true;
  assume {:verifier.code 0} true;
  $i98 := $ne.i32($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6569, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i98} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i98 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6570, 22} true;
  assume {:verifier.code 0} true;
  $i99 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6570, 48} true;
  assume {:verifier.code 0} true;
  $i100 := $add.i32($i99, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6570, 5} true;
  assume {:verifier.code 0} true;
  call outb($sub.i8(0, 1), $i100);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6571, 21} true;
  assume {:verifier.code 0} true;
  $i101 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6571, 47} true;
  assume {:verifier.code 0} true;
  $i102 := $add.i32($i101, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6571, 5} true;
  assume {:verifier.code 0} true;
  call outb(63, $i102);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6572, 14} true;
  assume {:verifier.code 0} true;
  $i103 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6572, 5} true;
  assume {:verifier.code 0} true;
  call outb(34, $i103);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6573, 20} true;
  assume {:verifier.code 0} true;
  $i104 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6573, 46} true;
  assume {:verifier.code 0} true;
  $i105 := $add.i32($i104, 13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6573, 5} true;
  assume {:verifier.code 0} true;
  call outb(0, $i105);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6574, 20} true;
  assume {:verifier.code 0} true;
  $i106 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6574, 46} true;
  assume {:verifier.code 0} true;
  $i107 := $add.i32($i106, 12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6574, 5} true;
  assume {:verifier.code 0} true;
  call outb(4, $i107);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6575, 5} true;
  assume {:verifier.code 0} true;
  call do_set_multicast_list($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6576, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i98 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6578, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb17:
  assume ($i118 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 27} true;
  assume {:verifier.code 0} true;
  $i119 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 53} true;
  assume {:verifier.code 0} true;
  $i120 := $add.i32($i119, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 73} true;
  assume {:verifier.code 0} true;
  $i121 := $add.i32($i120, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 15} true;
  assume {:verifier.code 0} true;
  call $i122 := inb($i121);
  call {:cexpr "tmp___1"} boogie_si_record_i8($i122);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  $i123 := $zext.i8.i32($i122);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p124 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p125 := $load.ref($M.0, $p124);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 48} true;
  assume {:verifier.code 0} true;
  $p126 := $add.ref($p125, $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 32} true;
  assume {:verifier.code 0} true;
  $i127 := $load.i8($M.1, $p126);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 26} true;
  assume {:verifier.code 0} true;
  $i128 := $zext.i8.i32($i127);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 23} true;
  assume {:verifier.code 0} true;
  $i129 := $ne.i32($i123, $i128);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i129} true;
  goto $bb20, $bb21;
$bb18:
  assume !(($i118 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6560, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb20:
  assume ($i129 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6551, 7} true;
  assume {:verifier.code 0} true;
  call $i130 := netdev_err.ref.ref.i32($p0, .str.34, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6553, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume !(($i129 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6555, 3} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb23:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p131 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p132 := $load.ref($M.0, $p131);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 30} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($p132, $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 14} true;
  assume {:verifier.code 0} true;
  $i134 := $load.i8($M.1, $p133);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 60} true;
  assume {:verifier.code 0} true;
  $i135 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 86} true;
  assume {:verifier.code 0} true;
  $i136 := $add.i32($i135, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 106} true;
  assume {:verifier.code 0} true;
  $i137 := $add.i32($i136, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 3} true;
  assume {:verifier.code 0} true;
  call outb($i134, $i137);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $p138 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $i139 := $load.i32($M.0, $p138);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6548:29: warning: over-approximating bitwise operation and;
  $i140 := $and.i32($i139, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 35} true;
  assume {:verifier.code 0} true;
  $i141 := $ne.i32($i140, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i141} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i141 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 27} true;
  assume {:verifier.code 0} true;
  $i142 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 53} true;
  assume {:verifier.code 0} true;
  $i143 := $add.i32($i142, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 73} true;
  assume {:verifier.code 0} true;
  $i144 := $add.i32($i143, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 15} true;
  assume {:verifier.code 0} true;
  call $i145 := inb($i144);
  call {:cexpr "tmp___1"} boogie_si_record_i8($i145);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  $i146 := $zext.i8.i32($i145);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p147 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p148 := $load.ref($M.0, $p147);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 48} true;
  assume {:verifier.code 0} true;
  $p149 := $add.ref($p148, $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 32} true;
  assume {:verifier.code 0} true;
  $i150 := $load.i8($M.1, $p149);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 26} true;
  assume {:verifier.code 0} true;
  $i151 := $zext.i8.i32($i150);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 23} true;
  assume {:verifier.code 0} true;
  $i152 := $ne.i32($i146, $i151);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i152} true;
  goto $bb27, $bb28;
$bb25:
  assume !(($i141 == 1));
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6560, 5} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb27:
  assume ($i152 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6551, 7} true;
  assume {:verifier.code 0} true;
  call $i153 := netdev_err.ref.ref.i32($p0, .str.34, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6553, 5} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb28:
  assume !(($i152 == 1));
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6555, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb30:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p154 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p155 := $load.ref($M.0, $p154);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 30} true;
  assume {:verifier.code 0} true;
  $p156 := $add.ref($p155, $mul.ref(3, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 14} true;
  assume {:verifier.code 0} true;
  $i157 := $load.i8($M.1, $p156);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 60} true;
  assume {:verifier.code 0} true;
  $i158 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 86} true;
  assume {:verifier.code 0} true;
  $i159 := $add.i32($i158, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 106} true;
  assume {:verifier.code 0} true;
  $i160 := $add.i32($i159, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 3} true;
  assume {:verifier.code 0} true;
  call outb($i157, $i160);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $p161 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $i162 := $load.i32($M.0, $p161);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6548:29: warning: over-approximating bitwise operation and;
  $i163 := $and.i32($i162, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 35} true;
  assume {:verifier.code 0} true;
  $i164 := $ne.i32($i163, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i164} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i164 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 27} true;
  assume {:verifier.code 0} true;
  $i165 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 53} true;
  assume {:verifier.code 0} true;
  $i166 := $add.i32($i165, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 73} true;
  assume {:verifier.code 0} true;
  $i167 := $add.i32($i166, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 15} true;
  assume {:verifier.code 0} true;
  call $i168 := inb($i167);
  call {:cexpr "tmp___1"} boogie_si_record_i8($i168);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  $i169 := $zext.i8.i32($i168);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p170 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p171 := $load.ref($M.0, $p170);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 48} true;
  assume {:verifier.code 0} true;
  $p172 := $add.ref($p171, $mul.ref(3, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 32} true;
  assume {:verifier.code 0} true;
  $i173 := $load.i8($M.1, $p172);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 26} true;
  assume {:verifier.code 0} true;
  $i174 := $zext.i8.i32($i173);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 23} true;
  assume {:verifier.code 0} true;
  $i175 := $ne.i32($i169, $i174);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i175} true;
  goto $bb34, $bb35;
$bb32:
  assume !(($i164 == 1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6560, 5} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb34:
  assume ($i175 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6551, 7} true;
  assume {:verifier.code 0} true;
  call $i176 := netdev_err.ref.ref.i32($p0, .str.34, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6553, 5} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume !(($i175 == 1));
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6555, 3} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb37:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p177 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p178 := $load.ref($M.0, $p177);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 30} true;
  assume {:verifier.code 0} true;
  $p179 := $add.ref($p178, $mul.ref(4, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 14} true;
  assume {:verifier.code 0} true;
  $i180 := $load.i8($M.1, $p179);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 60} true;
  assume {:verifier.code 0} true;
  $i181 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 86} true;
  assume {:verifier.code 0} true;
  $i182 := $add.i32($i181, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 106} true;
  assume {:verifier.code 0} true;
  $i183 := $add.i32($i182, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 3} true;
  assume {:verifier.code 0} true;
  call outb($i180, $i183);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $p184 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $i185 := $load.i32($M.0, $p184);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6548:29: warning: over-approximating bitwise operation and;
  $i186 := $and.i32($i185, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 35} true;
  assume {:verifier.code 0} true;
  $i187 := $ne.i32($i186, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i187} true;
  goto $bb38, $bb39;
$bb38:
  assume ($i187 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 27} true;
  assume {:verifier.code 0} true;
  $i188 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 53} true;
  assume {:verifier.code 0} true;
  $i189 := $add.i32($i188, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 73} true;
  assume {:verifier.code 0} true;
  $i190 := $add.i32($i189, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 15} true;
  assume {:verifier.code 0} true;
  call $i191 := inb($i190);
  call {:cexpr "tmp___1"} boogie_si_record_i8($i191);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  $i192 := $zext.i8.i32($i191);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p193 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p194 := $load.ref($M.0, $p193);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 48} true;
  assume {:verifier.code 0} true;
  $p195 := $add.ref($p194, $mul.ref(4, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 32} true;
  assume {:verifier.code 0} true;
  $i196 := $load.i8($M.1, $p195);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 26} true;
  assume {:verifier.code 0} true;
  $i197 := $zext.i8.i32($i196);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 23} true;
  assume {:verifier.code 0} true;
  $i198 := $ne.i32($i192, $i197);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i198} true;
  goto $bb41, $bb42;
$bb39:
  assume !(($i187 == 1));
  assume {:verifier.code 0} true;
  goto $bb40;
$bb40:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6560, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb41:
  assume ($i198 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6551, 7} true;
  assume {:verifier.code 0} true;
  call $i199 := netdev_err.ref.ref.i32($p0, .str.34, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6553, 5} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb42:
  assume !(($i198 == 1));
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6555, 3} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb44:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p200 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 21} true;
  assume {:verifier.code 0} true;
  $p201 := $load.ref($M.0, $p200);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 30} true;
  assume {:verifier.code 0} true;
  $p202 := $add.ref($p201, $mul.ref(5, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 14} true;
  assume {:verifier.code 0} true;
  $i203 := $load.i8($M.1, $p202);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 60} true;
  assume {:verifier.code 0} true;
  $i204 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 86} true;
  assume {:verifier.code 0} true;
  $i205 := $add.i32($i204, 5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 106} true;
  assume {:verifier.code 0} true;
  $i206 := $add.i32($i205, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6547, 3} true;
  assume {:verifier.code 0} true;
  call outb($i203, $i206);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $p207 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 18} true;
  assume {:verifier.code 0} true;
  $i208 := $load.i32($M.0, $p207);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6548:29: warning: over-approximating bitwise operation and;
  $i209 := $and.i32($i208, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 35} true;
  assume {:verifier.code 0} true;
  $i210 := $ne.i32($i209, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6548, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i210} true;
  goto $bb45, $bb46;
$bb45:
  assume ($i210 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 27} true;
  assume {:verifier.code 0} true;
  $i211 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 53} true;
  assume {:verifier.code 0} true;
  $i212 := $add.i32($i211, 5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 73} true;
  assume {:verifier.code 0} true;
  $i213 := $add.i32($i212, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6549, 15} true;
  assume {:verifier.code 0} true;
  call $i214 := inb($i213);
  call {:cexpr "tmp___1"} boogie_si_record_i8($i214);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  $i215 := $zext.i8.i32($i214);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p216 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 39} true;
  assume {:verifier.code 0} true;
  $p217 := $load.ref($M.0, $p216);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 48} true;
  assume {:verifier.code 0} true;
  $p218 := $add.ref($p217, $mul.ref(5, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 32} true;
  assume {:verifier.code 0} true;
  $i219 := $load.i8($M.1, $p218);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 26} true;
  assume {:verifier.code 0} true;
  $i220 := $zext.i8.i32($i219);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 23} true;
  assume {:verifier.code 0} true;
  $i221 := $ne.i32($i215, $i220);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6550, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i221} true;
  goto $bb48, $bb49;
$bb46:
  assume !(($i210 == 1));
  assume {:verifier.code 0} true;
  goto $bb47;
$bb47:
  assume {:verifier.code 0} true;
  goto $bb13;
$bb48:
  assume ($i221 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6551, 7} true;
  assume {:verifier.code 0} true;
  call $i222 := netdev_err.ref.ref.i32($p0, .str.34, 5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6553, 5} true;
  assume {:verifier.code 0} true;
  goto $bb50;
$bb49:
  assume !(($i221 == 1));
  assume {:verifier.code 0} true;
  goto $bb50;
$bb50:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6555, 3} true;
  assume {:verifier.code 0} true;
  goto $bb47;
}
const netif_start_queue: ref;
axiom (netif_start_queue == $sub.ref(0, 91390));
procedure  netif_start_queue($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5547, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5547, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_get_tx_queue($p0, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5548, 3} true;
  assume {:verifier.code 0} true;
  call netif_tx_start_queue($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5549, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const spin_unlock_irqrestore: ref;
axiom (spin_unlock_irqrestore == $sub.ref(0, 92422));
procedure  spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5283, 39} true;
  assume {:verifier.code 0} true;
  call {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5283, 39} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5283, 48} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5283, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_unlock_irqrestore($p3, $i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5284, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_unlock_irqrestore: ref;
axiom (_raw_spin_unlock_irqrestore == $sub.ref(0, 93454));
procedure  _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7524, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7524, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netdev_get_tx_queue: ref;
axiom (netdev_get_tx_queue == $sub.ref(0, 94486));
procedure  netdev_get_tx_queue($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5526, 39} true;
  assume {:verifier.code 0} true;
  call {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5526, 39} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5526, 39} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5526, 45} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i32.i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5526, 43} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p3, $mul.ref($i4, 496));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5526, 3} true;
  assume {:verifier.code 0} true;
  $r := $p5;
  $exn := false;
  return;
}
const netif_tx_start_queue: ref;
axiom (netif_tx_start_queue == $sub.ref(0, 95518));
procedure  netif_tx_start_queue($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5539, 57} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5539, 57} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5539, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(0, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5540, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const clear_bit: ref;
axiom (clear_bit == $sub.ref(0, 96550));
procedure  clear_bit($i0: i64, $p1: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5097, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
  call devirtbounce(0, $p1, $i0, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5097, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const outb: ref;
axiom (outb == $sub.ref(0, 97582));
procedure  outb($i0: i8, $i1: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5292, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
  call {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
  call devirtbounce.1(0, $i0, $i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5292, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const inb: ref;
axiom (inb == $sub.ref(0, 98614));
procedure  inb($i0: i32)
  returns ($r: i8)
{
  var $i1: i8;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5300, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
  call $i1 := devirtbounce.2(0, $i0);
  call {:cexpr "value"} boogie_si_record_i8($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5300, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const netdev_err: ref;
axiom (netdev_err == $sub.ref(0, 99646));
procedure  netdev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7588, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7588, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7588, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
procedure  netdev_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7588, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7588, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7588, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
procedure  netdev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7588, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7588, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7588, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const do_set_multicast_list: ref;
axiom (do_set_multicast_list == $sub.ref(0, 100678));
procedure  do_set_multicast_list($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6422, 21} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6422, 21} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6422, 21} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i64($M.0, $p1);
  call {:cexpr "e8390_base"} boogie_si_record_i64($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6423, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6424, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6425, 13} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6425, 13} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6425, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6425:19: warning: over-approximating bitwise operation and;
  $i7 := $and.i32($i6, 768);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6425, 27} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i7, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6425, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6426, 33} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6426, 5} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6426, 5} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p10, 0, 8, false);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6427, 14} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1));
  $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6427, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6427, 23} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i13, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6427, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i8 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6432, 33} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6432, 5} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6432, 5} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p18, $sub.i8(0, 1), 8, false);
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i14 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6428, 39} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6428, 20} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6428, 7} true;
  assume {:verifier.code 0} true;
  call make_mc_bits($p16, $p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6429, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6431, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6434, 13} true;
  assume {:verifier.code 0} true;
  call $i19 := netif_running($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6434, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i1.i8($i19);
  call {:cexpr "tmp___0"} boogie_si_record_i8($i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6435, 13} true;
  assume {:verifier.code 0} true;
  $i21 := $trunc.i8.i1($i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6435, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i21 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6436, 20} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6436, 46} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i32($i22, 12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6436, 5} true;
  assume {:verifier.code 0} true;
  call outb(4, $i23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6437, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6439, 12} true;
  assume {:verifier.code 0} true;
  $i24 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6439, 3} true;
  assume {:verifier.code 0} true;
  call outb(96, $i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6446, 7} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6447, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 24} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 14} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i8($M.0, $p26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 45} true;
  assume {:verifier.code 0} true;
  $i28 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 91} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i32($i28, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 3} true;
  assume {:verifier.code 0} true;
  call outb($i27, $i29);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6447, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 24} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  $p50 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1)), $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 14} true;
  assume {:verifier.code 0} true;
  $i51 := $load.i8($M.0, $p50);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 45} true;
  assume {:verifier.code 0} true;
  $i52 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 71} true;
  assume {:verifier.code 0} true;
  $i53 := $add.i32($i52, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 91} true;
  assume {:verifier.code 0} true;
  $i54 := $add.i32($i53, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 3} true;
  assume {:verifier.code 0} true;
  call outb($i51, $i54);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6447, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb13:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6450, 12} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6450, 3} true;
  assume {:verifier.code 0} true;
  call outb(32, $i30);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6451, 13} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6451, 13} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i32($M.0, $p31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6451, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6451:19: warning: over-approximating bitwise operation and;
  $i33 := $and.i32($i32, 256);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6451, 27} true;
  assume {:verifier.code 0} true;
  $i34 := $ne.i32($i33, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6451, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i34 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6452, 21} true;
  assume {:verifier.code 0} true;
  $i35 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6452, 47} true;
  assume {:verifier.code 0} true;
  $i36 := $add.i32($i35, 12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6452, 5} true;
  assume {:verifier.code 0} true;
  call outb(28, $i36);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6453, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i34 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 13} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 13} true;
  assume {:verifier.code 0} true;
  $i38 := $load.i32($M.0, $p37);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6454:19: warning: over-approximating bitwise operation and;
  $i39 := $and.i32($i38, 512);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 27} true;
  assume {:verifier.code 0} true;
  $i40 := $ne.i32($i39, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb17, $bb19;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6459, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb17:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 33} true;
  assume {:verifier.code 0} true;
  assume ($i40 == 1);
  goto $bb18;
$bb18:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6455, 21} true;
  assume {:verifier.code 0} true;
  $i45 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6455, 47} true;
  assume {:verifier.code 0} true;
  $i46 := $add.i32($i45, 12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6455, 5} true;
  assume {:verifier.code 0} true;
  call outb(12, $i46);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6456, 3} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb19:
  assume !(($i40 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 41} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1));
  $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 44} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i32($M.0, $p42);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 50} true;
  assume {:verifier.code 0} true;
  $i44 := $ne.i32($i43, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb20, $bb21;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6454, 7} true;
  assume {:verifier.code 0} true;
  assume ($i44 == 1);
  goto $bb18;
$bb21:
  assume !(($i44 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6457, 20} true;
  assume {:verifier.code 0} true;
  $i47 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6457, 46} true;
  assume {:verifier.code 0} true;
  $i48 := $add.i32($i47, 12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6457, 5} true;
  assume {:verifier.code 0} true;
  call outb(4, $i48);
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  goto $bb16;
$bb23:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 24} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1)), $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 14} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i8($M.0, $p56);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 45} true;
  assume {:verifier.code 0} true;
  $i58 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 71} true;
  assume {:verifier.code 0} true;
  $i59 := $add.i32($i58, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 91} true;
  assume {:verifier.code 0} true;
  $i60 := $add.i32($i59, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 3} true;
  assume {:verifier.code 0} true;
  call outb($i57, $i60);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6447, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 24} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  $p62 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1)), $mul.ref(3, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 14} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i8($M.0, $p62);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 45} true;
  assume {:verifier.code 0} true;
  $i64 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 71} true;
  assume {:verifier.code 0} true;
  $i65 := $add.i32($i64, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 91} true;
  assume {:verifier.code 0} true;
  $i66 := $add.i32($i65, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 3} true;
  assume {:verifier.code 0} true;
  call outb($i63, $i66);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6447, 5} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 24} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  $p68 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1)), $mul.ref(4, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 14} true;
  assume {:verifier.code 0} true;
  $i69 := $load.i8($M.0, $p68);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 45} true;
  assume {:verifier.code 0} true;
  $i70 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 71} true;
  assume {:verifier.code 0} true;
  $i71 := $add.i32($i70, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 91} true;
  assume {:verifier.code 0} true;
  $i72 := $add.i32($i71, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 3} true;
  assume {:verifier.code 0} true;
  call outb($i69, $i72);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6447, 5} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 24} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  $p74 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1)), $mul.ref(5, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 14} true;
  assume {:verifier.code 0} true;
  $i75 := $load.i8($M.0, $p74);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 45} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 71} true;
  assume {:verifier.code 0} true;
  $i77 := $add.i32($i76, 5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 91} true;
  assume {:verifier.code 0} true;
  $i78 := $add.i32($i77, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 3} true;
  assume {:verifier.code 0} true;
  call outb($i75, $i78);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6447, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 24} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  $p80 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1)), $mul.ref(6, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 14} true;
  assume {:verifier.code 0} true;
  $i81 := $load.i8($M.0, $p80);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 45} true;
  assume {:verifier.code 0} true;
  $i82 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 71} true;
  assume {:verifier.code 0} true;
  $i83 := $add.i32($i82, 6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 91} true;
  assume {:verifier.code 0} true;
  $i84 := $add.i32($i83, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 3} true;
  assume {:verifier.code 0} true;
  call outb($i81, $i84);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6447, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 24} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1));
  $p86 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(64, 1)), $mul.ref(7, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 14} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i8($M.0, $p86);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 45} true;
  assume {:verifier.code 0} true;
  $i88 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 71} true;
  assume {:verifier.code 0} true;
  $i89 := $add.i32($i88, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 91} true;
  assume {:verifier.code 0} true;
  $i90 := $add.i32($i89, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6443, 3} true;
  assume {:verifier.code 0} true;
  call outb($i87, $i90);
  assume {:verifier.code 0} true;
  goto $bb13;
}
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 101710));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i1);
const make_mc_bits: ref;
axiom (make_mc_bits == $sub.ref(0, 102742));
procedure  make_mc_bits($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p13: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6396, 43} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6396, 43} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(688, 1));
  $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1));
  $p4 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6396, 51} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6397, 8} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 30} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p6, $mul.ref(0, 80)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 63} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(688, 1));
  $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 39} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.i64($p10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 36} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i64($i8, $i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i12 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 7} true;
  assume {:verifier.code 0} true;
  $p13 := $p5;
  goto $bb4;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb8;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6408, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6400, 61} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p13, $mul.ref(0, 80)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6400, 31} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6400, 9} true;
  assume {:verifier.code 0} true;
  call $i16 := crc32_le($sub.i32(0, 1), $p15, 6);
  call {:cexpr "tmp"} boogie_si_record_i32($i16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6401, 13} true;
  assume {:verifier.code 0} true;
  call $i17 := bitrev32($i16);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 100} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6403:100: warning: over-approximating bitwise operation lshr;
  $i18 := $lshr.i32($i17, 29);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 79} true;
  assume {:verifier.code 0} true;
  $i19 := $zext.i32.i64($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 77} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p0, $mul.ref($i19, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 70} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i8($M.0, $p20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 49} true;
  assume {:verifier.code 0} true;
  $i22 := $sext.i8.i32($i21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 150} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6403:150: warning: over-approximating bitwise operation lshr;
  $i23 := $lshr.i32($i17, 26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 157} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6403:157: warning: over-approximating bitwise operation and;
  $i24 := $and.i32($i23, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 135} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6403:135: warning: over-approximating bitwise operation shl;
  $i25 := $shl.i32(1, $i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 118} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.i32.i8($i25);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 111} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.i8.i32($i26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 109} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6403:109: warning: over-approximating bitwise operation or;
  $i28 := $or.i32($i22, $i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 43} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.i32.i8($i28);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 33} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6403:33: warning: over-approximating bitwise operation lshr;
  $i30 := $lshr.i32($i17, 29);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 12} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.i32.i64($i30);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 10} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p0, $mul.ref($i31, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6403, 41} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p32, $i29);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6404, 46} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p13, $mul.ref(0, 80)), $mul.ref(0, 1));
  $p34 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6404, 51} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.1, $p34);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6405, 8} true;
  assume {:verifier.code 0} true;
  $p36 := $bitcast.ref.ref($p35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 30} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p36, $mul.ref(0, 80)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 7} true;
  assume {:verifier.code 0} true;
  $i38 := $p2i.ref.i64($p37);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 36} true;
  assume {:verifier.code 0} true;
  $i39 := $ne.i64($i38, $i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i39 == 1);
  assume {:verifier.code 0} true;
  $p13 := $p35;
  goto $bb4;
$bb7:
  assume !(($i39 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6407, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb8:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6411, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netif_running: ref;
axiom (netif_running == $sub.ref(0, 103774));
procedure  netif_running($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5608, 71} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5608, 71} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5608, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := constant_test_bit(0, $p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5609, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5609, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const constant_test_bit: ref;
axiom (constant_test_bit == $sub.ref(0, 104806));
procedure  constant_test_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 63} true;
  assume {:verifier.code 0} true;
  call {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 63} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5112:63: warning: over-approximating bitwise operation ashr;
  $i2 := $ashr.i64($i0, 6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 41} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1, $mul.ref($i2, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 34} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.0, $p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 74} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 83} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5112:83: warning: over-approximating bitwise operation and;
  $i6 := $and.i32($i5, 63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 70} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i32.i64($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 70} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5112:70: warning: over-approximating bitwise operation lshr;
  $i8 := $lshr.i64($i4, $i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i64.i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 90} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5112:90: warning: over-approximating bitwise operation and;
  $i10 := $and.i32($i9, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5112, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const crc32_le: ref;
axiom (crc32_le == $sub.ref(0, 105838));
procedure  crc32_le($i0: i32, $p1: ref, $i2: i64)
  returns ($r: i32)
{
  var $i3: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7536, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "crc32_le:arg:arg0"} boogie_si_record_i32($i0);
  call {:cexpr "crc32_le:arg:arg2"} boogie_si_record_i64($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7536, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7536, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const bitrev32: ref;
axiom (bitrev32 == $sub.ref(0, 106870));
procedure  bitrev32($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7532, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "bitrev32:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7532, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7532, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ei_close: ref;
axiom (ei_close == $sub.ref(0, 107902));
procedure  ei_close($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6622, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6622, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __ei_close($p0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6623, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __ei_close: ref;
axiom (__ei_close == $sub.ref(0, 108934));
procedure  __ei_close($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5681, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5681, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5682, 14} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5683, 40} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5683, 13} true;
  assume {:verifier.code 0} true;
  call $p4 := spinlock_check($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5684, 11} true;
  assume {:verifier.code 0} true;
  call $i5 := _raw_spin_lock_irqsave($p4);
  call {:cexpr "flags"} boogie_si_record_i64($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5685, 3} true;
  assume {:verifier.code 0} true;
  call __NS8390_init($p0, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5686, 38} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5686, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_irqrestore($p6, $i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5687, 3} true;
  assume {:verifier.code 0} true;
  call netif_stop_queue($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5688, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const netif_stop_queue: ref;
axiom (netif_stop_queue == $sub.ref(0, 109966));
procedure  netif_stop_queue($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5599, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5599, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_get_tx_queue($p0, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5600, 3} true;
  assume {:verifier.code 0} true;
  call netif_tx_stop_queue($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5601, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netif_tx_stop_queue: ref;
axiom (netif_tx_stop_queue == $sub.ref(0, 110998));
procedure  netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5579, 19} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5579, 19} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5579, 45} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5579, 45} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  call {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5580, 43} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5580, 43} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5580, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.i32.i64($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5580, 9} true;
  assume {:verifier.code 0} true;
  call $i7 := ldv__builtin_expect($i6, 0);
  call {:cexpr "tmp"} boogie_si_record_i64($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5581, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5581, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5582, 5} true;
  assume {:verifier.code 0} true;
  call warn_slowpath_null(.str, 2212);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5583, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5585, 47} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i3, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5585, 47} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i1.i32($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5585, 33} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5585, 13} true;
  assume {:verifier.code 0} true;
  call $i12 := ldv__builtin_expect($i11, 0);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5586, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i64($i12, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5586, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i13 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5587, 5} true;
  assume {:verifier.code 0} true;
  call $i14 := printk.ref(.str.1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5588, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5594, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5591, 55} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5591, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(0, $p15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5592, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
}
const ldv__builtin_expect: ref;
axiom (ldv__builtin_expect == $sub.ref(0, 112030));
procedure  ldv__builtin_expect($i0: i64, $i1: i64)
  returns ($r: i64)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5436, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
  call {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5436, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const warn_slowpath_null: ref;
axiom (warn_slowpath_null == $sub.ref(0, 113062));
procedure  warn_slowpath_null($p0: ref, $i1: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7623, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7623, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const printk: ref;
axiom (printk == $sub.ref(0, 114094));
procedure  printk.ref.ref($p0: ref, p.1: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7600, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7600, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7600, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
procedure  printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7600, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7600, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7600, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
procedure  printk.ref($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7600, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7600, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7600, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const set_bit: ref;
axiom (set_bit == $sub.ref(0, 115126));
procedure  set_bit($i0: i64, $p1: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5090, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
  call devirtbounce(0, $p1, $i0, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5090, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ei_start_xmit: ref;
axiom (ei_start_xmit == $sub.ref(0, 116158));
procedure  ei_start_xmit($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6636, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6636, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := __ei_start_xmit($p0, $p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6637, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __ei_start_xmit: ref;
axiom (__ei_start_xmit == $sub.ref(0, 117190));
procedure  __ei_start_xmit($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i16;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i24;
  var $i64: i24;
  var $i65: i24;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i8;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $i94: i16;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i24;
  var $i111: i24;
  var $i112: i24;
  var $p113: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i64;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $p123: ref;
  var $i124: i16;
  var $i125: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i8;
  var $i129: i8;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i24;
  var $i143: i24;
  var $i144: i24;
  var $p145: ref;
  var $p146: ref;
  var $i147: i8;
  var $i148: i64;
  var $i149: i64;
  var $i150: i64;
  var $i151: i1;
  var $p152: ref;
  var $i153: i16;
  var $i154: i32;
  var $p155: ref;
  var $i156: i16;
  var $i157: i32;
  var $p158: ref;
  var $i159: i16;
  var $i160: i32;
  var $i161: i32;
  var $p162: ref;
  var $i163: i8;
  var $i164: i8;
  var $i165: i32;
  var $i166: i32;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $i172: i64;
  var $i173: i64;
  var $p174: ref;
  var $p175: ref;
  var $i85: i32;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i8;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i185: i8;
  var $i186: i8;
  var $i187: i8;
  var $p188: ref;
  var $i189: i8;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i8;
  var $i198: i32;
  var $i199: i32;
  var $i200: i8;
  var $p201: ref;
  var $p202: ref;
  var $i203: i16;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i16;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $i211: i8;
  var $i212: i8;
  var $i213: i32;
  var $i214: i32;
  var $p215: ref;
  var $p216: ref;
  var $i217: i32;
  var $p218: ref;
  var $p219: ref;
  var $i220: i64;
  var $i221: i64;
  var $i222: i64;
  var $p223: ref;
  var $p224: ref;
  var $i176: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5768, 21} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(60, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume true;
  assume true;
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5768, 21} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5768, 21} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i64($M.0, $p7);
  call {:cexpr "e8390_base"} boogie_si_record_i64($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5769, 9} true;
  assume {:verifier.code 0} true;
  call $p9 := netdev_priv($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5770, 14} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5771, 28} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5771, 28} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.0, $p11);
  call {:cexpr "send_length"} boogie_si_record_i32($i12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5772, 23} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5772, 23} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5773, 12} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5773, 12} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, $p15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5773, 16} true;
  assume {:verifier.code 0} true;
  $i17 := $ule.i32($i16, 59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5773, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i17 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5774, 5} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5774, 5} true;
  assume {:verifier.code 0} true;
  call $M.1 := $memset.i8($M.1, $p18, 0, 60, false);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5775, 27} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5775, 27} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.0, $p19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5775, 13} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i32.i64($i20);
  call {:cexpr "__len"} boogie_si_record_i64($i21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5776, 13} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5776, 13} true;
  assume {:verifier.code 0} true;
  call $M.1 := $memcpy.i8($M.1, $M.1, $p22, $p14, $i21, false);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5778, 12} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5779, 3} true;
  assume {:verifier.code 0} true;
  $i24, $p25 := 60, $p3;
  goto $bb3;
$bb2:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  $i24, $p25 := $i12, $p14;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5781, 40} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5781, 13} true;
  assume {:verifier.code 0} true;
  call $p27 := spinlock_check($p26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5782, 11} true;
  assume {:verifier.code 0} true;
  call $i28 := _raw_spin_lock_irqsave($p27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5782, 9} true;
  assume {:verifier.code 0} true;
  $M.2 := $store.i64($M.2, $p2, $i28);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5783, 18} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.i64.i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5783, 44} true;
  assume {:verifier.code 0} true;
  $i30 := $add.i32($i29, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5783, 3} true;
  assume {:verifier.code 0} true;
  call outb(0, $i30);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5784, 38} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5784, 49} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i64($M.2, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5784, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_irqrestore($p31, $i32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5785, 58} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5785, 58} true;
  assume {:verifier.code 0} true;
  $i34 := $load.i32($M.0, $p33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5785, 3} true;
  assume {:verifier.code 0} true;
  call disable_irq_nosync_lockdep_irqsave($i34, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5786, 25} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5786, 3} true;
  assume {:verifier.code 0} true;
  call spin_lock($p35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5787, 13} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5787, 21} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i8($M.0, $p36);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5787, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5787:21: warning: over-approximating bitwise operation and;
  $i38 := $and.i8($i37, $sub.i8(0, 17));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5787, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5787:21: warning: over-approximating bitwise operation or;
  $i39 := $or.i8($i38, 16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5787, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p36, $i39);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5788, 23} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5788, 23} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i16($M.0, $p40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5788, 7} true;
  assume {:verifier.code 0} true;
  $i42 := $sext.i16.i32($i41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5788, 27} true;
  assume {:verifier.code 0} true;
  $i43 := $eq.i32($i42, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5788, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i43 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5789, 35} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(73, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5789, 35} true;
  assume {:verifier.code 0} true;
  $i45 := $load.i8($M.0, $p44);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5789, 19} true;
  assume {:verifier.code 0} true;
  $i46 := $zext.i8.i32($i45);
  call {:cexpr "output_page"} boogie_si_record_i32($i46);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5790, 21} true;
  assume {:verifier.code 0} true;
  $i47 := $trunc.i32.i16($i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5790, 15} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5790, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p48, $i47);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 20} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 20} true;
  assume {:verifier.code 0} true;
  $i50 := $load.i32($M.0, $p49);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 31} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5791:31: warning: over-approximating bitwise operation and;
  $i51 := $and.i32($i50, 256);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 39} true;
  assume {:verifier.code 0} true;
  $i52 := $ne.i32($i51, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 45} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i43 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5807, 23} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5807, 23} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i16($M.0, $p86);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5807, 7} true;
  assume {:verifier.code 0} true;
  $i88 := $sext.i16.i32($i87);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5807, 27} true;
  assume {:verifier.code 0} true;
  $i89 := $eq.i32($i88, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5807, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i89} true;
  goto $bb16, $bb17;
$bb6:
  assume ($i52 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 64} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 64} true;
  assume {:verifier.code 0} true;
  $i54 := $load.i16($M.0, $p53);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 48} true;
  assume {:verifier.code 0} true;
  $i55 := $sext.i16.i32($i54);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 68} true;
  assume {:verifier.code 0} true;
  $i56 := $sgt.i32($i55, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb9, $bb10;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 45} true;
  assume {:verifier.code 0} true;
  assume !(($i52 == 1));
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  goto $bb14;
$bb9:
  assume ($i56 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5792, 18} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5792, 26} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.ref($M.3, $p57, .str.2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5793, 18} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5793, 27} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.ref($M.4, $p58, .str.3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5794, 18} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5794, 27} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.ref($M.5, $p59, .str.4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5795, 18} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5795, 25} true;
  assume {:verifier.code 0} true;
  $M.6 := $store.ref($M.6, $p60, .str.5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5796, 18} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5796, 18} true;
  assume {:verifier.code 0} true;
  $p62 := $bitcast.ref.ref($p61);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5796, 25} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i24($M.7, $p62);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5796, 25} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5796:25: warning: over-approximating bitwise operation and;
  $i64 := $and.i24($i63, $sub.i24(0, 262144));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5796, 25} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5796:25: warning: over-approximating bitwise operation or;
  $i65 := $or.i24($i64, 352);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5796, 25} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i24($M.7, $p62, $i65);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5797, 18} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5797, 24} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p66, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5798, 55} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5798, 55} true;
  assume {:verifier.code 0} true;
  $i68 := $load.i8($M.8, $p67);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5798, 37} true;
  assume {:verifier.code 0} true;
  $i69 := $zext.i8.i64($i68);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5798, 61} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5798:61: warning: over-approximating bitwise operation and;
  $i70 := $and.i64($i69, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5798, 17} true;
  assume {:verifier.code 0} true;
  call $i71 := ldv__builtin_expect($i70, 0);
  call {:cexpr "tmp___1"} boogie_si_record_i64($i71);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5799, 19} true;
  assume {:verifier.code 0} true;
  $i72 := $ne.i64($i71, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5799, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i72} true;
  goto $bb11, $bb12;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5791, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i56 == 1));
  goto $bb8;
$bb11:
  assume ($i72 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 46} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 46} true;
  assume {:verifier.code 0} true;
  $i74 := $load.i16($M.0, $p73);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 30} true;
  assume {:verifier.code 0} true;
  $i75 := $sext.i16.i32($i74);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 67} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 67} true;
  assume {:verifier.code 0} true;
  $i77 := $load.i16($M.0, $p76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 51} true;
  assume {:verifier.code 0} true;
  $i78 := $sext.i16.i32($i77);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 91} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 91} true;
  assume {:verifier.code 0} true;
  $i80 := $load.i8($M.0, $p79);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 91} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5801:91: warning: over-approximating bitwise operation lshr;
  $i81 := $lshr.i8($i80, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 91} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5801:91: warning: over-approximating bitwise operation and;
  $i82 := $and.i8($i81, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5801, 75} true;
  assume {:verifier.code 0} true;
  $i83 := $zext.i8.i32($i82);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5800, 9} true;
  assume {:verifier.code 0} true;
  call $i84 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p4, $p1, .str.5, $i75, $i78, $i83);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5802, 7} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i72 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5804, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5806, 3} true;
  assume {:verifier.code 0} true;
  $i85 := $i46;
  goto $bb15;
$bb15:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5849, 16} true;
  assume {:verifier.code 0} true;
  $p177 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5849, 16} true;
  assume {:verifier.code 0} true;
  $p178 := $load.ref($M.0, $p177);
  call devirtbounce.3($p178, $p1, $i24, $p25, $i85);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5850, 24} true;
  assume {:verifier.code 0} true;
  $p179 := $bitcast.ref.ref($p10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5850, 50} true;
  assume {:verifier.code 0} true;
  $p180 := $add.ref($p179, $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5850, 22} true;
  assume {:verifier.code 0} true;
  $i181 := $load.i8($M.0, $p180);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5850, 7} true;
  assume {:verifier.code 0} true;
  $i182 := $zext.i8.i32($i181);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5850, 58} true;
  assume {:verifier.code 0} true;
  $i183 := $eq.i32($i182, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5850, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i183} true;
  goto $bb35, $bb36;
$bb16:
  assume ($i89 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5808, 35} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(73, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5808, 35} true;
  assume {:verifier.code 0} true;
  $i91 := $load.i8($M.0, $p90);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5808, 19} true;
  assume {:verifier.code 0} true;
  $i92 := $zext.i8.i32($i91);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5808, 49} true;
  assume {:verifier.code 0} true;
  $i93 := $add.i32($i92, 6);
  call {:cexpr "output_page"} boogie_si_record_i32($i93);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5809, 21} true;
  assume {:verifier.code 0} true;
  $i94 := $trunc.i32.i16($i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5809, 15} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5809, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p95, $i94);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 20} true;
  assume {:verifier.code 0} true;
  $p96 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 20} true;
  assume {:verifier.code 0} true;
  $i97 := $load.i32($M.0, $p96);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 31} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5810:31: warning: over-approximating bitwise operation and;
  $i98 := $and.i32($i97, 256);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 39} true;
  assume {:verifier.code 0} true;
  $i99 := $ne.i32($i98, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 45} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb18, $bb19;
$bb17:
  assume !(($i89 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5826, 20} true;
  assume {:verifier.code 0} true;
  $p132 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5826, 20} true;
  assume {:verifier.code 0} true;
  $i133 := $load.i32($M.0, $p132);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5826, 31} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5826:31: warning: over-approximating bitwise operation and;
  $i134 := $and.i32($i133, 128);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5826, 39} true;
  assume {:verifier.code 0} true;
  $i135 := $ne.i32($i134, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5826, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i135} true;
  goto $bb28, $bb29;
$bb18:
  assume ($i99 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 64} true;
  assume {:verifier.code 0} true;
  $p100 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 64} true;
  assume {:verifier.code 0} true;
  $i101 := $load.i16($M.0, $p100);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 48} true;
  assume {:verifier.code 0} true;
  $i102 := $sext.i16.i32($i101);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 68} true;
  assume {:verifier.code 0} true;
  $i103 := $sgt.i32($i102, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb21, $bb22;
$bb19:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 45} true;
  assume {:verifier.code 0} true;
  assume !(($i99 == 1));
  goto $bb20;
$bb20:
  assume {:verifier.code 0} true;
  goto $bb26;
$bb21:
  assume ($i103 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5811, 22} true;
  assume {:verifier.code 0} true;
  $p104 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5811, 30} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.ref($M.3, $p104, .str.2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5812, 22} true;
  assume {:verifier.code 0} true;
  $p105 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5812, 31} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.ref($M.4, $p105, .str.3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5813, 22} true;
  assume {:verifier.code 0} true;
  $p106 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5813, 31} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.ref($M.5, $p106, .str.4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5814, 22} true;
  assume {:verifier.code 0} true;
  $p107 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5814, 29} true;
  assume {:verifier.code 0} true;
  $M.6 := $store.ref($M.6, $p107, .str.6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5815, 22} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5815, 22} true;
  assume {:verifier.code 0} true;
  $p109 := $bitcast.ref.ref($p108);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5815, 29} true;
  assume {:verifier.code 0} true;
  $i110 := $load.i24($M.7, $p109);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5815, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5815:29: warning: over-approximating bitwise operation and;
  $i111 := $and.i24($i110, $sub.i24(0, 262144));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5815, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5815:29: warning: over-approximating bitwise operation or;
  $i112 := $or.i24($i111, 360);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5815, 29} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i24($M.7, $p109, $i112);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5816, 22} true;
  assume {:verifier.code 0} true;
  $p113 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5816, 28} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p113, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5817, 59} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5817, 59} true;
  assume {:verifier.code 0} true;
  $i115 := $load.i8($M.8, $p114);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5817, 37} true;
  assume {:verifier.code 0} true;
  $i116 := $zext.i8.i64($i115);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5817, 65} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5817:65: warning: over-approximating bitwise operation and;
  $i117 := $and.i64($i116, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5817, 17} true;
  assume {:verifier.code 0} true;
  call $i118 := ldv__builtin_expect($i117, 0);
  call {:cexpr "tmp___2"} boogie_si_record_i64($i118);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5818, 19} true;
  assume {:verifier.code 0} true;
  $i119 := $ne.i64($i118, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5818, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i119} true;
  goto $bb23, $bb24;
$bb22:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5810, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i103 == 1));
  goto $bb20;
$bb23:
  assume ($i119 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 46} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 46} true;
  assume {:verifier.code 0} true;
  $i121 := $load.i16($M.0, $p120);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 30} true;
  assume {:verifier.code 0} true;
  $i122 := $sext.i16.i32($i121);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 67} true;
  assume {:verifier.code 0} true;
  $p123 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 67} true;
  assume {:verifier.code 0} true;
  $i124 := $load.i16($M.0, $p123);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 51} true;
  assume {:verifier.code 0} true;
  $i125 := $sext.i16.i32($i124);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 91} true;
  assume {:verifier.code 0} true;
  $p126 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 91} true;
  assume {:verifier.code 0} true;
  $i127 := $load.i8($M.0, $p126);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 91} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5820:91: warning: over-approximating bitwise operation lshr;
  $i128 := $lshr.i8($i127, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 91} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5820:91: warning: over-approximating bitwise operation and;
  $i129 := $and.i8($i128, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5820, 75} true;
  assume {:verifier.code 0} true;
  $i130 := $zext.i8.i32($i129);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5819, 9} true;
  assume {:verifier.code 0} true;
  call $i131 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p5, $p1, .str.6, $i122, $i125, $i130);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5821, 7} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i119 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5823, 5} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5825, 3} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:verifier.code 0} true;
  $i85 := $i93;
  goto $bb15;
$bb28:
  assume ($i135 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5827, 22} true;
  assume {:verifier.code 0} true;
  $p136 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5827, 30} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.ref($M.3, $p136, .str.2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5828, 22} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5828, 31} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.ref($M.4, $p137, .str.3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5829, 22} true;
  assume {:verifier.code 0} true;
  $p138 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5829, 31} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.ref($M.5, $p138, .str.4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5830, 22} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5830, 29} true;
  assume {:verifier.code 0} true;
  $M.6 := $store.ref($M.6, $p139, .str.7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5831, 22} true;
  assume {:verifier.code 0} true;
  $p140 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5831, 22} true;
  assume {:verifier.code 0} true;
  $p141 := $bitcast.ref.ref($p140);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5831, 29} true;
  assume {:verifier.code 0} true;
  $i142 := $load.i24($M.7, $p141);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5831, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5831:29: warning: over-approximating bitwise operation and;
  $i143 := $and.i24($i142, $sub.i24(0, 262144));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5831, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5831:29: warning: over-approximating bitwise operation or;
  $i144 := $or.i24($i143, 364);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5831, 29} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i24($M.7, $p141, $i144);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5832, 22} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5832, 28} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p145, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5833, 59} true;
  assume {:verifier.code 0} true;
  $p146 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5833, 59} true;
  assume {:verifier.code 0} true;
  $i147 := $load.i8($M.8, $p146);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5833, 37} true;
  assume {:verifier.code 0} true;
  $i148 := $zext.i8.i64($i147);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5833, 65} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5833:65: warning: over-approximating bitwise operation and;
  $i149 := $and.i64($i148, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5833, 17} true;
  assume {:verifier.code 0} true;
  call $i150 := ldv__builtin_expect($i149, 0);
  call {:cexpr "tmp___3"} boogie_si_record_i64($i150);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5834, 19} true;
  assume {:verifier.code 0} true;
  $i151 := $ne.i64($i150, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5834, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i151} true;
  goto $bb30, $bb31;
$bb29:
  assume !(($i135 == 1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb30:
  assume ($i151 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5836, 46} true;
  assume {:verifier.code 0} true;
  $p152 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5836, 46} true;
  assume {:verifier.code 0} true;
  $i153 := $load.i16($M.0, $p152);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5836, 30} true;
  assume {:verifier.code 0} true;
  $i154 := $sext.i16.i32($i153);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5836, 67} true;
  assume {:verifier.code 0} true;
  $p155 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5836, 67} true;
  assume {:verifier.code 0} true;
  $i156 := $load.i16($M.0, $p155);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5836, 51} true;
  assume {:verifier.code 0} true;
  $i157 := $sext.i16.i32($i156);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5836, 88} true;
  assume {:verifier.code 0} true;
  $p158 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5836, 88} true;
  assume {:verifier.code 0} true;
  $i159 := $load.i16($M.0, $p158);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5836, 72} true;
  assume {:verifier.code 0} true;
  $i160 := $sext.i16.i32($i159);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5835, 9} true;
  assume {:verifier.code 0} true;
  call $i161 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p6, $p1, .str.7, $i154, $i157, $i160);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5837, 7} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb31:
  assume !(($i151 == 1));
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5841, 15} true;
  assume {:verifier.code 0} true;
  $p162 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5841, 23} true;
  assume {:verifier.code 0} true;
  $i163 := $load.i8($M.0, $p162);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5841, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5841:23: warning: over-approximating bitwise operation and;
  $i164 := $and.i8($i163, $sub.i8(0, 17));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5841, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p162, $i164);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5842, 5} true;
  assume {:verifier.code 0} true;
  call netif_stop_queue($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5843, 21} true;
  assume {:verifier.code 0} true;
  $i165 := $trunc.i64.i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5843, 47} true;
  assume {:verifier.code 0} true;
  $i166 := $add.i32($i165, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5843, 5} true;
  assume {:verifier.code 0} true;
  call outb(63, $i166);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5844, 29} true;
  assume {:verifier.code 0} true;
  $p167 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5844, 5} true;
  assume {:verifier.code 0} true;
  call spin_unlock($p167);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5845, 55} true;
  assume {:verifier.code 0} true;
  $p168 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5845, 55} true;
  assume {:verifier.code 0} true;
  $i169 := $load.i32($M.0, $p168);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5845, 5} true;
  assume {:verifier.code 0} true;
  call enable_irq_lockdep_irqrestore($i169, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5846, 33} true;
  assume {:verifier.code 0} true;
  $p170 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5846, 39} true;
  assume {:verifier.code 0} true;
  $i172 := $load.i64($M.0, $p171);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5846, 49} true;
  assume {:verifier.code 0} true;
  $i173 := $add.i64($i172, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5846, 10} true;
  assume {:verifier.code 0} true;
  $p174 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5846, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p175, $i173);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5847, 5} true;
  assume {:verifier.code 0} true;
  $i176 := 16;
  goto $bb34;
$bb34:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5877, 1} true;
  assume {:verifier.code 0} true;
  $r := $i176;
  $exn := false;
  return;
$bb35:
  assume ($i183 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5851, 15} true;
  assume {:verifier.code 0} true;
  $p184 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5851, 21} true;
  assume {:verifier.code 0} true;
  $i185 := $load.i8($M.0, $p184);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5851, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5851:21: warning: over-approximating bitwise operation and;
  $i186 := $and.i8($i185, $sub.i8(0, 9));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5851, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5851:21: warning: over-approximating bitwise operation or;
  $i187 := $or.i8($i186, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5851, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p184, $i187);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5852, 5} true;
  assume {:verifier.code 0} true;
  call NS8390_trigger_send($p1, $i24, $i85);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5853, 25} true;
  assume {:verifier.code 0} true;
  $p188 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(73, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5853, 25} true;
  assume {:verifier.code 0} true;
  $i189 := $load.i8($M.0, $p188);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5853, 9} true;
  assume {:verifier.code 0} true;
  $i190 := $zext.i8.i32($i189);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5853, 39} true;
  assume {:verifier.code 0} true;
  $i191 := $eq.i32($i190, $i85);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5853, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i191} true;
  goto $bb37, $bb38;
$bb36:
  assume !(($i183 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5861, 58} true;
  assume {:verifier.code 0} true;
  $p196 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(78, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5861, 58} true;
  assume {:verifier.code 0} true;
  $i197 := $load.i8($M.0, $p196);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5861, 42} true;
  assume {:verifier.code 0} true;
  $i198 := $zext.i8.i32($i197);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5861, 66} true;
  assume {:verifier.code 0} true;
  $i199 := $add.i32($i198, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5861, 25} true;
  assume {:verifier.code 0} true;
  $i200 := $trunc.i32.i8($i199);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5861, 15} true;
  assume {:verifier.code 0} true;
  $p201 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(78, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5861, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p201, $i200);
  assume {:verifier.code 0} true;
  goto $bb40;
$bb37:
  assume ($i191 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5854, 17} true;
  assume {:verifier.code 0} true;
  $p192 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5854, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p192, $sub.i16(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5855, 17} true;
  assume {:verifier.code 0} true;
  $p193 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5855, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p193, $sub.i16(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5856, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb38:
  assume !(($i191 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5857, 17} true;
  assume {:verifier.code 0} true;
  $p194 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5857, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p194, $sub.i16(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5858, 17} true;
  assume {:verifier.code 0} true;
  $p195 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5858, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p195, $sub.i16(0, 2));
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5860, 3} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb40:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 23} true;
  assume {:verifier.code 0} true;
  $p202 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 23} true;
  assume {:verifier.code 0} true;
  $i203 := $load.i16($M.0, $p202);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 7} true;
  assume {:verifier.code 0} true;
  $i204 := $sext.i16.i32($i203);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 27} true;
  assume {:verifier.code 0} true;
  $i205 := $ne.i32($i204, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 32} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i205} true;
  goto $bb41, $bb42;
$bb41:
  assume ($i205 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 51} true;
  assume {:verifier.code 0} true;
  $p206 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 51} true;
  assume {:verifier.code 0} true;
  $i207 := $load.i16($M.0, $p206);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 35} true;
  assume {:verifier.code 0} true;
  $i208 := $sext.i16.i32($i207);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 55} true;
  assume {:verifier.code 0} true;
  $i209 := $ne.i32($i208, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i209} true;
  goto $bb44, $bb45;
$bb42:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 32} true;
  assume {:verifier.code 0} true;
  assume !(($i205 == 1));
  goto $bb43;
$bb43:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5866, 5} true;
  assume {:verifier.code 0} true;
  call netif_start_queue($p1);
  assume {:verifier.code 0} true;
  goto $bb46;
$bb44:
  assume ($i209 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5864, 5} true;
  assume {:verifier.code 0} true;
  call netif_stop_queue($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5865, 3} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb45:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5863, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i209 == 1));
  goto $bb43;
$bb46:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5868, 13} true;
  assume {:verifier.code 0} true;
  $p210 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5868, 21} true;
  assume {:verifier.code 0} true;
  $i211 := $load.i8($M.0, $p210);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5868, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5868:21: warning: over-approximating bitwise operation and;
  $i212 := $and.i8($i211, $sub.i8(0, 17));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5868, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p210, $i212);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5869, 19} true;
  assume {:verifier.code 0} true;
  $i213 := $trunc.i64.i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5869, 45} true;
  assume {:verifier.code 0} true;
  $i214 := $add.i32($i213, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5869, 3} true;
  assume {:verifier.code 0} true;
  call outb(63, $i214);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5870, 27} true;
  assume {:verifier.code 0} true;
  $p215 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5870, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock($p215);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5871, 53} true;
  assume {:verifier.code 0} true;
  $p216 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5871, 53} true;
  assume {:verifier.code 0} true;
  $i217 := $load.i32($M.0, $p216);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5871, 3} true;
  assume {:verifier.code 0} true;
  call enable_irq_lockdep_irqrestore($i217, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5872, 3} true;
  assume {:verifier.code 0} true;
  call skb_tx_timestamp($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5873, 3} true;
  assume {:verifier.code 0} true;
  call dev_consume_skb_any($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5874, 30} true;
  assume {:verifier.code 0} true;
  $p218 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5874, 36} true;
  assume {:verifier.code 0} true;
  $i220 := $load.i64($M.0, $p219);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5874, 47} true;
  assume {:verifier.code 0} true;
  $i221 := $sext.i32.i64($i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5874, 45} true;
  assume {:verifier.code 0} true;
  $i222 := $add.i64($i220, $i221);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5874, 8} true;
  assume {:verifier.code 0} true;
  $p223 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p224 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5874, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p224, $i222);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5875, 3} true;
  assume {:verifier.code 0} true;
  $i176 := 0;
  goto $bb34;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 118222));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i1);
const disable_irq_nosync_lockdep_irqsave: ref;
axiom (disable_irq_nosync_lockdep_irqsave == $sub.ref(0, 119254));
procedure  disable_irq_nosync_lockdep_irqsave($i0: i32, $p1: ref)
{
  var $i2: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5489, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "disable_irq_nosync_lockdep_irqsave:arg:irq"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5489, 3} true;
  assume {:verifier.code 0} true;
  call disable_irq_nosync($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5490, 12} true;
  assume {:verifier.code 0} true;
  call $i2 := arch_local_irq_save();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5490, 10} true;
  assume {:verifier.code 0} true;
  $M.2 := $store.i64($M.2, $p1, $i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5491, 3} true;
  assume {:verifier.code 0} true;
  call trace_hardirqs_off();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5492, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const spin_lock: ref;
axiom (spin_lock == $sub.ref(0, 120286));
procedure  spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5269, 26} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5269, 26} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5269, 35} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5269, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_lock($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5270, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __dynamic_netdev_dbg: ref;
axiom (__dynamic_netdev_dbg == $sub.ref(0, 121318));
procedure  __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $i3: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
procedure  __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32)
  returns ($r: i32)
{
  var $i3: i32;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
procedure  __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
  returns ($r: i32)
{
  var $i3: i32;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
procedure  __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32)
  returns ($r: i32)
{
  var $i3: i32;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7505, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const spin_unlock: ref;
axiom (spin_unlock == $sub.ref(0, 122350));
procedure  spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5276, 28} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5276, 28} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5276, 37} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5276, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_unlock($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5277, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const enable_irq_lockdep_irqrestore: ref;
axiom (enable_irq_lockdep_irqrestore == $sub.ref(0, 123382));
procedure  enable_irq_lockdep_irqrestore($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $i6: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5508, 34} true;
  assume {:verifier.code 0} true;
  call {:cexpr "enable_irq_lockdep_irqrestore:arg:irq"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5508, 34} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i64($M.2, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5508, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := arch_irqs_disabled_flags($i2);
  call {:cexpr "tmp"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5509, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5509, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5510, 28} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i64($M.2, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5510, 5} true;
  assume {:verifier.code 0} true;
  call arch_local_irq_restore($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5511, 5} true;
  assume {:verifier.code 0} true;
  call trace_hardirqs_off();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5512, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5513, 5} true;
  assume {:verifier.code 0} true;
  call trace_hardirqs_on();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5514, 28} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i64($M.2, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5514, 5} true;
  assume {:verifier.code 0} true;
  call arch_local_irq_restore($i6);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5516, 3} true;
  assume {:verifier.code 0} true;
  call enable_irq($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5517, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const NS8390_trigger_send: ref;
axiom (NS8390_trigger_send == $sub.ref(0, 124414));
procedure  NS8390_trigger_send($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6588, 21} true;
  assume {:verifier.code 0} true;
  call {:cexpr "NS8390_trigger_send:arg:length"} boogie_si_record_i32($i1);
  call {:cexpr "NS8390_trigger_send:arg:start_page"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6588, 21} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6588, 21} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.0, $p3);
  call {:cexpr "e8390_base"} boogie_si_record_i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6589, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6591, 12} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6591, 3} true;
  assume {:verifier.code 0} true;
  call outb(32, $i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6592, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6592, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := inb($i7);
  call {:cexpr "tmp___0"} boogie_si_record_i8($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6593, 8} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i8.i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6593, 22} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6593:22: warning: over-approximating bitwise operation and;
  $i10 := $and.i32($i9, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6593, 27} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i32($i10, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6593, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6594, 5} true;
  assume {:verifier.code 0} true;
  call $i12 := netdev_warn.ref.ref($p0, .str.9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6595, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6604, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6598, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.i32.i8($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6598, 8} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i8.i32($i13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6598, 8} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.i32.i8($i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6598, 47} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6598, 73} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i16, 5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6598, 3} true;
  assume {:verifier.code 0} true;
  call outb($i15, $i17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6599, 39} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6599:39: warning: over-approximating bitwise operation lshr;
  $i18 := $lshr.i32($i1, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6599, 15} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i32.i8($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6599, 8} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i8.i32($i19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6599, 8} true;
  assume {:verifier.code 0} true;
  $i21 := $trunc.i32.i8($i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6599, 54} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6599, 80} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i32($i22, 6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6599, 3} true;
  assume {:verifier.code 0} true;
  call outb($i21, $i23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6600, 15} true;
  assume {:verifier.code 0} true;
  $i24 := $trunc.i32.i8($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6600, 8} true;
  assume {:verifier.code 0} true;
  $i25 := $zext.i8.i32($i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6600, 8} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.i32.i8($i25);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6600, 51} true;
  assume {:verifier.code 0} true;
  $i27 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6600, 77} true;
  assume {:verifier.code 0} true;
  $i28 := $add.i32($i27, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6600, 3} true;
  assume {:verifier.code 0} true;
  call outb($i26, $i28);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6601, 12} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6601, 3} true;
  assume {:verifier.code 0} true;
  call outb(38, $i29);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6602, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const skb_tx_timestamp: ref;
axiom (skb_tx_timestamp == $sub.ref(0, 125446));
procedure  skb_tx_timestamp($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5347, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5347, 3} true;
  assume {:verifier.code 0} true;
  call skb_clone_tx_timestamp($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5348, 3} true;
  assume {:verifier.code 0} true;
  call sw_tx_timestamp($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5349, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dev_consume_skb_any: ref;
axiom (dev_consume_skb_any == $sub.ref(0, 126478));
procedure  dev_consume_skb_any($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5616, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5616, 3} true;
  assume {:verifier.code 0} true;
  call __dev_kfree_skb_any($p0, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5617, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __dev_kfree_skb_any: ref;
axiom (__dev_kfree_skb_any == $sub.ref(0, 127510));
procedure  __dev_kfree_skb_any($p0: ref, $i1: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7501, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7501, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_clone_tx_timestamp: ref;
axiom (skb_clone_tx_timestamp == $sub.ref(0, 128542));
procedure  skb_clone_tx_timestamp($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7603, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7603, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const sw_tx_timestamp: ref;
axiom (sw_tx_timestamp == $sub.ref(0, 129574));
procedure  sw_tx_timestamp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5332, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5332, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := skb_end_pointer($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5333, 47} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5333, 47} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5333, 47} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i8($M.1, $p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5333, 8} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i8.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5333, 56} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5333:56: warning: over-approximating bitwise operation and;
  $i6 := $and.i32($i5, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5333, 61} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5333, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5334, 15} true;
  assume {:verifier.code 0} true;
  call $p8 := skb_end_pointer($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5335, 53} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5335, 53} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 320)), $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5335, 53} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i8($M.1, $p10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5335, 10} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i8.i32($i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5335, 62} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5335:62: warning: over-approximating bitwise operation and;
  $i13 := $and.i32($i12, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5335, 67} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i13, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5335, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i14 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5336, 7} true;
  assume {:verifier.code 0} true;
  call skb_tstamp_tx($p0, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5337, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5339, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5341, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_end_pointer: ref;
axiom (skb_end_pointer == $sub.ref(0, 130606));
procedure  skb_end_pointer($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5311, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5311, 33} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5311, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5311, 61} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5311, 61} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, $p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5311, 40} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i32.i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5311, 38} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p2, $mul.ref($i5, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5311, 3} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
}
const skb_tstamp_tx: ref;
axiom (skb_tstamp_tx == $sub.ref(0, 131638));
procedure  skb_tstamp_tx($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7614, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7614, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netdev_warn: ref;
axiom (netdev_warn == $sub.ref(0, 132670));
procedure  netdev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7596, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7596, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7596, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
procedure  netdev_warn.ref.ref($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7596, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7596, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7596, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const arch_irqs_disabled_flags: ref;
axiom (arch_irqs_disabled_flags == $sub.ref(0, 133702));
procedure  arch_irqs_disabled_flags($i0: i64)
  returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5250, 18} true;
  assume {:verifier.code 0} true;
  call {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5250, 18} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5250:18: warning: over-approximating bitwise operation and;
  $i1 := $and.i64($i0, 512);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5250, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5250, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5250, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const arch_local_irq_restore: ref;
axiom (arch_local_irq_restore == $sub.ref(0, 134734));
procedure  arch_local_irq_restore($i0: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5165, 67} true;
  assume {:verifier.code 0} true;
  call {:cexpr "arch_local_irq_restore:arg:f"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5165, 67} true;
  assume {:verifier.code 0} true;
  $p1 := $load.ref($M.9, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5165, 29} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5165, 72} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i64($i2, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5165, 72} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5165, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5165, 9} true;
  assume {:verifier.code 0} true;
  call $i6 := ldv__builtin_expect($i5, 0);
  call {:cexpr "tmp"} boogie_si_record_i64($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5167, 11} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5167, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  call devirtbounce.4(0, .str.8, 809, 12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5168, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5171, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  call $i8 := devirtbounce.5(0, 45, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), 1, $i0);
  call {:cexpr "__eax"} boogie_si_record_i64($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5177, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const trace_hardirqs_off: ref;
axiom (trace_hardirqs_off == $sub.ref(0, 135766));
procedure  trace_hardirqs_off()
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7617, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7617, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const trace_hardirqs_on: ref;
axiom (trace_hardirqs_on == $sub.ref(0, 136798));
procedure  trace_hardirqs_on()
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7620, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7620, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const enable_irq: ref;
axiom (enable_irq == $sub.ref(0, 137830));
procedure  enable_irq($i0: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7549, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "enable_irq:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7549, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_unlock: ref;
axiom (_raw_spin_unlock == $sub.ref(0, 138862));
procedure  _raw_spin_unlock($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7521, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7521, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_lock: ref;
axiom (_raw_spin_lock == $sub.ref(0, 139894));
procedure  _raw_spin_lock($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7514, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7514, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const disable_irq_nosync: ref;
axiom (disable_irq_nosync == $sub.ref(0, 140926));
procedure  disable_irq_nosync($i0: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7546, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "disable_irq_nosync:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7546, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const arch_local_irq_save: ref;
axiom (arch_local_irq_save == $sub.ref(0, 141958));
procedure  arch_local_irq_save()
  returns ($r: i64)
{
  var $i0: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5242, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5242, 7} true;
  assume {:verifier.code 0} true;
  call $i0 := arch_local_save_flags();
  call {:cexpr "f"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5243, 3} true;
  assume {:verifier.code 0} true;
  call arch_local_irq_disable();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5244, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const arch_local_save_flags: ref;
axiom (arch_local_save_flags == $sub.ref(0, 142990));
procedure  arch_local_save_flags()
  returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5135, 64} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5135, 64} true;
  assume {:verifier.code 0} true;
  $p0 := $load.ref($M.9, pv_irq_ops);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5135, 29} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5135, 69} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5135, 69} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5135, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5135, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv__builtin_expect($i4, 0);
  call {:cexpr "tmp"} boogie_si_record_i64($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5137, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5137, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  call devirtbounce.4(0, .str.8, 804, 12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5138, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5141, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  call $i7 := devirtbounce.6(0, 44, pv_irq_ops, 1);
  call {:cexpr "__eax"} boogie_si_record_i64($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5148, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const arch_local_irq_disable: ref;
axiom (arch_local_irq_disable == $sub.ref(0, 144022));
procedure  arch_local_irq_disable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5194, 68} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5194, 68} true;
  assume {:verifier.code 0} true;
  $p0 := $load.ref($M.9, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5194, 29} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5194, 73} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5194, 73} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5194, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5194, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv__builtin_expect($i4, 0);
  call {:cexpr "tmp"} boogie_si_record_i64($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5196, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5196, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  call devirtbounce.4(0, .str.8, 814, 12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5197, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5200, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  call $i7 := devirtbounce.6(0, 46, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)), 1);
  call {:cexpr "__eax"} boogie_si_record_i64($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5206, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ei_get_stats: ref;
axiom (ei_get_stats == $sub.ref(0, 145054));
procedure  ei_get_stats($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6651, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6651, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := __ei_get_stats($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6652, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const __ei_get_stats: ref;
axiom (__ei_get_stats == $sub.ref(0, 146086));
procedure  __ei_get_stats($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p11: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6362, 17} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6362, 17} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6362, 17} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i64($M.0, $p1);
  call {:cexpr "ioaddr"} boogie_si_record_i64($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6363, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6364, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6365, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := netif_running($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6365, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i8($i5);
  call {:cexpr "tmp___0"} boogie_si_record_i8($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6366, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i8.i1($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6366, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6368, 3} true;
  assume {:verifier.code 0} true;
  $i8 := 0;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  $i8 := 1;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6371, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i8, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6371, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i9 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6372, 20} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6372, 5} true;
  assume {:verifier.code 0} true;
  $p11 := $p10;
  goto $bb6;
$bb5:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6386, 1} true;
  assume {:verifier.code 0} true;
  $r := $p11;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6375, 40} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6375, 13} true;
  assume {:verifier.code 0} true;
  call $p13 := spinlock_check($p12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6376, 11} true;
  assume {:verifier.code 0} true;
  call $i14 := _raw_spin_lock_irqsave($p13);
  call {:cexpr "flags"} boogie_si_record_i64($i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6377, 24} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6377, 46} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i32($i15, 13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6377, 13} true;
  assume {:verifier.code 0} true;
  call $i17 := inb($i16);
  call {:cexpr "tmp___3"} boogie_si_record_i8($i17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6378, 37} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6378, 43} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i64($M.0, $p19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6378, 61} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i8.i64($i17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6378, 59} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i64($i20, $i21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6378, 8} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6378, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p24, $i22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6379, 24} true;
  assume {:verifier.code 0} true;
  $i25 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6379, 46} true;
  assume {:verifier.code 0} true;
  $i26 := $add.i32($i25, 14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6379, 13} true;
  assume {:verifier.code 0} true;
  call $i27 := inb($i26);
  call {:cexpr "tmp___4"} boogie_si_record_i8($i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6380, 35} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(96, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6380, 41} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i64($M.0, $p29);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6380, 57} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.i8.i64($i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6380, 55} true;
  assume {:verifier.code 0} true;
  $i32 := $add.i64($i30, $i31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6380, 8} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(96, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6380, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p34, $i32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6381, 24} true;
  assume {:verifier.code 0} true;
  $i35 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6381, 46} true;
  assume {:verifier.code 0} true;
  $i36 := $add.i32($i35, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6381, 13} true;
  assume {:verifier.code 0} true;
  call $i37 := inb($i36);
  call {:cexpr "tmp___5"} boogie_si_record_i8($i37);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6382, 38} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(120, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6382, 44} true;
  assume {:verifier.code 0} true;
  $i40 := $load.i64($M.0, $p39);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6382, 63} true;
  assume {:verifier.code 0} true;
  $i41 := $zext.i8.i64($i37);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6382, 61} true;
  assume {:verifier.code 0} true;
  $i42 := $add.i64($i40, $i41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6382, 8} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(120, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6382, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p44, $i42);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6383, 38} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6383, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_irqrestore($p45, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6384, 18} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6384, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $p46;
  goto $bb6;
}
const ei_set_multicast_list: ref;
axiom (ei_set_multicast_list == $sub.ref(0, 147118));
procedure  ei_set_multicast_list($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6665, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6665, 3} true;
  assume {:verifier.code 0} true;
  call __ei_set_multicast_list($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6666, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __ei_set_multicast_list: ref;
axiom (__ei_set_multicast_list == $sub.ref(0, 148150));
procedure  __ei_set_multicast_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6469, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6469, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6470, 14} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6471, 40} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6471, 13} true;
  assume {:verifier.code 0} true;
  call $p4 := spinlock_check($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6472, 11} true;
  assume {:verifier.code 0} true;
  call $i5 := _raw_spin_lock_irqsave($p4);
  call {:cexpr "flags"} boogie_si_record_i64($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6473, 3} true;
  assume {:verifier.code 0} true;
  call do_set_multicast_list($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6474, 38} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6474, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_irqrestore($p6, $i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6475, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ei_tx_timeout: ref;
axiom (ei_tx_timeout == $sub.ref(0, 149182));
procedure  ei_tx_timeout($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6681, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6681, 3} true;
  assume {:verifier.code 0} true;
  call __ei_tx_timeout($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6682, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __ei_tx_timeout: ref;
axiom (__ei_tx_timeout == $sub.ref(0, 150214));
procedure  __ei_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5707, 21} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5707, 21} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5707, 21} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, $p2);
  call {:cexpr "e8390_base"} boogie_si_record_i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5708, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5709, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5710, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := dev_trans_start($p0);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5711, 38} true;
  assume {:verifier.code 0} true;
  $i7 := $M.10;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5711, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i64.i32($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5711, 48} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i64.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5711, 46} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.i32($i8, $i9);
  call {:cexpr "tickssofar"} boogie_si_record_i32($i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5712, 31} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5712, 37} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i64($M.0, $p12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5712, 47} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i64($i13, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5712, 8} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5712, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p16, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5713, 40} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5713, 13} true;
  assume {:verifier.code 0} true;
  call $p18 := spinlock_check($p17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5714, 11} true;
  assume {:verifier.code 0} true;
  call $i19 := _raw_spin_lock_irqsave($p18);
  call {:cexpr "flags"} boogie_si_record_i64($i19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5715, 24} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5715, 50} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i32($i20, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5715, 13} true;
  assume {:verifier.code 0} true;
  call $i22 := inb($i21);
  call {:cexpr "tmp___2"} boogie_si_record_i8($i22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5716, 10} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.i8.i32($i22);
  call {:cexpr "txsr"} boogie_si_record_i32($i23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5717, 24} true;
  assume {:verifier.code 0} true;
  $i24 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5717, 50} true;
  assume {:verifier.code 0} true;
  $i25 := $add.i32($i24, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5717, 13} true;
  assume {:verifier.code 0} true;
  call $i26 := inb($i25);
  call {:cexpr "tmp___3"} boogie_si_record_i8($i26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5718, 9} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i8.i32($i26);
  call {:cexpr "isr"} boogie_si_record_i32($i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5719, 38} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5719, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_irqrestore($p28, $i19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5720, 14} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5720, 22} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.ref($M.3, $p29, .str.2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5721, 14} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5721, 23} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.ref($M.4, $p30, .str.10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5722, 14} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5722, 23} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.ref($M.5, $p31, .str.4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5723, 14} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5723, 21} true;
  assume {:verifier.code 0} true;
  $M.6 := $store.ref($M.6, $p32, .str.11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5724, 14} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5724, 14} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5724, 21} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i24($M.7, $p34);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5724, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5724:21: warning: over-approximating bitwise operation and;
  $i36 := $and.i24($i35, $sub.i24(0, 262144));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5724, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5724:21: warning: over-approximating bitwise operation or;
  $i37 := $or.i24($i36, 271);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5724, 21} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i24($M.7, $p34, $i37);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5725, 14} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5725, 20} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p38, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5726, 51} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5726, 51} true;
  assume {:verifier.code 0} true;
  $i40 := $load.i8($M.8, $p39);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5726, 33} true;
  assume {:verifier.code 0} true;
  $i41 := $zext.i8.i64($i40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5726, 57} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5726:57: warning: over-approximating bitwise operation and;
  $i42 := $and.i64($i41, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5726, 13} true;
  assume {:verifier.code 0} true;
  call $i43 := ldv__builtin_expect($i42, 0);
  call {:cexpr "tmp___4"} boogie_si_record_i64($i43);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5727, 15} true;
  assume {:verifier.code 0} true;
  $i44 := $ne.i64($i43, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5727, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i44 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5729, 32} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5729:32: warning: over-approximating bitwise operation and;
  $i45 := $and.i32($i23, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5729, 37} true;
  assume {:verifier.code 0} true;
  $i46 := $eq.i32($i45, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5729, 26} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i46 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5729, 49} true;
  assume {:verifier.code 0} true;
  $i47 := $ne.i32($i27, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5729, 45} true;
  assume {:verifier.code 0} true;
  $p48 := (if ($i47 == 1) then .str.12 else .str.13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5729, 26} true;
  assume {:verifier.code 0} true;
  $p49 := $p48;
  goto $bb5;
$bb4:
  assume !(($i46 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5729, 26} true;
  assume {:verifier.code 0} true;
  $p49 := .str.14;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5729, 26} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5728, 5} true;
  assume {:verifier.code 0} true;
  call $i50 := __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32($p1, $p0, .str.11, $p49, $i23, $i27, $i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5731, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5733, 11} true;
  assume {:verifier.code 0} true;
  $i51 := $eq.i32($i27, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5733, 16} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i51 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5733, 24} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5733, 30} true;
  assume {:verifier.code 0} true;
  $i54 := $load.i64($M.0, $p53);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5733, 41} true;
  assume {:verifier.code 0} true;
  $i55 := $eq.i64($i54, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5733, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb10, $bb11;
$bb8:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5733, 16} true;
  assume {:verifier.code 0} true;
  assume !(($i51 == 1));
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb10:
  assume ($i55 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5734, 56} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(77, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5734, 56} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i8($M.0, $p56);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5734, 31} true;
  assume {:verifier.code 0} true;
  $i58 := $zext.i8.i32($i57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5734, 70} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5734:70: warning: over-approximating bitwise operation xor;
  $i59 := $xor.i32($i58, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5734, 31} true;
  assume {:verifier.code 0} true;
  $i60 := $trunc.i32.i8($i59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5734, 15} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(77, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5734, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p61, $i60);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5735, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5733, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i55 == 1));
  goto $bb9;
$bb12:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5737, 50} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5737, 50} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i32($M.0, $p62);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5737, 3} true;
  assume {:verifier.code 0} true;
  call disable_irq_nosync_lockdep($i63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5738, 25} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5738, 3} true;
  assume {:verifier.code 0} true;
  call spin_lock($p64);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5739, 16} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5739, 16} true;
  assume {:verifier.code 0} true;
  $p66 := $load.ref($M.0, $p65);
  call devirtbounce.7($p66, $p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5740, 3} true;
  assume {:verifier.code 0} true;
  call __NS8390_init($p0, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5741, 27} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5741, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock($p67);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5742, 42} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5742, 42} true;
  assume {:verifier.code 0} true;
  $i69 := $load.i32($M.0, $p68);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5742, 3} true;
  assume {:verifier.code 0} true;
  call enable_irq_lockdep($i69);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5743, 3} true;
  assume {:verifier.code 0} true;
  call netif_wake_queue($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5744, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dev_trans_start: ref;
axiom (dev_trans_start == $sub.ref(0, 151246));
procedure  dev_trans_start($p0: ref)
  returns ($r: i64)
{
  var $i1: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7540, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7540, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7540, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const disable_irq_nosync_lockdep: ref;
axiom (disable_irq_nosync_lockdep == $sub.ref(0, 152278));
procedure  disable_irq_nosync_lockdep($i0: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5480, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "disable_irq_nosync_lockdep:arg:irq"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5480, 3} true;
  assume {:verifier.code 0} true;
  call disable_irq_nosync($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5481, 3} true;
  assume {:verifier.code 0} true;
  call arch_local_irq_disable();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5482, 3} true;
  assume {:verifier.code 0} true;
  call trace_hardirqs_off();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5483, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const enable_irq_lockdep: ref;
axiom (enable_irq_lockdep == $sub.ref(0, 153310));
procedure  enable_irq_lockdep($i0: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5498, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "enable_irq_lockdep:arg:irq"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5498, 3} true;
  assume {:verifier.code 0} true;
  call trace_hardirqs_on();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5499, 3} true;
  assume {:verifier.code 0} true;
  call arch_local_irq_enable();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5500, 3} true;
  assume {:verifier.code 0} true;
  call enable_irq($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5501, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netif_wake_queue: ref;
axiom (netif_wake_queue == $sub.ref(0, 154342));
procedure  netif_wake_queue($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5568, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5568, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_get_tx_queue($p0, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5569, 3} true;
  assume {:verifier.code 0} true;
  call netif_tx_wake_queue($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5570, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netif_tx_wake_queue: ref;
axiom (netif_tx_wake_queue == $sub.ref(0, 155374));
procedure  netif_tx_wake_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5556, 72} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5556, 72} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5556, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := test_and_clear_bit(0, $p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5557, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5557, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5558, 33} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5558, 33} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5558, 5} true;
  assume {:verifier.code 0} true;
  call __netif_schedule($p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5559, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5561, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const test_and_clear_bit: ref;
axiom (test_and_clear_bit == $sub.ref(0, 156406));
procedure  test_and_clear_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5106, 32} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  call {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
  assume true;
  call devirtbounce.8(0, $p1, $p2, $i0, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5106, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.11, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5106, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i8.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5106, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5106, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5106, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const __netif_schedule: ref;
axiom (__netif_schedule == $sub.ref(0, 157438));
procedure  __netif_schedule($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7508, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7508, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const arch_local_irq_enable: ref;
axiom (arch_local_irq_enable == $sub.ref(0, 158470));
procedure  arch_local_irq_enable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5223, 67} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5223, 67} true;
  assume {:verifier.code 0} true;
  $p0 := $load.ref($M.9, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1)));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5223, 29} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5223, 72} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5223, 72} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5223, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5223, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv__builtin_expect($i4, 0);
  call {:cexpr "tmp"} boogie_si_record_i64($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5225, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5225, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  call devirtbounce.4(0, .str.8, 819, 12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5226, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5229, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  call $i7 := devirtbounce.6(0, 47, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1)), 1);
  call {:cexpr "__eax"} boogie_si_record_i64($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5235, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ei_interrupt: ref;
axiom (ei_interrupt == $sub.ref(0, 159502));
procedure  ei_interrupt($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6696, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ei_interrupt:arg:irq"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6696, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := __ei_interrupt($i0, $p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6697, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __ei_interrupt: ref;
axiom (__ei_interrupt == $sub.ref(0, 160534));
procedure  __ei_interrupt($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $i60: i1;
  var $i61: i8;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i8;
  var $i70: i32;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i76: i32;
  var $i77: i1;
  var $i79: i32;
  var $i80: i1;
  var $i78: i32;
  var $i81: i32;
  var $i82: i1;
  var $i84: i32;
  var $i85: i1;
  var $i83: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i8;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i8;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i8;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $i58: i32;
  var $i59: i32;
  var $i66: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i32;
  var $i128: i32;
  var $i129: i32;
  var $i56: i32;
  var $i57: i32;
  var $i74: i32;
  var $i75: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i1;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $p147: ref;
  var $i148: i1;
  var $i149: i32;
  var $i24: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5898, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  call {:cexpr "__ei_interrupt:arg:irq"} boogie_si_record_i32($i0);
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5898, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5899, 21} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5899, 21} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i64($M.0, $p4);
  call {:cexpr "e8390_base"} boogie_si_record_i64($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5901, 9} true;
  assume {:verifier.code 0} true;
  call $p6 := netdev_priv($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5902, 14} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5903, 25} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5903, 3} true;
  assume {:verifier.code 0} true;
  call spin_lock($p8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5904, 24} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5904, 50} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p9, $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5904, 22} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i8($M.0, $p10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5904, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i8.i32($i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5904, 58} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5904, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i13 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5905, 26} true;
  assume {:verifier.code 0} true;
  $i14 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5905, 52} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i14, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5905, 15} true;
  assume {:verifier.code 0} true;
  call $i16 := inb($i15);
  call {:cexpr "tmp___0"} boogie_si_record_i8($i16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5906, 26} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5906, 52} true;
  assume {:verifier.code 0} true;
  $i18 := $add.i32($i17, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5906, 15} true;
  assume {:verifier.code 0} true;
  call $i19 := inb($i18);
  call {:cexpr "tmp___1"} boogie_si_record_i8($i19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5908, 16} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i8.i32($i19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5908, 31} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i8.i32($i16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5907, 5} true;
  assume {:verifier.code 0} true;
  call $i22 := netdev_err.ref.ref.i32.i32($p3, .str.15, $i20, $i21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5909, 29} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5909, 5} true;
  assume {:verifier.code 0} true;
  call spin_unlock($p23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5910, 5} true;
  assume {:verifier.code 0} true;
  $i24 := 0;
  goto $bb3;
$bb2:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6005, 1} true;
  assume {:verifier.code 0} true;
  $r := $i24;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5913, 12} true;
  assume {:verifier.code 0} true;
  $i25 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5913, 3} true;
  assume {:verifier.code 0} true;
  call outb(32, $i25);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5914, 18} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5914, 18} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i32($M.0, $p26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5914, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5914:29: warning: over-approximating bitwise operation and;
  $i28 := $and.i32($i27, 512);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5914, 37} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i32($i28, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5914, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i29 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5915, 16} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5915, 24} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.ref($M.3, $p30, .str.2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5916, 16} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5916, 25} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.ref($M.4, $p31, .str.16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5917, 16} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5917, 25} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.ref($M.5, $p32, .str.4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5918, 16} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5918, 23} true;
  assume {:verifier.code 0} true;
  $M.6 := $store.ref($M.6, $p33, .str.17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5919, 16} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5919, 16} true;
  assume {:verifier.code 0} true;
  $p35 := $bitcast.ref.ref($p34);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5919, 23} true;
  assume {:verifier.code 0} true;
  $i36 := $load.i24($M.7, $p35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5919, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5919:23: warning: over-approximating bitwise operation and;
  $i37 := $and.i24($i36, $sub.i24(0, 262144));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5919, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5919:23: warning: over-approximating bitwise operation or;
  $i38 := $or.i24($i37, 453);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5919, 23} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i24($M.7, $p35, $i38);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5920, 16} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5920, 22} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p39, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5921, 53} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5921, 53} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i8($M.8, $p40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5921, 35} true;
  assume {:verifier.code 0} true;
  $i42 := $zext.i8.i64($i41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5921, 59} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5921:59: warning: over-approximating bitwise operation and;
  $i43 := $and.i64($i42, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5921, 15} true;
  assume {:verifier.code 0} true;
  call $i44 := ldv__builtin_expect($i43, 0);
  call {:cexpr "tmp___3"} boogie_si_record_i64($i44);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5922, 17} true;
  assume {:verifier.code 0} true;
  $i45 := $ne.i64($i44, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5922, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb7:
  assume ($i45 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5923, 28} true;
  assume {:verifier.code 0} true;
  $i46 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5923, 54} true;
  assume {:verifier.code 0} true;
  $i47 := $add.i32($i46, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5923, 17} true;
  assume {:verifier.code 0} true;
  call $i48 := inb($i47);
  call {:cexpr "tmp___2"} boogie_si_record_i8($i48);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5925, 28} true;
  assume {:verifier.code 0} true;
  $i49 := $zext.i8.i32($i48);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5924, 7} true;
  assume {:verifier.code 0} true;
  call $i50 := __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p3, .str.17, $i49);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5926, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5928, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5975, 24} true;
  assume {:verifier.code 0} true;
  $i51 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5975, 50} true;
  assume {:verifier.code 0} true;
  $i52 := $add.i32($i51, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5975, 13} true;
  assume {:verifier.code 0} true;
  call $i53 := inb($i52);
  call {:cexpr "tmp___9"} boogie_si_record_i8($i53);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5976, 16} true;
  assume {:verifier.code 0} true;
  $i54 := $zext.i8.i32($i53);
  call {:cexpr "interrupts"} boogie_si_record_i32($i54);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5977, 18} true;
  assume {:verifier.code 0} true;
  $i55 := $ne.i32($i54, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5977, 7} true;
  assume {:verifier.code 0} true;
  $i56, $i57 := 0, $i54;
  assume {:branchcond $i55} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i55 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5977, 7} true;
  assume {:verifier.code 0} true;
  $i58, $i59 := $i54, 0;
  goto $bb14;
$bb12:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5977, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i55 == 1));
  goto $bb13;
$bb13:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5976, 16} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb14:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5978, 31} true;
  assume {:verifier.code 0} true;
  $i66 := $add.i32($i59, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5979, 21} true;
  assume {:verifier.code 0} true;
  $i130 := $sle.i32($i66, 11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5979, 9} true;
  assume {:verifier.code 0} true;
  $i131, $i132 := $i66, $i58;
  assume {:branchcond $i130} true;
  goto $bb43, $bb44;
$bb15:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5932, 13} true;
  assume {:verifier.code 0} true;
  call $i60 := netif_running($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5932, 11} true;
  assume {:verifier.code 0} true;
  $i61 := $zext.i1.i8($i60);
  call {:cexpr "tmp___4"} boogie_si_record_i8($i61);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5933, 7} true;
  assume {:verifier.code 0} true;
  $i62 := $trunc.i8.i1($i61);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5933, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i62 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5935, 3} true;
  assume {:verifier.code 0} true;
  $i63 := 0;
  goto $bb18;
$bb17:
  assume !(($i62 == 1));
  assume {:verifier.code 0} true;
  $i63 := 1;
  goto $bb18;
$bb18:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5938, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.i32($i63, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5938, 7} true;
  assume {:verifier.code 0} true;
  $i65, $i67 := $i66, $i58;
  assume {:branchcond $i64} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i64 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5978, 31} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5976, 16} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5939, 5} true;
  assume {:verifier.code 0} true;
  call $i68 := netdev_warn.ref.ref($p3, .str.18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5940, 17} true;
  assume {:verifier.code 0} true;
  $i69 := $trunc.i32.i8($i67);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5940, 10} true;
  assume {:verifier.code 0} true;
  $i70 := $zext.i8.i32($i69);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5940, 10} true;
  assume {:verifier.code 0} true;
  $i71 := $trunc.i32.i8($i70);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5940, 53} true;
  assume {:verifier.code 0} true;
  $i72 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5940, 79} true;
  assume {:verifier.code 0} true;
  $i73 := $add.i32($i72, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5940, 5} true;
  assume {:verifier.code 0} true;
  call outb($i71, $i73);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5942, 5} true;
  assume {:verifier.code 0} true;
  $i74, $i75 := 0, $i65;
  goto $bb21;
$bb20:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5987, 18} true;
  assume {:verifier.code 0} true;
  $i133 := $ne.i32($i74, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5987, 23} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i133} true;
  goto $bb46, $bb47;
$bb22:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5945, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5945:19: warning: over-approximating bitwise operation and;
  $i76 := $and.i32($i58, 16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5945, 25} true;
  assume {:verifier.code 0} true;
  $i77 := $ne.i32($i76, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5945, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i77} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i77 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5946, 5} true;
  assume {:verifier.code 0} true;
  call ei_rx_overrun($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5947, 3} true;
  assume {:verifier.code 0} true;
  $i78 := $i58;
  goto $bb25;
$bb24:
  assume !(($i77 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5948, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5948:19: warning: over-approximating bitwise operation and;
  $i79 := $and.i32($i58, 5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5948, 24} true;
  assume {:verifier.code 0} true;
  $i80 := $ne.i32($i79, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5948, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb26, $bb27;
$bb25:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5952, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5952:19: warning: over-approximating bitwise operation and;
  $i81 := $and.i32($i58, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5952, 24} true;
  assume {:verifier.code 0} true;
  $i82 := $ne.i32($i81, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5952, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb29, $bb30;
$bb26:
  assume ($i80 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5949, 5} true;
  assume {:verifier.code 0} true;
  call ei_receive($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5950, 3} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume !(($i80 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:verifier.code 0} true;
  $i78 := $i58;
  goto $bb25;
$bb29:
  assume ($i82 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5953, 5} true;
  assume {:verifier.code 0} true;
  call ei_tx_intr($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5954, 3} true;
  assume {:verifier.code 0} true;
  $i83 := $i78;
  goto $bb31;
$bb30:
  assume !(($i82 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5955, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5955:19: warning: over-approximating bitwise operation and;
  $i84 := $and.i32($i78, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5955, 24} true;
  assume {:verifier.code 0} true;
  $i85 := $ne.i32($i84, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5955, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i85} true;
  goto $bb32, $bb33;
$bb31:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5959, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5959:19: warning: over-approximating bitwise operation and;
  $i86 := $and.i32($i78, 32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5959, 25} true;
  assume {:verifier.code 0} true;
  $i87 := $ne.i32($i86, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5959, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb35, $bb36;
$bb32:
  assume ($i85 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5956, 5} true;
  assume {:verifier.code 0} true;
  call ei_tx_err($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5957, 3} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb33:
  assume !(($i85 == 1));
  assume {:verifier.code 0} true;
  goto $bb34;
$bb34:
  assume {:verifier.code 0} true;
  $i83 := $i78;
  goto $bb31;
$bb35:
  assume ($i87 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5960, 26} true;
  assume {:verifier.code 0} true;
  $i88 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5960, 52} true;
  assume {:verifier.code 0} true;
  $i89 := $add.i32($i88, 13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5960, 15} true;
  assume {:verifier.code 0} true;
  call $i90 := inb($i89);
  call {:cexpr "tmp___6"} boogie_si_record_i8($i90);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5961, 39} true;
  assume {:verifier.code 0} true;
  $p91 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p92 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5961, 45} true;
  assume {:verifier.code 0} true;
  $i93 := $load.i64($M.0, $p92);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5961, 63} true;
  assume {:verifier.code 0} true;
  $i94 := $zext.i8.i64($i90);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5961, 61} true;
  assume {:verifier.code 0} true;
  $i95 := $add.i64($i93, $i94);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5961, 10} true;
  assume {:verifier.code 0} true;
  $p96 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p97 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5961, 32} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p97, $i95);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5962, 26} true;
  assume {:verifier.code 0} true;
  $i98 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5962, 52} true;
  assume {:verifier.code 0} true;
  $i99 := $add.i32($i98, 14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5962, 15} true;
  assume {:verifier.code 0} true;
  call $i100 := inb($i99);
  call {:cexpr "tmp___7"} boogie_si_record_i8($i100);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5963, 37} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p102 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(96, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5963, 43} true;
  assume {:verifier.code 0} true;
  $i103 := $load.i64($M.0, $p102);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5963, 59} true;
  assume {:verifier.code 0} true;
  $i104 := $zext.i8.i64($i100);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5963, 57} true;
  assume {:verifier.code 0} true;
  $i105 := $add.i64($i103, $i104);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5963, 10} true;
  assume {:verifier.code 0} true;
  $p106 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p107 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(96, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5963, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p107, $i105);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5964, 26} true;
  assume {:verifier.code 0} true;
  $i108 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5964, 52} true;
  assume {:verifier.code 0} true;
  $i109 := $add.i32($i108, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5964, 15} true;
  assume {:verifier.code 0} true;
  call $i110 := inb($i109);
  call {:cexpr "tmp___8"} boogie_si_record_i8($i110);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5965, 40} true;
  assume {:verifier.code 0} true;
  $p111 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p112 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(120, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5965, 46} true;
  assume {:verifier.code 0} true;
  $i113 := $load.i64($M.0, $p112);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5965, 65} true;
  assume {:verifier.code 0} true;
  $i114 := $zext.i8.i64($i110);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5965, 63} true;
  assume {:verifier.code 0} true;
  $i115 := $add.i64($i113, $i114);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5965, 10} true;
  assume {:verifier.code 0} true;
  $p116 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p117 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(120, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5965, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p117, $i115);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5966, 21} true;
  assume {:verifier.code 0} true;
  $i118 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5966, 47} true;
  assume {:verifier.code 0} true;
  $i119 := $add.i32($i118, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5966, 5} true;
  assume {:verifier.code 0} true;
  call outb(32, $i119);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5967, 3} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb36:
  assume !(($i87 == 1));
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5969, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5969:19: warning: over-approximating bitwise operation and;
  $i120 := $and.i32($i83, 64);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5969, 25} true;
  assume {:verifier.code 0} true;
  $i121 := $ne.i32($i120, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5969, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i121} true;
  goto $bb38, $bb39;
$bb38:
  assume ($i121 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5970, 21} true;
  assume {:verifier.code 0} true;
  $i122 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5970, 47} true;
  assume {:verifier.code 0} true;
  $i123 := $add.i32($i122, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5970, 5} true;
  assume {:verifier.code 0} true;
  call outb(64, $i123);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5971, 3} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb39:
  assume !(($i121 == 1));
  assume {:verifier.code 0} true;
  goto $bb40;
$bb40:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5973, 12} true;
  assume {:verifier.code 0} true;
  $i124 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5973, 3} true;
  assume {:verifier.code 0} true;
  call outb(34, $i124);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5975, 13} true;
  assume {:verifier.code 0} true;
  call $i125 := inb($i52);
  call {:cexpr "tmp___9"} boogie_si_record_i8($i125);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5976, 16} true;
  assume {:verifier.code 0} true;
  $i126 := $zext.i8.i32($i125);
  call {:cexpr "interrupts"} boogie_si_record_i32($i126);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5977, 18} true;
  assume {:verifier.code 0} true;
  $i127 := $ne.i32($i126, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5977, 7} true;
  assume {:verifier.code 0} true;
  $i128, $i129 := $i66, $i126;
  assume {:branchcond $i127} true;
  goto $bb41, $bb42;
$bb41:
  assume ($i127 == 1);
  assume {:verifier.code 0} true;
  $i58, $i59 := $i126, $i66;
  goto $bb14;
$bb42:
  assume !(($i127 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5977, 7} true;
  assume {:verifier.code 0} true;
  $i56, $i57 := $i128, $i129;
  goto $bb13;
$bb43:
  assume ($i130 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5980, 7} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb44:
  assume !(($i130 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5978, 31} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5976, 16} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5982, 7} true;
  assume {:verifier.code 0} true;
  $i74, $i75 := $i132, $i131;
  goto $bb21;
$bb45:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5977, 21} true;
  assume {:verifier.code 0} true;
  $i74, $i75 := $i57, $i56;
  goto $bb21;
$bb46:
  assume ($i133 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5987, 37} true;
  assume {:verifier.code 0} true;
  $p134 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5987, 37} true;
  assume {:verifier.code 0} true;
  $i135 := $load.i32($M.0, $p134);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5987, 48} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:5987:48: warning: over-approximating bitwise operation and;
  $i136 := $and.i32($i135, 512);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5987, 56} true;
  assume {:verifier.code 0} true;
  $i137 := $ne.i32($i136, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5987, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i137} true;
  goto $bb49, $bb50;
$bb47:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5987, 23} true;
  assume {:verifier.code 0} true;
  assume !(($i133 == 1));
  goto $bb48;
$bb48:
  assume {:verifier.code 0} true;
  goto $bb57;
$bb49:
  assume ($i137 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5988, 14} true;
  assume {:verifier.code 0} true;
  $i138 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5988, 5} true;
  assume {:verifier.code 0} true;
  call outb(34, $i138);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5989, 21} true;
  assume {:verifier.code 0} true;
  $i139 := $sgt.i32($i75, 11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5989, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i139} true;
  goto $bb51, $bb52;
$bb50:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5987, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i137 == 1));
  goto $bb48;
$bb51:
  assume ($i139 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5990, 22} true;
  assume {:verifier.code 0} true;
  $i140 := $ne.i32($i74, 255);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5990, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i140} true;
  goto $bb53, $bb54;
$bb52:
  assume !(($i139 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5997, 7} true;
  assume {:verifier.code 0} true;
  call $i144 := netdev_warn.ref.ref.i32($p3, .str.20, $i74);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5998, 24} true;
  assume {:verifier.code 0} true;
  $i145 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5998, 50} true;
  assume {:verifier.code 0} true;
  $i146 := $add.i32($i145, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5998, 7} true;
  assume {:verifier.code 0} true;
  call outb($sub.i8(0, 1), $i146);
  assume {:verifier.code 0} true;
  goto $bb56;
$bb53:
  assume ($i140 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5991, 9} true;
  assume {:verifier.code 0} true;
  call $i141 := netdev_warn.ref.ref.i32($p3, .str.19, $i74);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5993, 7} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb54:
  assume !(($i140 == 1));
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5995, 23} true;
  assume {:verifier.code 0} true;
  $i142 := $trunc.i64.i32($i5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5995, 49} true;
  assume {:verifier.code 0} true;
  $i143 := $add.i32($i142, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5995, 7} true;
  assume {:verifier.code 0} true;
  call outb(63, $i143);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5996, 5} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb56:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6000, 3} true;
  assume {:verifier.code 0} true;
  goto $bb57;
$bb57:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6002, 27} true;
  assume {:verifier.code 0} true;
  $p147 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6002, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock($p147);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6003, 23} true;
  assume {:verifier.code 0} true;
  $i148 := $sgt.i32($i75, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6003, 23} true;
  assume {:verifier.code 0} true;
  $i149 := $zext.i1.i32($i148);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6003, 3} true;
  assume {:verifier.code 0} true;
  $i24 := $i149;
  goto $bb3;
}
const ei_rx_overrun: ref;
axiom (ei_rx_overrun == $sub.ref(0, 161566));
procedure  ei_rx_overrun($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i8;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6293, 21} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6293, 21} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6293, 21} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, $p2);
  call {:cexpr "e8390_base"} boogie_si_record_i64($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6295, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6296, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6297, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6297, 13} true;
  assume {:verifier.code 0} true;
  call $i7 := inb($i6);
  call {:cexpr "tmp___0"} boogie_si_record_i8($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6298, 15} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i8.i32($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6298, 38} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6298:38: warning: over-approximating bitwise operation and;
  $i9 := $and.i32($i8, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6298, 15} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i32.i8($i9);
  call {:cexpr "was_txing"} boogie_si_record_i8($i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6299, 12} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6299, 3} true;
  assume {:verifier.code 0} true;
  call outb(33, $i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6300, 18} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6300, 18} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6300, 29} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6300:29: warning: over-approximating bitwise operation and;
  $i14 := $and.i32($i13, 64);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6300, 36} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i32($i14, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6300, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i15 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6301, 16} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6301, 24} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.ref($M.3, $p16, .str.2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6302, 16} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6302, 25} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.ref($M.4, $p17, .str.21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6303, 16} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6303, 25} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.ref($M.5, $p18, .str.4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6304, 16} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6304, 23} true;
  assume {:verifier.code 0} true;
  $M.6 := $store.ref($M.6, $p19, .str.22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6305, 16} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6305, 16} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6305, 23} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i24($M.7, $p21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6305, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6305:23: warning: over-approximating bitwise operation and;
  $i23 := $and.i24($i22, $sub.i24(0, 262144));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6305, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6305:23: warning: over-approximating bitwise operation or;
  $i24 := $or.i24($i23, 796);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6305, 23} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i24($M.7, $p21, $i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6306, 16} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6306, 22} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p25, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6307, 53} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6307, 53} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i8($M.8, $p26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6307, 35} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.i8.i64($i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6307, 59} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6307:59: warning: over-approximating bitwise operation and;
  $i29 := $and.i64($i28, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6307, 15} true;
  assume {:verifier.code 0} true;
  call $i30 := ldv__builtin_expect($i29, 0);
  call {:cexpr "tmp___1"} boogie_si_record_i64($i30);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6308, 17} true;
  assume {:verifier.code 0} true;
  $i31 := $ne.i64($i30, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6308, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i31 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6309, 7} true;
  assume {:verifier.code 0} true;
  call $i32 := __dynamic_netdev_dbg.ref.ref.ref($p1, $p0, .str.22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6310, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6312, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6314, 36} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(88, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6314, 42} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i64($M.0, $p34);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6314, 57} true;
  assume {:verifier.code 0} true;
  $i36 := $add.i64($i35, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6314, 8} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(88, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6314, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p38, $i36);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6322, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6318, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6318, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6326, 18} true;
  assume {:verifier.code 0} true;
  $i39 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6326, 44} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i32($i39, 10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6326, 3} true;
  assume {:verifier.code 0} true;
  call outb(0, $i40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6327, 18} true;
  assume {:verifier.code 0} true;
  $i41 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6327, 44} true;
  assume {:verifier.code 0} true;
  $i42 := $add.i32($i41, 11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6327, 3} true;
  assume {:verifier.code 0} true;
  call outb(0, $i42);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6328, 7} true;
  assume {:verifier.code 0} true;
  $i43 := $zext.i8.i32($i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6328, 32} true;
  assume {:verifier.code 0} true;
  $i44 := $ne.i32($i43, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6328, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i44 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6329, 26} true;
  assume {:verifier.code 0} true;
  $i45 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6329, 52} true;
  assume {:verifier.code 0} true;
  $i46 := $add.i32($i45, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6329, 15} true;
  assume {:verifier.code 0} true;
  call $i47 := inb($i46);
  call {:cexpr "tmp___3"} boogie_si_record_i8($i47);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6330, 20} true;
  assume {:verifier.code 0} true;
  $i48 := $zext.i8.i32($i47);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6330, 43} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6330:43: warning: over-approximating bitwise operation and;
  $i49 := $and.i32($i48, 10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6330, 20} true;
  assume {:verifier.code 0} true;
  $i50 := $trunc.i32.i8($i49);
  call {:cexpr "tx_completed"} boogie_si_record_i8($i50);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6331, 9} true;
  assume {:verifier.code 0} true;
  $i51 := $zext.i8.i32($i50);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6331, 37} true;
  assume {:verifier.code 0} true;
  $i52 := $eq.i32($i51, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6331, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb13, $bb14;
$bb12:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  $i54 := 0;
  goto $bb16;
$bb13:
  assume ($i52 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6333, 5} true;
  assume {:verifier.code 0} true;
  $i53 := 1;
  goto $bb15;
$bb14:
  assume !(($i52 == 1));
  assume {:verifier.code 0} true;
  $i53 := 0;
  goto $bb15;
$bb15:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6335, 3} true;
  assume {:verifier.code 0} true;
  $i54 := $i53;
  goto $bb16;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6337, 18} true;
  assume {:verifier.code 0} true;
  $i55 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6337, 44} true;
  assume {:verifier.code 0} true;
  $i56 := $add.i32($i55, 13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6337, 3} true;
  assume {:verifier.code 0} true;
  call outb(2, $i56);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6338, 12} true;
  assume {:verifier.code 0} true;
  $i57 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6338, 3} true;
  assume {:verifier.code 0} true;
  call outb(34, $i57);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6339, 3} true;
  assume {:verifier.code 0} true;
  call ei_receive($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6340, 19} true;
  assume {:verifier.code 0} true;
  $i58 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6340, 45} true;
  assume {:verifier.code 0} true;
  $i59 := $add.i32($i58, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6340, 3} true;
  assume {:verifier.code 0} true;
  call outb(16, $i59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6341, 18} true;
  assume {:verifier.code 0} true;
  $i60 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6341, 44} true;
  assume {:verifier.code 0} true;
  $i61 := $add.i32($i60, 13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6341, 3} true;
  assume {:verifier.code 0} true;
  call outb(0, $i61);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6342, 7} true;
  assume {:verifier.code 0} true;
  $i62 := $zext.i8.i32($i54);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6342, 34} true;
  assume {:verifier.code 0} true;
  $i63 := $ne.i32($i62, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6342, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i63 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6343, 14} true;
  assume {:verifier.code 0} true;
  $i64 := $trunc.i64.i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6343, 5} true;
  assume {:verifier.code 0} true;
  call outb(38, $i64);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6344, 3} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !(($i63 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6346, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6318, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6318, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6318, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6318, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6318, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6318, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6318, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6318, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:verifier.code 0} true;
  goto $bb10;
}
const ei_receive: ref;
axiom (ei_receive == $sub.ref(0, 162598));
procedure  ei_receive($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i8;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i16;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i24;
  var $i130: i24;
  var $i131: i24;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i64;
  var $i136: i64;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i64;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i64;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $i167: i32;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $i176: i64;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i32;
  var $i184: i16;
  var $p185: ref;
  var $i186: i1;
  var $i187: i8;
  var $i188: i1;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $i195: i64;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i64;
  var $i201: i64;
  var $i202: i64;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $i209: i64;
  var $i210: i64;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i8;
  var $i219: i32;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $p223: ref;
  var $i224: i16;
  var $i225: i32;
  var $i226: i32;
  var $p227: ref;
  var $p228: ref;
  var $i229: i64;
  var $i230: i64;
  var $p231: ref;
  var $p232: ref;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $p236: ref;
  var $i237: i64;
  var $i238: i64;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i8;
  var $p243: ref;
  var $i244: i8;
  var $i245: i32;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i32;
  var $p250: ref;
  var $i251: i8;
  var $i252: i8;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $i256: i8;
  var $i257: i32;
  var $i258: i32;
  var $i14: i32;
  var $i259: i32;
  var $i260: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6158, 21} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6158, 21} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6158, 21} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.0, $p3);
  call {:cexpr "e8390_base"} boogie_si_record_i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6159, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6160, 14} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6162, 34} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(75, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6162, 34} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i8($M.0, $p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6162, 18} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i8.i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6162, 62} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(74, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6162, 62} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i8($M.0, $p10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6162, 46} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i8.i32($i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6162, 44} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i32($i9, $i12);
  call {:cexpr "num_rx_pages"} boogie_si_record_i32($i13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6269, 7} true;
  assume {:verifier.code 0} true;
  $i14 := 1;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6270, 5} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6165, 12} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6165, 3} true;
  assume {:verifier.code 0} true;
  call outb(96, $i15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6166, 27} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6166, 53} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i16, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6166, 16} true;
  assume {:verifier.code 0} true;
  call $i18 := inb($i17);
  call {:cexpr "rxing_page"} boogie_si_record_i8($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6167, 12} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6167, 3} true;
  assume {:verifier.code 0} true;
  call outb(32, $i19);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6168, 24} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6168, 50} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i32($i20, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6168, 13} true;
  assume {:verifier.code 0} true;
  call $i22 := inb($i21);
  call {:cexpr "tmp___0"} boogie_si_record_i8($i22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6169, 16} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.i8.i32($i22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6169, 39} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i32($i23, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6169, 16} true;
  assume {:verifier.code 0} true;
  $i25 := $trunc.i32.i8($i24);
  call {:cexpr "this_frame"} boogie_si_record_i8($i25);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6170, 23} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(75, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6170, 23} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i8($M.0, $p26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6170, 7} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.i8.i32($i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6170, 36} true;
  assume {:verifier.code 0} true;
  $i29 := $zext.i8.i32($i25);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6170, 33} true;
  assume {:verifier.code 0} true;
  $i30 := $sle.i32($i28, $i29);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6170, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i30 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6171, 28} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(74, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6171, 28} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i8($M.0, $p31);
  call {:cexpr "this_frame"} boogie_si_record_i8($i32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6172, 3} true;
  assume {:verifier.code 0} true;
  $i33 := $i32;
  goto $bb5;
$bb4:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  $i33 := $i25;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 19} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 19} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i32($M.0, $p34);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 30} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6174:30: warning: over-approximating bitwise operation and;
  $i36 := $and.i32($i35, 2048);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 39} true;
  assume {:verifier.code 0} true;
  $i37 := $ne.i32($i36, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 45} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i37 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 64} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(76, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 64} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i8($M.0, $p38);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 48} true;
  assume {:verifier.code 0} true;
  $i40 := $zext.i8.i32($i39);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 80} true;
  assume {:verifier.code 0} true;
  $i41 := $zext.i8.i32($i33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 77} true;
  assume {:verifier.code 0} true;
  $i42 := $ne.i32($i40, $i41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 98} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb9, $bb10;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 45} true;
  assume {:verifier.code 0} true;
  assume !(($i37 == 1));
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  goto $bb16;
$bb9:
  assume ($i42 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 102} true;
  assume {:verifier.code 0} true;
  $i43 := $zext.i8.i32($i33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 128} true;
  assume {:verifier.code 0} true;
  $i44 := $ne.i32($i43, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 134} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb11, $bb13;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 98} true;
  assume {:verifier.code 0} true;
  assume !(($i42 == 1));
  goto $bb8;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 134} true;
  assume {:verifier.code 0} true;
  assume ($i44 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6176, 16} true;
  assume {:verifier.code 0} true;
  $i47 := $zext.i8.i32($i33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6176, 50} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(76, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6176, 50} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i8($M.0, $p48);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6176, 34} true;
  assume {:verifier.code 0} true;
  $i50 := $zext.i8.i32($i49);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6175, 5} true;
  assume {:verifier.code 0} true;
  call $i51 := netdev_err.ref.ref.i32.i32($p0, .str.23, $i47, $i50);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6177, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb13:
  assume !(($i44 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 137} true;
  assume {:verifier.code 0} true;
  $i45 := $zext.i8.i32($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 163} true;
  assume {:verifier.code 0} true;
  $i46 := $ne.i32($i45, 255);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb14, $bb15;
$bb14:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 7} true;
  assume {:verifier.code 0} true;
  assume ($i46 == 1);
  goto $bb12;
$bb15:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6174, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i46 == 1));
  goto $bb8;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6179, 7} true;
  assume {:verifier.code 0} true;
  $i52 := $zext.i8.i32($i33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6179, 27} true;
  assume {:verifier.code 0} true;
  $i53 := $zext.i8.i32($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6179, 24} true;
  assume {:verifier.code 0} true;
  $i54 := $eq.i32($i52, $i53);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6179, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i54 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6180, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !(($i54 == 1));
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6274, 18} true;
  assume {:verifier.code 0} true;
  $i259 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6274, 44} true;
  assume {:verifier.code 0} true;
  $i260 := $add.i32($i259, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6274, 3} true;
  assume {:verifier.code 0} true;
  call outb(5, $i260);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6275, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6183, 27} true;
  assume {:verifier.code 0} true;
  $i55 := $zext.i8.i16($i33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6183, 20} true;
  assume {:verifier.code 0} true;
  $i56 := $zext.i16.i32($i55);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6183, 56} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6183:56: warning: over-approximating bitwise operation shl;
  $i57 := $shl.i32($i56, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6183, 20} true;
  assume {:verifier.code 0} true;
  $i58 := $trunc.i32.i16($i57);
  call {:cexpr "current_offset"} boogie_si_record_i16($i58);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6184, 16} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6184, 16} true;
  assume {:verifier.code 0} true;
  $p60 := $load.ref($M.0, $p59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6184, 48} true;
  assume {:verifier.code 0} true;
  $i61 := $zext.i8.i32($i33);
  call devirtbounce.9($p60, $p0, $p1, $i61);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6185, 44} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6185, 44} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i16($M.12, $p62);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6185, 20} true;
  assume {:verifier.code 0} true;
  $i64 := $zext.i16.i32($i63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6185, 50} true;
  assume {:verifier.code 0} true;
  $i65 := $sub.i32($i64, 4);
  call {:cexpr "pkt_len"} boogie_si_record_i32($i65);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6186, 29} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6186, 29} true;
  assume {:verifier.code 0} true;
  $i67 := $load.i8($M.13, $p66);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6186, 14} true;
  assume {:verifier.code 0} true;
  $i68 := $zext.i8.i32($i67);
  call {:cexpr "pkt_stat"} boogie_si_record_i32($i68);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6187, 65} true;
  assume {:verifier.code 0} true;
  $i69 := $add.i32($i65, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6187, 70} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6187:70: warning: over-approximating bitwise operation ashr;
  $i70 := $ashr.i32($i69, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6187, 39} true;
  assume {:verifier.code 0} true;
  $i71 := $trunc.i32.i8($i70);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6187, 32} true;
  assume {:verifier.code 0} true;
  $i72 := $zext.i8.i32($i71);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6187, 79} true;
  assume {:verifier.code 0} true;
  $i73 := $zext.i8.i32($i33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6187, 77} true;
  assume {:verifier.code 0} true;
  $i74 := $add.i32($i72, $i73);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6187, 97} true;
  assume {:verifier.code 0} true;
  $i75 := $add.i32($i74, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6187, 16} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.i32.i8($i75);
  call {:cexpr "next_frame"} boogie_si_record_i8($i76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 24} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 24} true;
  assume {:verifier.code 0} true;
  $i78 := $load.i8($M.14, $p77);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 9} true;
  assume {:verifier.code 0} true;
  $i79 := $zext.i8.i32($i78);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 32} true;
  assume {:verifier.code 0} true;
  $i80 := $zext.i8.i32($i76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 29} true;
  assume {:verifier.code 0} true;
  $i81 := $ne.i32($i79, $i80);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 49} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i81} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i81 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 67} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 67} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i8($M.14, $p82);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 52} true;
  assume {:verifier.code 0} true;
  $i84 := $zext.i8.i32($i83);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 75} true;
  assume {:verifier.code 0} true;
  $i85 := $zext.i8.i32($i76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 92} true;
  assume {:verifier.code 0} true;
  $i86 := $add.i32($i85, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 72} true;
  assume {:verifier.code 0} true;
  $i87 := $ne.i32($i84, $i86);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 97} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb24, $bb25;
$bb22:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 49} true;
  assume {:verifier.code 0} true;
  assume !(($i81 == 1));
  goto $bb23;
$bb23:
  assume {:verifier.code 0} true;
  goto $bb33;
$bb24:
  assume ($i87 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 115} true;
  assume {:verifier.code 0} true;
  $p88 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 115} true;
  assume {:verifier.code 0} true;
  $i89 := $load.i8($M.14, $p88);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 100} true;
  assume {:verifier.code 0} true;
  $i90 := $zext.i8.i32($i89);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 123} true;
  assume {:verifier.code 0} true;
  $i91 := $zext.i8.i32($i76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 140} true;
  assume {:verifier.code 0} true;
  $i92 := $sub.i32($i91, $i13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 120} true;
  assume {:verifier.code 0} true;
  $i93 := $ne.i32($i90, $i92);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 156} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i93} true;
  goto $bb26, $bb27;
$bb25:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 97} true;
  assume {:verifier.code 0} true;
  assume !(($i87 == 1));
  goto $bb23;
$bb26:
  assume ($i93 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 174} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 174} true;
  assume {:verifier.code 0} true;
  $i95 := $load.i8($M.14, $p94);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 159} true;
  assume {:verifier.code 0} true;
  $i96 := $zext.i8.i32($i95);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 183} true;
  assume {:verifier.code 0} true;
  $i97 := $zext.i8.i32($i76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 200} true;
  assume {:verifier.code 0} true;
  $i98 := $add.i32($i97, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 205} true;
  assume {:verifier.code 0} true;
  $i99 := $sub.i32($i98, $i13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 179} true;
  assume {:verifier.code 0} true;
  $i100 := $ne.i32($i96, $i99);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb28, $bb29;
$bb27:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 156} true;
  assume {:verifier.code 0} true;
  assume !(($i93 == 1));
  goto $bb23;
$bb28:
  assume ($i100 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6189, 15} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(76, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6189, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p101, $i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6190, 42} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(76, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6190, 42} true;
  assume {:verifier.code 0} true;
  $i103 := $load.i8($M.0, $p102);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6190, 17} true;
  assume {:verifier.code 0} true;
  $i104 := $zext.i8.i32($i103);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6190, 55} true;
  assume {:verifier.code 0} true;
  $i105 := $add.i32($i104, 255);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6190, 10} true;
  assume {:verifier.code 0} true;
  $i106 := $trunc.i32.i8($i105);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6190, 71} true;
  assume {:verifier.code 0} true;
  $i107 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6190, 97} true;
  assume {:verifier.code 0} true;
  $i108 := $add.i32($i107, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6190, 5} true;
  assume {:verifier.code 0} true;
  call outb($i106, $i108);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6191, 33} true;
  assume {:verifier.code 0} true;
  $p109 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6191, 39} true;
  assume {:verifier.code 0} true;
  $i111 := $load.i64($M.0, $p110);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6191, 49} true;
  assume {:verifier.code 0} true;
  $i112 := $add.i64($i111, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6191, 10} true;
  assume {:verifier.code 0} true;
  $p113 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6191, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p114, $i112);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6192, 5} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb29:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6188, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i100 == 1));
  goto $bb23;
$bb30:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6268, 31} true;
  assume {:verifier.code 0} true;
  $i115 := $add.i32($i14, 1);
  call {:cexpr "rx_pkt_count"} boogie_si_record_i32($i115);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6269, 20} true;
  assume {:verifier.code 0} true;
  $i116 := $sle.i32($i115, 9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6269, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i116} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i116 == 1);
  assume {:verifier.code 0} true;
  $i14 := $i115;
  goto $bb1;
$bb32:
  assume !(($i116 == 1));
  assume {:verifier.code 0} true;
  goto $bb73;
$bb33:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6195, 15} true;
  assume {:verifier.code 0} true;
  $i117 := $sle.i32($i65, 59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6195, 21} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i117} true;
  goto $bb34, $bb36;
$bb34:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6195, 21} true;
  assume {:verifier.code 0} true;
  assume ($i117 == 1);
  goto $bb35;
$bb35:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6196, 20} true;
  assume {:verifier.code 0} true;
  $p119 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6196, 20} true;
  assume {:verifier.code 0} true;
  $i120 := $load.i32($M.0, $p119);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6196, 31} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6196:31: warning: over-approximating bitwise operation and;
  $i121 := $and.i32($i120, 2048);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6196, 40} true;
  assume {:verifier.code 0} true;
  $i122 := $ne.i32($i121, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6196, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i122} true;
  goto $bb39, $bb40;
$bb36:
  assume !(($i117 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6195, 32} true;
  assume {:verifier.code 0} true;
  $i118 := $sgt.i32($i65, 1518);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6195, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i118} true;
  goto $bb37, $bb38;
$bb37:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6195, 7} true;
  assume {:verifier.code 0} true;
  assume ($i118 == 1);
  goto $bb35;
$bb38:
  assume !(($i118 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6214, 17} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6214:17: warning: over-approximating bitwise operation and;
  $i161 := $and.i32($i68, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6214, 23} true;
  assume {:verifier.code 0} true;
  $i162 := $eq.i32($i161, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6214, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i162} true;
  goto $bb46, $bb47;
$bb39:
  assume ($i122 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6197, 18} true;
  assume {:verifier.code 0} true;
  $p123 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6197, 26} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.ref($M.3, $p123, .str.2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6198, 18} true;
  assume {:verifier.code 0} true;
  $p124 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6198, 27} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.ref($M.4, $p124, .str.24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6199, 18} true;
  assume {:verifier.code 0} true;
  $p125 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6199, 27} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.ref($M.5, $p125, .str.4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6200, 18} true;
  assume {:verifier.code 0} true;
  $p126 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6200, 25} true;
  assume {:verifier.code 0} true;
  $M.6 := $store.ref($M.6, $p126, .str.25);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6201, 18} true;
  assume {:verifier.code 0} true;
  $p127 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6201, 18} true;
  assume {:verifier.code 0} true;
  $p128 := $bitcast.ref.ref($p127);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6201, 25} true;
  assume {:verifier.code 0} true;
  $i129 := $load.i24($M.7, $p128);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6201, 25} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6201:25: warning: over-approximating bitwise operation and;
  $i130 := $and.i24($i129, $sub.i24(0, 262144));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6201, 25} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6201:25: warning: over-approximating bitwise operation or;
  $i131 := $or.i24($i130, 717);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6201, 25} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.i24($M.7, $p128, $i131);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6202, 18} true;
  assume {:verifier.code 0} true;
  $p132 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6202, 24} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p132, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6203, 55} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6203, 55} true;
  assume {:verifier.code 0} true;
  $i134 := $load.i8($M.8, $p133);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6203, 37} true;
  assume {:verifier.code 0} true;
  $i135 := $zext.i8.i64($i134);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6203, 61} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6203:61: warning: over-approximating bitwise operation and;
  $i136 := $and.i64($i135, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6203, 17} true;
  assume {:verifier.code 0} true;
  call $i137 := ldv__builtin_expect($i136, 0);
  call {:cexpr "tmp___1"} boogie_si_record_i64($i137);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6204, 19} true;
  assume {:verifier.code 0} true;
  $i138 := $ne.i64($i137, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6204, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i138} true;
  goto $bb41, $bb42;
$bb40:
  assume !(($i122 == 1));
  assume {:verifier.code 0} true;
  goto $bb44;
$bb41:
  assume ($i138 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6206, 45} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6206, 45} true;
  assume {:verifier.code 0} true;
  $i140 := $load.i16($M.12, $p139);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6206, 30} true;
  assume {:verifier.code 0} true;
  $i141 := $zext.i16.i32($i140);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6206, 67} true;
  assume {:verifier.code 0} true;
  $p142 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6206, 67} true;
  assume {:verifier.code 0} true;
  $i143 := $load.i8($M.13, $p142);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6206, 52} true;
  assume {:verifier.code 0} true;
  $i144 := $zext.i8.i32($i143);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6206, 90} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6206, 90} true;
  assume {:verifier.code 0} true;
  $i146 := $load.i8($M.14, $p145);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6206, 75} true;
  assume {:verifier.code 0} true;
  $i147 := $zext.i8.i32($i146);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6205, 9} true;
  assume {:verifier.code 0} true;
  call $i148 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p2, $p0, .str.25, $i141, $i144, $i147);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6207, 7} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb42:
  assume !(($i138 == 1));
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6209, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6211, 33} true;
  assume {:verifier.code 0} true;
  $p149 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p150 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6211, 39} true;
  assume {:verifier.code 0} true;
  $i151 := $load.i64($M.0, $p150);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6211, 49} true;
  assume {:verifier.code 0} true;
  $i152 := $add.i64($i151, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6211, 10} true;
  assume {:verifier.code 0} true;
  $p153 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p154 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6211, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p154, $i152);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6212, 40} true;
  assume {:verifier.code 0} true;
  $p155 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p156 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6212, 46} true;
  assume {:verifier.code 0} true;
  $i157 := $load.i64($M.0, $p156);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6212, 63} true;
  assume {:verifier.code 0} true;
  $i158 := $add.i64($i157, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6212, 10} true;
  assume {:verifier.code 0} true;
  $p159 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6212, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p160, $i158);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6213, 3} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb45:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6258, 25} true;
  assume {:verifier.code 0} true;
  $p241 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6258, 25} true;
  assume {:verifier.code 0} true;
  $i242 := $load.i8($M.14, $p241);
  call {:cexpr "next_frame"} boogie_si_record_i8($i242);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6259, 23} true;
  assume {:verifier.code 0} true;
  $p243 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(75, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6259, 23} true;
  assume {:verifier.code 0} true;
  $i244 := $load.i8($M.0, $p243);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6259, 7} true;
  assume {:verifier.code 0} true;
  $i245 := $zext.i8.i32($i244);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6259, 36} true;
  assume {:verifier.code 0} true;
  $i246 := $zext.i8.i32($i242);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6259, 33} true;
  assume {:verifier.code 0} true;
  $i247 := $sle.i32($i245, $i246);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6259, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i247} true;
  goto $bb70, $bb71;
$bb46:
  assume ($i162 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6215, 64} true;
  assume {:verifier.code 0} true;
  $i163 := $add.i32($i65, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6215, 11} true;
  assume {:verifier.code 0} true;
  call $p164 := ldv_netdev_alloc_skb_12($p0, $i163);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6216, 9} true;
  assume {:verifier.code 0} true;
  $i165 := $p2i.ref.i64($p164);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6216, 29} true;
  assume {:verifier.code 0} true;
  $i166 := $eq.i64($i165, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6216, 9} true;
  assume {:verifier.code 0} true;
  $i167 := $i65;
  assume {:branchcond $i166} true;
  goto $bb48, $bb49;
$bb47:
  assume !(($i162 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6247, 20} true;
  assume {:verifier.code 0} true;
  $p213 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6247, 20} true;
  assume {:verifier.code 0} true;
  $i214 := $load.i32($M.0, $p213);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6247, 31} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6247:31: warning: over-approximating bitwise operation and;
  $i215 := $and.i32($i214, 64);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6247, 38} true;
  assume {:verifier.code 0} true;
  $i216 := $ne.i32($i215, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6247, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i216} true;
  goto $bb64, $bb65;
$bb48:
  assume ($i166 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6185, 50} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6217, 22} true;
  assume {:verifier.code 0} true;
  $p168 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(184, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6217, 22} true;
  assume {:verifier.code 0} true;
  $i169 := $load.i32($M.0, $p168);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6217, 33} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6217:33: warning: over-approximating bitwise operation and;
  $i170 := $and.i32($i169, 64);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6217, 40} true;
  assume {:verifier.code 0} true;
  $i171 := $ne.i32($i170, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6217, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i171} true;
  goto $bb50, $bb51;
$bb49:
  assume !(($i166 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6225, 7} true;
  assume {:verifier.code 0} true;
  call skb_reserve($p164, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6226, 7} true;
  assume {:verifier.code 0} true;
  call $p179 := skb_put($p164, $i65);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6227, 20} true;
  assume {:verifier.code 0} true;
  $p180 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6227, 20} true;
  assume {:verifier.code 0} true;
  $p181 := $load.ref($M.0, $p180);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6227, 60} true;
  assume {:verifier.code 0} true;
  $i182 := $zext.i16.i32($i58);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6227, 90} true;
  assume {:verifier.code 0} true;
  $i183 := $add.i32($i182, 4);
  call devirtbounce.10($p181, $p0, $i65, $p164, $i183);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6228, 23} true;
  assume {:verifier.code 0} true;
  call $i184 := eth_type_trans($p164, $p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6228, 12} true;
  assume {:verifier.code 0} true;
  $p185 := $add.ref($add.ref($p164, $mul.ref(0, 232)), $mul.ref(126, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6228, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p185, $i184);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6229, 17} true;
  assume {:verifier.code 0} true;
  call $i186 := skb_defer_rx_timestamp($p164);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6229, 15} true;
  assume {:verifier.code 0} true;
  $i187 := $zext.i1.i8($i186);
  call {:cexpr "tmp___2"} boogie_si_record_i8($i187);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6230, 11} true;
  assume {:verifier.code 0} true;
  $i188 := $trunc.i8.i1($i187);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6230, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i188} true;
  goto $bb53, $bb54;
$bb50:
  assume ($i171 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6218, 9} true;
  assume {:verifier.code 0} true;
  call $i172 := netdev_err.ref.ref.i32($p0, .str.26, $i167);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6220, 7} true;
  assume {:verifier.code 0} true;
  goto $bb52;
$bb51:
  assume !(($i171 == 1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6222, 36} true;
  assume {:verifier.code 0} true;
  $p173 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p174 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(48, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6222, 42} true;
  assume {:verifier.code 0} true;
  $i175 := $load.i64($M.0, $p174);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6222, 53} true;
  assume {:verifier.code 0} true;
  $i176 := $add.i64($i175, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6222, 12} true;
  assume {:verifier.code 0} true;
  $p177 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p178 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(48, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6222, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p178, $i176);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6223, 7} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb53:
  assume ($i188 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6232, 7} true;
  assume {:verifier.code 0} true;
  $i189 := 0;
  goto $bb55;
$bb54:
  assume !(($i188 == 1));
  assume {:verifier.code 0} true;
  $i189 := 1;
  goto $bb55;
$bb55:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6235, 11} true;
  assume {:verifier.code 0} true;
  $i190 := $ne.i32($i189, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6235, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i190} true;
  goto $bb56, $bb57;
$bb56:
  assume ($i190 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6236, 9} true;
  assume {:verifier.code 0} true;
  call $i191 := ldv_netif_rx_13($p164);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6237, 7} true;
  assume {:verifier.code 0} true;
  goto $bb58;
$bb57:
  assume !(($i190 == 1));
  assume {:verifier.code 0} true;
  goto $bb58;
$bb58:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6239, 36} true;
  assume {:verifier.code 0} true;
  $p192 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p193 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6239, 42} true;
  assume {:verifier.code 0} true;
  $i194 := $load.i64($M.0, $p193);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6239, 53} true;
  assume {:verifier.code 0} true;
  $i195 := $add.i64($i194, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6239, 12} true;
  assume {:verifier.code 0} true;
  $p196 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p197 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6239, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p197, $i195);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6240, 34} true;
  assume {:verifier.code 0} true;
  $p198 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p199 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6240, 40} true;
  assume {:verifier.code 0} true;
  $i200 := $load.i64($M.0, $p199);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6240, 51} true;
  assume {:verifier.code 0} true;
  $i201 := $sext.i32.i64($i65);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6240, 49} true;
  assume {:verifier.code 0} true;
  $i202 := $add.i64($i200, $i201);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6240, 12} true;
  assume {:verifier.code 0} true;
  $p203 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p204 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(16, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6240, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p204, $i202);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6241, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6241:21: warning: over-approximating bitwise operation and;
  $i205 := $and.i32($i68, 32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6241, 27} true;
  assume {:verifier.code 0} true;
  $i206 := $ne.i32($i205, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6241, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i206} true;
  goto $bb59, $bb60;
$bb59:
  assume ($i206 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6242, 37} true;
  assume {:verifier.code 0} true;
  $p207 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p208 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6242, 43} true;
  assume {:verifier.code 0} true;
  $i209 := $load.i64($M.0, $p208);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6242, 53} true;
  assume {:verifier.code 0} true;
  $i210 := $add.i64($i209, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6242, 14} true;
  assume {:verifier.code 0} true;
  $p211 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p212 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6242, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p212, $i210);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6243, 7} true;
  assume {:verifier.code 0} true;
  goto $bb61;
$bb60:
  assume !(($i206 == 1));
  assume {:verifier.code 0} true;
  goto $bb61;
$bb61:
  assume {:verifier.code 0} true;
  goto $bb62;
$bb62:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6246, 3} true;
  assume {:verifier.code 0} true;
  goto $bb63;
$bb63:
  assume {:verifier.code 0} true;
  goto $bb45;
$bb64:
  assume ($i216 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6249, 33} true;
  assume {:verifier.code 0} true;
  $p217 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6249, 33} true;
  assume {:verifier.code 0} true;
  $i218 := $load.i8($M.13, $p217);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6249, 18} true;
  assume {:verifier.code 0} true;
  $i219 := $zext.i8.i32($i218);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6249, 56} true;
  assume {:verifier.code 0} true;
  $p220 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6249, 56} true;
  assume {:verifier.code 0} true;
  $i221 := $load.i8($M.14, $p220);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6249, 41} true;
  assume {:verifier.code 0} true;
  $i222 := $zext.i8.i32($i221);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6249, 77} true;
  assume {:verifier.code 0} true;
  $p223 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6249, 77} true;
  assume {:verifier.code 0} true;
  $i224 := $load.i16($M.12, $p223);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6249, 62} true;
  assume {:verifier.code 0} true;
  $i225 := $zext.i16.i32($i224);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6248, 7} true;
  assume {:verifier.code 0} true;
  call $i226 := netdev_err.ref.ref.i32.i32.i32($p0, .str.27, $i219, $i222, $i225);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6250, 5} true;
  assume {:verifier.code 0} true;
  goto $bb66;
$bb65:
  assume !(($i216 == 1));
  assume {:verifier.code 0} true;
  goto $bb66;
$bb66:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6252, 33} true;
  assume {:verifier.code 0} true;
  $p227 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p228 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6252, 39} true;
  assume {:verifier.code 0} true;
  $i229 := $load.i64($M.0, $p228);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6252, 49} true;
  assume {:verifier.code 0} true;
  $i230 := $add.i64($i229, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6252, 10} true;
  assume {:verifier.code 0} true;
  $p231 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p232 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(32, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6252, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p232, $i230);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6253, 19} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6253:19: warning: over-approximating bitwise operation and;
  $i233 := $and.i32($i68, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6253, 24} true;
  assume {:verifier.code 0} true;
  $i234 := $ne.i32($i233, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6253, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i234} true;
  goto $bb67, $bb68;
$bb67:
  assume ($i234 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6254, 40} true;
  assume {:verifier.code 0} true;
  $p235 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p236 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(112, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6254, 46} true;
  assume {:verifier.code 0} true;
  $i237 := $load.i64($M.0, $p236);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6254, 61} true;
  assume {:verifier.code 0} true;
  $i238 := $add.i64($i237, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6254, 12} true;
  assume {:verifier.code 0} true;
  $p239 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p240 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(112, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6254, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p240, $i238);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6255, 5} true;
  assume {:verifier.code 0} true;
  goto $bb69;
$bb68:
  assume !(($i234 == 1));
  assume {:verifier.code 0} true;
  goto $bb69;
$bb69:
  assume {:verifier.code 0} true;
  goto $bb63;
$bb70:
  assume ($i247 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6261, 19} true;
  assume {:verifier.code 0} true;
  $i248 := $zext.i8.i32($i242);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6260, 5} true;
  assume {:verifier.code 0} true;
  call $i249 := netdev_notice.ref.ref.i32($p0, .str.28, $i248);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6262, 28} true;
  assume {:verifier.code 0} true;
  $p250 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(74, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6262, 28} true;
  assume {:verifier.code 0} true;
  $i251 := $load.i8($M.0, $p250);
  call {:cexpr "next_frame"} boogie_si_record_i8($i251);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6263, 3} true;
  assume {:verifier.code 0} true;
  $i252 := $i251;
  goto $bb72;
$bb71:
  assume !(($i247 == 1));
  assume {:verifier.code 0} true;
  $i252 := $i242;
  goto $bb72;
$bb72:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6265, 13} true;
  assume {:verifier.code 0} true;
  $p253 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(76, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6265, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p253, $i252);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6266, 15} true;
  assume {:verifier.code 0} true;
  $i254 := $zext.i8.i32($i252);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6266, 41} true;
  assume {:verifier.code 0} true;
  $i255 := $add.i32($i254, 255);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6266, 8} true;
  assume {:verifier.code 0} true;
  $i256 := $trunc.i32.i8($i255);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6266, 57} true;
  assume {:verifier.code 0} true;
  $i257 := $trunc.i64.i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6266, 83} true;
  assume {:verifier.code 0} true;
  $i258 := $add.i32($i257, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6266, 3} true;
  assume {:verifier.code 0} true;
  call outb($i256, $i258);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6266, 3} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb73:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6269, 23} true;
  assume {:verifier.code 0} true;
  goto $bb19;
}
const ei_tx_intr: ref;
axiom (ei_tx_intr == $sub.ref(0, 163630));
procedure  ei_tx_intr($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i8;
  var $i46: i8;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i8;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i8;
  var $i90: i8;
  var $i91: i8;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i8;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i64;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $i139: i64;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i64;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i64;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $i163: i64;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $i171: i64;
  var $p172: ref;
  var $p173: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6059, 21} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6059, 21} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6059, 21} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i64($M.0, $p1);
  call {:cexpr "e8390_base"} boogie_si_record_i64($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6060, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6061, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6062, 24} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6062, 50} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i32($i5, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6062, 13} true;
  assume {:verifier.code 0} true;
  call $i7 := inb($i6);
  call {:cexpr "tmp___0"} boogie_si_record_i8($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6063, 12} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i8.i32($i7);
  call {:cexpr "status"} boogie_si_record_i32($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6064, 18} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6064, 44} true;
  assume {:verifier.code 0} true;
  $i10 := $add.i32($i9, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6064, 3} true;
  assume {:verifier.code 0} true;
  call outb(2, $i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6065, 56} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(78, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6065, 56} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i8($M.0, $p11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6065, 40} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i8.i32($i12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6065, 64} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32($i13, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6065, 23} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.i32.i8($i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6065, 13} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(78, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6065, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p16, $i15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6066, 23} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6066, 23} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i16($M.0, $p17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6066, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $sext.i16.i32($i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6066, 27} true;
  assume {:verifier.code 0} true;
  $i20 := $slt.i32($i19, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6066, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i20 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 25} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 25} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i16($M.0, $p21);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 9} true;
  assume {:verifier.code 0} true;
  $i23 := $sext.i16.i32($i22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 32} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i32($i23, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 37} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i20 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6084, 23} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6084, 23} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i16($M.0, $p62);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6084, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $sext.i16.i32($i63);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6084, 27} true;
  assume {:verifier.code 0} true;
  $i65 := $slt.i32($i64, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6084, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb13, $bb14;
$bb3:
  assume ($i24 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 56} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 56} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i16($M.0, $p25);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 40} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.i16.i32($i26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 63} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.i32($i27, $sub.i32(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb6, $bb7;
$bb4:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 37} true;
  assume {:verifier.code 0} true;
  assume !(($i24 == 1));
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  goto $bb8;
$bb6:
  assume ($i28 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6068, 67} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6068, 67} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6068, 89} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6068, 89} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i16($M.0, $p31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6068, 73} true;
  assume {:verifier.code 0} true;
  $i33 := $sext.i16.i32($i32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6069, 30} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6069, 30} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i16($M.0, $p34);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6069, 14} true;
  assume {:verifier.code 0} true;
  $i36 := $sext.i16.i32($i35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6068, 7} true;
  assume {:verifier.code 0} true;
  call $i37 := printk.ref.ref.i32.i32(.str.29, $p30, $i33, $i36);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6070, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6067, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i28 == 1));
  goto $bb5;
$bb8:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6072, 15} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6072, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p38, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6073, 25} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6073, 25} true;
  assume {:verifier.code 0} true;
  $i40 := $load.i16($M.0, $p39);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6073, 9} true;
  assume {:verifier.code 0} true;
  $i41 := $sext.i16.i32($i40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6073, 29} true;
  assume {:verifier.code 0} true;
  $i42 := $sgt.i32($i41, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6073, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i42 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6074, 17} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6074, 23} true;
  assume {:verifier.code 0} true;
  $i44 := $load.i8($M.0, $p43);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6074, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6074:23: warning: over-approximating bitwise operation and;
  $i45 := $and.i8($i44, $sub.i8(0, 9));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6074, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6074:23: warning: over-approximating bitwise operation or;
  $i46 := $or.i8($i45, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6074, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p43, $i46);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6075, 57} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6075, 57} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i16($M.0, $p47);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6075, 32} true;
  assume {:verifier.code 0} true;
  $i49 := $sext.i16.i32($i48);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6075, 78} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(73, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6075, 78} true;
  assume {:verifier.code 0} true;
  $i51 := $load.i8($M.0, $p50);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6075, 62} true;
  assume {:verifier.code 0} true;
  $i52 := $zext.i8.i32($i51);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6075, 92} true;
  assume {:verifier.code 0} true;
  $i53 := $add.i32($i52, 6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6075, 7} true;
  assume {:verifier.code 0} true;
  call NS8390_trigger_send($p0, $i49, $i53);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6076, 26} true;
  assume {:verifier.code 0} true;
  $i54 := $M.10;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6076, 12} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1040, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6076, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p55, $i54);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6077, 17} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6077, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p56, $sub.i16(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6078, 17} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6078, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p57, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6079, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume !(($i42 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6080, 17} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6080, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p58, 20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6081, 17} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6081, 23} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i8($M.0, $p59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6081, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6081:23: warning: over-approximating bitwise operation and;
  $i61 := $and.i8($i60, $sub.i8(0, 9));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6081, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p59, $i61);
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6083, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6103, 15} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6103:15: warning: over-approximating bitwise operation and;
  $i106 := $and.i32($i8, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6103, 20} true;
  assume {:verifier.code 0} true;
  $i107 := $ne.i32($i106, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6103, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i107} true;
  goto $bb25, $bb26;
$bb13:
  assume ($i65 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 25} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 25} true;
  assume {:verifier.code 0} true;
  $i67 := $load.i16($M.0, $p66);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 9} true;
  assume {:verifier.code 0} true;
  $i68 := $sext.i16.i32($i67);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 32} true;
  assume {:verifier.code 0} true;
  $i69 := $ne.i32($i68, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 37} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb15, $bb16;
$bb14:
  assume !(($i65 == 1));
  assume {:verifier.code 0} true;
  goto $bb24;
$bb15:
  assume ($i69 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 56} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 56} true;
  assume {:verifier.code 0} true;
  $i71 := $load.i16($M.0, $p70);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 40} true;
  assume {:verifier.code 0} true;
  $i72 := $sext.i16.i32($i71);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 63} true;
  assume {:verifier.code 0} true;
  $i73 := $ne.i32($i72, $sub.i32(0, 2));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i73} true;
  goto $bb18, $bb19;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 37} true;
  assume {:verifier.code 0} true;
  assume !(($i69 == 1));
  goto $bb17;
$bb17:
  assume {:verifier.code 0} true;
  goto $bb20;
$bb18:
  assume ($i73 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6086, 67} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6086, 67} true;
  assume {:verifier.code 0} true;
  $p75 := $load.ref($M.0, $p74);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6086, 89} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6086, 89} true;
  assume {:verifier.code 0} true;
  $i77 := $load.i16($M.0, $p76);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6086, 73} true;
  assume {:verifier.code 0} true;
  $i78 := $sext.i16.i32($i77);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6087, 30} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6087, 30} true;
  assume {:verifier.code 0} true;
  $i80 := $load.i16($M.0, $p79);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6087, 14} true;
  assume {:verifier.code 0} true;
  $i81 := $sext.i16.i32($i80);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6086, 7} true;
  assume {:verifier.code 0} true;
  call $i82 := printk.ref.ref.i32.i32(.str.30, $p75, $i78, $i81);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6088, 5} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6085, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i73 == 1));
  goto $bb17;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6090, 15} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(82, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6090, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p83, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6091, 25} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6091, 25} true;
  assume {:verifier.code 0} true;
  $i85 := $load.i16($M.0, $p84);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6091, 9} true;
  assume {:verifier.code 0} true;
  $i86 := $sext.i16.i32($i85);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6091, 29} true;
  assume {:verifier.code 0} true;
  $i87 := $sgt.i32($i86, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6091, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i87 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6092, 17} true;
  assume {:verifier.code 0} true;
  $p88 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6092, 23} true;
  assume {:verifier.code 0} true;
  $i89 := $load.i8($M.0, $p88);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6092, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6092:23: warning: over-approximating bitwise operation and;
  $i90 := $and.i8($i89, $sub.i8(0, 9));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6092, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6092:23: warning: over-approximating bitwise operation or;
  $i91 := $or.i8($i90, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6092, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p88, $i91);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6093, 57} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6093, 57} true;
  assume {:verifier.code 0} true;
  $i93 := $load.i16($M.0, $p92);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6093, 32} true;
  assume {:verifier.code 0} true;
  $i94 := $sext.i16.i32($i93);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6093, 78} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(73, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6093, 78} true;
  assume {:verifier.code 0} true;
  $i96 := $load.i8($M.0, $p95);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6093, 62} true;
  assume {:verifier.code 0} true;
  $i97 := $zext.i8.i32($i96);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6093, 7} true;
  assume {:verifier.code 0} true;
  call NS8390_trigger_send($p0, $i94, $i97);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6094, 26} true;
  assume {:verifier.code 0} true;
  $i98 := $M.10;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6094, 12} true;
  assume {:verifier.code 0} true;
  $p99 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1040, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6094, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p99, $i98);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6095, 17} true;
  assume {:verifier.code 0} true;
  $p100 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(80, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6095, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p100, $sub.i16(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6096, 17} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6096, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p101, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6097, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb22:
  assume !(($i87 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6098, 17} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(84, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6098, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p102, 10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6099, 17} true;
  assume {:verifier.code 0} true;
  $p103 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6099, 23} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i8($M.0, $p103);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6099, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6099:23: warning: over-approximating bitwise operation and;
  $i105 := $and.i8($i104, $sub.i8(0, 9));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6099, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p103, $i105);
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6101, 3} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb25:
  assume ($i107 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6104, 34} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6104, 40} true;
  assume {:verifier.code 0} true;
  $i110 := $load.i64($M.0, $p109);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6104, 51} true;
  assume {:verifier.code 0} true;
  $i111 := $add.i64($i110, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6104, 10} true;
  assume {:verifier.code 0} true;
  $p112 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6104, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p113, $i111);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6105, 3} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume !(($i107 == 1));
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6107, 14} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6107:14: warning: over-approximating bitwise operation and;
  $i114 := $and.i32($i8, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6107, 14} true;
  assume {:verifier.code 0} true;
  $i115 := $ne.i32($i114, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6107, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i115} true;
  goto $bb28, $bb29;
$bb28:
  assume ($i115 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6108, 34} true;
  assume {:verifier.code 0} true;
  $p116 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6108, 40} true;
  assume {:verifier.code 0} true;
  $i118 := $load.i64($M.0, $p117);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6108, 51} true;
  assume {:verifier.code 0} true;
  $i119 := $add.i64($i118, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6108, 10} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(8, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6108, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p121, $i119);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6109, 3} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb29:
  assume !(($i115 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6110, 33} true;
  assume {:verifier.code 0} true;
  $p122 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6110, 39} true;
  assume {:verifier.code 0} true;
  $i124 := $load.i64($M.0, $p123);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6110, 49} true;
  assume {:verifier.code 0} true;
  $i125 := $add.i64($i124, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6110, 10} true;
  assume {:verifier.code 0} true;
  $p126 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6110, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p127, $i125);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6111, 17} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6111:17: warning: over-approximating bitwise operation and;
  $i128 := $and.i32($i8, 8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6111, 22} true;
  assume {:verifier.code 0} true;
  $i129 := $ne.i32($i128, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6111, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i129} true;
  goto $bb31, $bb32;
$bb30:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6133, 3} true;
  assume {:verifier.code 0} true;
  call netif_wake_queue($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6134, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb31:
  assume ($i129 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6112, 43} true;
  assume {:verifier.code 0} true;
  $p130 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(128, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6112, 49} true;
  assume {:verifier.code 0} true;
  $i132 := $load.i64($M.0, $p131);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6112, 67} true;
  assume {:verifier.code 0} true;
  $i133 := $add.i64($i132, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6112, 12} true;
  assume {:verifier.code 0} true;
  $p134 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(128, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6112, 36} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p135, $i133);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6113, 36} true;
  assume {:verifier.code 0} true;
  $p136 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6113, 42} true;
  assume {:verifier.code 0} true;
  $i138 := $load.i64($M.0, $p137);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6113, 53} true;
  assume {:verifier.code 0} true;
  $i139 := $add.i64($i138, 16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6113, 12} true;
  assume {:verifier.code 0} true;
  $p140 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(72, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6113, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p141, $i139);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6114, 5} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb32:
  assume !(($i129 == 1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6116, 17} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6116:17: warning: over-approximating bitwise operation and;
  $i142 := $and.i32($i8, 16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6116, 23} true;
  assume {:verifier.code 0} true;
  $i143 := $ne.i32($i142, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6116, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i143} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i143 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6117, 43} true;
  assume {:verifier.code 0} true;
  $p144 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6117, 49} true;
  assume {:verifier.code 0} true;
  $i146 := $load.i64($M.0, $p145);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6117, 67} true;
  assume {:verifier.code 0} true;
  $i147 := $add.i64($i146, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6117, 12} true;
  assume {:verifier.code 0} true;
  $p148 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p149 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6117, 36} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p149, $i147);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6118, 5} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume !(($i143 == 1));
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6120, 17} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6120:17: warning: over-approximating bitwise operation and;
  $i150 := $and.i32($i8, 32);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6120, 23} true;
  assume {:verifier.code 0} true;
  $i151 := $ne.i32($i150, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6120, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i151} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i151 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6121, 40} true;
  assume {:verifier.code 0} true;
  $p152 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6121, 46} true;
  assume {:verifier.code 0} true;
  $i154 := $load.i64($M.0, $p153);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6121, 61} true;
  assume {:verifier.code 0} true;
  $i155 := $add.i64($i154, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6121, 12} true;
  assume {:verifier.code 0} true;
  $p156 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6121, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p157, $i155);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6122, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb38:
  assume !(($i151 == 1));
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6124, 17} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6124:17: warning: over-approximating bitwise operation and;
  $i158 := $and.i32($i8, 64);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6124, 23} true;
  assume {:verifier.code 0} true;
  $i159 := $ne.i32($i158, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6124, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i159} true;
  goto $bb40, $bb41;
$bb40:
  assume ($i159 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6125, 45} true;
  assume {:verifier.code 0} true;
  $p160 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p161 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(152, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6125, 51} true;
  assume {:verifier.code 0} true;
  $i162 := $load.i64($M.0, $p161);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6125, 71} true;
  assume {:verifier.code 0} true;
  $i163 := $add.i64($i162, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6125, 12} true;
  assume {:verifier.code 0} true;
  $p164 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(152, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6125, 38} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p165, $i163);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6126, 5} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb41:
  assume !(($i159 == 1));
  assume {:verifier.code 0} true;
  goto $bb42;
$bb42:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6128, 17} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6128:17: warning: over-approximating bitwise operation and;
  $i166 := $and.i32($i8, 128);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6128, 24} true;
  assume {:verifier.code 0} true;
  $i167 := $ne.i32($i166, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6128, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i167} true;
  goto $bb43, $bb44;
$bb43:
  assume ($i167 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6129, 42} true;
  assume {:verifier.code 0} true;
  $p168 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(160, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6129, 48} true;
  assume {:verifier.code 0} true;
  $i170 := $load.i64($M.0, $p169);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6129, 65} true;
  assume {:verifier.code 0} true;
  $i171 := $add.i64($i170, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6129, 12} true;
  assume {:verifier.code 0} true;
  $p172 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(160, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6129, 35} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p173, $i171);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6130, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume !(($i167 == 1));
  assume {:verifier.code 0} true;
  goto $bb45;
$bb45:
  assume {:verifier.code 0} true;
  goto $bb30;
}
const ei_tx_err: ref;
axiom (ei_tx_err == $sub.ref(0, 164662));
procedure  ei_tx_err($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6024, 21} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6024, 21} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(56, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6024, 21} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i64($M.0, $p1);
  call {:cexpr "e8390_base"} boogie_si_record_i64($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6025, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6027, 24} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6027, 50} true;
  assume {:verifier.code 0} true;
  $i5 := $add.i32($i4, 4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6027, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := inb($i5);
  call {:cexpr "tmp___0"} boogie_si_record_i8($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6029, 20} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i8.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6029, 40} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6029:40: warning: over-approximating bitwise operation and;
  $i8 := $and.i32($i7, 40);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6029, 20} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i32.i8($i8);
  call {:cexpr "tx_was_aborted"} boogie_si_record_i8($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6030, 18} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i64.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6030, 44} true;
  assume {:verifier.code 0} true;
  $i11 := $add.i32($i10, 7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6030, 3} true;
  assume {:verifier.code 0} true;
  call outb(8, $i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6031, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i8.i32($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6031, 37} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6031, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i13 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6032, 5} true;
  assume {:verifier.code 0} true;
  call ei_tx_intr($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6033, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i13 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6034, 33} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6034, 39} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i64($M.0, $p15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6034, 49} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i64($i16, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6034, 10} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6034, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p19, $i17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6035, 10} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i8.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6035, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6035:21: warning: over-approximating bitwise operation and;
  $i21 := $and.i32($i20, 16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6035, 27} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i32($i21, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6035, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6048, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume ($i22 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6036, 43} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6036, 49} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i64($M.0, $p24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6036, 67} true;
  assume {:verifier.code 0} true;
  $i26 := $add.i64($i25, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6036, 12} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6036, 36} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p28, $i26);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6037, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6039, 10} true;
  assume {:verifier.code 0} true;
  $i29 := $zext.i8.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6039, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6039:21: warning: over-approximating bitwise operation and;
  $i30 := $and.i32($i29, 64);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6039, 27} true;
  assume {:verifier.code 0} true;
  $i31 := $ne.i32($i30, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6039, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i31 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6040, 45} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(152, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6040, 51} true;
  assume {:verifier.code 0} true;
  $i34 := $load.i64($M.0, $p33);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6040, 71} true;
  assume {:verifier.code 0} true;
  $i35 := $add.i64($i34, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6040, 12} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(152, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6040, 38} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p37, $i35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6041, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6043, 9} true;
  assume {:verifier.code 0} true;
  $i38 := $sext.i8.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6043, 36} true;
  assume {:verifier.code 0} true;
  $i39 := $slt.i32($i38, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6043, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i39 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6044, 42} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(160, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6044, 48} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i64($M.0, $p41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6044, 65} true;
  assume {:verifier.code 0} true;
  $i43 := $add.i64($i42, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6044, 12} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
  $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(160, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6044, 35} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p45, $i43);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6045, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i39 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb3;
}
const ldv_netdev_alloc_skb_12: ref;
axiom (ldv_netdev_alloc_skb_12 == $sub.ref(0, 165694));
procedure  ldv_netdev_alloc_skb_12($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7269, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_netdev_alloc_skb_12:arg:length"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7269, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_skb_alloc();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7269, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7270, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const skb_reserve: ref;
axiom (skb_reserve == $sub.ref(0, 166726));
procedure  skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5318, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5318, 20} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5318, 20} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5318, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5318, 25} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p3, $mul.ref($i4, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5318, 8} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5318, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p6, $p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5319, 20} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5319, 20} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5319, 25} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i32($i8, $i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5319, 8} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5319, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p10, $i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5320, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_put: ref;
axiom (skb_put == $sub.ref(0, 167758));
procedure  skb_put($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7611, 27} true;
  assume {:verifier.code 0} true;
  call {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7611, 27} true;
  assume {:verifier.code 0} true;
  call $p2 := external_alloc();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7611, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const eth_type_trans: ref;
axiom (eth_type_trans == $sub.ref(0, 168790));
procedure  eth_type_trans($p0: ref, $p1: ref)
  returns ($r: i16)
{
  var $i2: i16;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7561, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7561, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_ushort();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7561, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const skb_defer_rx_timestamp: ref;
axiom (skb_defer_rx_timestamp == $sub.ref(0, 169822));
procedure  skb_defer_rx_timestamp($p0: ref)
  returns ($r: i1)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7607, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7607, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7607, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ldv_netif_rx_13: ref;
axiom (ldv_netif_rx_13 == $sub.ref(0, 170854));
procedure  ldv_netif_rx_13($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7277, 26} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7277, 26} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7277, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := ldv_skb_free_int($p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7278, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const netdev_notice: ref;
axiom (netdev_notice == $sub.ref(0, 171886));
procedure  netdev_notice.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7592, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7592, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7592, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_skb_free_int: ref;
axiom (ldv_skb_free_int == $sub.ref(0, 172918));
procedure  ldv_skb_free_int($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7450, 18} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7450, 18} true;
  assume {:verifier.code 0} true;
  $p1 := $M.15;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7450, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7450, 3} true;
  assume {:verifier.code 0} true;
  call ldv_set_remove($p1, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7451, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const ldv_set_remove: ref;
axiom (ldv_set_remove == $sub.ref(0, 173950));
procedure  ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7327, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7327, 13} true;
  assume {:verifier.code 0} true;
  $i2 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7327, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32(0, $i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7327, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7327, 9} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7327, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7329, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 1);
  goto $bb7;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7328, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7331, 25} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.i32.i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7331, 25} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7331, 25} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.17, $p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7331, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7331, 40} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7331, 37} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i64($i9, $i10);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7331, 9} true;
  assume {:verifier.code 0} true;
  $i12 := $i4;
  assume {:branchcond $i11} true;
  goto $bb8, $bb9;
$bb6:
  assume !(($i15 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7327, 9} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7338, 21} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i5, $sub.i32(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7338, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb12, $bb13;
$bb8:
  assume ($i11 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7333, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $i12;
  goto $bb7;
$bb9:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7336, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i32($i4, 1);
  call {:cexpr "i"} boogie_si_record_i32($i13);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7327, 13} true;
  assume {:verifier.code 0} true;
  $i14 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7327, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $slt.i32($i13, $i14);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7327, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb11, $bb6;
$bb11:
  assume ($i15 == 1);
  assume {:verifier.code 0} true;
  $i4 := $i13;
  goto $bb4;
$bb12:
  assume ($i16 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7339, 23} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i5, 1);
  call {:cexpr "i"} boogie_si_record_i32($i17);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7341, 15} true;
  assume {:verifier.code 0} true;
  $i18 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7341, 13} true;
  assume {:verifier.code 0} true;
  $i19 := $slt.i32($i17, $i18);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7341, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb14, $bb15;
$bb13:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb14:
  assume ($i19 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7341, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $i17;
  goto $bb17;
$bb15:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7341, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i19 == 1));
  goto $bb16;
$bb16:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7343, 9} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb17:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7342, 7} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7345, 25} true;
  assume {:verifier.code 0} true;
  $i21 := $sext.i32.i64($i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7345, 25} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7345, 25} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.17, $p22);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7345, 18} true;
  assume {:verifier.code 0} true;
  $i24 := $sub.i32($i20, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7345, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.i32.i64($i24);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7345, 7} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7345, 23} true;
  assume {:verifier.code 0} true;
  $M.17 := $store.ref($M.17, $p26, $p23);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7346, 13} true;
  assume {:verifier.code 0} true;
  $i27 := $add.i32($i20, 1);
  call {:cexpr "i"} boogie_si_record_i32($i27);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7341, 15} true;
  assume {:verifier.code 0} true;
  $i28 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7341, 13} true;
  assume {:verifier.code 0} true;
  $i29 := $slt.i32($i27, $i28);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7341, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb21, $bb19;
$bb19:
  assume !(($i29 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7341, 11} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb20:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7348, 18} true;
  assume {:verifier.code 0} true;
  $i30 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7348, 29} true;
  assume {:verifier.code 0} true;
  $i31 := $sub.i32($i30, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7348, 16} true;
  assume {:verifier.code 0} true;
  $M.16 := $i31;
  call {:cexpr "last_index"} boogie_si_record_i32($i31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7349, 3} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume ($i29 == 1);
  assume {:verifier.code 0} true;
  $i20 := $i27;
  goto $bb17;
$bb22:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7351, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const external_alloc: ref;
axiom (external_alloc == $sub.ref(0, 174982));
procedure  external_alloc()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7627, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7627, 10} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet_pointer();
  call {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7627, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const ldv_skb_alloc: ref;
axiom (ldv_skb_alloc == $sub.ref(0, 176014));
procedure  ldv_skb_alloc()
  returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7423, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7423, 13} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(232);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7424, 9} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7424, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7425, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.ref($p2, $0.ref);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7425, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7428, 17} true;
  assume {:verifier.code 0} true;
  $p5 := $M.15;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7428, 5} true;
  assume {:verifier.code 0} true;
  call ldv_set_add($p5, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7429, 12} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7429, 5} true;
  assume {:verifier.code 0} true;
  $p4 := $p0;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7426, 5} true;
  assume {:verifier.code 0} true;
  $p4 := $0.ref;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7432, 1} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const ldv_zalloc: ref;
axiom (ldv_zalloc == $sub.ref(0, 177046));
procedure  ldv_zalloc($i0: i64)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5384, 13} true;
  assume {:verifier.code 1} true;
  call {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5384, 13} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5385, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5385, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5386, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5388, 11} true;
  assume {:verifier.code 0} true;
  call $p4 := calloc(1, $i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5390, 23} true;
  assume {:verifier.code 1} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5390, 41} true;
  assume {:verifier.code 1} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5390, 41} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5390, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5391, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $p4;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5394, 1} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const ldv_set_add: ref;
axiom (ldv_set_add == $sub.ref(0, 178078));
procedure  ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7300, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7300, 13} true;
  assume {:verifier.code 0} true;
  $i2 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7300, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32(0, $i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7300, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7300, 9} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7300, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7302, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7301, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7304, 25} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7304, 25} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7304, 25} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.17, $p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7304, 9} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7304, 40} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7304, 37} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i64($i8, $i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7304, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb8, $bb9;
$bb6:
  assume !(($i13 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7300, 9} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb7:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7310, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7310, 18} true;
  assume {:verifier.code 0} true;
  $i15 := $slt.i32($i14, 15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7310, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb13, $bb14;
$bb8:
  assume ($i10 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7305, 7} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7317, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb11:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7308, 11} true;
  assume {:verifier.code 0} true;
  $i11 := $add.i32($i4, 1);
  call {:cexpr "i"} boogie_si_record_i32($i11);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7300, 13} true;
  assume {:verifier.code 0} true;
  $i12 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7300, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $slt.i32($i11, $i12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7300, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb12, $bb6;
$bb12:
  assume ($i13 == 1);
  assume {:verifier.code 0} true;
  $i4 := $i11;
  goto $bb4;
$bb13:
  assume ($i15 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7311, 14} true;
  assume {:verifier.code 0} true;
  $i16 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7311, 5} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7311, 5} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7311, 26} true;
  assume {:verifier.code 0} true;
  $M.17 := $store.ref($M.17, $p18, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7312, 18} true;
  assume {:verifier.code 0} true;
  $i19 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7312, 29} true;
  assume {:verifier.code 0} true;
  $i20 := $add.i32($i19, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7312, 16} true;
  assume {:verifier.code 0} true;
  $M.16 := $i20;
  call {:cexpr "last_index"} boogie_si_record_i32($i20);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7313, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7315, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
}
const __const_udelay: ref;
axiom (__const_udelay == $sub.ref(0, 179110));
procedure  __const_udelay($i0: i64)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7498, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7498, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ei_poll: ref;
axiom (ei_poll == $sub.ref(0, 180142));
procedure  ei_poll($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6710, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6710, 3} true;
  assume {:verifier.code 0} true;
  call __ei_poll($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6711, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __ei_poll: ref;
axiom (__ei_poll == $sub.ref(0, 181174));
procedure  __ei_poll($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6009, 35} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6009, 35} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6009, 35} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.0, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6009, 3} true;
  assume {:verifier.code 0} true;
  call disable_irq($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6010, 23} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6010, 23} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, $p3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6010, 28} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6010, 3} true;
  assume {:verifier.code 0} true;
  call $i6 := __ei_interrupt($i4, $p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6011, 34} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(64, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6011, 34} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6011, 3} true;
  assume {:verifier.code 0} true;
  call enable_irq($i8);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6012, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const disable_irq: ref;
axiom (disable_irq == $sub.ref(0, 182206));
procedure  disable_irq($i0: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7543, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "disable_irq:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7543, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const eth_mac_addr: ref;
axiom (eth_mac_addr == $sub.ref(0, 183238));
procedure  eth_mac_addr($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7557, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7557, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7557, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const eth_validate_addr: ref;
axiom (eth_validate_addr == $sub.ref(0, 184270));
procedure  eth_validate_addr($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7565, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7565, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7565, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const eth_change_mtu: ref;
axiom (eth_change_mtu == $sub.ref(0, 185302));
procedure  eth_change_mtu($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7553, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "eth_change_mtu:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7553, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7553, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __alloc_ei_netdev: ref;
axiom (__alloc_ei_netdev == $sub.ref(0, 186334));
procedure  __alloc_ei_netdev($i0: i32)
  returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6736, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__alloc_ei_netdev:arg:size"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6736, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := ____alloc_ei_netdev($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6738, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6738, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i64($i2, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6738, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6739, 10} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(488, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6739, 21} true;
  assume {:verifier.code 0} true;
  $M.18 := $store.ref($M.18, $p4, ei_netdev_ops);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6740, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6742, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const ____alloc_ei_netdev: ref;
axiom (____alloc_ei_netdev == $sub.ref(0, 187366));
procedure  ____alloc_ei_netdev($i0: i32)
  returns ($r: ref)
{
  var $i1: i32;
  var $p2: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6507, 53} true;
  assume {:verifier.code 0} true;
  call {:cexpr "____alloc_ei_netdev:arg:size"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6507, 53} true;
  assume {:verifier.code 0} true;
  $i1 := $add.i32($i0, 192);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6507, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := alloc_netdev_mqs($i1, .str.31, ethdev_setup, 1, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6509, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const ethdev_setup: ref;
axiom (ethdev_setup == $sub.ref(0, 188398));
procedure  ethdev_setup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6485, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6485, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6486, 14} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6487, 13} true;
  assume {:verifier.code 0} true;
  $i4 := $M.19;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6487, 24} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i:6487:24: warning: over-approximating bitwise operation and;
  $i5 := $and.i32($i4, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6487, 24} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6487, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6488, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $M.20;
  call {:cexpr "tmp___0"} boogie_si_record_i32($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6489, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $M.20;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6489, 39} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i32($i8, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6489, 21} true;
  assume {:verifier.code 0} true;
  $M.20 := $i9;
  call {:cexpr "version_printed"} boogie_si_record_i32($i9);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6490, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i32($i7, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6490, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i10 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6491, 7} true;
  assume {:verifier.code 0} true;
  call $i11 := printk.ref.ref(.str.32, version);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6492, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6494, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6496, 3} true;
  assume {:verifier.code 0} true;
  call ether_setup($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6497, 30} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(104, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6497, 3} true;
  assume {:verifier.code 0} true;
  call $p13 := spinlock_check($p12);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6498, 36} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(104, 1));
  $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(104, 1)), $mul.ref(0, 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6498, 55} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p15);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6498, 3} true;
  assume {:verifier.code 0} true;
  call __raw_spin_lock_init($p16, .str.33, $p1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6500, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const alloc_netdev_mqs: ref;
axiom (alloc_netdev_mqs == $sub.ref(0, 189430));
procedure  alloc_netdev_mqs($i0: i32, $p1: ref, $p2: ref, $i3: i32, $i4: i32)
  returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7528, 31} true;
  assume {:verifier.code 0} true;
  call {:cexpr "alloc_netdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
  call {:cexpr "alloc_netdev_mqs:arg:arg3"} boogie_si_record_i32($i3);
  call {:cexpr "alloc_netdev_mqs:arg:arg4"} boogie_si_record_i32($i4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7528, 31} true;
  assume {:verifier.code 0} true;
  call $p5 := external_alloc();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7528, 10} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7528, 3} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
}
const ether_setup: ref;
axiom (ether_setup == $sub.ref(0, 190462));
procedure  ether_setup($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7568, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7568, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __raw_spin_lock_init: ref;
axiom (__raw_spin_lock_init == $sub.ref(0, 191494));
procedure  __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7511, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7511, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const NS8390_init: ref;
axiom (NS8390_init == $sub.ref(0, 192526));
procedure  NS8390_init($p0: ref, $i1: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6756, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "NS8390_init:arg:startp"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6756, 3} true;
  assume {:verifier.code 0} true;
  call __NS8390_init($p0, $i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6757, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 193558));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const ldv_error: ref;
axiom (ldv_error == $sub.ref(0, 194590));
procedure  ldv_error()
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5421, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5421, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5423, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5425, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_net_device_ops_1: ref;
axiom (ldv_net_device_ops_1 == $sub.ref(0, 195622));
procedure  ldv_net_device_ops_1()
{
  var $p0: ref;
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6793, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6793, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(3264);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6794, 26} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6794, 24} true;
  assume {:verifier.code 0} true;
  $M.21 := $p0;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6795, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_net_device_ops_2: ref;
axiom (ldv_net_device_ops_2 == $sub.ref(0, 196654));
procedure  ldv_net_device_ops_2()
{
  var $p0: ref;
  var $p1: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6802, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6802, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(3264);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6803, 26} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6803, 24} true;
  assume {:verifier.code 0} true;
  $M.21 := $p0;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6804, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 197686));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $i212: i32;
  var $i213: i32;
  var $i214: i1;
  var $p215: ref;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i244: i32;
  var $i245: i1;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $i249: i32;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $i253: i32;
  var $i254: i32;
  var $i255: i32;
$bb0:
  call $initialize();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6826, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6826, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(232);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6827, 13} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6828, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_zalloc(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6830, 13} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  call {:cexpr "tmp___1"} boogie_si_record_i32($i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6832, 13} true;
  assume {:verifier.code 0} true;
  call $p4 := ldv_zalloc(232);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6833, 13} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6834, 13} true;
  assume {:verifier.code 0} true;
  call $p6 := ldv_zalloc(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6836, 13} true;
  assume {:verifier.code 1} true;
  call $i7 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
  call {:cexpr "tmp___4"} boogie_si_record_i32($i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6838, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6839, 24} true;
  assume {:verifier.code 0} true;
  $M.22 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6840, 11} true;
  assume {:verifier.code 0} true;
  $M.23 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6841, 24} true;
  assume {:verifier.code 0} true;
  $M.24 := 1;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6842, 24} true;
  assume {:verifier.code 0} true;
  $M.25 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6842, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6844, 13} true;
  assume {:verifier.code 1} true;
  call $i8 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
  call {:cexpr "tmp___5"} boogie_si_record_i32($i8);
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  $i9 := $slt.i32($i8, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i9 == 1);
  assume {:verifier.code 0} true;
  $i12 := $eq.i32($i8, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb10, $bb11;
$bb4:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  $i10 := $slt.i32($i8, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7015, 7} true;
  assume {:verifier.code 0} true;
  $i126 := $M.24;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7015, 28} true;
  assume {:verifier.code 0} true;
  $i127 := $ne.i32($i126, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7015, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i127} true;
  goto $bb128, $bb129;
$bb6:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i8, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i11 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7053, 7} true;
  assume {:verifier.code 0} true;
  $i143 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7053, 28} true;
  assume {:verifier.code 0} true;
  $i144 := $ne.i32($i143, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7053, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i144} true;
  goto $bb158, $bb159;
$bb8:
  assume {:verifier.code 0} true;
  assume !(($i11 == 1));
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  goto $bb273;
$bb10:
  assume ($i12 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6847, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6847, 28} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i13, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6847, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb12, $bb13;
$bb11:
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb9;
$bb12:
  assume ($i14 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6848, 15} true;
  assume {:verifier.code 1} true;
  call $i15 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
  call {:cexpr "tmp___6"} boogie_si_record_i32($i15);
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb126;
$bb14:
  assume {:verifier.code 0} true;
  $i16 := $slt.i32($i15, 6);
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i16 == 1);
  assume {:verifier.code 0} true;
  $i23 := $slt.i32($i15, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb30, $bb31;
$bb16:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  $i17 := $slt.i32($i15, 9);
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i17 == 1);
  assume {:verifier.code 0} true;
  $i21 := $slt.i32($i15, 7);
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb26, $bb27;
$bb18:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  $i18 := $slt.i32($i15, 10);
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i18 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6972, 9} true;
  assume {:verifier.code 0} true;
  $i105 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6972, 30} true;
  assume {:verifier.code 0} true;
  $i106 := $eq.i32($i105, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6972, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i106} true;
  goto $bb106, $bb107;
$bb20:
  assume !(($i18 == 1));
  assume {:verifier.code 0} true;
  $i19 := $slt.i32($i15, 11);
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i19 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6989, 9} true;
  assume {:verifier.code 0} true;
  $i114 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6989, 30} true;
  assume {:verifier.code 0} true;
  $i115 := $eq.i32($i114, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6989, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i115} true;
  goto $bb115, $bb116;
$bb22:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  $i20 := $eq.i32($i15, 11);
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i20 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7000, 9} true;
  assume {:verifier.code 0} true;
  $i121 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7000, 30} true;
  assume {:verifier.code 0} true;
  $i122 := $eq.i32($i121, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7000, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i122} true;
  goto $bb121, $bb122;
$bb24:
  assume {:verifier.code 0} true;
  assume !(($i20 == 1));
  goto $bb25;
$bb25:
  assume {:verifier.code 0} true;
  goto $bb124;
$bb26:
  assume ($i21 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6938, 9} true;
  assume {:verifier.code 0} true;
  $i83 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6938, 30} true;
  assume {:verifier.code 0} true;
  $i84 := $eq.i32($i83, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6938, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb88, $bb89;
$bb27:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  $i22 := $slt.i32($i15, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb28, $bb29;
$bb28:
  assume ($i22 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6948, 9} true;
  assume {:verifier.code 0} true;
  $i89 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6948, 30} true;
  assume {:verifier.code 0} true;
  $i90 := $eq.i32($i89, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6948, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i90} true;
  goto $bb94, $bb95;
$bb29:
  assume !(($i22 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6955, 9} true;
  assume {:verifier.code 0} true;
  $i93 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6955, 30} true;
  assume {:verifier.code 0} true;
  $i94 := $eq.i32($i93, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6955, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i94} true;
  goto $bb97, $bb98;
$bb30:
  assume ($i23 == 1);
  assume {:verifier.code 0} true;
  $i26 := $slt.i32($i15, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb36, $bb37;
$bb31:
  assume !(($i23 == 1));
  assume {:verifier.code 0} true;
  $i24 := $slt.i32($i15, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i24 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6892, 9} true;
  assume {:verifier.code 0} true;
  $i54 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6892, 30} true;
  assume {:verifier.code 0} true;
  $i55 := $eq.i32($i54, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6892, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb64, $bb65;
$bb33:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  $i25 := $slt.i32($i15, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i25 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6909, 9} true;
  assume {:verifier.code 0} true;
  $i63 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6909, 30} true;
  assume {:verifier.code 0} true;
  $i64 := $eq.i32($i63, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6909, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb73, $bb74;
$bb35:
  assume !(($i25 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6926, 9} true;
  assume {:verifier.code 0} true;
  $i75 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6926, 30} true;
  assume {:verifier.code 0} true;
  $i76 := $eq.i32($i75, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6926, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i76} true;
  goto $bb82, $bb83;
$bb36:
  assume ($i26 == 1);
  assume {:verifier.code 0} true;
  $i28 := $eq.i32($i15, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb40, $bb41;
$bb37:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  $i27 := $slt.i32($i15, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb38, $bb39;
$bb38:
  assume ($i27 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6858, 9} true;
  assume {:verifier.code 0} true;
  $i33 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6858, 30} true;
  assume {:verifier.code 0} true;
  $i34 := $eq.i32($i33, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6858, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb46, $bb47;
$bb39:
  assume !(($i27 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6875, 9} true;
  assume {:verifier.code 0} true;
  $i42 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6875, 30} true;
  assume {:verifier.code 0} true;
  $i43 := $eq.i32($i42, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6875, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb55, $bb56;
$bb40:
  assume ($i28 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6851, 9} true;
  assume {:verifier.code 0} true;
  $i29 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6851, 30} true;
  assume {:verifier.code 0} true;
  $i30 := $eq.i32($i29, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6851, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb42, $bb43;
$bb41:
  assume {:verifier.code 0} true;
  assume !(($i28 == 1));
  goto $bb25;
$bb42:
  assume ($i30 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6852, 16} true;
  assume {:verifier.code 0} true;
  $p31 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6852, 7} true;
  assume {:verifier.code 0} true;
  call $i32 := ei_close($p31);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6853, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6854, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb43:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6856, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb45:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7011, 3} true;
  assume {:verifier.code 0} true;
  goto $bb126;
$bb46:
  assume ($i34 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6859, 29} true;
  assume {:verifier.code 0} true;
  $p35 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6859, 7} true;
  assume {:verifier.code 0} true;
  call ei_set_multicast_list($p35);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6860, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6861, 5} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb47:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  goto $bb48;
$bb48:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6863, 9} true;
  assume {:verifier.code 0} true;
  $i36 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6863, 30} true;
  assume {:verifier.code 0} true;
  $i37 := $eq.i32($i36, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6863, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb49, $bb50;
$bb49:
  assume ($i37 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6864, 29} true;
  assume {:verifier.code 0} true;
  $p38 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6864, 7} true;
  assume {:verifier.code 0} true;
  call ei_set_multicast_list($p38);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6865, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 3;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6866, 5} true;
  assume {:verifier.code 0} true;
  goto $bb51;
$bb50:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  goto $bb51;
$bb51:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6868, 9} true;
  assume {:verifier.code 0} true;
  $i39 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6868, 30} true;
  assume {:verifier.code 0} true;
  $i40 := $eq.i32($i39, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6868, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb52, $bb53;
$bb52:
  assume ($i40 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6869, 29} true;
  assume {:verifier.code 0} true;
  $p41 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6869, 7} true;
  assume {:verifier.code 0} true;
  call ei_set_multicast_list($p41);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6870, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6871, 5} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb53:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  goto $bb54;
$bb54:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6873, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb55:
  assume ($i43 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6876, 25} true;
  assume {:verifier.code 0} true;
  $p44 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6876, 7} true;
  assume {:verifier.code 0} true;
  call $i45 := eth_validate_addr($p44);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6877, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6878, 5} true;
  assume {:verifier.code 0} true;
  goto $bb57;
$bb56:
  assume !(($i43 == 1));
  assume {:verifier.code 0} true;
  goto $bb57;
$bb57:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6880, 9} true;
  assume {:verifier.code 0} true;
  $i46 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6880, 30} true;
  assume {:verifier.code 0} true;
  $i47 := $eq.i32($i46, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6880, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i47} true;
  goto $bb58, $bb59;
$bb58:
  assume ($i47 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6881, 25} true;
  assume {:verifier.code 0} true;
  $p48 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6881, 7} true;
  assume {:verifier.code 0} true;
  call $i49 := eth_validate_addr($p48);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6882, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 3;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6883, 5} true;
  assume {:verifier.code 0} true;
  goto $bb60;
$bb59:
  assume !(($i47 == 1));
  assume {:verifier.code 0} true;
  goto $bb60;
$bb60:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6885, 9} true;
  assume {:verifier.code 0} true;
  $i50 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6885, 30} true;
  assume {:verifier.code 0} true;
  $i51 := $eq.i32($i50, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6885, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb61, $bb62;
$bb61:
  assume ($i51 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6886, 25} true;
  assume {:verifier.code 0} true;
  $p52 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6886, 7} true;
  assume {:verifier.code 0} true;
  call $i53 := eth_validate_addr($p52);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6887, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6888, 5} true;
  assume {:verifier.code 0} true;
  goto $bb63;
$bb62:
  assume !(($i51 == 1));
  assume {:verifier.code 0} true;
  goto $bb63;
$bb63:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6890, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb64:
  assume ($i55 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6893, 15} true;
  assume {:verifier.code 0} true;
  $p56 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6893, 7} true;
  assume {:verifier.code 0} true;
  call ei_poll($p56);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6894, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6895, 5} true;
  assume {:verifier.code 0} true;
  goto $bb66;
$bb65:
  assume !(($i55 == 1));
  assume {:verifier.code 0} true;
  goto $bb66;
$bb66:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6897, 9} true;
  assume {:verifier.code 0} true;
  $i57 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6897, 30} true;
  assume {:verifier.code 0} true;
  $i58 := $eq.i32($i57, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6897, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i58} true;
  goto $bb67, $bb68;
$bb67:
  assume ($i58 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6898, 15} true;
  assume {:verifier.code 0} true;
  $p59 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6898, 7} true;
  assume {:verifier.code 0} true;
  call ei_poll($p59);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6899, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 3;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6900, 5} true;
  assume {:verifier.code 0} true;
  goto $bb69;
$bb68:
  assume !(($i58 == 1));
  assume {:verifier.code 0} true;
  goto $bb69;
$bb69:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6902, 9} true;
  assume {:verifier.code 0} true;
  $i60 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6902, 30} true;
  assume {:verifier.code 0} true;
  $i61 := $eq.i32($i60, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6902, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb70, $bb71;
$bb70:
  assume ($i61 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6903, 15} true;
  assume {:verifier.code 0} true;
  $p62 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6903, 7} true;
  assume {:verifier.code 0} true;
  call ei_poll($p62);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6904, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6905, 5} true;
  assume {:verifier.code 0} true;
  goto $bb72;
$bb71:
  assume !(($i61 == 1));
  assume {:verifier.code 0} true;
  goto $bb72;
$bb72:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6907, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb73:
  assume ($i64 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6910, 20} true;
  assume {:verifier.code 0} true;
  $p65 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6910, 7} true;
  assume {:verifier.code 0} true;
  call $p66 := ei_get_stats($p65);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6911, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6912, 5} true;
  assume {:verifier.code 0} true;
  goto $bb75;
$bb74:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  goto $bb75;
$bb75:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6914, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6914, 30} true;
  assume {:verifier.code 0} true;
  $i68 := $eq.i32($i67, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6914, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb76, $bb77;
$bb76:
  assume ($i68 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6915, 20} true;
  assume {:verifier.code 0} true;
  $p69 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6915, 7} true;
  assume {:verifier.code 0} true;
  call $p70 := ei_get_stats($p69);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6916, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 3;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6917, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb77:
  assume !(($i68 == 1));
  assume {:verifier.code 0} true;
  goto $bb78;
$bb78:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6919, 9} true;
  assume {:verifier.code 0} true;
  $i71 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6919, 30} true;
  assume {:verifier.code 0} true;
  $i72 := $eq.i32($i71, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6919, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i72} true;
  goto $bb79, $bb80;
$bb79:
  assume ($i72 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6920, 20} true;
  assume {:verifier.code 0} true;
  $p73 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6920, 7} true;
  assume {:verifier.code 0} true;
  call $p74 := ei_get_stats($p73);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6921, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6922, 5} true;
  assume {:verifier.code 0} true;
  goto $bb81;
$bb80:
  assume !(($i72 == 1));
  assume {:verifier.code 0} true;
  goto $bb81;
$bb81:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6924, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb82:
  assume ($i76 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6927, 22} true;
  assume {:verifier.code 0} true;
  $p77 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6927, 7} true;
  assume {:verifier.code 0} true;
  call $i78 := eth_change_mtu($p77, $i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6928, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 3;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6929, 5} true;
  assume {:verifier.code 0} true;
  goto $bb84;
$bb83:
  assume !(($i76 == 1));
  assume {:verifier.code 0} true;
  goto $bb84;
$bb84:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6931, 9} true;
  assume {:verifier.code 0} true;
  $i79 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6931, 30} true;
  assume {:verifier.code 0} true;
  $i80 := $eq.i32($i79, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6931, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb85, $bb86;
$bb85:
  assume ($i80 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6932, 22} true;
  assume {:verifier.code 0} true;
  $p81 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6932, 7} true;
  assume {:verifier.code 0} true;
  call $i82 := eth_change_mtu($p81, $i3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6933, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6934, 5} true;
  assume {:verifier.code 0} true;
  goto $bb87;
$bb86:
  assume !(($i80 == 1));
  assume {:verifier.code 0} true;
  goto $bb87;
$bb87:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6936, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb88:
  assume ($i84 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6939, 30} true;
  assume {:verifier.code 0} true;
  $p85 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6939, 22} true;
  assume {:verifier.code 0} true;
  call $i86 := ei_open($p85);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6939, 20} true;
  assume {:verifier.code 0} true;
  $M.26 := $i86;
  call {:cexpr "ldv_retval_1"} boogie_si_record_i32($i86);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6940, 11} true;
  assume {:verifier.code 0} true;
  $i87 := $M.26;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6940, 24} true;
  assume {:verifier.code 0} true;
  $i88 := $eq.i32($i87, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6940, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb90, $bb91;
$bb89:
  assume !(($i84 == 1));
  assume {:verifier.code 0} true;
  goto $bb93;
$bb90:
  assume ($i88 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6941, 30} true;
  assume {:verifier.code 0} true;
  $M.22 := 3;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6942, 7} true;
  assume {:verifier.code 0} true;
  goto $bb92;
$bb91:
  assume !(($i88 == 1));
  assume {:verifier.code 0} true;
  goto $bb92;
$bb92:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6944, 5} true;
  assume {:verifier.code 0} true;
  goto $bb93;
$bb93:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6946, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb94:
  assume ($i90 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6949, 30} true;
  assume {:verifier.code 0} true;
  $p91 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6949, 7} true;
  assume {:verifier.code 0} true;
  call $i92 := ei_start_xmit($p1, $p91);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6950, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 3;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6951, 5} true;
  assume {:verifier.code 0} true;
  goto $bb96;
$bb95:
  assume !(($i90 == 1));
  assume {:verifier.code 0} true;
  goto $bb96;
$bb96:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6953, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb97:
  assume ($i94 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6956, 20} true;
  assume {:verifier.code 0} true;
  $p95 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6956, 7} true;
  assume {:verifier.code 0} true;
  call $i96 := eth_mac_addr($p95, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6957, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6958, 5} true;
  assume {:verifier.code 0} true;
  goto $bb99;
$bb98:
  assume !(($i94 == 1));
  assume {:verifier.code 0} true;
  goto $bb99;
$bb99:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6960, 9} true;
  assume {:verifier.code 0} true;
  $i97 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6960, 30} true;
  assume {:verifier.code 0} true;
  $i98 := $eq.i32($i97, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6960, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i98} true;
  goto $bb100, $bb101;
$bb100:
  assume ($i98 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6961, 20} true;
  assume {:verifier.code 0} true;
  $p99 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6961, 7} true;
  assume {:verifier.code 0} true;
  call $i100 := eth_mac_addr($p99, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6962, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 3;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6963, 5} true;
  assume {:verifier.code 0} true;
  goto $bb102;
$bb101:
  assume !(($i98 == 1));
  assume {:verifier.code 0} true;
  goto $bb102;
$bb102:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6965, 9} true;
  assume {:verifier.code 0} true;
  $i101 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6965, 30} true;
  assume {:verifier.code 0} true;
  $i102 := $eq.i32($i101, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6965, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i102} true;
  goto $bb103, $bb104;
$bb103:
  assume ($i102 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6966, 20} true;
  assume {:verifier.code 0} true;
  $p103 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6966, 7} true;
  assume {:verifier.code 0} true;
  call $i104 := eth_mac_addr($p103, $p2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6967, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6968, 5} true;
  assume {:verifier.code 0} true;
  goto $bb105;
$bb104:
  assume !(($i102 == 1));
  assume {:verifier.code 0} true;
  goto $bb105;
$bb105:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6970, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb106:
  assume ($i106 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6973, 21} true;
  assume {:verifier.code 0} true;
  $p107 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6973, 7} true;
  assume {:verifier.code 0} true;
  call ei_tx_timeout($p107);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6974, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6975, 5} true;
  assume {:verifier.code 0} true;
  goto $bb108;
$bb107:
  assume !(($i106 == 1));
  assume {:verifier.code 0} true;
  goto $bb108;
$bb108:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6977, 9} true;
  assume {:verifier.code 0} true;
  $i108 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6977, 30} true;
  assume {:verifier.code 0} true;
  $i109 := $eq.i32($i108, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6977, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i109} true;
  goto $bb109, $bb110;
$bb109:
  assume ($i109 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6978, 21} true;
  assume {:verifier.code 0} true;
  $p110 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6978, 7} true;
  assume {:verifier.code 0} true;
  call ei_tx_timeout($p110);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6979, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 3;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6980, 5} true;
  assume {:verifier.code 0} true;
  goto $bb111;
$bb110:
  assume !(($i109 == 1));
  assume {:verifier.code 0} true;
  goto $bb111;
$bb111:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6982, 9} true;
  assume {:verifier.code 0} true;
  $i111 := $M.22;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6982, 30} true;
  assume {:verifier.code 0} true;
  $i112 := $eq.i32($i111, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6982, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i112} true;
  goto $bb112, $bb113;
$bb112:
  assume ($i112 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6983, 21} true;
  assume {:verifier.code 0} true;
  $p113 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6983, 7} true;
  assume {:verifier.code 0} true;
  call ei_tx_timeout($p113);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6984, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6985, 5} true;
  assume {:verifier.code 0} true;
  goto $bb114;
$bb113:
  assume !(($i112 == 1));
  assume {:verifier.code 0} true;
  goto $bb114;
$bb114:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6987, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb115:
  assume ($i115 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6990, 22} true;
  assume {:verifier.code 0} true;
  call $i116 := ldv_ndo_init_1();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6990, 20} true;
  assume {:verifier.code 0} true;
  $M.27 := $i116;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32($i116);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6991, 11} true;
  assume {:verifier.code 0} true;
  $i117 := $M.27;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6991, 24} true;
  assume {:verifier.code 0} true;
  $i118 := $eq.i32($i117, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6991, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i118} true;
  goto $bb117, $bb118;
$bb116:
  assume !(($i115 == 1));
  assume {:verifier.code 0} true;
  goto $bb120;
$bb117:
  assume ($i118 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6992, 30} true;
  assume {:verifier.code 0} true;
  $M.22 := 2;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6993, 19} true;
  assume {:verifier.code 0} true;
  $i119 := $M.23;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6993, 27} true;
  assume {:verifier.code 0} true;
  $i120 := $add.i32($i119, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6993, 17} true;
  assume {:verifier.code 0} true;
  $M.23 := $i120;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i120);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6994, 7} true;
  assume {:verifier.code 0} true;
  goto $bb119;
$bb118:
  assume !(($i118 == 1));
  assume {:verifier.code 0} true;
  goto $bb119;
$bb119:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6996, 5} true;
  assume {:verifier.code 0} true;
  goto $bb120;
$bb120:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6998, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb121:
  assume ($i122 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7001, 7} true;
  assume {:verifier.code 0} true;
  call $i123 := ldv_ndo_uninit_1();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7002, 28} true;
  assume {:verifier.code 0} true;
  $M.22 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7003, 17} true;
  assume {:verifier.code 0} true;
  $i124 := $M.23;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7003, 25} true;
  assume {:verifier.code 0} true;
  $i125 := $sub.i32($i124, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7003, 15} true;
  assume {:verifier.code 0} true;
  $M.23 := $i125;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i125);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7004, 5} true;
  assume {:verifier.code 0} true;
  goto $bb123;
$bb122:
  assume !(($i122 == 1));
  assume {:verifier.code 0} true;
  goto $bb123;
$bb123:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7006, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb124:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7008, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7009, 5} true;
  assume {:verifier.code 0} true;
  goto $bb125;
$bb125:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7009, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb126:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7013, 3} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb127:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7224, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb128:
  assume ($i127 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7016, 15} true;
  assume {:verifier.code 1} true;
  call $i128 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i128);
  call {:cexpr "tmp___7"} boogie_si_record_i32($i128);
  assume {:verifier.code 0} true;
  goto $bb130;
$bb129:
  assume !(($i127 == 1));
  assume {:verifier.code 0} true;
  goto $bb157;
$bb130:
  assume {:verifier.code 0} true;
  $i129 := $slt.i32($i128, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i129} true;
  goto $bb131, $bb132;
$bb131:
  assume ($i129 == 1);
  assume {:verifier.code 0} true;
  $i131 := $eq.i32($i128, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i131} true;
  goto $bb136, $bb137;
$bb132:
  assume !(($i129 == 1));
  assume {:verifier.code 0} true;
  $i130 := $eq.i32($i128, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i130} true;
  goto $bb133, $bb134;
$bb133:
  assume ($i130 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7027, 9} true;
  assume {:verifier.code 0} true;
  $i136 := $M.24;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7027, 30} true;
  assume {:verifier.code 0} true;
  $i137 := $eq.i32($i136, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7027, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i137} true;
  goto $bb146, $bb147;
$bb134:
  assume {:verifier.code 0} true;
  assume !(($i130 == 1));
  goto $bb135;
$bb135:
  assume {:verifier.code 0} true;
  goto $bb155;
$bb136:
  assume ($i131 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7019, 9} true;
  assume {:verifier.code 0} true;
  $i132 := $M.24;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7019, 30} true;
  assume {:verifier.code 0} true;
  $i133 := $eq.i32($i132, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7019, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i133} true;
  goto $bb138, $bb139;
$bb137:
  assume {:verifier.code 0} true;
  assume !(($i131 == 1));
  goto $bb135;
$bb138:
  assume ($i133 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7019, 38} true;
  assume {:verifier.code 0} true;
  $i134 := $M.23;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7019, 46} true;
  assume {:verifier.code 0} true;
  $i135 := $eq.i32($i134, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7019, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i135} true;
  goto $bb141, $bb142;
$bb139:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7019, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i133 == 1));
  goto $bb140;
$bb140:
  assume {:verifier.code 0} true;
  goto $bb144;
$bb141:
  assume ($i135 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7020, 7} true;
  assume {:verifier.code 0} true;
  call ns8390_module_exit();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7021, 28} true;
  assume {:verifier.code 0} true;
  $M.24 := 3;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7022, 7} true;
  assume {:verifier.code 0} true;
  goto $bb143;
$bb142:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7019, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i135 == 1));
  goto $bb140;
$bb143:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7226, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7227, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
$bb144:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7025, 5} true;
  assume {:verifier.code 0} true;
  goto $bb145;
$bb145:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7049, 3} true;
  assume {:verifier.code 0} true;
  goto $bb157;
$bb146:
  assume ($i137 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7028, 22} true;
  assume {:verifier.code 0} true;
  call $i138 := ns8390_module_init();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7028, 20} true;
  assume {:verifier.code 0} true;
  $M.28 := $i138;
  call {:cexpr "ldv_retval_2"} boogie_si_record_i32($i138);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7029, 11} true;
  assume {:verifier.code 0} true;
  $i139 := $M.28;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7029, 24} true;
  assume {:verifier.code 0} true;
  $i140 := $ne.i32($i139, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7029, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i140} true;
  goto $bb148, $bb149;
$bb147:
  assume !(($i137 == 1));
  assume {:verifier.code 0} true;
  goto $bb154;
$bb148:
  assume ($i140 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7030, 30} true;
  assume {:verifier.code 0} true;
  $M.24 := 3;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7031, 9} true;
  assume {:verifier.code 0} true;
  goto $bb143;
$bb149:
  assume !(($i140 == 1));
  assume {:verifier.code 0} true;
  goto $bb150;
$bb150:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7034, 11} true;
  assume {:verifier.code 0} true;
  $i141 := $M.28;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7034, 24} true;
  assume {:verifier.code 0} true;
  $i142 := $eq.i32($i141, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7034, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i142} true;
  goto $bb151, $bb152;
$bb151:
  assume ($i142 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7035, 30} true;
  assume {:verifier.code 0} true;
  $M.24 := 2;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7036, 30} true;
  assume {:verifier.code 0} true;
  $M.25 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7037, 9} true;
  assume {:verifier.code 0} true;
  call ldv_net_device_ops_2();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7038, 30} true;
  assume {:verifier.code 0} true;
  $M.22 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7039, 9} true;
  assume {:verifier.code 0} true;
  call ldv_net_device_ops_1();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7040, 7} true;
  assume {:verifier.code 0} true;
  goto $bb153;
$bb152:
  assume !(($i142 == 1));
  assume {:verifier.code 0} true;
  goto $bb153;
$bb153:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7042, 5} true;
  assume {:verifier.code 0} true;
  goto $bb154;
$bb154:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7044, 5} true;
  assume {:verifier.code 0} true;
  goto $bb145;
$bb155:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7046, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7047, 5} true;
  assume {:verifier.code 0} true;
  goto $bb156;
$bb156:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7047, 5} true;
  assume {:verifier.code 0} true;
  goto $bb145;
$bb157:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7051, 3} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb158:
  assume ($i144 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7054, 15} true;
  assume {:verifier.code 1} true;
  call $i145 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i145);
  call {:cexpr "tmp___8"} boogie_si_record_i32($i145);
  assume {:verifier.code 0} true;
  goto $bb160;
$bb159:
  assume !(($i144 == 1));
  assume {:verifier.code 0} true;
  goto $bb272;
$bb160:
  assume {:verifier.code 0} true;
  $i146 := $slt.i32($i145, 6);
  assume {:verifier.code 0} true;
  assume {:branchcond $i146} true;
  goto $bb161, $bb162;
$bb161:
  assume ($i146 == 1);
  assume {:verifier.code 0} true;
  $i153 := $slt.i32($i145, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i153} true;
  goto $bb176, $bb177;
$bb162:
  assume !(($i146 == 1));
  assume {:verifier.code 0} true;
  $i147 := $slt.i32($i145, 9);
  assume {:verifier.code 0} true;
  assume {:branchcond $i147} true;
  goto $bb163, $bb164;
$bb163:
  assume ($i147 == 1);
  assume {:verifier.code 0} true;
  $i151 := $slt.i32($i145, 7);
  assume {:verifier.code 0} true;
  assume {:branchcond $i151} true;
  goto $bb172, $bb173;
$bb164:
  assume !(($i147 == 1));
  assume {:verifier.code 0} true;
  $i148 := $slt.i32($i145, 10);
  assume {:verifier.code 0} true;
  assume {:branchcond $i148} true;
  goto $bb165, $bb166;
$bb165:
  assume ($i148 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7178, 9} true;
  assume {:verifier.code 0} true;
  $i235 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7178, 30} true;
  assume {:verifier.code 0} true;
  $i236 := $eq.i32($i235, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7178, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i236} true;
  goto $bb252, $bb253;
$bb166:
  assume !(($i148 == 1));
  assume {:verifier.code 0} true;
  $i149 := $slt.i32($i145, 11);
  assume {:verifier.code 0} true;
  assume {:branchcond $i149} true;
  goto $bb167, $bb168;
$bb167:
  assume ($i149 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7195, 9} true;
  assume {:verifier.code 0} true;
  $i244 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7195, 30} true;
  assume {:verifier.code 0} true;
  $i245 := $eq.i32($i244, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7195, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i245} true;
  goto $bb261, $bb262;
$bb168:
  assume !(($i149 == 1));
  assume {:verifier.code 0} true;
  $i150 := $eq.i32($i145, 11);
  assume {:verifier.code 0} true;
  assume {:branchcond $i150} true;
  goto $bb169, $bb170;
$bb169:
  assume ($i150 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7206, 9} true;
  assume {:verifier.code 0} true;
  $i251 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7206, 30} true;
  assume {:verifier.code 0} true;
  $i252 := $eq.i32($i251, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7206, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i252} true;
  goto $bb267, $bb268;
$bb170:
  assume {:verifier.code 0} true;
  assume !(($i150 == 1));
  goto $bb171;
$bb171:
  assume {:verifier.code 0} true;
  goto $bb270;
$bb172:
  assume ($i151 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7144, 9} true;
  assume {:verifier.code 0} true;
  $i213 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7144, 30} true;
  assume {:verifier.code 0} true;
  $i214 := $eq.i32($i213, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7144, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i214} true;
  goto $bb234, $bb235;
$bb173:
  assume !(($i151 == 1));
  assume {:verifier.code 0} true;
  $i152 := $slt.i32($i145, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i152} true;
  goto $bb174, $bb175;
$bb174:
  assume ($i152 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7154, 9} true;
  assume {:verifier.code 0} true;
  $i219 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7154, 30} true;
  assume {:verifier.code 0} true;
  $i220 := $eq.i32($i219, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7154, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i220} true;
  goto $bb240, $bb241;
$bb175:
  assume !(($i152 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7161, 9} true;
  assume {:verifier.code 0} true;
  $i223 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7161, 30} true;
  assume {:verifier.code 0} true;
  $i224 := $eq.i32($i223, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7161, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i224} true;
  goto $bb243, $bb244;
$bb176:
  assume ($i153 == 1);
  assume {:verifier.code 0} true;
  $i156 := $slt.i32($i145, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i156} true;
  goto $bb182, $bb183;
$bb177:
  assume !(($i153 == 1));
  assume {:verifier.code 0} true;
  $i154 := $slt.i32($i145, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i154} true;
  goto $bb178, $bb179;
$bb178:
  assume ($i154 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7098, 9} true;
  assume {:verifier.code 0} true;
  $i184 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7098, 30} true;
  assume {:verifier.code 0} true;
  $i185 := $eq.i32($i184, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7098, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i185} true;
  goto $bb210, $bb211;
$bb179:
  assume !(($i154 == 1));
  assume {:verifier.code 0} true;
  $i155 := $slt.i32($i145, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i155} true;
  goto $bb180, $bb181;
$bb180:
  assume ($i155 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7115, 9} true;
  assume {:verifier.code 0} true;
  $i196 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7115, 30} true;
  assume {:verifier.code 0} true;
  $i197 := $eq.i32($i196, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7115, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i197} true;
  goto $bb219, $bb220;
$bb181:
  assume !(($i155 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7132, 9} true;
  assume {:verifier.code 0} true;
  $i205 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7132, 30} true;
  assume {:verifier.code 0} true;
  $i206 := $eq.i32($i205, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7132, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i206} true;
  goto $bb228, $bb229;
$bb182:
  assume ($i156 == 1);
  assume {:verifier.code 0} true;
  $i158 := $eq.i32($i145, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i158} true;
  goto $bb186, $bb187;
$bb183:
  assume !(($i156 == 1));
  assume {:verifier.code 0} true;
  $i157 := $slt.i32($i145, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i157} true;
  goto $bb184, $bb185;
$bb184:
  assume ($i157 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7074, 9} true;
  assume {:verifier.code 0} true;
  $i168 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7074, 30} true;
  assume {:verifier.code 0} true;
  $i169 := $eq.i32($i168, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7074, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i169} true;
  goto $bb198, $bb199;
$bb185:
  assume !(($i157 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7081, 9} true;
  assume {:verifier.code 0} true;
  $i172 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7081, 30} true;
  assume {:verifier.code 0} true;
  $i173 := $eq.i32($i172, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7081, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i173} true;
  goto $bb201, $bb202;
$bb186:
  assume ($i158 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7057, 9} true;
  assume {:verifier.code 0} true;
  $i159 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7057, 30} true;
  assume {:verifier.code 0} true;
  $i160 := $eq.i32($i159, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7057, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i160} true;
  goto $bb188, $bb189;
$bb187:
  assume {:verifier.code 0} true;
  assume !(($i158 == 1));
  goto $bb171;
$bb188:
  assume ($i160 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7058, 29} true;
  assume {:verifier.code 0} true;
  $p161 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7058, 7} true;
  assume {:verifier.code 0} true;
  call ei_set_multicast_list($p161);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7059, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7060, 5} true;
  assume {:verifier.code 0} true;
  goto $bb190;
$bb189:
  assume !(($i160 == 1));
  assume {:verifier.code 0} true;
  goto $bb190;
$bb190:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7062, 9} true;
  assume {:verifier.code 0} true;
  $i162 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7062, 30} true;
  assume {:verifier.code 0} true;
  $i163 := $eq.i32($i162, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7062, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i163} true;
  goto $bb191, $bb192;
$bb191:
  assume ($i163 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7063, 29} true;
  assume {:verifier.code 0} true;
  $p164 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7063, 7} true;
  assume {:verifier.code 0} true;
  call ei_set_multicast_list($p164);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7064, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 3;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7065, 5} true;
  assume {:verifier.code 0} true;
  goto $bb193;
$bb192:
  assume !(($i163 == 1));
  assume {:verifier.code 0} true;
  goto $bb193;
$bb193:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7067, 9} true;
  assume {:verifier.code 0} true;
  $i165 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7067, 30} true;
  assume {:verifier.code 0} true;
  $i166 := $eq.i32($i165, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7067, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i166} true;
  goto $bb194, $bb195;
$bb194:
  assume ($i166 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7068, 29} true;
  assume {:verifier.code 0} true;
  $p167 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7068, 7} true;
  assume {:verifier.code 0} true;
  call ei_set_multicast_list($p167);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7069, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7070, 5} true;
  assume {:verifier.code 0} true;
  goto $bb196;
$bb195:
  assume !(($i166 == 1));
  assume {:verifier.code 0} true;
  goto $bb196;
$bb196:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7072, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb197:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7217, 3} true;
  assume {:verifier.code 0} true;
  goto $bb272;
$bb198:
  assume ($i169 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7075, 16} true;
  assume {:verifier.code 0} true;
  $p170 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7075, 7} true;
  assume {:verifier.code 0} true;
  call $i171 := ei_close($p170);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7076, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7077, 5} true;
  assume {:verifier.code 0} true;
  goto $bb200;
$bb199:
  assume !(($i169 == 1));
  assume {:verifier.code 0} true;
  goto $bb200;
$bb200:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7079, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb201:
  assume ($i173 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7082, 25} true;
  assume {:verifier.code 0} true;
  $p174 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7082, 7} true;
  assume {:verifier.code 0} true;
  call $i175 := eth_validate_addr($p174);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7083, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7084, 5} true;
  assume {:verifier.code 0} true;
  goto $bb203;
$bb202:
  assume !(($i173 == 1));
  assume {:verifier.code 0} true;
  goto $bb203;
$bb203:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7086, 9} true;
  assume {:verifier.code 0} true;
  $i176 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7086, 30} true;
  assume {:verifier.code 0} true;
  $i177 := $eq.i32($i176, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7086, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i177} true;
  goto $bb204, $bb205;
$bb204:
  assume ($i177 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7087, 25} true;
  assume {:verifier.code 0} true;
  $p178 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7087, 7} true;
  assume {:verifier.code 0} true;
  call $i179 := eth_validate_addr($p178);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7088, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 3;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7089, 5} true;
  assume {:verifier.code 0} true;
  goto $bb206;
$bb205:
  assume !(($i177 == 1));
  assume {:verifier.code 0} true;
  goto $bb206;
$bb206:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7091, 9} true;
  assume {:verifier.code 0} true;
  $i180 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7091, 30} true;
  assume {:verifier.code 0} true;
  $i181 := $eq.i32($i180, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7091, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i181} true;
  goto $bb207, $bb208;
$bb207:
  assume ($i181 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7092, 25} true;
  assume {:verifier.code 0} true;
  $p182 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7092, 7} true;
  assume {:verifier.code 0} true;
  call $i183 := eth_validate_addr($p182);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7093, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7094, 5} true;
  assume {:verifier.code 0} true;
  goto $bb209;
$bb208:
  assume !(($i181 == 1));
  assume {:verifier.code 0} true;
  goto $bb209;
$bb209:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7096, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb210:
  assume ($i185 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7099, 20} true;
  assume {:verifier.code 0} true;
  $p186 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7099, 7} true;
  assume {:verifier.code 0} true;
  call $p187 := ei_get_stats($p186);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7100, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7101, 5} true;
  assume {:verifier.code 0} true;
  goto $bb212;
$bb211:
  assume !(($i185 == 1));
  assume {:verifier.code 0} true;
  goto $bb212;
$bb212:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7103, 9} true;
  assume {:verifier.code 0} true;
  $i188 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7103, 30} true;
  assume {:verifier.code 0} true;
  $i189 := $eq.i32($i188, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7103, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i189} true;
  goto $bb213, $bb214;
$bb213:
  assume ($i189 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7104, 20} true;
  assume {:verifier.code 0} true;
  $p190 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7104, 7} true;
  assume {:verifier.code 0} true;
  call $p191 := ei_get_stats($p190);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7105, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 3;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7106, 5} true;
  assume {:verifier.code 0} true;
  goto $bb215;
$bb214:
  assume !(($i189 == 1));
  assume {:verifier.code 0} true;
  goto $bb215;
$bb215:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7108, 9} true;
  assume {:verifier.code 0} true;
  $i192 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7108, 30} true;
  assume {:verifier.code 0} true;
  $i193 := $eq.i32($i192, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7108, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i193} true;
  goto $bb216, $bb217;
$bb216:
  assume ($i193 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7109, 20} true;
  assume {:verifier.code 0} true;
  $p194 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7109, 7} true;
  assume {:verifier.code 0} true;
  call $p195 := ei_get_stats($p194);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7110, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7111, 5} true;
  assume {:verifier.code 0} true;
  goto $bb218;
$bb217:
  assume !(($i193 == 1));
  assume {:verifier.code 0} true;
  goto $bb218;
$bb218:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7113, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb219:
  assume ($i197 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7116, 15} true;
  assume {:verifier.code 0} true;
  $p198 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7116, 7} true;
  assume {:verifier.code 0} true;
  call ei_poll($p198);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7117, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7118, 5} true;
  assume {:verifier.code 0} true;
  goto $bb221;
$bb220:
  assume !(($i197 == 1));
  assume {:verifier.code 0} true;
  goto $bb221;
$bb221:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7120, 9} true;
  assume {:verifier.code 0} true;
  $i199 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7120, 30} true;
  assume {:verifier.code 0} true;
  $i200 := $eq.i32($i199, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7120, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i200} true;
  goto $bb222, $bb223;
$bb222:
  assume ($i200 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7121, 15} true;
  assume {:verifier.code 0} true;
  $p201 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7121, 7} true;
  assume {:verifier.code 0} true;
  call ei_poll($p201);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7122, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 3;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7123, 5} true;
  assume {:verifier.code 0} true;
  goto $bb224;
$bb223:
  assume !(($i200 == 1));
  assume {:verifier.code 0} true;
  goto $bb224;
$bb224:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7125, 9} true;
  assume {:verifier.code 0} true;
  $i202 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7125, 30} true;
  assume {:verifier.code 0} true;
  $i203 := $eq.i32($i202, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7125, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i203} true;
  goto $bb225, $bb226;
$bb225:
  assume ($i203 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7126, 15} true;
  assume {:verifier.code 0} true;
  $p204 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7126, 7} true;
  assume {:verifier.code 0} true;
  call ei_poll($p204);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7127, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7128, 5} true;
  assume {:verifier.code 0} true;
  goto $bb227;
$bb226:
  assume !(($i203 == 1));
  assume {:verifier.code 0} true;
  goto $bb227;
$bb227:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7130, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb228:
  assume ($i206 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7133, 22} true;
  assume {:verifier.code 0} true;
  $p207 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7133, 7} true;
  assume {:verifier.code 0} true;
  call $i208 := eth_change_mtu($p207, $i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7134, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 3;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7135, 5} true;
  assume {:verifier.code 0} true;
  goto $bb230;
$bb229:
  assume !(($i206 == 1));
  assume {:verifier.code 0} true;
  goto $bb230;
$bb230:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7137, 9} true;
  assume {:verifier.code 0} true;
  $i209 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7137, 30} true;
  assume {:verifier.code 0} true;
  $i210 := $eq.i32($i209, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7137, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i210} true;
  goto $bb231, $bb232;
$bb231:
  assume ($i210 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7138, 22} true;
  assume {:verifier.code 0} true;
  $p211 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7138, 7} true;
  assume {:verifier.code 0} true;
  call $i212 := eth_change_mtu($p211, $i7);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7139, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7140, 5} true;
  assume {:verifier.code 0} true;
  goto $bb233;
$bb232:
  assume !(($i210 == 1));
  assume {:verifier.code 0} true;
  goto $bb233;
$bb233:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7142, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb234:
  assume ($i214 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7145, 30} true;
  assume {:verifier.code 0} true;
  $p215 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7145, 22} true;
  assume {:verifier.code 0} true;
  call $i216 := ei_open($p215);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7145, 20} true;
  assume {:verifier.code 0} true;
  $M.29 := $i216;
  call {:cexpr "ldv_retval_4"} boogie_si_record_i32($i216);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7146, 11} true;
  assume {:verifier.code 0} true;
  $i217 := $M.29;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7146, 24} true;
  assume {:verifier.code 0} true;
  $i218 := $eq.i32($i217, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7146, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i218} true;
  goto $bb236, $bb237;
$bb235:
  assume !(($i214 == 1));
  assume {:verifier.code 0} true;
  goto $bb239;
$bb236:
  assume ($i218 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7147, 30} true;
  assume {:verifier.code 0} true;
  $M.25 := 3;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7148, 7} true;
  assume {:verifier.code 0} true;
  goto $bb238;
$bb237:
  assume !(($i218 == 1));
  assume {:verifier.code 0} true;
  goto $bb238;
$bb238:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7150, 5} true;
  assume {:verifier.code 0} true;
  goto $bb239;
$bb239:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7152, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb240:
  assume ($i220 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7155, 30} true;
  assume {:verifier.code 0} true;
  $p221 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7155, 7} true;
  assume {:verifier.code 0} true;
  call $i222 := ei_start_xmit($p5, $p221);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7156, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 3;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7157, 5} true;
  assume {:verifier.code 0} true;
  goto $bb242;
$bb241:
  assume !(($i220 == 1));
  assume {:verifier.code 0} true;
  goto $bb242;
$bb242:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7159, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb243:
  assume ($i224 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7162, 20} true;
  assume {:verifier.code 0} true;
  $p225 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7162, 7} true;
  assume {:verifier.code 0} true;
  call $i226 := eth_mac_addr($p225, $p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7163, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7164, 5} true;
  assume {:verifier.code 0} true;
  goto $bb245;
$bb244:
  assume !(($i224 == 1));
  assume {:verifier.code 0} true;
  goto $bb245;
$bb245:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7166, 9} true;
  assume {:verifier.code 0} true;
  $i227 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7166, 30} true;
  assume {:verifier.code 0} true;
  $i228 := $eq.i32($i227, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7166, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i228} true;
  goto $bb246, $bb247;
$bb246:
  assume ($i228 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7167, 20} true;
  assume {:verifier.code 0} true;
  $p229 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7167, 7} true;
  assume {:verifier.code 0} true;
  call $i230 := eth_mac_addr($p229, $p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7168, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 3;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7169, 5} true;
  assume {:verifier.code 0} true;
  goto $bb248;
$bb247:
  assume !(($i228 == 1));
  assume {:verifier.code 0} true;
  goto $bb248;
$bb248:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7171, 9} true;
  assume {:verifier.code 0} true;
  $i231 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7171, 30} true;
  assume {:verifier.code 0} true;
  $i232 := $eq.i32($i231, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7171, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i232} true;
  goto $bb249, $bb250;
$bb249:
  assume ($i232 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7172, 20} true;
  assume {:verifier.code 0} true;
  $p233 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7172, 7} true;
  assume {:verifier.code 0} true;
  call $i234 := eth_mac_addr($p233, $p6);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7173, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7174, 5} true;
  assume {:verifier.code 0} true;
  goto $bb251;
$bb250:
  assume !(($i232 == 1));
  assume {:verifier.code 0} true;
  goto $bb251;
$bb251:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7176, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb252:
  assume ($i236 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7179, 21} true;
  assume {:verifier.code 0} true;
  $p237 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7179, 7} true;
  assume {:verifier.code 0} true;
  call ei_tx_timeout($p237);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7180, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7181, 5} true;
  assume {:verifier.code 0} true;
  goto $bb254;
$bb253:
  assume !(($i236 == 1));
  assume {:verifier.code 0} true;
  goto $bb254;
$bb254:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7183, 9} true;
  assume {:verifier.code 0} true;
  $i238 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7183, 30} true;
  assume {:verifier.code 0} true;
  $i239 := $eq.i32($i238, 3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7183, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i239} true;
  goto $bb255, $bb256;
$bb255:
  assume ($i239 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7184, 21} true;
  assume {:verifier.code 0} true;
  $p240 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7184, 7} true;
  assume {:verifier.code 0} true;
  call ei_tx_timeout($p240);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7185, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 3;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7186, 5} true;
  assume {:verifier.code 0} true;
  goto $bb257;
$bb256:
  assume !(($i239 == 1));
  assume {:verifier.code 0} true;
  goto $bb257;
$bb257:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7188, 9} true;
  assume {:verifier.code 0} true;
  $i241 := $M.25;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7188, 30} true;
  assume {:verifier.code 0} true;
  $i242 := $eq.i32($i241, 2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7188, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i242} true;
  goto $bb258, $bb259;
$bb258:
  assume ($i242 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7189, 21} true;
  assume {:verifier.code 0} true;
  $p243 := $M.21;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7189, 7} true;
  assume {:verifier.code 0} true;
  call ei_tx_timeout($p243);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7190, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7191, 5} true;
  assume {:verifier.code 0} true;
  goto $bb260;
$bb259:
  assume !(($i242 == 1));
  assume {:verifier.code 0} true;
  goto $bb260;
$bb260:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7193, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb261:
  assume ($i245 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7196, 22} true;
  assume {:verifier.code 0} true;
  call $i246 := ldv_ndo_init_2();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7196, 20} true;
  assume {:verifier.code 0} true;
  $M.30 := $i246;
  call {:cexpr "ldv_retval_3"} boogie_si_record_i32($i246);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7197, 11} true;
  assume {:verifier.code 0} true;
  $i247 := $M.30;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7197, 24} true;
  assume {:verifier.code 0} true;
  $i248 := $eq.i32($i247, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7197, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i248} true;
  goto $bb263, $bb264;
$bb262:
  assume !(($i245 == 1));
  assume {:verifier.code 0} true;
  goto $bb266;
$bb263:
  assume ($i248 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7198, 30} true;
  assume {:verifier.code 0} true;
  $M.25 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7199, 19} true;
  assume {:verifier.code 0} true;
  $i249 := $M.23;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7199, 27} true;
  assume {:verifier.code 0} true;
  $i250 := $add.i32($i249, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7199, 17} true;
  assume {:verifier.code 0} true;
  $M.23 := $i250;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i250);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7200, 7} true;
  assume {:verifier.code 0} true;
  goto $bb265;
$bb264:
  assume !(($i248 == 1));
  assume {:verifier.code 0} true;
  goto $bb265;
$bb265:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7202, 5} true;
  assume {:verifier.code 0} true;
  goto $bb266;
$bb266:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7204, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb267:
  assume ($i252 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7207, 7} true;
  assume {:verifier.code 0} true;
  call $i253 := ldv_ndo_uninit_2();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7208, 28} true;
  assume {:verifier.code 0} true;
  $M.25 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7209, 17} true;
  assume {:verifier.code 0} true;
  $i254 := $M.23;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7209, 25} true;
  assume {:verifier.code 0} true;
  $i255 := $sub.i32($i254, 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7209, 15} true;
  assume {:verifier.code 0} true;
  $M.23 := $i255;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i255);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7210, 5} true;
  assume {:verifier.code 0} true;
  goto $bb269;
$bb268:
  assume !(($i252 == 1));
  assume {:verifier.code 0} true;
  goto $bb269;
$bb269:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7212, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb270:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7214, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7215, 5} true;
  assume {:verifier.code 0} true;
  goto $bb271;
$bb271:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7215, 5} true;
  assume {:verifier.code 0} true;
  goto $bb197;
$bb272:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7219, 3} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb273:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7221, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7222, 3} true;
  assume {:verifier.code 0} true;
  goto $bb274;
$bb274:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7222, 3} true;
  assume {:verifier.code 0} true;
  goto $bb127;
}
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 198718));
procedure  ldv_initialize()
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7436, 16} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7436, 16} true;
  assume {:verifier.code 0} true;
  $p0 := $M.15;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7436, 3} true;
  assume {:verifier.code 0} true;
  call ldv_set_init($p0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7437, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_ndo_init_1: ref;
axiom (ldv_ndo_init_1 == $sub.ref(0, 199750));
procedure  ldv_ndo_init_1()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7572, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7572, 10} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7572, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const ldv_ndo_uninit_1: ref;
axiom (ldv_ndo_uninit_1 == $sub.ref(0, 200782));
procedure  ldv_ndo_uninit_1()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7580, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7580, 10} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7580, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const ldv_stop: ref;
axiom (ldv_stop == $sub.ref(0, 201814));
procedure  ldv_stop()
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5428, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5428, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5430, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb2:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 5432, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ns8390_module_exit: ref;
axiom (ns8390_module_exit == $sub.ref(0, 202846));
procedure  ns8390_module_exit()
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6775, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6775, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ns8390_module_init: ref;
axiom (ns8390_module_init == $sub.ref(0, 203878));
procedure  ns8390_module_init()
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6769, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 6769, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const ldv_ndo_init_2: ref;
axiom (ldv_ndo_init_2 == $sub.ref(0, 204910));
procedure  ldv_ndo_init_2()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7576, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7576, 10} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7576, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const ldv_ndo_uninit_2: ref;
axiom (ldv_ndo_uninit_2 == $sub.ref(0, 205942));
procedure  ldv_ndo_uninit_2()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7584, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7584, 10} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7584, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 206974));
procedure  ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7489, 30} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7489, 30} true;
  assume {:verifier.code 0} true;
  $p0 := $M.15;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7489, 13} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_set_is_empty($p0);
  call {:cexpr "tmp___7"} boogie_si_record_i32($i1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7490, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7490, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7491, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7492, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7494, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_set_is_empty: ref;
axiom (ldv_set_is_empty == $sub.ref(0, 208006));
procedure  ldv_set_is_empty($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7378, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7378, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $M.16;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7378, 22} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7378, 22} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7378, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const ldv_set_init: ref;
axiom (ldv_set_init == $sub.ref(0, 209038));
procedure  ldv_set_init($p0: ref)
{
$bb0:
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7289, 14} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7289, 14} true;
  assume {:verifier.code 0} true;
  $M.16 := 0;
  call {:cexpr "last_index"} boogie_si_record_i32(0);
  assume {:sourceloc "205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point.cil.out-8h4qr6le.i", 7290, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 210070));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 39, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 211102));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 212134));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 213166));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 59, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 214198));
procedure  __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 215230));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 216262));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 217294));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 218326));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 219358));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 220390));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_unsigned_short: ref;
axiom (__VERIFIER_nondet_unsigned_short == $sub.ref(0, 221422));
procedure  __VERIFIER_nondet_unsigned_short()
  returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 103, 22} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 103, 22} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_short();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
  call {:cexpr "x"} boogie_si_record_i16($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 21} true;
  assume {:verifier.code 0} true;
  $i1 := $zext.i16.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 23} true;
  assume {:verifier.code 0} true;
  $i2 := $sge.i32($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 28} true;
  assume {:verifier.code 0} true;
  $i3 := 0;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 31} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i16.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 33} true;
  assume {:verifier.code 1} true;
  $i5 := $sle.i32($i4, 65535);
  assume {:verifier.code 0} true;
  $i3 := $i5;
  goto $bb3;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 28} true;
  assume {:verifier.code 0} true;
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 28} true;
  assume {:verifier.code 1} true;
  $i6 := $zext.i1.i32($i3);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i6);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 222454));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 223486));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 224518));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 225550));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 226582));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 227614));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __VERIFIER_nondet_unsigned_int: ref;
axiom (__VERIFIER_nondet_unsigned_int == $sub.ref(0, 228646));
procedure  __VERIFIER_nondet_unsigned_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 136, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 136, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 137, 22} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
  call {:cexpr "min"} boogie_si_record_i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 22} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
  call {:cexpr "max"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.i32($i2, 4294967295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.i32($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 56} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.i32($i2, 4294967295);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.i32($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 141, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 229678));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 230710));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 231742));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 232774));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 233806));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_unsigned_long: ref;
axiom (__VERIFIER_nondet_unsigned_long == $sub.ref(0, 234838));
procedure  __VERIFIER_nondet_unsigned_long()
  returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 169, 21} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 169, 21} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 170, 23} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
  call {:cexpr "min"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 23} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
  call {:cexpr "max"} boogie_si_record_i64($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i64($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.i64($i2, 18446744073709551615);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 57} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.i64($i2, 18446744073709551615);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.i64($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 174, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 235870));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 236902));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 237934));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 238966));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 239998));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 241030));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 242062));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 243094));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_bool: ref;
axiom (__VERIFIER_nondet_bool == $sub.ref(0, 244126));
procedure  __VERIFIER_nondet_bool()
  returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 13} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 9} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i8($i1);
  call {:cexpr "x"} boogie_si_record_i8($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 21} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i8.i1($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 21} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 28} true;
  assume {:verifier.code 0} true;
  $i6 := 1;
  assume {:branchcond $i5} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 28} true;
  assume {:verifier.code 0} true;
  assume ($i5 == 1);
  goto $bb2;
$bb2:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 28} true;
  assume {:verifier.code 1} true;
  $i10 := $zext.i1.i32($i6);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i10);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 10} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i8.i1($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 3} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
$bb3:
  assume !(($i5 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 31} true;
  assume {:verifier.code 1} true;
  $i7 := $trunc.i8.i1($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 31} true;
  assume {:verifier.code 1} true;
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 33} true;
  assume {:verifier.code 1} true;
  $i9 := $eq.i32($i8, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 28} true;
  assume {:verifier.code 0} true;
  $i6 := $i9;
  goto $bb2;
}
const __VERIFIER_nondet_ushort: ref;
axiom (__VERIFIER_nondet_ushort == $sub.ref(0, 245158));
procedure  __VERIFIER_nondet_ushort()
  returns ($r: i16)
{
  var $i0: i16;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 22} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 22} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_short();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
  call {:cexpr "x"} boogie_si_record_i16($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 243, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __VERIFIER_nondet_uint: ref;
axiom (__VERIFIER_nondet_uint == $sub.ref(0, 246190));
procedure  __VERIFIER_nondet_uint()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __VERIFIER_nondet_ulong: ref;
axiom (__VERIFIER_nondet_ulong == $sub.ref(0, 247222));
procedure  __VERIFIER_nondet_ulong()
  returns ($r: i64)
{
  var $i0: i64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 21} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 21} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __VERIFIER_nondet_pointer: ref;
axiom (__VERIFIER_nondet_pointer == $sub.ref(0, 248254));
procedure  __VERIFIER_nondet_pointer()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 48} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 48} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet();
  call {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 41} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const __VERIFIER_nondet: ref;
axiom (__VERIFIER_nondet == $sub.ref(0, 249286));
procedure  __VERIFIER_nondet()
  returns ($r: ref);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 250318));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 251350));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 252382));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 544, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_begin: ref;
axiom (__VERIFIER_atomic_begin == $sub.ref(0, 253414));
procedure  __VERIFIER_atomic_begin()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  call corral_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 79} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_end: ref;
axiom (__VERIFIER_atomic_end == $sub.ref(0, 254446));
procedure  __VERIFIER_atomic_end()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  call corral_atomic_end();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 75} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const calloc: ref;
axiom (calloc == $sub.ref(0, 255478));
procedure  calloc($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 1} true;
  call {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
  call {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 21, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 22, 5} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 23, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $mul.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 23, 11} true;
  assume {:verifier.code 0} true;
  call $p6 := malloc($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 24, 24} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 24, 5} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p6, 0, $i7, false);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 25, 5} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:verifier.code 0} true;
  $p4 := $p6;
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 27, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 256510));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 257542));
procedure  __SMACK_static_init()
{
$bb0:
  $M.31 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  $M.32 := $p2i.ref.i64(ei_open);
  $M.33 := __kstrtab_ei_open;
  $M.34 := 101;
  $M.35 := 105;
  $M.36 := 95;
  $M.37 := 111;
  $M.38 := 112;
  $M.39 := 101;
  $M.40 := 110;
  $M.41 := 0;
  $M.42 := $p2i.ref.i64(ei_close);
  $M.43 := __kstrtab_ei_close;
  $M.44 := 101;
  $M.45 := 105;
  $M.46 := 95;
  $M.47 := 99;
  $M.48 := 108;
  $M.49 := 111;
  $M.50 := 115;
  $M.51 := 101;
  $M.52 := 0;
  $M.53 := $p2i.ref.i64(ei_start_xmit);
  $M.54 := __kstrtab_ei_start_xmit;
  $M.55 := 101;
  $M.56 := 105;
  $M.57 := 95;
  $M.58 := 115;
  $M.59 := 116;
  $M.60 := 97;
  $M.61 := 114;
  $M.62 := 116;
  $M.63 := 95;
  $M.64 := 120;
  $M.65 := 109;
  $M.66 := 105;
  $M.67 := 116;
  $M.68 := 0;
  $M.69 := $p2i.ref.i64(ei_get_stats);
  $M.70 := __kstrtab_ei_get_stats;
  $M.71 := 101;
  $M.72 := 105;
  $M.73 := 95;
  $M.74 := 103;
  $M.75 := 101;
  $M.76 := 116;
  $M.77 := 95;
  $M.78 := 115;
  $M.79 := 116;
  $M.80 := 97;
  $M.81 := 116;
  $M.82 := 115;
  $M.83 := 0;
  $M.84 := $p2i.ref.i64(ei_set_multicast_list);
  $M.85 := __kstrtab_ei_set_multicast_list;
  $M.86 := 101;
  $M.87 := 105;
  $M.88 := 95;
  $M.89 := 115;
  $M.90 := 101;
  $M.91 := 116;
  $M.92 := 95;
  $M.93 := 109;
  $M.94 := 117;
  $M.95 := 108;
  $M.96 := 116;
  $M.97 := 105;
  $M.98 := 99;
  $M.99 := 97;
  $M.100 := 115;
  $M.101 := 116;
  $M.102 := 95;
  $M.103 := 108;
  $M.104 := 105;
  $M.105 := 115;
  $M.106 := 116;
  $M.107 := 0;
  $M.108 := $p2i.ref.i64(ei_tx_timeout);
  $M.109 := __kstrtab_ei_tx_timeout;
  $M.110 := 101;
  $M.111 := 105;
  $M.112 := 95;
  $M.113 := 116;
  $M.114 := 120;
  $M.115 := 95;
  $M.116 := 116;
  $M.117 := 105;
  $M.118 := 109;
  $M.119 := 101;
  $M.120 := 111;
  $M.121 := 117;
  $M.122 := 116;
  $M.123 := 0;
  $M.124 := $p2i.ref.i64(ei_interrupt);
  $M.125 := __kstrtab_ei_interrupt;
  $M.126 := 101;
  $M.127 := 105;
  $M.128 := 95;
  $M.129 := 105;
  $M.130 := 110;
  $M.131 := 116;
  $M.132 := 101;
  $M.133 := 114;
  $M.134 := 114;
  $M.135 := 117;
  $M.136 := 112;
  $M.137 := 116;
  $M.138 := 0;
  $M.15 := $0.ref;
  $M.16 := 0;
  call {:cexpr "last_index"} boogie_si_record_i32(0);
  $M.17 := $store.ref($M.17, set_impl, $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
  $M.17 := $store.ref($M.17, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
  $M.139 := $p2i.ref.i64(ei_poll);
  $M.140 := __kstrtab_ei_poll;
  $M.141 := 101;
  $M.142 := 105;
  $M.143 := 95;
  $M.144 := 112;
  $M.145 := 111;
  $M.146 := 108;
  $M.147 := 108;
  $M.148 := 0;
  $M.149 := $0.ref;
  $M.150 := $0.ref;
  $M.151 := ei_open;
  $M.152 := ei_close;
  $M.153 := ei_start_xmit;
  $M.154 := $0.ref;
  $M.155 := $0.ref;
  $M.156 := ei_set_multicast_list;
  $M.157 := eth_mac_addr;
  $M.158 := eth_validate_addr;
  $M.159 := $0.ref;
  $M.160 := $0.ref;
  $M.161 := eth_change_mtu;
  $M.162 := $0.ref;
  $M.163 := ei_tx_timeout;
  $M.164 := $0.ref;
  $M.165 := ei_get_stats;
  $M.166 := $0.ref;
  $M.167 := $0.ref;
  $M.168 := ei_poll;
  $M.169 := $0.ref;
  $M.170 := $0.ref;
  $M.171 := $0.ref;
  $M.172 := $0.ref;
  $M.173 := $0.ref;
  $M.174 := $0.ref;
  $M.175 := $0.ref;
  $M.176 := $0.ref;
  $M.177 := $0.ref;
  $M.178 := $0.ref;
  $M.179 := $0.ref;
  $M.180 := $0.ref;
  $M.181 := $0.ref;
  $M.182 := $0.ref;
  $M.183 := $0.ref;
  $M.184 := $0.ref;
  $M.185 := $0.ref;
  $M.186 := $0.ref;
  $M.187 := $0.ref;
  $M.188 := $0.ref;
  $M.189 := $0.ref;
  $M.190 := $0.ref;
  $M.191 := $0.ref;
  $M.192 := $0.ref;
  $M.193 := $0.ref;
  $M.194 := $0.ref;
  $M.195 := $0.ref;
  $M.196 := $0.ref;
  $M.197 := $0.ref;
  $M.198 := $0.ref;
  $M.199 := $0.ref;
  $M.200 := $0.ref;
  $M.201 := $0.ref;
  $M.202 := $0.ref;
  $M.203 := $0.ref;
  $M.204 := $0.ref;
  $M.205 := $0.ref;
  $M.206 := $0.ref;
  $M.207 := $0.ref;
  $M.208 := $0.ref;
  $M.209 := $p2i.ref.i64(ei_netdev_ops);
  $M.210 := __kstrtab_ei_netdev_ops;
  $M.211 := 101;
  $M.212 := 105;
  $M.213 := 95;
  $M.214 := 110;
  $M.215 := 101;
  $M.216 := 116;
  $M.217 := 100;
  $M.218 := 101;
  $M.219 := 118;
  $M.220 := 95;
  $M.221 := 111;
  $M.222 := 112;
  $M.223 := 115;
  $M.224 := 0;
  $M.225 := $p2i.ref.i64(__alloc_ei_netdev);
  $M.226 := __kstrtab___alloc_ei_netdev;
  $M.227 := 95;
  $M.228 := 95;
  $M.229 := 97;
  $M.230 := 108;
  $M.231 := 108;
  $M.232 := 111;
  $M.233 := 99;
  $M.234 := 95;
  $M.235 := 101;
  $M.236 := 105;
  $M.237 := 95;
  $M.238 := 110;
  $M.239 := 101;
  $M.240 := 116;
  $M.241 := 100;
  $M.242 := 101;
  $M.243 := 118;
  $M.244 := 0;
  $M.19 := 0;
  call {:cexpr "msg_enable"} boogie_si_record_i32(0);
  $M.20 := 0;
  call {:cexpr "version_printed"} boogie_si_record_i32(0);
  $M.245 := 56;
  $M.246 := 51;
  $M.247 := 57;
  $M.248 := 48;
  $M.249 := 46;
  $M.250 := 99;
  $M.251 := 58;
  $M.252 := 118;
  $M.253 := 49;
  $M.254 := 46;
  $M.255 := 49;
  $M.256 := 48;
  $M.257 := 99;
  $M.258 := 118;
  $M.259 := 115;
  $M.260 := 32;
  $M.261 := 57;
  $M.262 := 47;
  $M.263 := 50;
  $M.264 := 51;
  $M.265 := 47;
  $M.266 := 57;
  $M.267 := 52;
  $M.268 := 32;
  $M.269 := 68;
  $M.270 := 111;
  $M.271 := 110;
  $M.272 := 97;
  $M.273 := 108;
  $M.274 := 100;
  $M.275 := 32;
  $M.276 := 66;
  $M.277 := 101;
  $M.278 := 99;
  $M.279 := 107;
  $M.280 := 101;
  $M.281 := 114;
  $M.282 := 32;
  $M.283 := 40;
  $M.284 := 98;
  $M.285 := 101;
  $M.286 := 99;
  $M.287 := 107;
  $M.288 := 101;
  $M.289 := 114;
  $M.290 := 64;
  $M.291 := 99;
  $M.292 := 101;
  $M.293 := 115;
  $M.294 := 100;
  $M.295 := 105;
  $M.296 := 115;
  $M.297 := 46;
  $M.298 := 103;
  $M.299 := 115;
  $M.300 := 102;
  $M.301 := 99;
  $M.302 := 46;
  $M.303 := 110;
  $M.304 := 97;
  $M.305 := 115;
  $M.306 := 97;
  $M.307 := 46;
  $M.308 := 103;
  $M.309 := 111;
  $M.310 := 118;
  $M.311 := 41;
  $M.312 := 10;
  $M.313 := 0;
  $M.314 := $p2i.ref.i64(NS8390_init);
  $M.315 := __kstrtab_NS8390_init;
  $M.316 := 78;
  $M.317 := 83;
  $M.318 := 56;
  $M.319 := 51;
  $M.320 := 57;
  $M.321 := 48;
  $M.322 := 95;
  $M.323 := 105;
  $M.324 := 110;
  $M.325 := 105;
  $M.326 := 116;
  $M.327 := 0;
  $M.21 := $0.ref;
  $M.22 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  $M.23 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  $M.24 := 0;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
  $M.25 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  $M.26 := 0;
  call {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
  $M.27 := 0;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
  $M.28 := 0;
  call {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
  $M.29 := 0;
  call {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
  $M.30 := 0;
  call {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
  $M.328 := .str.1.67;
  $M.329 := 0;
  call {:cexpr "errno_global"} boogie_si_record_i32(0);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 258574));
procedure  devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 259606));
procedure  devirtbounce.1(funcPtr: ref, arg: i8, arg1: i32)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 260638));
procedure  devirtbounce.2(funcPtr: ref, arg: i32)
  returns ($r: i8)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.3: ref;
axiom (devirtbounce.3 == $sub.ref(0, 261670));
procedure  devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.4: ref;
axiom (devirtbounce.4 == $sub.ref(0, 262702));
procedure  devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.5: ref;
axiom (devirtbounce.5 == $sub.ref(0, 263734));
procedure  devirtbounce.5(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64)
  returns ($r: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.6: ref;
axiom (devirtbounce.6 == $sub.ref(0, 264766));
procedure  devirtbounce.6(funcPtr: ref, arg: i64, arg1: ref, arg2: i32)
  returns ($r: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.7: ref;
axiom (devirtbounce.7 == $sub.ref(0, 265798));
procedure  devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i4 := $eq.ref(ethdev_setup, $p0);
  assume {:branchcond $i4} true;
  goto $bb5, $bb9;
$bb2:
  assume ($i1 == 1);
  call ei_set_multicast_list(arg);
  $exn := false;
  return;
$bb3:
  assume ($i2 == 1);
  call ei_tx_timeout(arg);
  $exn := false;
  return;
$bb4:
  assume ($i3 == 1);
  call ei_poll(arg);
  $exn := false;
  return;
$bb5:
  assume ($i4 == 1);
  call ethdev_setup(arg);
  $exn := false;
  return;
$bb6:
  assume !(($i1 == 1));
  assume false;
$bb7:
  assume !(($i2 == 1));
  $i1 := $eq.ref(ei_set_multicast_list, $p0);
  assume {:branchcond $i1} true;
  goto $bb2, $bb6;
$bb8:
  assume !(($i3 == 1));
  $i2 := $eq.ref(ei_tx_timeout, $p0);
  assume {:branchcond $i2} true;
  goto $bb3, $bb7;
$bb9:
  assume !(($i4 == 1));
  $i3 := $eq.ref(ei_poll, $p0);
  assume {:branchcond $i3} true;
  goto $bb4, $bb8;
}
const devirtbounce.8: ref;
axiom (devirtbounce.8 == $sub.ref(0, 266830));
procedure  devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.9: ref;
axiom (devirtbounce.9 == $sub.ref(0, 267862));
procedure  devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.10: ref;
axiom (devirtbounce.10 == $sub.ref(0, 268894));
procedure  devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
procedure  $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

procedure  boogie_si_record_i1(x: i1);
procedure  boogie_si_record_i16(x: i16);
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i64(x: i64);
procedure  boogie_si_record_i8(x: i8);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
