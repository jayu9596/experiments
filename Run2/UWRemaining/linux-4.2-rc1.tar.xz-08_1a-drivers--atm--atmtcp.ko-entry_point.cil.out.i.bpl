// generated by SMACK version 2.4.1 for svcomp
// via /usr/local/bin/smack /proj/SMACK/SMACKBenchResults/data/sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out.i -x svcomp --verifier svcomp -t -q -bpl linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out.i.bpl

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (52 regions)
var $M.0: [ref] i8;
var $M.1: ref;
var $M.2: ref;
var $M.3: i32;
var $M.4: i32;
var $M.5: i32;
var $M.6: i32;
var $M.7: i32;
var $M.8: i32;
var $M.9: i32;
var $M.10: ref;
var $M.11: [ref] i8;
var $M.12: [ref] i8;
var $M.13: [ref] ref;
var $M.14: [ref] i8;
var $M.15: i32;
var $M.16: [ref] i8;
var $M.17: [ref] i8;
var $M.18: [ref] i8;
var $M.19: [ref] i8;
var $M.20: [ref] i8;
var $M.21: [ref] i32;
var $M.22: [ref] ref;
var $M.23: [ref] ref;
var $M.24: [ref] ref;
var $M.25: [ref] ref;
var $M.26: [ref] i64;
var $M.27: [ref] i64;
var $M.28: [ref] i64;
var $M.29: [ref] ref;
var $M.30: [ref] i8;
var $M.31: i32;
var $M.32: [ref] ref;
var $M.33: [ref] ref;
var $M.34: [ref] ref;
var $M.35: [ref] ref;
var $M.36: [ref] ref;
var $M.37: [ref] ref;
var $M.38: [ref] ref;
var $M.39: [ref] ref;
var $M.40: [ref] ref;
var $M.41: [ref] ref;
var $M.42: [ref] ref;
var $M.43: [ref] ref;
var $M.44: [ref] ref;
var $M.45: [ref] ref;
var $M.46: [ref] ref;
var $M.47: [ref] ref;
var $M.48: [ref] ref;
var $M.49: [ref] ref;
var $M.50: ref;
var $M.51: i32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 191864));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (i64);

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $srem.i1(i1: i1, i2: i1) returns (i1) { (if ($ne.i1.bool($smod.i1(i1, i2), 0) && $slt.i1.bool(i1, 0)) then $sub.i1($smod.i1(i1, i2), $smax.i1(i2, $sub.i1(0, i2))) else $smod.i1(i1, i2)) }
function {:inline} $srem.i5(i1: i5, i2: i5) returns (i5) { (if ($ne.i5.bool($smod.i5(i1, i2), 0) && $slt.i5.bool(i1, 0)) then $sub.i5($smod.i5(i1, i2), $smax.i5(i2, $sub.i5(0, i2))) else $smod.i5(i1, i2)) }
function {:inline} $srem.i6(i1: i6, i2: i6) returns (i6) { (if ($ne.i6.bool($smod.i6(i1, i2), 0) && $slt.i6.bool(i1, 0)) then $sub.i6($smod.i6(i1, i2), $smax.i6(i2, $sub.i6(0, i2))) else $smod.i6(i1, i2)) }
function {:inline} $srem.i8(i1: i8, i2: i8) returns (i8) { (if ($ne.i8.bool($smod.i8(i1, i2), 0) && $slt.i8.bool(i1, 0)) then $sub.i8($smod.i8(i1, i2), $smax.i8(i2, $sub.i8(0, i2))) else $smod.i8(i1, i2)) }
function {:inline} $srem.i16(i1: i16, i2: i16) returns (i16) { (if ($ne.i16.bool($smod.i16(i1, i2), 0) && $slt.i16.bool(i1, 0)) then $sub.i16($smod.i16(i1, i2), $smax.i16(i2, $sub.i16(0, i2))) else $smod.i16(i1, i2)) }
function {:inline} $srem.i24(i1: i24, i2: i24) returns (i24) { (if ($ne.i24.bool($smod.i24(i1, i2), 0) && $slt.i24.bool(i1, 0)) then $sub.i24($smod.i24(i1, i2), $smax.i24(i2, $sub.i24(0, i2))) else $smod.i24(i1, i2)) }
function {:inline} $srem.i32(i1: i32, i2: i32) returns (i32) { (if ($ne.i32.bool($smod.i32(i1, i2), 0) && $slt.i32.bool(i1, 0)) then $sub.i32($smod.i32(i1, i2), $smax.i32(i2, $sub.i32(0, i2))) else $smod.i32(i1, i2)) }
function {:inline} $srem.i40(i1: i40, i2: i40) returns (i40) { (if ($ne.i40.bool($smod.i40(i1, i2), 0) && $slt.i40.bool(i1, 0)) then $sub.i40($smod.i40(i1, i2), $smax.i40(i2, $sub.i40(0, i2))) else $smod.i40(i1, i2)) }
function {:inline} $srem.i48(i1: i48, i2: i48) returns (i48) { (if ($ne.i48.bool($smod.i48(i1, i2), 0) && $slt.i48.bool(i1, 0)) then $sub.i48($smod.i48(i1, i2), $smax.i48(i2, $sub.i48(0, i2))) else $smod.i48(i1, i2)) }
function {:inline} $srem.i56(i1: i56, i2: i56) returns (i56) { (if ($ne.i56.bool($smod.i56(i1, i2), 0) && $slt.i56.bool(i1, 0)) then $sub.i56($smod.i56(i1, i2), $smax.i56(i2, $sub.i56(0, i2))) else $smod.i56(i1, i2)) }
function {:inline} $srem.i64(i1: i64, i2: i64) returns (i64) { (if ($ne.i64.bool($smod.i64(i1, i2), 0) && $slt.i64.bool(i1, 0)) then $sub.i64($smod.i64(i1, i2), $smax.i64(i2, $sub.i64(0, i2))) else $smod.i64(i1, i2)) }
function {:inline} $srem.i80(i1: i80, i2: i80) returns (i80) { (if ($ne.i80.bool($smod.i80(i1, i2), 0) && $slt.i80.bool(i1, 0)) then $sub.i80($smod.i80(i1, i2), $smax.i80(i2, $sub.i80(0, i2))) else $smod.i80(i1, i2)) }
function {:inline} $srem.i88(i1: i88, i2: i88) returns (i88) { (if ($ne.i88.bool($smod.i88(i1, i2), 0) && $slt.i88.bool(i1, 0)) then $sub.i88($smod.i88(i1, i2), $smax.i88(i2, $sub.i88(0, i2))) else $smod.i88(i1, i2)) }
function {:inline} $srem.i96(i1: i96, i2: i96) returns (i96) { (if ($ne.i96.bool($smod.i96(i1, i2), 0) && $slt.i96.bool(i1, 0)) then $sub.i96($smod.i96(i1, i2), $smax.i96(i2, $sub.i96(0, i2))) else $smod.i96(i1, i2)) }
function {:inline} $srem.i128(i1: i128, i2: i128) returns (i128) { (if ($ne.i128.bool($smod.i128(i1, i2), 0) && $slt.i128.bool(i1, 0)) then $sub.i128($smod.i128(i1, i2), $smax.i128(i2, $sub.i128(0, i2))) else $smod.i128(i1, i2)) }
function {:inline} $srem.i160(i1: i160, i2: i160) returns (i160) { (if ($ne.i160.bool($smod.i160(i1, i2), 0) && $slt.i160.bool(i1, 0)) then $sub.i160($smod.i160(i1, i2), $smax.i160(i2, $sub.i160(0, i2))) else $smod.i160(i1, i2)) }
function {:inline} $srem.i256(i1: i256, i2: i256) returns (i256) { (if ($ne.i256.bool($smod.i256(i1, i2), 0) && $slt.i256.bool(i1, 0)) then $sub.i256($smod.i256(i1, i2), $smax.i256(i2, $sub.i256(0, i2))) else $smod.i256(i1, i2)) }
function {:inline} $urem.i1(i1: i1, i2: i1) returns (i1) { $smod.i1(i1, i2) }
function {:inline} $urem.i5(i1: i5, i2: i5) returns (i5) { $smod.i5(i1, i2) }
function {:inline} $urem.i6(i1: i6, i2: i6) returns (i6) { $smod.i6(i1, i2) }
function {:inline} $urem.i8(i1: i8, i2: i8) returns (i8) { $smod.i8(i1, i2) }
function {:inline} $urem.i16(i1: i16, i2: i16) returns (i16) { $smod.i16(i1, i2) }
function {:inline} $urem.i24(i1: i24, i2: i24) returns (i24) { $smod.i24(i1, i2) }
function {:inline} $urem.i32(i1: i32, i2: i32) returns (i32) { $smod.i32(i1, i2) }
function {:inline} $urem.i40(i1: i40, i2: i40) returns (i40) { $smod.i40(i1, i2) }
function {:inline} $urem.i48(i1: i48, i2: i48) returns (i48) { $smod.i48(i1, i2) }
function {:inline} $urem.i56(i1: i56, i2: i56) returns (i56) { $smod.i56(i1, i2) }
function {:inline} $urem.i64(i1: i64, i2: i64) returns (i64) { $smod.i64(i1, i2) }
function {:inline} $urem.i80(i1: i80, i2: i80) returns (i80) { $smod.i80(i1, i2) }
function {:inline} $urem.i88(i1: i88, i2: i88) returns (i88) { $smod.i88(i1, i2) }
function {:inline} $urem.i96(i1: i96, i2: i96) returns (i96) { $smod.i96(i1, i2) }
function {:inline} $urem.i128(i1: i128, i2: i128) returns (i128) { $smod.i128(i1, i2) }
function {:inline} $urem.i160(i1: i160, i2: i160) returns (i160) { $smod.i160(i1, i2) }
function {:inline} $urem.i256(i1: i256, i2: i256) returns (i256) { $smod.i256(i1, i2) }
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
axiom ($and.i1(0, 0) == 0);
axiom ($or.i1(0, 0) == 0);
axiom ($xor.i1(0, 0) == 0);
axiom ($and.i1(0, 1) == 0);
axiom ($or.i1(0, 1) == 1);
axiom ($xor.i1(0, 1) == 1);
axiom ($and.i1(1, 0) == 0);
axiom ($or.i1(1, 0) == 1);
axiom ($xor.i1(1, 0) == 1);
axiom ($and.i1(1, 1) == 1);
axiom ($or.i1(1, 1) == 1);
axiom ($xor.i1(1, 1) == 0);
axiom ($and.i32(32, 16) == 0);
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
// Integer load/store operations
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
// Conversion between integer types
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer load/store operations
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.i8(f: float) returns (i8);
function $bitcast.float.i16(f: float) returns (i16);
function $bitcast.float.i32(f: float) returns (i32);
function $bitcast.float.i64(f: float) returns (i64);
function $bitcast.float.i80(f: float) returns (i80);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.i80.float(i: i80) returns (float);
function $fp2si.float.i1(f: float) returns (i1);
function $fp2si.float.i5(f: float) returns (i5);
function $fp2si.float.i6(f: float) returns (i6);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2si.float.i80(f: float) returns (i80);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2si.float.i160(f: float) returns (i160);
function $fp2si.float.i256(f: float) returns (i256);
function $fp2ui.float.i1(f: float) returns (i1);
function $fp2ui.float.i5(f: float) returns (i5);
function $fp2ui.float.i6(f: float) returns (i6);
function $fp2ui.float.i8(f: float) returns (i8);
function $fp2ui.float.i16(f: float) returns (i16);
function $fp2ui.float.i24(f: float) returns (i24);
function $fp2ui.float.i32(f: float) returns (i32);
function $fp2ui.float.i40(f: float) returns (i40);
function $fp2ui.float.i48(f: float) returns (i48);
function $fp2ui.float.i56(f: float) returns (i56);
function $fp2ui.float.i64(f: float) returns (i64);
function $fp2ui.float.i80(f: float) returns (i80);
function $fp2ui.float.i88(f: float) returns (i88);
function $fp2ui.float.i96(f: float) returns (i96);
function $fp2ui.float.i128(f: float) returns (i128);
function $fp2ui.float.i160(f: float) returns (i160);
function $fp2ui.float.i256(f: float) returns (i256);
function $si2fp.i1.float(i: i1) returns (float);
function $si2fp.i5.float(i: i5) returns (float);
function $si2fp.i6.float(i: i6) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $si2fp.i128.float(i: i128) returns (float);
function $si2fp.i160.float(i: i160) returns (float);
function $si2fp.i256.float(i: i256) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $ui2fp.i5.float(i: i5) returns (float);
function $ui2fp.i6.float(i: i6) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $ui2fp.i160.float(i: i160) returns (float);
function $ui2fp.i256.float(i: i256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, f: float) returns ([ref] i8) { M[p := $bitcast.float.i8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const atmtcp_v_dev_ops_group0: ref;
axiom (atmtcp_v_dev_ops_group0 == $sub.ref(0, 2060));
const atmtcp_v_dev_ops_group1: ref;
axiom (atmtcp_v_dev_ops_group1 == $sub.ref(0, 3092));
const atmtcp_c_dev_ops_group0: ref;
axiom (atmtcp_c_dev_ops_group0 == $sub.ref(0, 4124));
const ldv_state_variable_1: ref;
axiom (ldv_state_variable_1 == $sub.ref(0, 5152));
const ref_cnt: ref;
axiom (ref_cnt == $sub.ref(0, 6180));
const ldv_state_variable_0: ref;
axiom (ldv_state_variable_0 == $sub.ref(0, 7208));
const ldv_state_variable_3: ref;
axiom (ldv_state_variable_3 == $sub.ref(0, 8236));
const ldv_state_variable_2: ref;
axiom (ldv_state_variable_2 == $sub.ref(0, 9264));
const ldv_retval_0: ref;
axiom (ldv_retval_0 == $sub.ref(0, 10292));
const ldv_retval_1: ref;
axiom (ldv_retval_1 == $sub.ref(0, 11320));
const ldv_module_refcounter: ref;
axiom (ldv_module_refcounter == $sub.ref(0, 12348));
const __this_module: ref;
axiom (__this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776)));
const vcc_sklist_lock: ref;
axiom (vcc_sklist_lock == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784)));
const vcc_hash: ref;
axiom (vcc_hash == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792)));
const {:count 39} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 13411));
const current_task: ref;
axiom (current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800)));
const {:count 33} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 14468));
const {:count 11} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 15503));
const .str.6: ref;
axiom (.str.6 == $sub.ref(0, 16528));
const {:count 4} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 17556));
const {:count 25} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 18605));
const atmtcp_ioctl_ops: ref;
axiom (atmtcp_ioctl_ops == $sub.ref(0, 19661));
const atmtcp_v_dev_ops: ref;
axiom (atmtcp_v_dev_ops == $sub.ref(0, 20797));
const .str: ref;
axiom (.str == $sub.ref(0, 21844));
const {:count 7} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 22875));
const atmtcp_control_dev: ref;
axiom (atmtcp_control_dev == $sub.ref(0, 25595));
const atmtcp_c_dev_ops: ref;
axiom (atmtcp_c_dev_ops == $sub.ref(0, 26731));
const {:count 24} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 27779));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 28811));
const {:count 3} .str.1.32: ref;
axiom (.str.1.32 == $sub.ref(0, 29838));
const {:count 14} .str.33: ref;
axiom (.str.33 == $sub.ref(0, 30876));
const errno_global: ref;
axiom (errno_global == $sub.ref(0, 31904));
const __kmalloc: ref;
axiom (__kmalloc == $sub.ref(0, 32936));
procedure  __kmalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6148, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
  call {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6148, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_malloc($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6148, 2} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 33968));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const ldv_malloc: ref;
axiom (ldv_malloc == $sub.ref(0, 35000));
procedure  ldv_malloc($i0: i64)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6171, 13} true;
  assume {:verifier.code 1} true;
  call {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6171, 13} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6172, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6172, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6173, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6175, 11} true;
  assume {:verifier.code 0} true;
  call $p4 := malloc($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6177, 23} true;
  assume {:verifier.code 1} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6177, 41} true;
  assume {:verifier.code 1} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6177, 41} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6177, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6178, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $p4;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6181, 1} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 36032));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const ldv_init_zalloc: ref;
axiom (ldv_init_zalloc == $sub.ref(0, 37064));
procedure  ldv_init_zalloc($i0: i64)
  returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6204, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6204, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := calloc(1, $i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6206, 21} true;
  assume {:verifier.code 1} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6206, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $ne.i64($i2, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6206, 39} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6206, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6207, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const ldv_memset: ref;
axiom (ldv_memset == $sub.ref(0, 38096));
procedure  ldv_memset($p0: ref, $i1: i32, $i2: i64)
  returns ($r: ref)
{
  var $i3: i8;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6214, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
  call {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6214, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i32.i8($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6214, 9} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p0, $i3, $i2, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6215, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 39128));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i1);
const ldv_initialize_atmdev_ops_3: ref;
axiom (ldv_initialize_atmdev_ops_3 == $sub.ref(0, 40160));
procedure  ldv_initialize_atmdev_ops_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7231, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7231, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_init_zalloc(1688);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7232, 29} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7232, 27} true;
  assume {:verifier.code 0} true;
  $M.1 := $p0;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7233, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_init_zalloc(1640);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7234, 29} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7234, 27} true;
  assume {:verifier.code 0} true;
  $M.2 := $p2;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7235, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 41192));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
$bb0:
  call $initialize();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7270, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7270, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_init_zalloc(48);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7271, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7272, 13} true;
  assume {:verifier.code 0} true;
  call $p4 := ldv_init_zalloc(8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7273, 13} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7274, 13} true;
  assume {:verifier.code 0} true;
  call $p6 := ldv_init_zalloc(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7276, 13} true;
  assume {:verifier.code 0} true;
  call $p7 := ldv_init_zalloc(232);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7277, 13} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7278, 13} true;
  assume {:verifier.code 0} true;
  call $p9 := ldv_init_zalloc(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7280, 13} true;
  assume {:verifier.code 0} true;
  call $p10 := ldv_init_zalloc(232);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7281, 13} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7282, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7283, 14} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7283, 3} true;
  assume {:verifier.code 0} true;
  call $p13 := ldv_memset($p12, 0, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7284, 13} true;
  assume {:verifier.code 1} true;
  call $i14 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i14);
  call {:cexpr "ldvarg2"} boogie_si_record_i32($i14);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7285, 14} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7285, 3} true;
  assume {:verifier.code 0} true;
  call $p16 := ldv_memset($p15, 0, 4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7286, 24} true;
  assume {:verifier.code 0} true;
  $M.3 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7287, 11} true;
  assume {:verifier.code 0} true;
  $M.4 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7288, 24} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7289, 24} true;
  assume {:verifier.code 0} true;
  $M.6 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7290, 24} true;
  assume {:verifier.code 0} true;
  $M.7 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7290, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7292, 13} true;
  assume {:verifier.code 1} true;
  call $i17 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i17);
  call {:cexpr "tmp___5"} boogie_si_record_i32($i17);
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  $i18 := $slt.i32($i17, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i18 == 1);
  assume {:verifier.code 0} true;
  $i21 := $slt.i32($i17, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb10, $bb11;
$bb4:
  assume !(($i18 == 1));
  assume {:verifier.code 0} true;
  $i19 := $slt.i32($i17, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i19 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7348, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $M.6;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7348, 28} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i32($i48, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7348, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb57, $bb58;
$bb6:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  $i20 := $eq.i32($i17, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i20 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7420, 7} true;
  assume {:verifier.code 0} true;
  $i97 := $M.7;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7420, 28} true;
  assume {:verifier.code 0} true;
  $i98 := $ne.i32($i97, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7420, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i98} true;
  goto $bb109, $bb110;
$bb8:
  assume {:verifier.code 0} true;
  assume !(($i20 == 1));
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  goto $bb137;
$bb10:
  assume ($i21 == 1);
  assume {:verifier.code 0} true;
  $i22 := $eq.i32($i17, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb12, $bb13;
$bb11:
  assume !(($i21 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7313, 7} true;
  assume {:verifier.code 0} true;
  $i31 := $M.5;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7313, 28} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.i32($i31, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7313, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb27, $bb28;
$bb12:
  assume ($i22 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7295, 7} true;
  assume {:verifier.code 0} true;
  $i23 := $M.3;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7295, 28} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i32($i23, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7295, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb14, $bb15;
$bb13:
  assume {:verifier.code 0} true;
  assume !(($i22 == 1));
  goto $bb9;
$bb14:
  assume ($i24 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7296, 15} true;
  assume {:verifier.code 1} true;
  call $i25 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i25);
  call {:cexpr "tmp___6"} boogie_si_record_i32($i25);
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb16:
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i25, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i26 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7299, 9} true;
  assume {:verifier.code 0} true;
  $i27 := $M.3;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7299, 30} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i32($i27, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7299, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb19, $bb20;
$bb18:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb19:
  assume ($i28 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7300, 38} true;
  assume {:verifier.code 0} true;
  $i29 := $load.i64($M.0, $p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7300, 7} true;
  assume {:verifier.code 0} true;
  call $i30 := atmtcp_ioctl($p3, $i14, $i29);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7301, 28} true;
  assume {:verifier.code 0} true;
  $M.3 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7302, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7304, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7309, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb23:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7306, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7307, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7307, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb25:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7311, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7461, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb27:
  assume ($i32 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7314, 15} true;
  assume {:verifier.code 1} true;
  call $i33 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
  call {:cexpr "tmp___7"} boogie_si_record_i32($i33);
  assume {:verifier.code 0} true;
  goto $bb29;
$bb28:
  assume !(($i32 == 1));
  assume {:verifier.code 0} true;
  goto $bb56;
$bb29:
  assume {:verifier.code 0} true;
  $i34 := $slt.i32($i33, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i34 == 1);
  assume {:verifier.code 0} true;
  $i36 := $eq.i32($i33, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb35, $bb36;
$bb31:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  $i35 := $eq.i32($i33, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i35 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7325, 9} true;
  assume {:verifier.code 0} true;
  $i41 := $M.5;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7325, 30} true;
  assume {:verifier.code 0} true;
  $i42 := $eq.i32($i41, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7325, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb45, $bb46;
$bb33:
  assume {:verifier.code 0} true;
  assume !(($i35 == 1));
  goto $bb34;
$bb34:
  assume {:verifier.code 0} true;
  goto $bb54;
$bb35:
  assume ($i36 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7317, 9} true;
  assume {:verifier.code 0} true;
  $i37 := $M.5;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7317, 30} true;
  assume {:verifier.code 0} true;
  $i38 := $eq.i32($i37, 3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7317, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb37, $bb38;
$bb36:
  assume {:verifier.code 0} true;
  assume !(($i36 == 1));
  goto $bb34;
$bb37:
  assume ($i38 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7317, 38} true;
  assume {:verifier.code 0} true;
  $i39 := $M.4;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7317, 46} true;
  assume {:verifier.code 0} true;
  $i40 := $eq.i32($i39, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7317, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb40, $bb41;
$bb38:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7317, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i38 == 1));
  goto $bb39;
$bb39:
  assume {:verifier.code 0} true;
  goto $bb43;
$bb40:
  assume ($i40 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7318, 7} true;
  assume {:verifier.code 0} true;
  call atmtcp_exit();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7319, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 2;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7320, 7} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb41:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7317, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i40 == 1));
  goto $bb39;
$bb42:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7463, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7464, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
$bb43:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7344, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb45:
  assume ($i42 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7326, 22} true;
  assume {:verifier.code 0} true;
  call $i43 := atmtcp_init();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7326, 20} true;
  assume {:verifier.code 0} true;
  $M.8 := $i43;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32($i43);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7327, 11} true;
  assume {:verifier.code 0} true;
  $i44 := $M.8;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7327, 24} true;
  assume {:verifier.code 0} true;
  $i45 := $eq.i32($i44, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7327, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb47, $bb48;
$bb46:
  assume !(($i42 == 1));
  assume {:verifier.code 0} true;
  goto $bb53;
$bb47:
  assume ($i45 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7328, 30} true;
  assume {:verifier.code 0} true;
  $M.5 := 3;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7329, 30} true;
  assume {:verifier.code 0} true;
  $M.3 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7330, 7} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb48:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb49;
$bb49:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7332, 11} true;
  assume {:verifier.code 0} true;
  $i46 := $M.8;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7332, 24} true;
  assume {:verifier.code 0} true;
  $i47 := $ne.i32($i46, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7332, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i47} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i47 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7333, 30} true;
  assume {:verifier.code 0} true;
  $M.5 := 2;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7334, 9} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb51:
  assume !(($i47 == 1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7337, 5} true;
  assume {:verifier.code 0} true;
  goto $bb53;
$bb53:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7339, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb54:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7341, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7342, 5} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7342, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb56:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7346, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb57:
  assume ($i49 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7349, 15} true;
  assume {:verifier.code 1} true;
  call $i50 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i50);
  call {:cexpr "tmp___8"} boogie_si_record_i32($i50);
  assume {:verifier.code 0} true;
  goto $bb59;
$bb58:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb108;
$bb59:
  assume {:verifier.code 0} true;
  $i51 := $slt.i32($i50, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb60, $bb61;
$bb60:
  assume ($i51 == 1);
  assume {:verifier.code 0} true;
  $i55 := $slt.i32($i50, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb69, $bb70;
$bb61:
  assume !(($i51 == 1));
  assume {:verifier.code 0} true;
  $i52 := $slt.i32($i50, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb62, $bb63;
$bb62:
  assume ($i52 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7383, 9} true;
  assume {:verifier.code 0} true;
  $i78 := $M.6;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7383, 30} true;
  assume {:verifier.code 0} true;
  $i79 := $eq.i32($i78, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7383, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb91, $bb92;
$bb63:
  assume !(($i52 == 1));
  assume {:verifier.code 0} true;
  $i53 := $slt.i32($i50, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb64, $bb65;
$bb64:
  assume ($i53 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7395, 9} true;
  assume {:verifier.code 0} true;
  $i86 := $M.6;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7395, 30} true;
  assume {:verifier.code 0} true;
  $i87 := $eq.i32($i86, 2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7395, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb97, $bb98;
$bb65:
  assume !(($i53 == 1));
  assume {:verifier.code 0} true;
  $i54 := $eq.i32($i50, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb66, $bb67;
$bb66:
  assume ($i54 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7402, 9} true;
  assume {:verifier.code 0} true;
  $i89 := $M.6;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7402, 30} true;
  assume {:verifier.code 0} true;
  $i90 := $eq.i32($i89, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7402, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i90} true;
  goto $bb100, $bb101;
$bb67:
  assume {:verifier.code 0} true;
  assume !(($i54 == 1));
  goto $bb68;
$bb68:
  assume {:verifier.code 0} true;
  goto $bb106;
$bb69:
  assume ($i55 == 1);
  assume {:verifier.code 0} true;
  $i57 := $eq.i32($i50, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb73, $bb74;
$bb70:
  assume !(($i55 == 1));
  assume {:verifier.code 0} true;
  $i56 := $slt.i32($i50, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb71, $bb72;
$bb71:
  assume ($i56 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7359, 9} true;
  assume {:verifier.code 0} true;
  $i62 := $M.6;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7359, 30} true;
  assume {:verifier.code 0} true;
  $i63 := $eq.i32($i62, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7359, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb79, $bb80;
$bb72:
  assume !(($i56 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7371, 9} true;
  assume {:verifier.code 0} true;
  $i72 := $M.6;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7371, 30} true;
  assume {:verifier.code 0} true;
  $i73 := $eq.i32($i72, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7371, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i73} true;
  goto $bb85, $bb86;
$bb73:
  assume ($i57 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7352, 9} true;
  assume {:verifier.code 0} true;
  $i58 := $M.6;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7352, 30} true;
  assume {:verifier.code 0} true;
  $i59 := $eq.i32($i58, 2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7352, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i59} true;
  goto $bb75, $bb76;
$bb74:
  assume {:verifier.code 0} true;
  assume !(($i57 == 1));
  goto $bb68;
$bb75:
  assume ($i59 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7353, 21} true;
  assume {:verifier.code 0} true;
  $p60 := $M.1;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7353, 7} true;
  assume {:verifier.code 0} true;
  call $i61 := atmtcp_v_proc($p60, $p5, $p9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7354, 28} true;
  assume {:verifier.code 0} true;
  $M.6 := 2;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7355, 5} true;
  assume {:verifier.code 0} true;
  goto $bb77;
$bb76:
  assume !(($i59 == 1));
  assume {:verifier.code 0} true;
  goto $bb77;
$bb77:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7357, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb78:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7416, 3} true;
  assume {:verifier.code 0} true;
  goto $bb108;
$bb79:
  assume ($i63 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7360, 22} true;
  assume {:verifier.code 0} true;
  $p64 := $M.1;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7360, 47} true;
  assume {:verifier.code 0} true;
  $i65 := $load.i32($M.0, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7360, 7} true;
  assume {:verifier.code 0} true;
  call $i66 := atmtcp_v_ioctl($p64, $i65, $p6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7361, 28} true;
  assume {:verifier.code 0} true;
  $M.6 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7362, 5} true;
  assume {:verifier.code 0} true;
  goto $bb81;
$bb80:
  assume !(($i63 == 1));
  assume {:verifier.code 0} true;
  goto $bb81;
$bb81:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7364, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $M.6;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7364, 30} true;
  assume {:verifier.code 0} true;
  $i68 := $eq.i32($i67, 2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7364, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb82, $bb83;
$bb82:
  assume ($i68 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7365, 22} true;
  assume {:verifier.code 0} true;
  $p69 := $M.1;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7365, 47} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i32($M.0, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7365, 7} true;
  assume {:verifier.code 0} true;
  call $i71 := atmtcp_v_ioctl($p69, $i70, $p6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7366, 28} true;
  assume {:verifier.code 0} true;
  $M.6 := 2;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7367, 5} true;
  assume {:verifier.code 0} true;
  goto $bb84;
$bb83:
  assume !(($i68 == 1));
  assume {:verifier.code 0} true;
  goto $bb84;
$bb84:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7369, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb85:
  assume ($i73 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7372, 26} true;
  assume {:verifier.code 0} true;
  $p74 := $M.1;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7372, 7} true;
  assume {:verifier.code 0} true;
  call atmtcp_v_dev_close($p74);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7373, 28} true;
  assume {:verifier.code 0} true;
  $M.6 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7374, 5} true;
  assume {:verifier.code 0} true;
  goto $bb87;
$bb86:
  assume !(($i73 == 1));
  assume {:verifier.code 0} true;
  goto $bb87;
$bb87:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7376, 9} true;
  assume {:verifier.code 0} true;
  $i75 := $M.6;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7376, 30} true;
  assume {:verifier.code 0} true;
  $i76 := $eq.i32($i75, 2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7376, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i76} true;
  goto $bb88, $bb89;
$bb88:
  assume ($i76 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7377, 26} true;
  assume {:verifier.code 0} true;
  $p77 := $M.1;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7377, 7} true;
  assume {:verifier.code 0} true;
  call atmtcp_v_dev_close($p77);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7378, 28} true;
  assume {:verifier.code 0} true;
  $M.6 := 2;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7379, 5} true;
  assume {:verifier.code 0} true;
  goto $bb90;
$bb89:
  assume !(($i76 == 1));
  assume {:verifier.code 0} true;
  goto $bb90;
$bb90:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7381, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb91:
  assume ($i79 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7384, 21} true;
  assume {:verifier.code 0} true;
  $p80 := $M.2;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7384, 7} true;
  assume {:verifier.code 0} true;
  call $i81 := atmtcp_v_send($p80, $p8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7385, 28} true;
  assume {:verifier.code 0} true;
  $M.6 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7386, 5} true;
  assume {:verifier.code 0} true;
  goto $bb93;
$bb92:
  assume !(($i79 == 1));
  assume {:verifier.code 0} true;
  goto $bb93;
$bb93:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7388, 9} true;
  assume {:verifier.code 0} true;
  $i82 := $M.6;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7388, 30} true;
  assume {:verifier.code 0} true;
  $i83 := $eq.i32($i82, 2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7388, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i83} true;
  goto $bb94, $bb95;
$bb94:
  assume ($i83 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7389, 21} true;
  assume {:verifier.code 0} true;
  $p84 := $M.2;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7389, 7} true;
  assume {:verifier.code 0} true;
  call $i85 := atmtcp_v_send($p84, $p8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7390, 28} true;
  assume {:verifier.code 0} true;
  $M.6 := 2;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7391, 5} true;
  assume {:verifier.code 0} true;
  goto $bb96;
$bb95:
  assume !(($i83 == 1));
  assume {:verifier.code 0} true;
  goto $bb96;
$bb96:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7393, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb97:
  assume ($i87 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7396, 22} true;
  assume {:verifier.code 0} true;
  $p88 := $M.2;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7396, 7} true;
  assume {:verifier.code 0} true;
  call atmtcp_v_close($p88);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7397, 28} true;
  assume {:verifier.code 0} true;
  $M.6 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7398, 5} true;
  assume {:verifier.code 0} true;
  goto $bb99;
$bb98:
  assume !(($i87 == 1));
  assume {:verifier.code 0} true;
  goto $bb99;
$bb99:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7400, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb100:
  assume ($i90 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7403, 36} true;
  assume {:verifier.code 0} true;
  $p91 := $M.2;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7403, 22} true;
  assume {:verifier.code 0} true;
  call $i92 := atmtcp_v_open($p91);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7403, 20} true;
  assume {:verifier.code 0} true;
  $M.9 := $i92;
  call {:cexpr "ldv_retval_1"} boogie_si_record_i32($i92);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7404, 11} true;
  assume {:verifier.code 0} true;
  $i93 := $M.9;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7404, 24} true;
  assume {:verifier.code 0} true;
  $i94 := $eq.i32($i93, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7404, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i94} true;
  goto $bb102, $bb103;
$bb101:
  assume !(($i90 == 1));
  assume {:verifier.code 0} true;
  goto $bb105;
$bb102:
  assume ($i94 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7405, 30} true;
  assume {:verifier.code 0} true;
  $M.6 := 2;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7406, 19} true;
  assume {:verifier.code 0} true;
  $i95 := $M.4;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7406, 27} true;
  assume {:verifier.code 0} true;
  $i96 := $add.i32($i95, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7406, 17} true;
  assume {:verifier.code 0} true;
  $M.4 := $i96;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i96);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7407, 7} true;
  assume {:verifier.code 0} true;
  goto $bb104;
$bb103:
  assume !(($i94 == 1));
  assume {:verifier.code 0} true;
  goto $bb104;
$bb104:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7409, 5} true;
  assume {:verifier.code 0} true;
  goto $bb105;
$bb105:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7411, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb106:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7413, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7414, 5} true;
  assume {:verifier.code 0} true;
  goto $bb107;
$bb107:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7414, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb108:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7418, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb109:
  assume ($i98 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7421, 15} true;
  assume {:verifier.code 1} true;
  call $i99 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i99);
  call {:cexpr "tmp___9"} boogie_si_record_i32($i99);
  assume {:verifier.code 0} true;
  goto $bb111;
$bb110:
  assume !(($i98 == 1));
  assume {:verifier.code 0} true;
  goto $bb136;
$bb111:
  assume {:verifier.code 0} true;
  $i100 := $slt.i32($i99, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb112, $bb113;
$bb112:
  assume ($i100 == 1);
  assume {:verifier.code 0} true;
  $i103 := $eq.i32($i99, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb119, $bb120;
$bb113:
  assume !(($i100 == 1));
  assume {:verifier.code 0} true;
  $i101 := $slt.i32($i99, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i101} true;
  goto $bb114, $bb115;
$bb114:
  assume ($i101 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7436, 9} true;
  assume {:verifier.code 0} true;
  $i112 := $M.7;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7436, 30} true;
  assume {:verifier.code 0} true;
  $i113 := $eq.i32($i112, 2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7436, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i113} true;
  goto $bb128, $bb129;
$bb115:
  assume !(($i101 == 1));
  assume {:verifier.code 0} true;
  $i102 := $eq.i32($i99, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i102} true;
  goto $bb116, $bb117;
$bb116:
  assume ($i102 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7443, 9} true;
  assume {:verifier.code 0} true;
  $i115 := $M.7;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7443, 30} true;
  assume {:verifier.code 0} true;
  $i116 := $eq.i32($i115, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7443, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i116} true;
  goto $bb131, $bb132;
$bb117:
  assume {:verifier.code 0} true;
  assume !(($i102 == 1));
  goto $bb118;
$bb118:
  assume {:verifier.code 0} true;
  goto $bb134;
$bb119:
  assume ($i103 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7424, 9} true;
  assume {:verifier.code 0} true;
  $i104 := $M.7;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7424, 30} true;
  assume {:verifier.code 0} true;
  $i105 := $eq.i32($i104, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7424, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i105} true;
  goto $bb121, $bb122;
$bb120:
  assume {:verifier.code 0} true;
  assume !(($i103 == 1));
  goto $bb118;
$bb121:
  assume ($i105 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7425, 21} true;
  assume {:verifier.code 0} true;
  $p106 := $M.10;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7425, 7} true;
  assume {:verifier.code 0} true;
  call $i107 := atmtcp_c_send($p106, $p11);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7426, 28} true;
  assume {:verifier.code 0} true;
  $M.7 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7427, 5} true;
  assume {:verifier.code 0} true;
  goto $bb123;
$bb122:
  assume !(($i105 == 1));
  assume {:verifier.code 0} true;
  goto $bb123;
$bb123:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7429, 9} true;
  assume {:verifier.code 0} true;
  $i108 := $M.7;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7429, 30} true;
  assume {:verifier.code 0} true;
  $i109 := $eq.i32($i108, 2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7429, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i109} true;
  goto $bb124, $bb125;
$bb124:
  assume ($i109 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7430, 21} true;
  assume {:verifier.code 0} true;
  $p110 := $M.10;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7430, 7} true;
  assume {:verifier.code 0} true;
  call $i111 := atmtcp_c_send($p110, $p11);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7431, 28} true;
  assume {:verifier.code 0} true;
  $M.7 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7432, 5} true;
  assume {:verifier.code 0} true;
  goto $bb126;
$bb125:
  assume !(($i109 == 1));
  assume {:verifier.code 0} true;
  goto $bb126;
$bb126:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7434, 5} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb127:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7454, 3} true;
  assume {:verifier.code 0} true;
  goto $bb136;
$bb128:
  assume ($i113 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7437, 22} true;
  assume {:verifier.code 0} true;
  $p114 := $M.10;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7437, 7} true;
  assume {:verifier.code 0} true;
  call atmtcp_c_close($p114);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7438, 28} true;
  assume {:verifier.code 0} true;
  $M.7 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7439, 5} true;
  assume {:verifier.code 0} true;
  goto $bb130;
$bb129:
  assume !(($i113 == 1));
  assume {:verifier.code 0} true;
  goto $bb130;
$bb130:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7441, 5} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb131:
  assume ($i116 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7444, 7} true;
  assume {:verifier.code 0} true;
  call $i117 := ldv_open_2();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7445, 28} true;
  assume {:verifier.code 0} true;
  $M.7 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7446, 17} true;
  assume {:verifier.code 0} true;
  $i118 := $M.4;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7446, 25} true;
  assume {:verifier.code 0} true;
  $i119 := $add.i32($i118, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7446, 15} true;
  assume {:verifier.code 0} true;
  $M.4 := $i119;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i119);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7447, 5} true;
  assume {:verifier.code 0} true;
  goto $bb133;
$bb132:
  assume !(($i116 == 1));
  assume {:verifier.code 0} true;
  goto $bb133;
$bb133:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7449, 5} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb134:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7451, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7452, 5} true;
  assume {:verifier.code 0} true;
  goto $bb135;
$bb135:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7452, 5} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb136:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7456, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb137:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7458, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7459, 3} true;
  assume {:verifier.code 0} true;
  goto $bb138;
$bb138:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7459, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
}
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 42224));
procedure  ldv_initialize()
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7692, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7692, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_ioctl: ref;
axiom (atmtcp_ioctl == $sub.ref(0, 43256));
procedure  atmtcp_ioctl($p0: ref, $i1: i32, $i2: i64)
  returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i21: i32;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7170, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atmtcp_ioctl:arg:cmd"} boogie_si_record_i32($i1);
  call {:cexpr "atmtcp_ioctl:arg:arg"} boogie_si_record_i64($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7170, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := ATM_SD($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7172, 12} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i1, 24960);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7172, 22} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7172, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i1, 24974);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7172, 40} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7172, 22} true;
  assume {:verifier.code 0} true;
  assume !(($i4 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb9;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7172, 47} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i1, 24975);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7172, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb6, $bb7;
$bb5:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7172, 40} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i6 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7173, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 515);
  goto $bb8;
$bb7:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7172, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb3;
$bb8:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7205, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7176, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := capable(12);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7176, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i1.i8($i8);
  call {:cexpr "tmp___0"} boogie_si_record_i8($i9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7177, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i8.i1($i9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7177, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i10 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7179, 3} true;
  assume {:verifier.code 0} true;
  $i11 := 0;
  goto $bb12;
$bb11:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  $i11 := 1;
  goto $bb12;
$bb12:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7182, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i11, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7182, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i12 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7183, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 1);
  goto $bb8;
$bb14:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  $i13 := $slt.i32($i1, 24974);
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i13 == 1);
  assume {:verifier.code 0} true;
  $i16 := $eq.i32($i1, 24960);
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb24, $bb25;
$bb18:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  $i14 := $slt.i32($i1, 24975);
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i14 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7196, 34} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.i64.i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7196, 9} true;
  assume {:verifier.code 0} true;
  call $i23 := atmtcp_create_persistent($i22);
  call {:cexpr "err"} boogie_si_record_i32($i23);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7197, 3} true;
  assume {:verifier.code 0} true;
  $i21 := $i23;
  goto $bb29;
$bb20:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i1, 24975);
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i15 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7199, 34} true;
  assume {:verifier.code 0} true;
  $i24 := $trunc.i64.i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7199, 9} true;
  assume {:verifier.code 0} true;
  call $i25 := atmtcp_remove_persistent($i24);
  call {:cexpr "err"} boogie_si_record_i32($i25);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7200, 3} true;
  assume {:verifier.code 0} true;
  $i21 := $i25;
  goto $bb29;
$bb22:
  assume {:verifier.code 0} true;
  assume !(($i15 == 1));
  goto $bb23;
$bb23:
  assume {:verifier.code 0} true;
  goto $bb30;
$bb24:
  assume ($i16 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7188, 28} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i64.i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7188, 9} true;
  assume {:verifier.code 0} true;
  call $i18 := atmtcp_attach($p3, $i17);
  call {:cexpr "err"} boogie_si_record_i32($i18);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7189, 11} true;
  assume {:verifier.code 0} true;
  $i19 := $sge.i32($i18, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7189, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb26, $bb27;
$bb25:
  assume {:verifier.code 0} true;
  assume !(($i16 == 1));
  goto $bb23;
$bb26:
  assume ($i19 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7190, 11} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7190, 17} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i32($M.11, $p20, 3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7191, 5} true;
  assume {:verifier.code 0} true;
  call ldv___module_get_9(__this_module);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7192, 3} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7194, 3} true;
  assume {:verifier.code 0} true;
  $i21 := $i18;
  goto $bb29;
$bb29:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7203, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i21;
  goto $bb8;
$bb30:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7201, 3} true;
  assume {:verifier.code 0} true;
  $i21 := 0;
  goto $bb29;
}
const ldv_stop: ref;
axiom (ldv_stop == $sub.ref(0, 44288));
procedure  ldv_stop()
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6244, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6244, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6246, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb2:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6248, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_exit: ref;
axiom (atmtcp_exit == $sub.ref(0, 45320));
procedure  atmtcp_exit()
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7217, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7217, 3} true;
  assume {:verifier.code 0} true;
  call deregister_atm_ioctl(atmtcp_ioctl_ops);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7218, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_init: ref;
axiom (atmtcp_init == $sub.ref(0, 46352));
procedure  atmtcp_init()
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7210, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7210, 3} true;
  assume {:verifier.code 0} true;
  call register_atm_ioctl(atmtcp_ioctl_ops);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7211, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const atmtcp_v_proc: ref;
axiom (atmtcp_v_proc == $sub.ref(0, 47384));
procedure  atmtcp_v_proc($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i8: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6802, 45} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6802, 45} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6802, 45} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.11, $p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6802, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6803, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i64($M.11, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6803, 12} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6803, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6804, 5} true;
  assume {:verifier.code 0} true;
  $i8 := 0;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6815, 1} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6807, 17} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6807, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.11, $p9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6807, 25} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i10, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6807, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i11 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6808, 11} true;
  assume {:verifier.code 0} true;
  call $i12 := sprintf.ref.ref($p2, .str.4);
  call {:cexpr "tmp"} boogie_si_record_i32($i12);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6809, 5} true;
  assume {:verifier.code 0} true;
  $i8 := $i12;
  goto $bb3;
$bb6:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6812, 82} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6812, 82} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.11, $p13);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6812, 56} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p14);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6812, 86} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i64($i15, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6812, 56} true;
  assume {:verifier.code 0} true;
  $p17 := (if ($i16 == 1) then .str.6 else .str.7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6812, 13} true;
  assume {:verifier.code 0} true;
  call $i18 := sprintf.ref.ref.ref($p2, .str.5, $p17);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i18);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6813, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $i18;
  goto $bb3;
}
const atmtcp_v_ioctl: ref;
axiom (atmtcp_v_ioctl == $sub.ref(0, 48416));
procedure  atmtcp_v_ioctl($p0: ref, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p47: ref;
  var $i81: i32;
  var $i82: i1;
  var $i35: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i5: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6647, 11} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
  call {:cexpr "atmtcp_v_ioctl:arg:cmd"} boogie_si_record_i32($i1);
  assume true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6647, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i1, 1074815371);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6647, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6648, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 515);
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6717, 1} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6651, 24} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6651, 9} true;
  assume {:verifier.code 0} true;
  call $i7 := copy_from_user($p6, $p2, 2);
  call {:cexpr "tmp"} boogie_si_record_i64($i7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6652, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6652, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6653, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 14);
  goto $bb3;
$bb6:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6656, 16} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6656, 16} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i8($M.12, $p9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6656, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i8.i32($i10);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6656, 25} true;
  assume {:verifier.code 0} true;
  $i12 := $eq.i32($i11, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6656, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i12 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6657, 8} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6657, 17} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.i8($M.12, $p13, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6658, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6660, 16} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6660, 16} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i8($M.12, $p14);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6660, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $sext.i8.i32($i15);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6660, 25} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i16, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6660, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i17 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6661, 8} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6661, 17} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.i8($M.12, $p18, 16);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6662, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 18} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 18} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i8($M.12, $p19);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 9} true;
  assume {:verifier.code 0} true;
  $i21 := $sext.i8.i32($i20);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 27} true;
  assume {:verifier.code 0} true;
  $i22 := $sgt.i32($i21, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 31} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb14, $bb16;
$bb14:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 31} true;
  assume {:verifier.code 0} true;
  assume ($i22 == 1);
  goto $bb15;
$bb15:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6665, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 22);
  goto $bb3;
$bb16:
  assume !(($i22 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 43} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 43} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i8($M.12, $p23);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 34} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.i8.i32($i24);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 52} true;
  assume {:verifier.code 0} true;
  $i26 := $slt.i32($i25, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 57} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb17, $bb18;
$bb17:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 57} true;
  assume {:verifier.code 0} true;
  assume ($i26 == 1);
  goto $bb15;
$bb18:
  assume !(($i26 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 69} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 69} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i8($M.12, $p27);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 60} true;
  assume {:verifier.code 0} true;
  $i29 := $sext.i8.i32($i28);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 78} true;
  assume {:verifier.code 0} true;
  $i30 := $sgt.i32($i29, 16);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 84} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb19, $bb20;
$bb19:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 84} true;
  assume {:verifier.code 0} true;
  assume ($i30 == 1);
  goto $bb15;
$bb20:
  assume !(($i30 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 96} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 96} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i8($M.12, $p31);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 87} true;
  assume {:verifier.code 0} true;
  $i33 := $sext.i8.i32($i32);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 105} true;
  assume {:verifier.code 0} true;
  $i34 := $slt.i32($i33, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb21, $bb22;
$bb21:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6664, 7} true;
  assume {:verifier.code 0} true;
  assume ($i34 == 1);
  goto $bb15;
$bb22:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6668, 3} true;
  assume {:verifier.code 0} true;
  call _raw_read_lock(vcc_sklist_lock);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6709, 7} true;
  assume {:verifier.code 0} true;
  $i35 := 0;
  goto $bb24;
$bb24:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6710, 5} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6672, 46} true;
  assume {:verifier.code 0} true;
  $i36 := $sext.i32.i64($i35);
  $p37 := $add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref($i36, 8));
  $p38 := $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref($i36, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6673, 19} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.13, $p38);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6674, 7} true;
  assume {:verifier.code 0} true;
  $i40 := $p2i.ref.i64($p39);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6674, 31} true;
  assume {:verifier.code 0} true;
  $i41 := $ne.i64($i40, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6674, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i41 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6676, 15} true;
  assume {:verifier.code 0} true;
  $p42 := $bitcast.ref.ref($p39);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6676, 37} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p42, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6677, 3} true;
  assume {:verifier.code 0} true;
  $p44 := $p43;
  goto $bb28;
$bb27:
  assume !(($i41 == 1));
  assume {:verifier.code 0} true;
  $p44 := $0.ref;
  goto $bb28;
$bb28:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6703, 7} true;
  assume {:verifier.code 0} true;
  $i45 := $p2i.ref.i64($p44);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6703, 25} true;
  assume {:verifier.code 0} true;
  $i46 := $ne.i64($i45, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6703, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i46 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6703, 7} true;
  assume {:verifier.code 0} true;
  $p47 := $p44;
  goto $bb32;
$bb30:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6703, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i46 == 1));
  goto $bb31;
$bb31:
  assume {:verifier.code 0} true;
  goto $bb49;
$bb32:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6704, 5} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6683, 9} true;
  assume {:verifier.code 0} true;
  call $p48 := atm_sk($p47);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6684, 28} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1648)), $mul.ref(1320, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6684, 28} true;
  assume {:verifier.code 0} true;
  $p50 := $load.ref($M.11, $p49);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6684, 7} true;
  assume {:verifier.code 0} true;
  $i51 := $p2i.ref.i64($p50);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6684, 35} true;
  assume {:verifier.code 0} true;
  $i52 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6684, 32} true;
  assume {:verifier.code 0} true;
  $i53 := $ne.i64($i51, $i52);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6684, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i53 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6685, 5} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume !(($i53 == 1));
  assume {:verifier.code 0} true;
  goto $bb37;
$bb36:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6694, 20} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($add.ref($p47, $mul.ref(0, 1288)), $mul.ref(0, 1));
  $p70 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6694, 52} true;
  assume {:verifier.code 0} true;
  $p71 := $bitcast.ref.ref($p70);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6694, 61} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($add.ref($p71, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6694, 61} true;
  assume {:verifier.code 0} true;
  $p73 := $load.ref($M.11, $p72);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6695, 7} true;
  assume {:verifier.code 0} true;
  $i74 := $p2i.ref.i64($p73);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6695, 35} true;
  assume {:verifier.code 0} true;
  $i75 := $ne.i64($i74, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6695, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i75} true;
  goto $bb44, $bb45;
$bb37:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 18} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p48, $mul.ref(0, 1648)), $mul.ref(1296, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 18} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i16($M.11, $p54);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 7} true;
  assume {:verifier.code 0} true;
  $i56 := $sext.i16.i32($i55);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 34} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 34} true;
  assume {:verifier.code 0} true;
  $i58 := $load.i8($M.12, $p57);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 25} true;
  assume {:verifier.code 0} true;
  $i59 := $sext.i8.i32($i58);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 22} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i:6688:22: warning: over-approximating bitwise operation ashr;
  $i60 := $ashr.i32($i56, $i59);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 43} true;
  assume {:verifier.code 0} true;
  $i61 := $ne.i32($i60, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb38, $bb40;
$bb38:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 48} true;
  assume {:verifier.code 0} true;
  assume ($i61 == 1);
  goto $bb39;
$bb39:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6689, 5} true;
  assume {:verifier.code 0} true;
  call _raw_read_unlock(vcc_sklist_lock);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6690, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 16);
  goto $bb3;
$bb40:
  assume !(($i61 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 56} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p48, $mul.ref(0, 1648)), $mul.ref(1300, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 56} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i32($M.11, $p62);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 72} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 72} true;
  assume {:verifier.code 0} true;
  $i65 := $load.i8($M.12, $p64);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 63} true;
  assume {:verifier.code 0} true;
  $i66 := $sext.i8.i32($i65);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 60} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i:6688:60: warning: over-approximating bitwise operation ashr;
  $i67 := $ashr.i32($i63, $i66);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 81} true;
  assume {:verifier.code 0} true;
  $i68 := $ne.i32($i67, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb41, $bb42;
$bb41:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 7} true;
  assume {:verifier.code 0} true;
  assume ($i68 == 1);
  goto $bb39;
$bb42:
  assume !(($i68 == 1));
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6688, 84} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb44:
  assume ($i75 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6697, 15} true;
  assume {:verifier.code 0} true;
  $p76 := $bitcast.ref.ref($p73);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6697, 41} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p76, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6698, 3} true;
  assume {:verifier.code 0} true;
  $p78 := $p77;
  goto $bb46;
$bb45:
  assume !(($i75 == 1));
  assume {:verifier.code 0} true;
  $p78 := $0.ref;
  goto $bb46;
$bb46:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6703, 7} true;
  assume {:verifier.code 0} true;
  $i79 := $p2i.ref.i64($p78);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6703, 25} true;
  assume {:verifier.code 0} true;
  $i80 := $ne.i64($i79, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6703, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb47, $bb48;
$bb47:
  assume ($i80 == 1);
  assume {:verifier.code 0} true;
  $p47 := $p78;
  goto $bb32;
$bb48:
  assume !(($i80 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6703, 7} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb49:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6707, 9} true;
  assume {:verifier.code 0} true;
  $i81 := $add.i32($i35, 1);
  call {:cexpr "i"} boogie_si_record_i32($i81);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6709, 9} true;
  assume {:verifier.code 0} true;
  $i82 := $sle.i32($i81, 31);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6709, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i82 == 1);
  assume {:verifier.code 0} true;
  $i35 := $i81;
  goto $bb24;
$bb51:
  assume !(($i82 == 1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6713, 3} true;
  assume {:verifier.code 0} true;
  call _raw_read_unlock(vcc_sklist_lock);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6714, 8} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(94, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6714, 19} true;
  assume {:verifier.code 0} true;
  $p84 := $bitcast.ref.ref($p83);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6714, 19} true;
  assume {:verifier.code 0} true;
  $p85 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6714, 19} true;
  assume {:verifier.code 0} true;
  call $M.11 := $memcpy.i8($M.11, $M.12, $p84, $p85, 2, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6715, 3} true;
  assume {:verifier.code 0} true;
  $i5 := 0;
  goto $bb3;
}
const atmtcp_v_dev_close: ref;
axiom (atmtcp_v_dev_close == $sub.ref(0, 49448));
procedure  atmtcp_v_dev_close($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6579, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6579, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_v_send: ref;
axiom (atmtcp_v_send == $sub.ref(0, 50480));
procedure  atmtcp_v_send($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i16;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i16;
  var $i68: i16;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i14: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6732, 27} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6732, 27} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1328, 1));
  $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1328, 1)), $mul.ref(0, 1));
  $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6732, 36} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i8($M.11, $p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6732, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i8.i32($i5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6732, 50} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i6, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6732, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6733, 30} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6733, 30} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.11, $p8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6733, 9} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6733, 34} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i64($i10, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6733, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb3:
  assume ($i11 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6735, 15} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6735, 15} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.11, $p12);
  call devirtbounce($p13, $p0, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6736, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i11 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6737, 7} true;
  assume {:verifier.code 0} true;
  call consume_skb($p1);
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6739, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 22);
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6795, 1} true;
  assume {:verifier.code 0} true;
  $r := $i14;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6742, 46} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6742, 46} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.11, $p15);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6742, 52} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6742, 52} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.11, $p17);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6742, 14} true;
  assume {:verifier.code 0} true;
  $p19 := $bitcast.ref.ref($p18);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6743, 7} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p19);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6743, 32} true;
  assume {:verifier.code 0} true;
  $i21 := $ne.i64($i20, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6743, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i21 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6744, 25} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6744, 25} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.11, $p22);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6745, 3} true;
  assume {:verifier.code 0} true;
  $p24 := $p23;
  goto $bb10;
$bb9:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  $p24 := $0.ref;
  goto $bb10;
$bb10:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6747, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $p2i.ref.i64($p19);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6747, 32} true;
  assume {:verifier.code 0} true;
  $i26 := $eq.i64($i25, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6747, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb11, $bb13;
$bb11:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6747, 81} true;
  assume {:verifier.code 0} true;
  assume ($i26 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6748, 30} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6748, 30} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.11, $p29);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6748, 9} true;
  assume {:verifier.code 0} true;
  $i31 := $p2i.ref.i64($p30);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6748, 34} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.i64($i31, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6748, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb16, $bb17;
$bb13:
  assume !(($i26 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6747, 84} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64($p24);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6747, 108} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i64($i27, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6747, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb14, $bb15;
$bb14:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6747, 7} true;
  assume {:verifier.code 0} true;
  assume ($i28 == 1);
  goto $bb12;
$bb15:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb16:
  assume ($i32 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6750, 15} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6750, 15} true;
  assume {:verifier.code 0} true;
  $p34 := $load.ref($M.11, $p33);
  call devirtbounce($p34, $p0, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6751, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume !(($i32 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6752, 7} true;
  assume {:verifier.code 0} true;
  call consume_skb($p1);
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6754, 9} true;
  assume {:verifier.code 0} true;
  $i35 := $p2i.ref.i64($p19);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6754, 34} true;
  assume {:verifier.code 0} true;
  $i36 := $ne.i64($i35, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6754, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i36 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6755, 7} true;
  assume {:verifier.code 0} true;
  $i14 := 0;
  goto $bb6;
$bb20:
  assume !(($i36 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6758, 24} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6758, 24} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.11, $p37);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6758, 32} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p38, $mul.ref(0, 20)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6758, 5} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p39);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6759, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 67);
  goto $bb6;
$bb22:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6762, 22} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6762, 22} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.11, $p40);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6762, 26} true;
  assume {:verifier.code 0} true;
  $i42 := $add.i32($i41, 8);
  call {:cexpr "size"} boogie_si_record_i32($i42);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6763, 13} true;
  assume {:verifier.code 0} true;
  call $p43 := atm_alloc_charge($p24, $i42, 32);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6764, 7} true;
  assume {:verifier.code 0} true;
  $i44 := $p2i.ref.i64($p43);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6764, 31} true;
  assume {:verifier.code 0} true;
  $i45 := $eq.i64($i44, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6764, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i45 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6765, 30} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6765, 30} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.11, $p46);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6765, 9} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($p47);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6765, 34} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i64($i48, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6765, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb25, $bb26;
$bb24:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb25:
  assume ($i49 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6767, 15} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6767, 15} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.11, $p50);
  call devirtbounce($p51, $p0, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6768, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume !(($i49 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6769, 7} true;
  assume {:verifier.code 0} true;
  call consume_skb($p1);
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6771, 24} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6771, 24} true;
  assume {:verifier.code 0} true;
  $p53 := $load.ref($M.11, $p52);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6771, 32} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p53, $mul.ref(0, 20)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6771, 5} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p54);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6772, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 105);
  goto $bb6;
$bb28:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6775, 9} true;
  assume {:verifier.code 0} true;
  call $p55 := skb_put($p43, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6776, 9} true;
  assume {:verifier.code 0} true;
  $p56 := $bitcast.ref.ref($p55);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6777, 43} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1296, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6777, 43} true;
  assume {:verifier.code 0} true;
  $i58 := $load.i16($M.11, $p57);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6777, 23} true;
  assume {:verifier.code 0} true;
  $i59 := $zext.i16.i32($i58);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6777, 23} true;
  assume {:verifier.code 0} true;
  $i60 := $trunc.i32.i16($i59);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6777, 13} true;
  assume {:verifier.code 0} true;
  call $i61 := __fswab16($i60);
  call {:cexpr "tmp___0"} boogie_si_record_i16($i61);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6778, 8} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p56, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6778, 12} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i16($M.11, $p62, $i61);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6779, 43} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1300, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6779, 43} true;
  assume {:verifier.code 0} true;
  $i64 := $load.i32($M.11, $p63);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6779, 30} true;
  assume {:verifier.code 0} true;
  $i65 := $trunc.i32.i16($i64);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6779, 23} true;
  assume {:verifier.code 0} true;
  $i66 := $zext.i16.i32($i65);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6779, 23} true;
  assume {:verifier.code 0} true;
  $i67 := $trunc.i32.i16($i66);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6779, 13} true;
  assume {:verifier.code 0} true;
  call $i68 := __fswab16($i67);
  call {:cexpr "tmp___1"} boogie_si_record_i16($i68);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6780, 8} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($add.ref($p56, $mul.ref(0, 8)), $mul.ref(2, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6780, 12} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i16($M.11, $p69, $i68);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6781, 28} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6781, 28} true;
  assume {:verifier.code 0} true;
  $i71 := $load.i32($M.11, $p70);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6781, 13} true;
  assume {:verifier.code 0} true;
  call $i72 := __fswab32($i71);
  call {:cexpr "tmp___2"} boogie_si_record_i32($i72);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6782, 8} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($add.ref($p56, $mul.ref(0, 8)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6782, 15} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i32($M.11, $p73, $i72);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6783, 35} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6783, 35} true;
  assume {:verifier.code 0} true;
  $i75 := $load.i32($M.11, $p74);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6783, 13} true;
  assume {:verifier.code 0} true;
  call $p76 := skb_put($p43, $i75);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6784, 80} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6784, 80} true;
  assume {:verifier.code 0} true;
  $i78 := $load.i32($M.11, $p77);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6784, 3} true;
  assume {:verifier.code 0} true;
  call skb_copy_from_linear_data($p1, $p76, $i78);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6785, 28} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6785, 28} true;
  assume {:verifier.code 0} true;
  $p80 := $load.ref($M.11, $p79);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6785, 7} true;
  assume {:verifier.code 0} true;
  $i81 := $p2i.ref.i64($p80);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6785, 32} true;
  assume {:verifier.code 0} true;
  $i82 := $ne.i64($i81, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6785, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i82 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6786, 13} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6786, 13} true;
  assume {:verifier.code 0} true;
  $p84 := $load.ref($M.11, $p83);
  call devirtbounce($p84, $p0, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6787, 3} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume !(($i82 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6788, 5} true;
  assume {:verifier.code 0} true;
  call consume_skb($p1);
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6790, 15} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($add.ref($p24, $mul.ref(0, 1648)), $mul.ref(1472, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6790, 15} true;
  assume {:verifier.code 0} true;
  $p86 := $load.ref($M.11, $p85);
  call devirtbounce($p86, $p24, $p43);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6791, 22} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6791, 22} true;
  assume {:verifier.code 0} true;
  $p88 := $load.ref($M.11, $p87);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6791, 30} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($add.ref($p88, $mul.ref(0, 20)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6791, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p89);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6792, 26} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($add.ref($p24, $mul.ref(0, 1648)), $mul.ref(1520, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6792, 26} true;
  assume {:verifier.code 0} true;
  $p91 := $load.ref($M.11, $p90);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6792, 34} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($add.ref($p91, $mul.ref(0, 20)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6792, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p92);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6793, 3} true;
  assume {:verifier.code 0} true;
  $i14 := 0;
  goto $bb6;
}
const atmtcp_v_close: ref;
axiom (atmtcp_v_close == $sub.ref(0, 51512));
procedure  atmtcp_v_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6623, 3} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6623, 3} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6623, 3} true;
  assume {:verifier.code 0} true;
  call $M.14 := $memset.i8($M.14, $p2, 0, 120, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6624, 7} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1));
  $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6624, 23} true;
  assume {:verifier.code 0} true;
  $M.14 := $store.i16($M.14, $p4, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6625, 32} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1296, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6625, 32} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i16($M.11, $p5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6625, 7} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1));
  $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1));
  $p9 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6625, 25} true;
  assume {:verifier.code 0} true;
  $M.14 := $store.i16($M.14, $p9, $i6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6626, 32} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1300, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6626, 32} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.11, $p10);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6626, 7} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1));
  $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1));
  $p14 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6626, 25} true;
  assume {:verifier.code 0} true;
  $M.14 := $store.i32($M.14, $p14, $i11);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6627, 51} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6627, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p15);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6628, 3} true;
  assume {:verifier.code 0} true;
  call $i16 := atmtcp_send_control($p0, 2, $p1, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6629, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_v_open: ref;
axiom (atmtcp_v_open == $sub.ref(0, 52544));
procedure  atmtcp_v_open($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i16;
  var $i11: i16;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i29: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6592, 14} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6592, 14} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1296, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6592, 14} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i16($M.11, $p2);
  call {:cexpr "vpi"} boogie_si_record_i16($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6593, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1300, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6593, 14} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.11, $p4);
  call {:cexpr "vci"} boogie_si_record_i32($i5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6594, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6594, 3} true;
  assume {:verifier.code 0} true;
  call $M.14 := $memset.i8($M.14, $p6, 0, 120, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6595, 7} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1));
  $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6595, 23} true;
  assume {:verifier.code 0} true;
  $M.14 := $store.i16($M.14, $p8, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6596, 19} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i16.i32($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6596, 19} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i32.i16($i9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6596, 9} true;
  assume {:verifier.code 0} true;
  call $i11 := __fswab16($i10);
  call {:cexpr "tmp"} boogie_si_record_i16($i11);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6597, 7} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
  $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6597, 15} true;
  assume {:verifier.code 0} true;
  $M.14 := $store.i16($M.14, $p13, $i11);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6598, 7} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1));
  $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1));
  $p16 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6598, 25} true;
  assume {:verifier.code 0} true;
  $M.14 := $store.i16($M.14, $p16, $i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6599, 30} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i32.i16($i5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6599, 23} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.i16.i32($i17);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6599, 23} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i32.i16($i18);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6599, 13} true;
  assume {:verifier.code 0} true;
  call $i20 := __fswab16($i19);
  call {:cexpr "tmp___0"} boogie_si_record_i16($i20);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6600, 7} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
  $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6600, 15} true;
  assume {:verifier.code 0} true;
  $M.14 := $store.i16($M.14, $p22, $i20);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6601, 7} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1));
  $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1));
  $p25 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6601, 25} true;
  assume {:verifier.code 0} true;
  $M.14 := $store.i32($M.14, $p25, $i5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6602, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $sext.i16.i32($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6602, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $eq.i32($i26, $sub.i32(0, 2));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6602, 23} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6602, 23} true;
  assume {:verifier.code 0} true;
  assume ($i27 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6603, 5} true;
  assume {:verifier.code 0} true;
  $i29 := 0;
  goto $bb6;
$bb3:
  assume !(($i27 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6602, 30} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i32($i5, $sub.i32(0, 2));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6602, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6602, 7} true;
  assume {:verifier.code 0} true;
  assume ($i28 == 1);
  goto $bb2;
$bb5:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6618, 1} true;
  assume {:verifier.code 0} true;
  $r := $i29;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6606, 7} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6606, 12} true;
  assume {:verifier.code 0} true;
  $M.14 := $store.i32($M.14, $p30, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6607, 7} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6607, 18} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1328, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6607, 18} true;
  assume {:verifier.code 0} true;
  $p33 := $bitcast.ref.ref($p31);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6607, 18} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p32);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6607, 18} true;
  assume {:verifier.code 0} true;
  call $M.14 := $memcpy.i8($M.14, $M.11, $p33, $p34, 92, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6608, 49} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6608, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(0, $p35);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6609, 51} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6609, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p36);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6610, 11} true;
  assume {:verifier.code 0} true;
  call $i37 := atmtcp_send_control($p0, 1, $p1, 1);
  call {:cexpr "error"} boogie_si_record_i32($i37);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6611, 13} true;
  assume {:verifier.code 0} true;
  $i38 := $ne.i32($i37, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6611, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i38 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6612, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $i37;
  goto $bb6;
$bb9:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6615, 13} true;
  assume {:verifier.code 0} true;
  call $p39 := sk_atm($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6616, 22} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p39, $mul.ref(0, 1288)), $mul.ref(968, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6616, 22} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.11, $p40);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6616, 11} true;
  assume {:verifier.code 0} true;
  $i42 := $sub.i32(0, $i41);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6616, 3} true;
  assume {:verifier.code 0} true;
  $i29 := $i42;
  goto $bb6;
}
const atmtcp_c_send: ref;
axiom (atmtcp_c_send == $sub.ref(0, 53576));
procedure  atmtcp_c_send($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i16;
  var $i24: i16;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i16;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i19: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i5: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6892, 12} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6892, 12} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6892, 12} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i32($M.11, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6892, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i3, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6892, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6893, 5} true;
  assume {:verifier.code 0} true;
  $i5 := 0;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6935, 1} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6896, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1504, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6896, 32} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.11, $p6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6896, 9} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6897, 35} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6897, 35} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.11, $p9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6897, 9} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6898, 12} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6898, 12} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.11, $p12);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6898, 19} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i13, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6898, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i14 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6899, 70} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6899, 70} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.11, $p15);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6899, 34} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6899, 14} true;
  assume {:verifier.code 0} true;
  call $i18 := atmtcp_recv_control($p17);
  call {:cexpr "result"} boogie_si_record_i32($i18);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6900, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $i18;
  goto $bb7;
$bb6:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6928, 28} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6928, 28} true;
  assume {:verifier.code 0} true;
  $p59 := $load.ref($M.11, $p58);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6928, 7} true;
  assume {:verifier.code 0} true;
  $i60 := $p2i.ref.i64($p59);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6928, 32} true;
  assume {:verifier.code 0} true;
  $i61 := $ne.i64($i60, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6928, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb15, $bb16;
$bb8:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6903, 3} true;
  assume {:verifier.code 0} true;
  call _raw_read_lock(vcc_sklist_lock);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6904, 30} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(2, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6904, 30} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i16($M.11, $p20);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6904, 19} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.i16.i32($i21);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6904, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.i32.i16($i22);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6904, 9} true;
  assume {:verifier.code 0} true;
  call $i24 := __fswab16($i23);
  call {:cexpr "tmp"} boogie_si_record_i16($i24);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6905, 34} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6905, 34} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i16($M.11, $p25);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6905, 23} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i16.i32($i26);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6905, 23} true;
  assume {:verifier.code 0} true;
  $i28 := $trunc.i32.i16($i27);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6905, 13} true;
  assume {:verifier.code 0} true;
  call $i29 := __fswab16($i28);
  call {:cexpr "tmp___0"} boogie_si_record_i16($i29);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6906, 27} true;
  assume {:verifier.code 0} true;
  $i30 := $sext.i16.i32($i29);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6906, 27} true;
  assume {:verifier.code 0} true;
  $i31 := $trunc.i32.i16($i30);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6906, 52} true;
  assume {:verifier.code 0} true;
  $i32 := $zext.i16.i32($i24);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6906, 13} true;
  assume {:verifier.code 0} true;
  call $p33 := find_vcc($p8, $i31, $i32);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6907, 3} true;
  assume {:verifier.code 0} true;
  call _raw_read_unlock(vcc_sklist_lock);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6908, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p33);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6908, 31} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i64($i34, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6908, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i35 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6910, 24} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6910, 24} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.11, $p36);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6910, 32} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p37, $mul.ref(0, 20)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6910, 5} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p38);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6911, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $sub.i32(0, 49);
  goto $bb7;
$bb10:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6914, 3} true;
  assume {:verifier.code 0} true;
  call $p39 := skb_pull($p1, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6915, 50} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6915, 50} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.11, $p40);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6915, 13} true;
  assume {:verifier.code 0} true;
  call $p42 := atm_alloc_charge($p33, $i41, 208);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6916, 7} true;
  assume {:verifier.code 0} true;
  $i43 := $p2i.ref.i64($p42);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6916, 31} true;
  assume {:verifier.code 0} true;
  $i44 := $eq.i64($i43, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6916, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i44 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6918, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $sub.i32(0, 105);
  goto $bb7;
$bb13:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6921, 3} true;
  assume {:verifier.code 0} true;
  call __net_timestamp($p42);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6922, 35} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6922, 35} true;
  assume {:verifier.code 0} true;
  $i46 := $load.i32($M.11, $p45);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6922, 13} true;
  assume {:verifier.code 0} true;
  call $p47 := skb_put($p42, $i46);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6923, 80} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6923, 80} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i32($M.11, $p48);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6923, 3} true;
  assume {:verifier.code 0} true;
  call skb_copy_from_linear_data($p1, $p47, $i49);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6924, 15} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($add.ref($p33, $mul.ref(0, 1648)), $mul.ref(1472, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6924, 15} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.11, $p50);
  call devirtbounce($p51, $p33, $p42);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6925, 22} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6925, 22} true;
  assume {:verifier.code 0} true;
  $p53 := $load.ref($M.11, $p52);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6925, 30} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p53, $mul.ref(0, 20)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6925, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p54);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6926, 26} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($add.ref($p33, $mul.ref(0, 1648)), $mul.ref(1520, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6926, 26} true;
  assume {:verifier.code 0} true;
  $p56 := $load.ref($M.11, $p55);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6926, 34} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p56, $mul.ref(0, 20)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6926, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p57);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6926, 3} true;
  assume {:verifier.code 0} true;
  $i19 := 0;
  goto $bb7;
$bb15:
  assume ($i61 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6929, 13} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1480, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6929, 13} true;
  assume {:verifier.code 0} true;
  $p63 := $load.ref($M.11, $p62);
  call devirtbounce($p63, $p0, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6930, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume !(($i61 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6931, 5} true;
  assume {:verifier.code 0} true;
  call consume_skb($p1);
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6933, 3} true;
  assume {:verifier.code 0} true;
  $i5 := $i19;
  goto $bb3;
}
const atmtcp_c_close: ref;
axiom (atmtcp_c_close == $sub.ref(0, 54608));
procedure  atmtcp_c_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6821, 39} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6821, 39} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1504, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6821, 39} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.11, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6821, 16} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6822, 52} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6822, 52} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.11, $p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6822, 14} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6823, 13} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6823, 17} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p7, $0.ref);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6824, 17} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6824, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.11, $p8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6824, 25} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6824, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6825, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6835, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6828, 15} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6828, 24} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p11, $0.ref);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6829, 9} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6829, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p12);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6830, 3} true;
  assume {:verifier.code 0} true;
  call ldv_atm_dev_deregister_5($p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6831, 8} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1504, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6831, 17} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p13, $0.ref);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6832, 3} true;
  assume {:verifier.code 0} true;
  call ldv_module_put_6(__this_module);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6833, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const ldv_open_2: ref;
axiom (ldv_open_2 == $sub.ref(0, 55640));
procedure  ldv_open_2()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7696, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7696, 10} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7696, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 56672));
procedure  ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7618, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7618, 7} true;
  assume {:verifier.code 0} true;
  $i0 := $M.15;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7618, 29} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7618, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7619, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7620, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7622, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_error: ref;
axiom (ldv_error == $sub.ref(0, 57704));
procedure  ldv_error()
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7518, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7518, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7520, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7522, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const kfree: ref;
axiom (kfree == $sub.ref(0, 58736));
procedure  kfree($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7735, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7735, 3} true;
  assume {:verifier.code 0} true;
  call free_($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7736, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_atm_dev_deregister_5: ref;
axiom (ldv_atm_dev_deregister_5 == $sub.ref(0, 59768));
procedure  ldv_atm_dev_deregister_5($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7470, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7470, 3} true;
  assume {:verifier.code 0} true;
  call atm_dev_deregister($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7471, 24} true;
  assume {:verifier.code 0} true;
  $M.6 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7472, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_module_put_6: ref;
axiom (ldv_module_put_6 == $sub.ref(0, 60800));
procedure  ldv_module_put_6($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7478, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7478, 3} true;
  assume {:verifier.code 0} true;
  call ldv_module_put($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7479, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_module_put: ref;
axiom (ldv_module_put == $sub.ref(0, 61832));
procedure  ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7590, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7590, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7590, 30} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i64($i1, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7590, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7591, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $M.15;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7591, 31} true;
  assume {:verifier.code 0} true;
  $i4 := $sle.i32($i3, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7591, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i4 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7592, 7} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7593, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7595, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $M.15;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7595, 51} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.i32($i5, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7595, 27} true;
  assume {:verifier.code 0} true;
  $M.15 := $i6;
  call {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7596, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7598, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atm_dev_deregister: ref;
axiom (atm_dev_deregister == $sub.ref(0, 62864));
procedure  atm_dev_deregister($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7656, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7656, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 63896));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const atmtcp_recv_control: ref;
axiom (atmtcp_recv_control == $sub.ref(0, 64928));
procedure  atmtcp_recv_control($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $i33: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6552, 38} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6552, 38} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(12, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6552, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6552, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.11, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6553, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(20, 1));
  $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1));
  $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6553, 33} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i16($M.11, $p6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6553, 8} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1296, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6553, 12} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i16($M.11, $p8, $i7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6554, 19} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(20, 1));
  $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1));
  $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6554, 33} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.11, $p11);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6554, 8} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1300, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6554, 12} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i32($M.11, $p13, $i12);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6555, 8} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1328, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6555, 19} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6555, 19} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p14);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6555, 19} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p15);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6555, 19} true;
  assume {:verifier.code 0} true;
  call $M.11 := $memcpy.i8($M.11, $M.11, $p16, $p17, 92, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6556, 9} true;
  assume {:verifier.code 0} true;
  call $p18 := sk_atm($p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6557, 24} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(124, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6557, 24} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.11, $p19);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6557, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $sub.i32(0, $i20);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6557, 8} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p18, $mul.ref(0, 1288)), $mul.ref(968, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6557, 15} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i32($M.11, $p22, $i21);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6558, 16} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6558, 16} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.11, $p23);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i25 := $slt.i32($i24, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i25 == 1);
  assume {:verifier.code 0} true;
  $i27 := $eq.i32($i24, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb7, $bb8;
$bb3:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i24, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i26 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6563, 52} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1288, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6563, 3} true;
  assume {:verifier.code 0} true;
  call change_bit(0, $p29);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6564, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb5:
  assume {:verifier.code 0} true;
  assume !(($i26 == 1));
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb10;
$bb7:
  assume ($i27 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6560, 52} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1288, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6560, 3} true;
  assume {:verifier.code 0} true;
  call change_bit(1, $p28);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6561, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:verifier.code 0} true;
  assume !(($i27 == 1));
  goto $bb6;
$bb9:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6570, 13} true;
  assume {:verifier.code 0} true;
  call $p34 := sk_atm($p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6571, 13} true;
  assume {:verifier.code 0} true;
  call $p35 := sk_sleep($p34);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6572, 3} true;
  assume {:verifier.code 0} true;
  call __wake_up($p35, 3, 1, $0.ref);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6573, 3} true;
  assume {:verifier.code 0} true;
  $i33 := 0;
  goto $bb11;
$bb10:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6566, 59} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6566, 59} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i32($M.11, $p30);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6566, 3} true;
  assume {:verifier.code 0} true;
  call $i32 := printk.ref.i32(.str.9, $i31);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6567, 3} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i32(0, 22);
  goto $bb11;
$bb11:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6575, 1} true;
  assume {:verifier.code 0} true;
  $r := $i33;
  $exn := false;
  return;
}
const _raw_read_lock: ref;
axiom (_raw_read_lock == $sub.ref(0, 65960));
procedure  _raw_read_lock($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7643, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7643, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __fswab16: ref;
axiom (__fswab16 == $sub.ref(0, 66992));
procedure  __fswab16($i0: i16)
  returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 36} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 36} true;
  assume {:verifier.code 0} true;
  $i1 := $zext.i16.i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 46} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i:6056:46: warning: over-approximating bitwise operation shl;
  $i2 := $shl.i32($i1, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i32.i16($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 20} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i16.i32($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 71} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 81} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i:6056:81: warning: over-approximating bitwise operation ashr;
  $i6 := $ashr.i32($i5, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 62} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i32.i16($i6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 55} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i16.i32($i7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 53} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i:6056:53: warning: over-approximating bitwise operation or;
  $i9 := $or.i32($i4, $i8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i32.i16($i9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6056, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const find_vcc: ref;
axiom (find_vcc == $sub.ref(0, 68024));
procedure  find_vcc($p0: ref, $i1: i16, $i2: i32)
  returns ($r: ref)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p15: ref;
  var $p37: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6848, 47} true;
  assume {:verifier.code 0} true;
  call {:cexpr "find_vcc:arg:vpi"} boogie_si_record_i16($i1);
  call {:cexpr "find_vcc:arg:vci"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6848, 47} true;
  assume {:verifier.code 0} true;
  $i3 := $sext.i32.i64($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6848, 67} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i:6848:67: warning: over-approximating bitwise operation and;
  $i4 := $and.i64($i3, 31);
  $p5 := $add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref($i4, 8));
  $p6 := $add.ref($add.ref($add.ref(vcc_hash, $mul.ref(0, 256)), $mul.ref($i4, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6849, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.13, $p6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6850, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6850, 31} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i64($i8, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6850, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6852, 11} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6852, 33} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6853, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $p11;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  $p12 := $0.ref;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6873, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p12);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6873, 25} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i64($i13, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6873, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i14 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6873, 7} true;
  assume {:verifier.code 0} true;
  $p15 := $p12;
  goto $bb7;
$bb5:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6873, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i14 == 1));
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb25;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6874, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6859, 9} true;
  assume {:verifier.code 0} true;
  call $p16 := atm_sk($p15);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 30} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1648)), $mul.ref(1320, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 30} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.11, $p17);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 9} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64($p18);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 37} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 34} true;
  assume {:verifier.code 0} true;
  $i21 := $eq.i64($i19, $i20);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 57} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i21 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 65} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p16, $mul.ref(0, 1648)), $mul.ref(1300, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 65} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i32($M.11, $p22);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 69} true;
  assume {:verifier.code 0} true;
  $i24 := $eq.i32($i23, $i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 77} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb12, $bb13;
$bb10:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 57} true;
  assume {:verifier.code 0} true;
  assume !(($i21 == 1));
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  goto $bb19;
$bb12:
  assume ($i24 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 91} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p16, $mul.ref(0, 1648)), $mul.ref(1296, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 91} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i16($M.11, $p25);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 80} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.i16.i32($i26);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 98} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.i16.i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 95} true;
  assume {:verifier.code 0} true;
  $i29 := $eq.i32($i27, $i28);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 109} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb14, $bb15;
$bb13:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 77} true;
  assume {:verifier.code 0} true;
  assume !(($i24 == 1));
  goto $bb11;
$bb14:
  assume ($i29 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 132} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p16, $mul.ref(0, 1648)), $mul.ref(1328, 1));
  $p31 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 1648)), $mul.ref(1328, 1)), $mul.ref(44, 1));
  $p32 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 1648)), $mul.ref(1328, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 141} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i8($M.11, $p32);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 112} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i8.i32($i33);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 155} true;
  assume {:verifier.code 0} true;
  $i35 := $ne.i32($i34, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 7} true;
  assume {:verifier.code 0} true;
  $p36 := $p16;
  assume {:branchcond $i35} true;
  goto $bb16, $bb17;
$bb15:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 109} true;
  assume {:verifier.code 0} true;
  assume !(($i29 == 1));
  goto $bb11;
$bb16:
  assume ($i35 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6859, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6861, 5} true;
  assume {:verifier.code 0} true;
  $p37 := $p36;
  goto $bb18;
$bb17:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6860, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i35 == 1));
  goto $bb11;
$bb18:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6879, 1} true;
  assume {:verifier.code 0} true;
  $r := $p37;
  $exn := false;
  return;
$bb19:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6864, 20} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p15, $mul.ref(0, 1288)), $mul.ref(0, 1));
  $p39 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 1288)), $mul.ref(0, 1)), $mul.ref(96, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6864, 52} true;
  assume {:verifier.code 0} true;
  $p40 := $bitcast.ref.ref($p39);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6864, 61} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6864, 61} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.11, $p41);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6865, 7} true;
  assume {:verifier.code 0} true;
  $i43 := $p2i.ref.i64($p42);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6865, 35} true;
  assume {:verifier.code 0} true;
  $i44 := $ne.i64($i43, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6865, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i44 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6867, 15} true;
  assume {:verifier.code 0} true;
  $p45 := $bitcast.ref.ref($p42);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6867, 41} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6868, 3} true;
  assume {:verifier.code 0} true;
  $p47 := $p46;
  goto $bb22;
$bb21:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  $p47 := $0.ref;
  goto $bb22;
$bb22:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6873, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($p47);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6873, 25} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i64($i48, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6873, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i49 == 1);
  assume {:verifier.code 0} true;
  $p15 := $p47;
  goto $bb7;
$bb24:
  assume !(($i49 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6873, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb25:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6877, 3} true;
  assume {:verifier.code 0} true;
  $p37 := $0.ref;
  goto $bb18;
}
const _raw_read_unlock: ref;
axiom (_raw_read_unlock == $sub.ref(0, 69056));
procedure  _raw_read_unlock($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7646, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7646, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atomic_inc: ref;
axiom (atomic_inc == $sub.ref(0, 70088));
procedure  atomic_inc($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6109, 126} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6109, 126} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  call devirtbounce.1(0, $p1, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6110, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_pull: ref;
axiom (skb_pull == $sub.ref(0, 71120));
procedure  skb_pull($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7716, 27} true;
  assume {:verifier.code 0} true;
  call {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7716, 27} true;
  assume {:verifier.code 0} true;
  call $p2 := external_alloc();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7716, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const atm_alloc_charge: ref;
axiom (atm_alloc_charge == $sub.ref(0, 72152));
procedure  atm_alloc_charge($p0: ref, $i1: i32, $i2: i32)
  returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7653, 28} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atm_alloc_charge:arg:arg1"} boogie_si_record_i32($i1);
  call {:cexpr "atm_alloc_charge:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7653, 28} true;
  assume {:verifier.code 0} true;
  call $p3 := external_alloc();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7653, 10} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7653, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const __net_timestamp: ref;
axiom (__net_timestamp == $sub.ref(0, 73184));
procedure  __net_timestamp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 8} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 8} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 27} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 46} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 65} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 74} true;
  assume {:verifier.code 0} true;
  call $i6 := ktime_get_real();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 74} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 74} true;
  assume {:verifier.code 0} true;
  $M.16 := $store.i64($M.16, $p7, $i6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 74} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 74} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6310, 74} true;
  assume {:verifier.code 0} true;
  call $M.11 := $memcpy.i8($M.11, $M.16, $p8, $p9, 8, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6311, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_put: ref;
axiom (skb_put == $sub.ref(0, 74216));
procedure  skb_put($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7720, 27} true;
  assume {:verifier.code 0} true;
  call {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7720, 27} true;
  assume {:verifier.code 0} true;
  call $p2 := external_alloc();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7720, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const skb_copy_from_linear_data: ref;
axiom (skb_copy_from_linear_data == $sub.ref(0, 75248));
procedure  skb_copy_from_linear_data($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6303, 33} true;
  assume {:verifier.code 0} true;
  call {:cexpr "skb_copy_from_linear_data:arg:len"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6303, 33} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6303, 33} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.11, $p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6303, 39} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i32.i64($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6303, 3} true;
  assume {:verifier.code 0} true;
  call $M.11 := $memcpy.i8($M.11, $M.11, $p1, $p4, $i5, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6304, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const consume_skb: ref;
axiom (consume_skb == $sub.ref(0, 76280));
procedure  consume_skb($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7675, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7675, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 77312));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i1);
const external_alloc: ref;
axiom (external_alloc == $sub.ref(0, 78344));
procedure  external_alloc()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7731, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7731, 10} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet_pointer();
  call {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7731, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const ktime_get_real: ref;
axiom (ktime_get_real == $sub.ref(0, 79376));
procedure  ktime_get_real()
  returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6133, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6133, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := ktime_get_with_offset(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6133, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6133, 9} true;
  assume {:verifier.code 0} true;
  $M.17 := $store.i64($M.17, $p3, $i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6133, 9} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6133, 9} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6133, 9} true;
  assume {:verifier.code 0} true;
  call $M.18 := $memcpy.i8($M.18, $M.17, $p4, $p5, 8, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6134, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6134, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i64($M.18, $p6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6134, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const ktime_get_with_offset: ref;
axiom (ktime_get_with_offset == $sub.ref(0, 80408));
procedure  ktime_get_with_offset($i0: i32)
  returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7687, 36} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call {:cexpr "ktime_get_with_offset:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7687, 36} true;
  assume {:verifier.code 0} true;
  call $p2 := external_alloc();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7687, 22} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7688, 25} true;
  assume {:verifier.code 1} true;
  $i4 := $ne.ref($p3, $0.ref);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7688, 25} true;
  assume {:verifier.code 1} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7688, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7689, 10} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7689, 10} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7689, 10} true;
  assume {:verifier.code 0} true;
  call $M.19 := $memcpy.i8($M.19, $M.11, $p6, $p7, 8, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7689, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7689, 3} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i64($M.19, $p8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7689, 3} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
}
const atm_sk: ref;
axiom (atm_sk == $sub.ref(0, 81440));
procedure  atm_sk($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6331, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6331, 11} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6331, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const sk_atm: ref;
axiom (sk_atm == $sub.ref(0, 82472));
procedure  sk_atm($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6345, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6345, 11} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6345, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const change_bit: ref;
axiom (change_bit == $sub.ref(0, 83504));
procedure  change_bit($i0: i64, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6028, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "change_bit:arg:nr"} boogie_si_record_i64($i0);
  call devirtbounce.2(0, $p1, $i0, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6028, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const printk: ref;
axiom (printk == $sub.ref(0, 84536));
procedure  printk.ref.i32($p0: ref, p.1: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7700, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7700, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7700, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const sk_sleep: ref;
axiom (sk_sleep == $sub.ref(0, 85568));
procedure  sk_sleep($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6321, 50} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6321, 50} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(496, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6321, 20} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6321, 73} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6321, 58} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6321, 3} true;
  assume {:verifier.code 0} true;
  call __read_once_size($p3, $p5, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6322, 21} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6322, 21} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.20, $p6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6324, 9} true;
  assume {:verifier.code 0} true;
  call $i8 := debug_lockdep_rcu_enabled();
  call {:cexpr "tmp"} boogie_si_record_i32($i8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6325, 25} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6325, 3} true;
  assume {:verifier.code 0} true;
  $r := $p9;
  $exn := false;
  return;
}
const __wake_up: ref;
axiom (__wake_up == $sub.ref(0, 86600));
procedure  __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7636, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
  call {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7636, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __read_once_size: ref;
axiom (__read_once_size == $sub.ref(0, 87632));
procedure  __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
$bb0:
  call {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i3 := $slt.i32($i2, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i3 == 1);
  assume {:verifier.code 0} true;
  $i7 := $slt.i32($i2, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb11, $bb12;
$bb3:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  $i4 := $slt.i32($i2, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i4 == 1);
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i2, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb9, $bb10;
$bb5:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i2, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i5 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5998, 23} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5998, 21} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i64($M.11, $p17);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5998, 5} true;
  assume {:verifier.code 0} true;
  $p19 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5998, 19} true;
  assume {:verifier.code 0} true;
  $M.20 := $store.i64($M.20, $p19, $i18);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5999, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb7:
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  goto $bb18;
$bb9:
  assume ($i6 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5995, 23} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5995, 21} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i32($M.11, $p14);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5995, 5} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5995, 19} true;
  assume {:verifier.code 0} true;
  $M.20 := $store.i32($M.20, $p16, $i15);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5996, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb10:
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb8;
$bb11:
  assume ($i7 == 1);
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i2, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb15, $bb16;
$bb12:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i2, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i8 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5992, 23} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5992, 21} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i16($M.11, $p11);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5992, 5} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5992, 19} true;
  assume {:verifier.code 0} true;
  $M.20 := $store.i16($M.20, $p13, $i12);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5993, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb14:
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb15:
  assume ($i9 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5989, 20} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i8($M.11, $p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5989, 18} true;
  assume {:verifier.code 0} true;
  $M.20 := $store.i8($M.20, $p1, $i10);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 5990, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume {:verifier.code 0} true;
  assume !(($i9 == 1));
  goto $bb8;
$bb17:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6006, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb18:
  call devirtbounce.3(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6002, 32} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.i32.i64($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6002, 3} true;
  assume {:verifier.code 0} true;
  call $M.20 := $memcpy.i8($M.20, $M.11, $p1, $p0, $i20, false);
  call devirtbounce.3(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6004, 3} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6004, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
}
const debug_lockdep_rcu_enabled: ref;
axiom (debug_lockdep_rcu_enabled == $sub.ref(0, 88664));
procedure  debug_lockdep_rcu_enabled()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7679, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7679, 10} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7679, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const set_bit: ref;
axiom (set_bit == $sub.ref(0, 89696));
procedure  set_bit($i0: i64, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6014, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
  call devirtbounce.2(0, $p1, $i0, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6014, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const clear_bit: ref;
axiom (clear_bit == $sub.ref(0, 90728));
procedure  clear_bit($i0: i64, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6021, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
  call devirtbounce.2(0, $p1, $i0, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6021, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_send_control: ref;
axiom (atmtcp_send_control == $sub.ref(0, 91760));
procedure  atmtcp_send_control($p0: ref, $i1: i32, $p2: ref, $i3: i32)
  returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i32;
  var $i100: i1;
  var $i92: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $i32: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6429, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call {:cexpr "atmtcp_send_control:arg:type"} boogie_si_record_i32($i1);
  call {:cexpr "atmtcp_send_control:arg:flag"} boogie_si_record_i32($i3);
  assume true;
  assume true;
  assume true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6429, 9} true;
  assume {:verifier.code 0} true;
  call $p7 := get_current();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6430, 8} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6430, 14} true;
  assume {:verifier.code 0} true;
  $M.21 := $store.i32($M.21, $p8, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6431, 18} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6431, 8} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6431, 16} true;
  assume {:verifier.code 0} true;
  $M.22 := $store.ref($M.22, $p10, $p7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6432, 8} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6432, 13} true;
  assume {:verifier.code 0} true;
  $M.23 := $store.ref($M.23, $p11, default_wake_function);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6433, 8} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6433, 23} true;
  assume {:verifier.code 0} true;
  $M.24 := $store.ref($M.24, $p13, $0.ref);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6434, 8} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p15 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6434, 23} true;
  assume {:verifier.code 0} true;
  $M.25 := $store.ref($M.25, $p15, $0.ref);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 35} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 35} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.11, $p16);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 41} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 41} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.11, $p18);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 13} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p19);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 50} true;
  assume {:verifier.code 0} true;
  $i21 := $ne.i64($i20, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i21 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 116} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 116} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.11, $p22);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 122} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 122} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.11, $p24);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 84} true;
  assume {:verifier.code 0} true;
  $p26 := $bitcast.ref.ref($p25);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 133} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 133} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.11, $p27);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 13} true;
  assume {:verifier.code 0} true;
  $p29 := $p28;
  goto $bb3;
$bb2:
  assume !(($i21 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 13} true;
  assume {:verifier.code 0} true;
  $p29 := $0.ref;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6436, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6437, 7} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p29);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6437, 31} true;
  assume {:verifier.code 0} true;
  $i31 := $eq.i64($i30, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6437, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i31 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6438, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sub.i32(0, 49);
  goto $bb6;
$bb5:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6544, 1} true;
  assume {:verifier.code 0} true;
  $r := $i32;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6441, 9} true;
  assume {:verifier.code 0} true;
  call $p33 := alloc_skb(120, 208);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6442, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p33);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6442, 27} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i64($i34, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6442, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i35 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6443, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sub.i32(0, 12);
  goto $bb6;
$bb9:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  call devirtbounce.3(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 35} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 35} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.11, $p36);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 41} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p37, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 41} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.11, $p38);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 13} true;
  assume {:verifier.code 0} true;
  $i40 := $p2i.ref.i64($p39);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 50} true;
  assume {:verifier.code 0} true;
  $i41 := $ne.i64($i40, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i41 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 116} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 116} true;
  assume {:verifier.code 0} true;
  $p43 := $load.ref($M.11, $p42);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 122} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 122} true;
  assume {:verifier.code 0} true;
  $p45 := $load.ref($M.11, $p44);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 84} true;
  assume {:verifier.code 0} true;
  $p46 := $bitcast.ref.ref($p45);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 133} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 133} true;
  assume {:verifier.code 0} true;
  $p48 := $load.ref($M.11, $p47);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 13} true;
  assume {:verifier.code 0} true;
  $p49 := $p48;
  goto $bb13;
$bb12:
  assume !(($i41 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 13} true;
  assume {:verifier.code 0} true;
  $p49 := $0.ref;
  goto $bb13;
$bb13:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6447, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6448, 7} true;
  assume {:verifier.code 0} true;
  $i50 := $p2i.ref.i64($p49);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6448, 31} true;
  assume {:verifier.code 0} true;
  $i51 := $eq.i64($i50, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6448, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i51 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6449, 5} true;
  assume {:verifier.code 0} true;
  call consume_skb($p33);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6450, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sub.i32(0, 49);
  goto $bb6;
$bb15:
  assume !(($i51 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6453, 40} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p33, $mul.ref(0, 232)), $mul.ref(224, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6453, 40} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i32($M.11, $p52);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6453, 3} true;
  assume {:verifier.code 0} true;
  call atm_force_charge($p49, $i53);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6454, 13} true;
  assume {:verifier.code 0} true;
  call $p54 := skb_put($p33, 120);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6455, 13} true;
  assume {:verifier.code 0} true;
  $p55 := $bitcast.ref.ref($p54);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6456, 14} true;
  assume {:verifier.code 0} true;
  $p56 := $bitcast.ref.ref($p55);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6456, 14} true;
  assume {:verifier.code 0} true;
  $p57 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6456, 14} true;
  assume {:verifier.code 0} true;
  call $M.11 := $memcpy.i8($M.11, $M.14, $p56, $p57, 128, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6457, 12} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p55, $mul.ref(0, 128)), $mul.ref(0, 1));
  $p59 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(4, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6457, 23} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i32($M.11, $p59, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6458, 12} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($add.ref($p55, $mul.ref(0, 128)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6458, 17} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i32($M.11, $p60, $i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6459, 30} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($add.ref($p55, $mul.ref(0, 128)), $mul.ref(12, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6459, 3} true;
  assume {:verifier.code 0} true;
  $p62 := $bitcast.ref.ref($p61);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6459, 3} true;
  assume {:verifier.code 0} true;
  call $M.11 := $memset.i8($M.11, $p62, 0, 8, false);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6460, 36} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($add.ref($p55, $mul.ref(0, 128)), $mul.ref(12, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6460, 3} true;
  assume {:verifier.code 0} true;
  $p64 := $bitcast.ref.ref($p63);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6460, 42} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p64, $p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6461, 32} true;
  assume {:verifier.code 0} true;
  $i65 := $sext.i32.i64($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6461, 85} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6461, 14} true;
  assume {:verifier.code 0} true;
  call $i67 := variable_test_bit($i65, $p66);
  call {:cexpr "old_test"} boogie_si_record_i32($i67);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6462, 15} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($add.ref($p49, $mul.ref(0, 1648)), $mul.ref(1472, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6462, 15} true;
  assume {:verifier.code 0} true;
  $p69 := $load.ref($M.11, $p68);
  call devirtbounce($p69, $p49, $p33);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6463, 13} true;
  assume {:verifier.code 0} true;
  call $p70 := sk_atm($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6464, 13} true;
  assume {:verifier.code 0} true;
  call $p71 := sk_sleep($p70);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6465, 3} true;
  assume {:verifier.code 0} true;
  call add_wait_queue($p71, $p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6505, 31} true;
  assume {:verifier.code 0} true;
  $i72 := $sext.i32.i64($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6505, 84} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6505, 13} true;
  assume {:verifier.code 0} true;
  call $i74 := variable_test_bit($i72, $p73);
  call {:cexpr "tmp___8"} boogie_si_record_i32($i74);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6506, 15} true;
  assume {:verifier.code 0} true;
  $i75 := $eq.i32($i74, $i67);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6506, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i75} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i75 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6506, 7} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb18:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6506, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i75 == 1));
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  goto $bb32;
$bb20:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6507, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  call devirtbounce.3(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 35} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 35} true;
  assume {:verifier.code 0} true;
  $p77 := $load.ref($M.11, $p76);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 41} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($add.ref($p77, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 41} true;
  assume {:verifier.code 0} true;
  $p79 := $load.ref($M.11, $p78);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 13} true;
  assume {:verifier.code 0} true;
  $i80 := $p2i.ref.i64($p79);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 50} true;
  assume {:verifier.code 0} true;
  $i81 := $ne.i64($i80, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i81} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i81 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 116} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 116} true;
  assume {:verifier.code 0} true;
  $p83 := $load.ref($M.11, $p82);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 122} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($add.ref($p83, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 122} true;
  assume {:verifier.code 0} true;
  $p85 := $load.ref($M.11, $p84);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 84} true;
  assume {:verifier.code 0} true;
  $p86 := $bitcast.ref.ref($p85);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 133} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($add.ref($p86, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 133} true;
  assume {:verifier.code 0} true;
  $p88 := $load.ref($M.11, $p87);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 13} true;
  assume {:verifier.code 0} true;
  $p89 := $p88;
  goto $bb24;
$bb23:
  assume !(($i81 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 13} true;
  assume {:verifier.code 0} true;
  $p89 := $0.ref;
  goto $bb24;
$bb24:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6469, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6470, 7} true;
  assume {:verifier.code 0} true;
  $i90 := $p2i.ref.i64($p89);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6470, 31} true;
  assume {:verifier.code 0} true;
  $i91 := $eq.i64($i90, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6470, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i91} true;
  goto $bb25, $bb26;
$bb25:
  assume ($i91 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6472, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $sub.i32(0, 49);
  goto $bb27;
$bb26:
  assume !(($i91 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6511, 13} true;
  assume {:verifier.code 0} true;
  call $p101 := get_current();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6512, 12} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($add.ref($p101, $mul.ref(0, 11744)), $mul.ref(11728, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6512, 30} true;
  assume {:verifier.code 0} true;
  $M.26 := $store.i64($M.26, $p102, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6513, 13} true;
  assume {:verifier.code 0} true;
  $M.28 := $store.i64($M.28, $p6, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6531, 14} true;
  assume {:verifier.code 0} true;
  call $p103 := get_current();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6532, 3} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i64($M.28, $p6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6532, 74} true;
  assume {:verifier.code 0} true;
  $p105 := $add.ref($add.ref($p103, $mul.ref(0, 11744)), $mul.ref(0, 1));
  call $i106 := devirtbounce.4(0, $p105, $i104, $p105);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6532, 3} true;
  assume {:verifier.code 0} true;
  $M.28 := $store.i64($M.28, $p6, $i106);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6534, 3} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb28:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6475, 13} true;
  assume {:verifier.code 0} true;
  call $p93 := get_current();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6476, 12} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($add.ref($p93, $mul.ref(0, 11744)), $mul.ref(11728, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6476, 30} true;
  assume {:verifier.code 0} true;
  $M.26 := $store.i64($M.26, $p94, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6477, 9} true;
  assume {:verifier.code 0} true;
  $M.27 := $store.i64($M.27, $p5, 2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6495, 13} true;
  assume {:verifier.code 0} true;
  call $p95 := get_current();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6496, 3} true;
  assume {:verifier.code 0} true;
  $i96 := $load.i64($M.27, $p5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6496, 69} true;
  assume {:verifier.code 0} true;
  $p97 := $add.ref($add.ref($p95, $mul.ref(0, 11744)), $mul.ref(0, 1));
  call $i98 := devirtbounce.4(0, $p97, $i96, $p97);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6496, 3} true;
  assume {:verifier.code 0} true;
  $M.27 := $store.i64($M.27, $p5, $i98);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6498, 3} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6503, 3} true;
  assume {:verifier.code 0} true;
  call schedule();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6505, 13} true;
  assume {:verifier.code 0} true;
  call $i99 := variable_test_bit($i72, $p73);
  call {:cexpr "tmp___8"} boogie_si_record_i32($i99);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6506, 15} true;
  assume {:verifier.code 0} true;
  $i100 := $eq.i32($i99, $i67);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6506, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb30, $bb31;
$bb30:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6506, 7} true;
  assume {:verifier.code 0} true;
  assume ($i100 == 1);
  goto $bb20;
$bb31:
  assume !(($i100 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6506, 7} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb32:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6506, 18} true;
  assume {:verifier.code 0} true;
  $i92 := 0;
  goto $bb27;
$bb33:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6539, 14} true;
  assume {:verifier.code 0} true;
  call $p107 := sk_atm($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6540, 14} true;
  assume {:verifier.code 0} true;
  call $p108 := sk_sleep($p107);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6541, 3} true;
  assume {:verifier.code 0} true;
  call remove_wait_queue($p108, $p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6542, 3} true;
  assume {:verifier.code 0} true;
  $i32 := $i92;
  goto $bb6;
}
const get_current: ref;
axiom (get_current == $sub.ref(0, 92792));
procedure  get_current()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6088, 3} true;
  assume {:verifier.code 0} true;
  call $p0 := devirtbounce.5(0, current_task);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6088, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6093, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const default_wake_function: ref;
axiom (default_wake_function == $sub.ref(0, 93824));
procedure  default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref)
  returns ($r: i32)
{
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7727, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "default_wake_function:arg:arg1"} boogie_si_record_i32($i1);
  call {:cexpr "default_wake_function:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7727, 10} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7727, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const alloc_skb: ref;
axiom (alloc_skb == $sub.ref(0, 94856));
procedure  alloc_skb($i0: i32, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6293, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "alloc_skb:arg:size"} boogie_si_record_i32($i0);
  call {:cexpr "alloc_skb:arg:priority"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6293, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := __alloc_skb($i0, $i1, 0, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6294, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const atm_force_charge: ref;
axiom (atm_force_charge == $sub.ref(0, 95888));
procedure  atm_force_charge($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6364, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atm_force_charge:arg:truesize"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6364, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := sk_atm($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6365, 31} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1288)), $mul.ref(432, 1));
  $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1288)), $mul.ref(432, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6365, 3} true;
  assume {:verifier.code 0} true;
  call atomic_add($i1, $p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6366, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const variable_test_bit: ref;
axiom (variable_test_bit == $sub.ref(0, 96920));
procedure  variable_test_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6043, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
  call $i2 := devirtbounce.6(0, $p1, $i0);
  call {:cexpr "oldbit"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6043, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const add_wait_queue: ref;
axiom (add_wait_queue == $sub.ref(0, 97952));
procedure  add_wait_queue($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7649, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7649, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const schedule: ref;
axiom (schedule == $sub.ref(0, 98984));
procedure  schedule()
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7712, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7712, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const remove_wait_queue: ref;
axiom (remove_wait_queue == $sub.ref(0, 100016));
procedure  remove_wait_queue($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7709, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7709, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atomic_add: ref;
axiom (atomic_add == $sub.ref(0, 101048));
procedure  atomic_add($i0: i32, $p1: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6102, 129} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atomic_add:arg:i"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6102, 129} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  call devirtbounce.7(0, $p2, $i0, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6103, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __alloc_skb: ref;
axiom (__alloc_skb == $sub.ref(0, 102080));
procedure  __alloc_skb($i0: i32, $i1: i32, $i2: i32, $i3: i32)
  returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7627, 28} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__alloc_skb:arg:arg0"} boogie_si_record_i32($i0);
  call {:cexpr "__alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
  call {:cexpr "__alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
  call {:cexpr "__alloc_skb:arg:arg3"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7627, 28} true;
  assume {:verifier.code 0} true;
  call $p4 := external_alloc();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7627, 10} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7627, 3} true;
  assume {:verifier.code 0} true;
  $r := $p5;
  $exn := false;
  return;
}
const __fswab32: ref;
axiom (__fswab32 == $sub.ref(0, 103112));
procedure  __fswab32($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6063, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6063, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __arch_swab32($i0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6064, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __arch_swab32: ref;
axiom (__arch_swab32 == $sub.ref(0, 104144));
procedure  __arch_swab32($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6050, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
  call $i1 := devirtbounce.8(0, $i0);
  call {:cexpr "val"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6050, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const copy_from_user: ref;
axiom (copy_from_user == $sub.ref(0, 105176));
procedure  copy_from_user($p0: ref, $p1: ref, $i2: i64)
  returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6274, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6274, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := __builtinx_object_size.ref.i32($p0, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6274, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  call {:cexpr "tmp"} boogie_si_record_i64($i4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6275, 8} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i4);
  call {:cexpr "sz"} boogie_si_record_i32($i5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6276, 3} true;
  assume {:verifier.code 0} true;
  call __might_fault(.str.8, 697);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6277, 44} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.i32($i5, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6277, 48} true;
  assume {:verifier.code 0} true;
  $i7 := 1;
  assume {:branchcond $i6} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6277, 48} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1);
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6277, 48} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i1.i32($i7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6277, 33} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6277, 13} true;
  assume {:verifier.code 0} true;
  call $i12 := ldv__builtin_expect($i11, 1);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i12);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6278, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i64($i12, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6278, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb4, $bb5;
$bb3:
  assume !(($i6 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6277, 51} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i32.i64($i5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6277, 70} true;
  assume {:verifier.code 0} true;
  $i9 := $uge.i64($i8, $i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6277, 48} true;
  assume {:verifier.code 0} true;
  $i7 := $i9;
  goto $bb2;
$bb4:
  assume ($i13 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6279, 35} true;
  assume {:verifier.code 0} true;
  $i14 := $trunc.i64.i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6279, 9} true;
  assume {:verifier.code 0} true;
  call $i15 := _copy_from_user($p0, $p1, $i14);
  call {:cexpr "n"} boogie_si_record_i64($i15);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6280, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $i15;
  goto $bb6;
$bb5:
  assume !(($i13 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6281, 5} true;
  assume {:verifier.code 0} true;
  call __copy_from_user_overflow();
  assume {:verifier.code 0} true;
  $i16 := $i2;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6283, 3} true;
  assume {:verifier.code 0} true;
  $r := $i16;
  $exn := false;
  return;
}
const __builtinx_object_size: ref;
axiom (__builtinx_object_size == $sub.ref(0, 106208));
procedure  __builtinx_object_size()
  returns ($r: i32);
procedure  __builtinx_object_size.ref.i32(p.0: ref, p.1: i32)
  returns ($r: i32);
const __might_fault: ref;
axiom (__might_fault == $sub.ref(0, 107240));
procedure  __might_fault($p0: ref, $i1: i32)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7633, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7633, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv__builtin_expect: ref;
axiom (ldv__builtin_expect == $sub.ref(0, 108272));
procedure  ldv__builtin_expect($i0: i64, $i1: i64)
  returns ($r: i64)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6252, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
  call {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6252, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const _copy_from_user: ref;
axiom (_copy_from_user == $sub.ref(0, 109304));
procedure  _copy_from_user($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i64)
{
  var $i3: i64;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7640, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7640, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7640, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const __copy_from_user_overflow: ref;
axiom (__copy_from_user_overflow == $sub.ref(0, 110336));
procedure  __copy_from_user_overflow()
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7630, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7630, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const sprintf: ref;
axiom (sprintf == $sub.ref(0, 111368));
procedure  sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
  returns ($r: i32);
procedure  sprintf.ref.ref($p0: ref, $p1: ref)
  returns ($r: i32);
const register_atm_ioctl: ref;
axiom (register_atm_ioctl == $sub.ref(0, 112400));
procedure  register_atm_ioctl($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7706, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7706, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const deregister_atm_ioctl: ref;
axiom (deregister_atm_ioctl == $sub.ref(0, 113432));
procedure  deregister_atm_ioctl($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7682, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7682, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ATM_SD: ref;
axiom (ATM_SD == $sub.ref(0, 114464));
procedure  ATM_SD($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6338, 22} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6338, 22} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6338, 22} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.11, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6338, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := atm_sk($p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6339, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const capable: ref;
axiom (capable == $sub.ref(0, 115496));
procedure  capable($i0: i32)
  returns ($r: i1)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7672, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7672, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7672, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const atmtcp_attach: ref;
axiom (atmtcp_attach == $sub.ref(0, 116528));
procedure  atmtcp_attach($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i14: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7087, 7} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call {:cexpr "atmtcp_attach:arg:itf"} boogie_si_record_i32($i1);
  assume true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7087, 7} true;
  assume {:verifier.code 0} true;
  $M.29 := $store.ref($M.29, $p2, $0.ref);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7088, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i1, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7088, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7089, 11} true;
  assume {:verifier.code 0} true;
  call $p4 := atm_dev_lookup($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7089, 9} true;
  assume {:verifier.code 0} true;
  $M.29 := $store.ref($M.29, $p2, $p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7090, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7092, 23} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.29, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7092, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7092, 27} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7092, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i7 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7093, 25} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.29, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7093, 30} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7093, 30} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.11, $p9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7093, 9} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.i64($p10);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7093, 34} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i64($i11, $p2i.ref.i64(atmtcp_v_dev_ops));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7093, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i7 == 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7104, 13} true;
  assume {:verifier.code 0} true;
  call $i24 := atmtcp_create($i1, 0, $p2);
  call {:cexpr "error"} boogie_si_record_i32($i24);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7105, 15} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i32($i24, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7105, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb14, $bb15;
$bb6:
  assume ($i12 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7094, 19} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.29, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7094, 7} true;
  assume {:verifier.code 0} true;
  call atm_dev_put($p13);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7095, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 124);
  goto $bb8;
$bb7:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7121, 1} true;
  assume {:verifier.code 0} true;
  $r := $i14;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7098, 52} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.29, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7098, 57} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7098, 57} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.11, $p16);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7098, 26} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7098, 68} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7098, 68} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.11, $p19);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7098, 9} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p20);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7098, 72} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i64($i21, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7098, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i22 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7099, 19} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.29, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7099, 7} true;
  assume {:verifier.code 0} true;
  call atm_dev_put($p23);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7100, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 16);
  goto $bb8;
$bb11:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7103, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7110, 30} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.29, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7110, 35} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7110, 35} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.11, $p27);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7110, 4} true;
  assume {:verifier.code 0} true;
  $p29 := $bitcast.ref.ref($p28);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7110, 46} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p29, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7110, 50} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p30, $p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7111, 8} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1320, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7111, 12} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p31, atmtcp_control_dev);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7112, 9} true;
  assume {:verifier.code 0} true;
  call $p32 := sk_atm($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7113, 3} true;
  assume {:verifier.code 0} true;
  call vcc_insert_socket($p32);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7114, 49} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7114, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(8, $p33);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7115, 49} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7115, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(1, $p34);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7116, 27} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.29, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7116, 19} true;
  assume {:verifier.code 0} true;
  $p36 := $bitcast.ref.ref($p35);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7116, 8} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1504, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7116, 17} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p37, $p35);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7117, 3} true;
  assume {:verifier.code 0} true;
  call $i38 := atm_init_aal5($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7118, 8} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1520, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7118, 14} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p39, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7119, 11} true;
  assume {:verifier.code 0} true;
  $p40 := $load.ref($M.29, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7119, 16} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1696)), $mul.ref(24, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7119, 16} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i32($M.11, $p41);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7119, 3} true;
  assume {:verifier.code 0} true;
  $i14 := $i42;
  goto $bb8;
$bb14:
  assume ($i25 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7106, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $i24;
  goto $bb8;
$bb15:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  goto $bb13;
}
const ldv___module_get_9: ref;
axiom (ldv___module_get_9 == $sub.ref(0, 117560));
procedure  ldv___module_get_9($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7511, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7511, 3} true;
  assume {:verifier.code 0} true;
  call ldv_module_get($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7512, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_create_persistent: ref;
axiom (atmtcp_create_persistent == $sub.ref(0, 118592));
procedure  atmtcp_create_persistent($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7126, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atmtcp_create_persistent:arg:itf"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7126, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := atmtcp_create($i0, 1, $0.ref);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7127, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const atmtcp_remove_persistent: ref;
axiom (atmtcp_remove_persistent == $sub.ref(0, 119624));
procedure  atmtcp_remove_persistent($i0: i32)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7135, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atmtcp_remove_persistent:arg:itf"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7135, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := atm_dev_lookup($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7136, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7136, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i64($i2, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7136, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7137, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $sub.i32(0, 19);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7160, 1} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7140, 28} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1696)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7140, 28} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.11, $p5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7140, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7140, 32} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, $p2i.ref.i64(atmtcp_v_dev_ops));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7140, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7141, 5} true;
  assume {:verifier.code 0} true;
  call atm_dev_put($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7142, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $sub.i32(0, 124);
  goto $bb3;
$bb6:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7145, 45} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7145, 45} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.11, $p9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7145, 14} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7146, 17} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7146, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.11, $p12);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7146, 25} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i13, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7146, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i14 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7147, 5} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
$bb9:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7150, 13} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7150, 21} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i32($M.11, $p15, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7151, 55} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p1, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7151, 55} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.11, $p16);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7151, 24} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7151, 66} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7151, 66} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.11, $p19);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7151, 7} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p20);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7151, 70} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i64($i21, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7151, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i22 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7152, 5} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
$bb12:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7155, 9} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p11);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7155, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p23);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7156, 3} true;
  assume {:verifier.code 0} true;
  call atm_dev_put($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7157, 3} true;
  assume {:verifier.code 0} true;
  call ldv_atm_dev_deregister_8($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7158, 3} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
}
const atm_dev_lookup: ref;
axiom (atm_dev_lookup == $sub.ref(0, 120656));
procedure  atm_dev_lookup($i0: i32)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7660, 28} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atm_dev_lookup:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7660, 28} true;
  assume {:verifier.code 0} true;
  call $p1 := external_alloc();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7660, 10} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7660, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const atm_dev_put: ref;
axiom (atm_dev_put == $sub.ref(0, 121688));
procedure  atm_dev_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6375, 40} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6375, 40} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(164, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6375, 13} true;
  assume {:verifier.code 0} true;
  call $i2 := atomic_dec_and_test($p1);
  call {:cexpr "tmp___1"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6376, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6376, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6377, 73} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(48, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6377, 11} true;
  assume {:verifier.code 0} true;
  call $i5 := constant_test_bit(0, $p4);
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6378, 39} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i5, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6378, 39} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6378, 35} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i32.i64($i7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6378, 15} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv__builtin_expect($i8, 0);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i9);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6379, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i64($i9, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6379, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb3:
  assume ($i10 == 1);
  call devirtbounce.9(0, .str, 271, 12);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6380, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6383, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb6:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6386, 31} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6386, 31} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.11, $p11);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6386, 37} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p12, $mul.ref(0, 112)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6386, 37} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.11, $p13);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6386, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p14);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6386, 47} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i64($i15, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6386, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i16 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6387, 16} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6387, 16} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.11, $p17);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6387, 22} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p18, $mul.ref(0, 112)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6387, 22} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.11, $p19);
  call devirtbounce.10($p20, $p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6388, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6390, 23} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(256, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6390, 5} true;
  assume {:verifier.code 0} true;
  call put_device($p21);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6391, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6393, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_atm_dev_deregister_8: ref;
axiom (ldv_atm_dev_deregister_8 == $sub.ref(0, 122720));
procedure  ldv_atm_dev_deregister_8($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7503, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7503, 3} true;
  assume {:verifier.code 0} true;
  call atm_dev_deregister($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7504, 24} true;
  assume {:verifier.code 0} true;
  $M.6 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7505, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atomic_dec_and_test: ref;
axiom (atomic_dec_and_test == $sub.ref(0, 123752));
procedure  atomic_dec_and_test($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6117, 135} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6117, 135} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  call devirtbounce.11(0, $p2, $p1, $p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6119, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.30, $p1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6119, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i8.i32($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6119, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6119, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6119, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const constant_test_bit: ref;
axiom (constant_test_bit == $sub.ref(0, 124784));
procedure  constant_test_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 63} true;
  assume {:verifier.code 0} true;
  call {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 63} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i:6034:63: warning: over-approximating bitwise operation ashr;
  $i2 := $ashr.i64($i0, 6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 41} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1, $mul.ref($i2, 8));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 34} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.11, $p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 74} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 83} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i:6034:83: warning: over-approximating bitwise operation and;
  $i6 := $and.i32($i5, 63);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 70} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i32.i64($i6);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 70} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i:6034:70: warning: over-approximating bitwise operation lshr;
  $i8 := $lshr.i64($i4, $i7);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i64.i32($i8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 90} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i:6034:90: warning: over-approximating bitwise operation and;
  $i10 := $and.i32($i9, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6034, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const put_device: ref;
axiom (put_device == $sub.ref(0, 125816));
procedure  put_device($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7703, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7703, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_create: ref;
axiom (atmtcp_create == $sub.ref(0, 126848));
procedure  atmtcp_create($i0: i32, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7056, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atmtcp_create:arg:itf"} boogie_si_record_i32($i0);
  call {:cexpr "atmtcp_create:arg:persist"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7056, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := kmalloc(16, 208);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7057, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7058, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7058, 32} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7058, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7059, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 12);
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7080, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7062, 9} true;
  assume {:verifier.code 0} true;
  call $p8 := ldv_atm_dev_register_7(.str.1, $0.ref, atmtcp_v_dev_ops, $i0, $0.ref);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7064, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7064, 27} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i64($i9, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7064, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7065, 11} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7065, 5} true;
  assume {:verifier.code 0} true;
  call kfree($p11);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7066, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $eq.i32($i0, $sub.i32(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7066, 13} true;
  assume {:verifier.code 0} true;
  $i13 := (if ($i12 == 1) then $sub.i32(0, 12) else $sub.i32(0, 16));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7066, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $i13;
  goto $bb3;
$bb6:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7069, 8} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(94, 1));
  $p15 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(94, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7069, 26} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i8($M.11, $p15, 8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7070, 8} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(94, 1));
  $p17 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(94, 1)), $mul.ref(1, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7070, 26} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i8($M.11, $p17, 16);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7071, 19} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7071, 8} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7071, 17} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p19, $p3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7072, 35} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7072, 35} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.11, $p20);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7072, 4} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p21);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7072, 46} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7072, 50} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.ref($M.11, $p23, $0.ref);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7073, 35} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(32, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7073, 35} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.11, $p24);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7073, 4} true;
  assume {:verifier.code 0} true;
  $p26 := $bitcast.ref.ref($p25);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7073, 46} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7073, 54} true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i32($M.11, $p27, $i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7074, 7} true;
  assume {:verifier.code 0} true;
  $i28 := $p2i.ref.i64($p2);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7074, 30} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i64($i28, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7074, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i29 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7075, 13} true;
  assume {:verifier.code 0} true;
  $M.29 := $store.ref($M.29, $p2, $p8);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7076, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7078, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
}
const kmalloc: ref;
axiom (kmalloc == $sub.ref(0, 127880));
procedure  kmalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6154, 13} true;
  assume {:verifier.code 0} true;
  call {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
  call {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6154, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := __kmalloc($i0, $i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 6155, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const ldv_atm_dev_register_7: ref;
axiom (ldv_atm_dev_register_7 == $sub.ref(0, 128912));
procedure  ldv_atm_dev_register_7($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
  returns ($r: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7489, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_atm_dev_register_7:arg:ldv_func_arg4"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7489, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := atm_dev_register($p0, $p1, $p2, $i3, $p4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7492, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7492, 36} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7492, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7493, 26} true;
  assume {:verifier.code 0} true;
  $M.6 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7494, 5} true;
  assume {:verifier.code 0} true;
  call ldv_initialize_atmdev_ops_3();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7495, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7497, 3} true;
  assume {:verifier.code 0} true;
  $r := $p5;
  $exn := false;
  return;
}
const atm_dev_register: ref;
axiom (atm_dev_register == $sub.ref(0, 129944));
procedure  atm_dev_register($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
  returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7664, 28} true;
  assume {:verifier.code 0} true;
  call {:cexpr "atm_dev_register:arg:arg3"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7664, 28} true;
  assume {:verifier.code 0} true;
  call $p5 := external_alloc();
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7664, 10} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7664, 3} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
}
const ldv_module_get: ref;
axiom (ldv_module_get == $sub.ref(0, 130976));
procedure  ldv_module_get($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7563, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7563, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7563, 30} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i64($i1, 0);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7563, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7564, 29} true;
  assume {:verifier.code 0} true;
  $i3 := $M.15;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7564, 51} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i32($i3, 1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7564, 27} true;
  assume {:verifier.code 0} true;
  $M.15 := $i4;
  call {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i4);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7565, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7567, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const vcc_insert_socket: ref;
axiom (vcc_insert_socket == $sub.ref(0, 132008));
procedure  vcc_insert_socket($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7723, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7723, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atm_init_aal5: ref;
axiom (atm_init_aal5 == $sub.ref(0, 133040));
procedure  atm_init_aal5($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7668, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7668, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point.cil.out-z53trftz.i", 7668, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 134072));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 39, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 135104));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 136136));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 137168));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 59, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 138200));
procedure  __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 139232));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 140264));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 141296));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 142328));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 143360));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 144392));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 145424));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 146456));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 147488));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 148520));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 149552));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 150584));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __VERIFIER_nondet_unsigned_int: ref;
axiom (__VERIFIER_nondet_unsigned_int == $sub.ref(0, 151616));
procedure  __VERIFIER_nondet_unsigned_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 136, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 136, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 137, 22} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
  call {:cexpr "min"} boogie_si_record_i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 22} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
  call {:cexpr "max"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.i32($i2, 4294967295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.i32($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 56} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.i32($i2, 4294967295);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.i32($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 141, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 152648));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 153680));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 154712));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 155744));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 156776));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_unsigned_long: ref;
axiom (__VERIFIER_nondet_unsigned_long == $sub.ref(0, 157808));
procedure  __VERIFIER_nondet_unsigned_long()
  returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 169, 21} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 169, 21} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 170, 23} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
  call {:cexpr "min"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 23} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
  call {:cexpr "max"} boogie_si_record_i64($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i64($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.i64($i2, 18446744073709551615);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 57} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.i64($i2, 18446744073709551615);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.i64($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 174, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 158840));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 159872));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 160904));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 161936));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 162968));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 164000));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 165032));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 166064));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_bool: ref;
axiom (__VERIFIER_nondet_bool == $sub.ref(0, 167096));
procedure  __VERIFIER_nondet_bool()
  returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 13} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 9} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i8($i1);
  call {:cexpr "x"} boogie_si_record_i8($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 21} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i8.i1($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 21} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 28} true;
  assume {:verifier.code 0} true;
  $i6 := 1;
  assume {:branchcond $i5} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 28} true;
  assume {:verifier.code 0} true;
  assume ($i5 == 1);
  goto $bb2;
$bb2:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 28} true;
  assume {:verifier.code 1} true;
  $i10 := $zext.i1.i32($i6);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i10);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 10} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i8.i1($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 3} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
$bb3:
  assume !(($i5 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 31} true;
  assume {:verifier.code 1} true;
  $i7 := $trunc.i8.i1($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 31} true;
  assume {:verifier.code 1} true;
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 33} true;
  assume {:verifier.code 1} true;
  $i9 := $eq.i32($i8, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 28} true;
  assume {:verifier.code 0} true;
  $i6 := $i9;
  goto $bb2;
}
const __VERIFIER_nondet_uint: ref;
axiom (__VERIFIER_nondet_uint == $sub.ref(0, 168128));
procedure  __VERIFIER_nondet_uint()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __VERIFIER_nondet_ulong: ref;
axiom (__VERIFIER_nondet_ulong == $sub.ref(0, 169160));
procedure  __VERIFIER_nondet_ulong()
  returns ($r: i64)
{
  var $i0: i64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 21} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 21} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __VERIFIER_nondet_pointer: ref;
axiom (__VERIFIER_nondet_pointer == $sub.ref(0, 170192));
procedure  __VERIFIER_nondet_pointer()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 48} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 48} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet();
  call {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 41} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const __VERIFIER_nondet: ref;
axiom (__VERIFIER_nondet == $sub.ref(0, 171224));
procedure  __VERIFIER_nondet()
  returns ($r: ref);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 172256));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 173288));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 174320));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 544, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_begin: ref;
axiom (__VERIFIER_atomic_begin == $sub.ref(0, 175352));
procedure  __VERIFIER_atomic_begin()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  call corral_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 79} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_end: ref;
axiom (__VERIFIER_atomic_end == $sub.ref(0, 176384));
procedure  __VERIFIER_atomic_end()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  call corral_atomic_end();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 75} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const calloc: ref;
axiom (calloc == $sub.ref(0, 177416));
procedure  calloc($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 1} true;
  call {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
  call {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 21, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 22, 5} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 23, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $mul.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 23, 11} true;
  assume {:verifier.code 0} true;
  call $p6 := malloc($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 24, 24} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 24, 5} true;
  assume {:verifier.code 0} true;
  call $M.11 := $memset.i8($M.11, $p6, 0, $i7, false);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 25, 5} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:verifier.code 0} true;
  $p4 := $p6;
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 27, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 178448));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 179480));
procedure  __SMACK_static_init()
{
$bb0:
  $M.31 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  $M.1 := $0.ref;
  $M.2 := $0.ref;
  $M.10 := $0.ref;
  $M.3 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  $M.4 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  $M.5 := 0;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
  $M.6 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  $M.7 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  $M.8 := 0;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
  $M.9 := 0;
  call {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
  $M.15 := 1;
  call {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
  $M.32 := $store.ref($M.32, atmtcp_ioctl_ops, __this_module);
  $M.33 := $store.ref($M.33, $add.ref($add.ref(atmtcp_ioctl_ops, $mul.ref(0, 32)), $mul.ref(8, 1)), atmtcp_ioctl);
  $M.34 := $store.ref($M.34, $add.ref($add.ref($add.ref(atmtcp_ioctl_ops, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
  $M.35 := $store.ref($M.35, $add.ref($add.ref($add.ref(atmtcp_ioctl_ops, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1)), $0.ref);
  $M.36 := $store.ref($M.36, atmtcp_v_dev_ops, atmtcp_v_dev_close);
  $M.37 := $store.ref($M.37, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(8, 1)), atmtcp_v_open);
  $M.38 := $store.ref($M.38, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(16, 1)), atmtcp_v_close);
  $M.39 := $store.ref($M.39, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(24, 1)), atmtcp_v_ioctl);
  $M.40 := $store.ref($M.40, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(32, 1)), $0.ref);
  $M.41 := $store.ref($M.41, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(40, 1)), $0.ref);
  $M.42 := $store.ref($M.42, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(48, 1)), $0.ref);
  $M.43 := $store.ref($M.43, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(56, 1)), atmtcp_v_send);
  $M.44 := $store.ref($M.44, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
  $M.45 := $store.ref($M.45, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
  $M.46 := $store.ref($M.46, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
  $M.47 := $store.ref($M.47, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(88, 1)), $0.ref);
  $M.48 := $store.ref($M.48, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(96, 1)), atmtcp_v_proc);
  $M.49 := $store.ref($M.49, $add.ref($add.ref(atmtcp_v_dev_ops, $mul.ref(0, 112)), $mul.ref(104, 1)), __this_module);
  $M.11 := $store.i8($M.11, .str.1, 97);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.1, $mul.ref(0, 7)), $mul.ref(1, 1)), 116);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.1, $mul.ref(0, 7)), $mul.ref(2, 1)), 109);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.1, $mul.ref(0, 7)), $mul.ref(3, 1)), 116);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.1, $mul.ref(0, 7)), $mul.ref(4, 1)), 99);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.1, $mul.ref(0, 7)), $mul.ref(5, 1)), 112);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.1, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
  $M.11 := $store.ref($M.11, atmtcp_control_dev, atmtcp_c_dev_ops);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(16, 1)), .str.1);
  $M.11 := $store.i32($M.11, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(24, 1)), 999);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(32, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(40, 1)), $0.ref);
  $M.11 := $store.i64($M.11, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(48, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(56, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(56, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(1, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(2, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(3, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(4, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(88, 1)), $mul.ref(5, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(94, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(94, 1)), $mul.ref(1, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(20, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(20, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(20, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(20, 1)), $mul.ref(12, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(20, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)), $mul.ref(12, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(96, 1)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(156, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(160, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(164, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.2);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(240, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(248, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(312, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(320, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(488, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(496, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(504, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(512, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(9, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(10, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(11, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(44, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(537, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(548, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(600, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(520, 1)), $mul.ref(608, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1136, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1144, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1152, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1160, 1)), $0.ref);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1168, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1176, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1184, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1192, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1208, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1216, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1224, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1240, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1248, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1256, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1260, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
  $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1336, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1336, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1352, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1352, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1384, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1392, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1400, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1408, 1)), $0.ref);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1416, 1)), 0);
  $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(256, 1)), $mul.ref(1417, 1)), 0);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(1680, 1)), $mul.ref(0, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(atmtcp_control_dev, $mul.ref(0, 1696)), $mul.ref(1680, 1)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, atmtcp_c_dev_ops, $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(16, 1)), atmtcp_c_close);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(24, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(32, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(40, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(48, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(56, 1)), atmtcp_c_send);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(88, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
  $M.11 := $store.ref($M.11, $add.ref($add.ref(atmtcp_c_dev_ops, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
  $M.11 := $store.i8($M.11, .str.2, 97);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(1, 1)), 116);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(2, 1)), 109);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(3, 1)), 116);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(4, 1)), 99);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(5, 1)), 112);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(7, 1)), 99);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(8, 1)), 111);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(9, 1)), 110);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(10, 1)), 116);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(11, 1)), 114);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(12, 1)), 111);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(13, 1)), 108);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(15, 1)), 100);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(17, 1)), 118);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(18, 1)), 46);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(19, 1)), 108);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(20, 1)), 111);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(21, 1)), 99);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(22, 1)), 107);
  $M.11 := $store.i8($M.11, $add.ref($add.ref(.str.2, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
  $M.50 := .str.1.32;
  $M.51 := 0;
  call {:cexpr "errno_global"} boogie_si_record_i32(0);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 180512));
procedure  devirtbounce(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 181544));
procedure  devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 182576));
procedure  devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.3: ref;
axiom (devirtbounce.3 == $sub.ref(0, 183608));
procedure  devirtbounce.3(funcPtr: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i2 := $eq.ref(__VERIFIER_atomic_end, $p0);
  assume {:branchcond $i2} true;
  goto $bb3, $bb5;
$bb2:
  assume ($i1 == 1);
  call __VERIFIER_atomic_begin();
  $exn := false;
  return;
$bb3:
  assume ($i2 == 1);
  call __VERIFIER_atomic_end();
  $exn := false;
  return;
$bb4:
  assume !(($i1 == 1));
  assume false;
$bb5:
  assume !(($i2 == 1));
  $i1 := $eq.ref(__VERIFIER_atomic_begin, $p0);
  assume {:branchcond $i1} true;
  goto $bb2, $bb4;
}
const devirtbounce.4: ref;
axiom (devirtbounce.4 == $sub.ref(0, 184640));
procedure  devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
  returns ($r: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.5: ref;
axiom (devirtbounce.5 == $sub.ref(0, 185672));
procedure  devirtbounce.5(funcPtr: ref, arg: ref)
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.6: ref;
axiom (devirtbounce.6 == $sub.ref(0, 186704));
procedure  devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i2 := $eq.ref(__builtinx_object_size, $p0);
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  call $i1 := __builtinx_object_size();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume !(($i2 == 1));
  assume false;
}
const devirtbounce.7: ref;
axiom (devirtbounce.7 == $sub.ref(0, 187736));
procedure  devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.8: ref;
axiom (devirtbounce.8 == $sub.ref(0, 188768));
procedure  devirtbounce.8(funcPtr: ref, arg: i32)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i2 := $eq.ref(__builtinx_object_size, $p0);
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  call $i1 := __builtinx_object_size();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume !(($i2 == 1));
  assume false;
}
const devirtbounce.9: ref;
axiom (devirtbounce.9 == $sub.ref(0, 189800));
procedure  devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.10: ref;
axiom (devirtbounce.10 == $sub.ref(0, 190832));
procedure  devirtbounce.10(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i5 := $eq.ref(atmtcp_c_close, $p0);
  assume {:branchcond $i5} true;
  goto $bb4, $bb7;
$bb2:
  assume ($i3 == 1);
  call atmtcp_v_dev_close(arg);
  $exn := false;
  return;
$bb3:
  assume ($i4 == 1);
  $p1 := $bitcast.ref.ref(arg);
  call atmtcp_v_close($p1);
  $exn := false;
  return;
$bb4:
  assume ($i5 == 1);
  $p2 := $bitcast.ref.ref(arg);
  call atmtcp_c_close($p2);
  $exn := false;
  return;
$bb5:
  assume !(($i3 == 1));
  assume false;
$bb6:
  assume !(($i4 == 1));
  $i3 := $eq.ref(atmtcp_v_dev_close, $p0);
  assume {:branchcond $i3} true;
  goto $bb2, $bb5;
$bb7:
  assume !(($i5 == 1));
  $i4 := $eq.ref(atmtcp_v_close, $p0);
  assume {:branchcond $i4} true;
  goto $bb3, $bb6;
}
const devirtbounce.11: ref;
axiom (devirtbounce.11 == $sub.ref(0, 191864));
procedure  devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
procedure  $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

procedure  boogie_si_record_i1(x: i1);
procedure  boogie_si_record_i16(x: i16);
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i64(x: i64);
procedure  boogie_si_record_i8(x: i8);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
