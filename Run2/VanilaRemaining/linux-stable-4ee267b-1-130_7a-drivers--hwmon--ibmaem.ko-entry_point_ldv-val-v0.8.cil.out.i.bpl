// generated by SMACK version 2.4.1 for svcomp
// via /usr/local/bin/smack /proj/SMACK/SMACKBenchResults/data/sv-benchmarks/c/ldv-validator-v0.8/linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out.i -x svcomp --verifier svcomp -t -q -bpl linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out.i.bpl

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (51 regions)
var $M.0: [ref] i8;
var $M.1: i32;
var $M.2: i32;
var $M.3: i32;
var $M.4: i32;
var $M.5: i32;
var $M.6: i32;
var $M.7: i32;
var $M.8: [ref] i8;
var $M.9: [ref] i8;
var $M.10: [ref] i32;
var $M.11: i64;
var $M.12: [ref] i8;
var $M.13: [ref] i8;
var $M.14: i32;
var $M.15: [ref] i32;
var $M.16: [ref] i64;
var $M.17: [ref] i32;
var $M.18: [ref] i32;
var $M.19: [ref] i32;
var $M.20: [ref] i32;
var $M.21: [ref] i32;
var $M.22: [ref] i64;
var $M.23: [ref] i64;
var $M.24: i32;
var $M.25: [ref] i32;
var $M.26: [ref] i32;
var $M.27: [ref] i32;
var $M.28: [ref] ref;
var $M.29: [ref] ref;
var $M.30: [ref] ref;
var $M.31: [ref] ref;
var $M.32: [ref] ref;
var $M.33: [ref] i32;
var $M.34: [ref] i64;
var $M.35: [ref] ref;
var $M.36: [ref] ref;
var $M.37: [ref] i32;
var $M.38: [ref] i32;
var $M.39: [ref] i32;
var $M.40: [ref] i32;
var $M.41: [ref] i32;
var $M.42: [ref] ref;
var $M.43: [ref] ref;
var $M.44: [ref] ref;
var $M.45: [ref] ref;
var $M.46: [ref] ref;
var $M.47: [ref] i32;
var $M.48: [ref] i64;
var $M.49: ref;
var $M.50: i32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 229419));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (i64);

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $srem.i1(i1: i1, i2: i1) returns (i1) { (if ($ne.i1.bool($smod.i1(i1, i2), 0) && $slt.i1.bool(i1, 0)) then $sub.i1($smod.i1(i1, i2), $smax.i1(i2, $sub.i1(0, i2))) else $smod.i1(i1, i2)) }
function {:inline} $srem.i5(i1: i5, i2: i5) returns (i5) { (if ($ne.i5.bool($smod.i5(i1, i2), 0) && $slt.i5.bool(i1, 0)) then $sub.i5($smod.i5(i1, i2), $smax.i5(i2, $sub.i5(0, i2))) else $smod.i5(i1, i2)) }
function {:inline} $srem.i6(i1: i6, i2: i6) returns (i6) { (if ($ne.i6.bool($smod.i6(i1, i2), 0) && $slt.i6.bool(i1, 0)) then $sub.i6($smod.i6(i1, i2), $smax.i6(i2, $sub.i6(0, i2))) else $smod.i6(i1, i2)) }
function {:inline} $srem.i8(i1: i8, i2: i8) returns (i8) { (if ($ne.i8.bool($smod.i8(i1, i2), 0) && $slt.i8.bool(i1, 0)) then $sub.i8($smod.i8(i1, i2), $smax.i8(i2, $sub.i8(0, i2))) else $smod.i8(i1, i2)) }
function {:inline} $srem.i16(i1: i16, i2: i16) returns (i16) { (if ($ne.i16.bool($smod.i16(i1, i2), 0) && $slt.i16.bool(i1, 0)) then $sub.i16($smod.i16(i1, i2), $smax.i16(i2, $sub.i16(0, i2))) else $smod.i16(i1, i2)) }
function {:inline} $srem.i24(i1: i24, i2: i24) returns (i24) { (if ($ne.i24.bool($smod.i24(i1, i2), 0) && $slt.i24.bool(i1, 0)) then $sub.i24($smod.i24(i1, i2), $smax.i24(i2, $sub.i24(0, i2))) else $smod.i24(i1, i2)) }
function {:inline} $srem.i32(i1: i32, i2: i32) returns (i32) { (if ($ne.i32.bool($smod.i32(i1, i2), 0) && $slt.i32.bool(i1, 0)) then $sub.i32($smod.i32(i1, i2), $smax.i32(i2, $sub.i32(0, i2))) else $smod.i32(i1, i2)) }
function {:inline} $srem.i40(i1: i40, i2: i40) returns (i40) { (if ($ne.i40.bool($smod.i40(i1, i2), 0) && $slt.i40.bool(i1, 0)) then $sub.i40($smod.i40(i1, i2), $smax.i40(i2, $sub.i40(0, i2))) else $smod.i40(i1, i2)) }
function {:inline} $srem.i48(i1: i48, i2: i48) returns (i48) { (if ($ne.i48.bool($smod.i48(i1, i2), 0) && $slt.i48.bool(i1, 0)) then $sub.i48($smod.i48(i1, i2), $smax.i48(i2, $sub.i48(0, i2))) else $smod.i48(i1, i2)) }
function {:inline} $srem.i56(i1: i56, i2: i56) returns (i56) { (if ($ne.i56.bool($smod.i56(i1, i2), 0) && $slt.i56.bool(i1, 0)) then $sub.i56($smod.i56(i1, i2), $smax.i56(i2, $sub.i56(0, i2))) else $smod.i56(i1, i2)) }
function {:inline} $srem.i64(i1: i64, i2: i64) returns (i64) { (if ($ne.i64.bool($smod.i64(i1, i2), 0) && $slt.i64.bool(i1, 0)) then $sub.i64($smod.i64(i1, i2), $smax.i64(i2, $sub.i64(0, i2))) else $smod.i64(i1, i2)) }
function {:inline} $srem.i80(i1: i80, i2: i80) returns (i80) { (if ($ne.i80.bool($smod.i80(i1, i2), 0) && $slt.i80.bool(i1, 0)) then $sub.i80($smod.i80(i1, i2), $smax.i80(i2, $sub.i80(0, i2))) else $smod.i80(i1, i2)) }
function {:inline} $srem.i88(i1: i88, i2: i88) returns (i88) { (if ($ne.i88.bool($smod.i88(i1, i2), 0) && $slt.i88.bool(i1, 0)) then $sub.i88($smod.i88(i1, i2), $smax.i88(i2, $sub.i88(0, i2))) else $smod.i88(i1, i2)) }
function {:inline} $srem.i96(i1: i96, i2: i96) returns (i96) { (if ($ne.i96.bool($smod.i96(i1, i2), 0) && $slt.i96.bool(i1, 0)) then $sub.i96($smod.i96(i1, i2), $smax.i96(i2, $sub.i96(0, i2))) else $smod.i96(i1, i2)) }
function {:inline} $srem.i128(i1: i128, i2: i128) returns (i128) { (if ($ne.i128.bool($smod.i128(i1, i2), 0) && $slt.i128.bool(i1, 0)) then $sub.i128($smod.i128(i1, i2), $smax.i128(i2, $sub.i128(0, i2))) else $smod.i128(i1, i2)) }
function {:inline} $srem.i160(i1: i160, i2: i160) returns (i160) { (if ($ne.i160.bool($smod.i160(i1, i2), 0) && $slt.i160.bool(i1, 0)) then $sub.i160($smod.i160(i1, i2), $smax.i160(i2, $sub.i160(0, i2))) else $smod.i160(i1, i2)) }
function {:inline} $srem.i256(i1: i256, i2: i256) returns (i256) { (if ($ne.i256.bool($smod.i256(i1, i2), 0) && $slt.i256.bool(i1, 0)) then $sub.i256($smod.i256(i1, i2), $smax.i256(i2, $sub.i256(0, i2))) else $smod.i256(i1, i2)) }
function {:inline} $urem.i1(i1: i1, i2: i1) returns (i1) { $smod.i1(i1, i2) }
function {:inline} $urem.i5(i1: i5, i2: i5) returns (i5) { $smod.i5(i1, i2) }
function {:inline} $urem.i6(i1: i6, i2: i6) returns (i6) { $smod.i6(i1, i2) }
function {:inline} $urem.i8(i1: i8, i2: i8) returns (i8) { $smod.i8(i1, i2) }
function {:inline} $urem.i16(i1: i16, i2: i16) returns (i16) { $smod.i16(i1, i2) }
function {:inline} $urem.i24(i1: i24, i2: i24) returns (i24) { $smod.i24(i1, i2) }
function {:inline} $urem.i32(i1: i32, i2: i32) returns (i32) { $smod.i32(i1, i2) }
function {:inline} $urem.i40(i1: i40, i2: i40) returns (i40) { $smod.i40(i1, i2) }
function {:inline} $urem.i48(i1: i48, i2: i48) returns (i48) { $smod.i48(i1, i2) }
function {:inline} $urem.i56(i1: i56, i2: i56) returns (i56) { $smod.i56(i1, i2) }
function {:inline} $urem.i64(i1: i64, i2: i64) returns (i64) { $smod.i64(i1, i2) }
function {:inline} $urem.i80(i1: i80, i2: i80) returns (i80) { $smod.i80(i1, i2) }
function {:inline} $urem.i88(i1: i88, i2: i88) returns (i88) { $smod.i88(i1, i2) }
function {:inline} $urem.i96(i1: i96, i2: i96) returns (i96) { $smod.i96(i1, i2) }
function {:inline} $urem.i128(i1: i128, i2: i128) returns (i128) { $smod.i128(i1, i2) }
function {:inline} $urem.i160(i1: i160, i2: i160) returns (i160) { $smod.i160(i1, i2) }
function {:inline} $urem.i256(i1: i256, i2: i256) returns (i256) { $smod.i256(i1, i2) }
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
axiom ($and.i1(0, 0) == 0);
axiom ($or.i1(0, 0) == 0);
axiom ($xor.i1(0, 0) == 0);
axiom ($and.i1(0, 1) == 0);
axiom ($or.i1(0, 1) == 1);
axiom ($xor.i1(0, 1) == 1);
axiom ($and.i1(1, 0) == 0);
axiom ($or.i1(1, 0) == 1);
axiom ($xor.i1(1, 0) == 1);
axiom ($and.i1(1, 1) == 1);
axiom ($or.i1(1, 1) == 1);
axiom ($xor.i1(1, 1) == 0);
axiom ($and.i32(32, 16) == 0);
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
// Integer load/store operations
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
// Conversion between integer types
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer load/store operations
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.i8(f: float) returns (i8);
function $bitcast.float.i16(f: float) returns (i16);
function $bitcast.float.i32(f: float) returns (i32);
function $bitcast.float.i64(f: float) returns (i64);
function $bitcast.float.i80(f: float) returns (i80);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.i80.float(i: i80) returns (float);
function $fp2si.float.i1(f: float) returns (i1);
function $fp2si.float.i5(f: float) returns (i5);
function $fp2si.float.i6(f: float) returns (i6);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2si.float.i80(f: float) returns (i80);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2si.float.i160(f: float) returns (i160);
function $fp2si.float.i256(f: float) returns (i256);
function $fp2ui.float.i1(f: float) returns (i1);
function $fp2ui.float.i5(f: float) returns (i5);
function $fp2ui.float.i6(f: float) returns (i6);
function $fp2ui.float.i8(f: float) returns (i8);
function $fp2ui.float.i16(f: float) returns (i16);
function $fp2ui.float.i24(f: float) returns (i24);
function $fp2ui.float.i32(f: float) returns (i32);
function $fp2ui.float.i40(f: float) returns (i40);
function $fp2ui.float.i48(f: float) returns (i48);
function $fp2ui.float.i56(f: float) returns (i56);
function $fp2ui.float.i64(f: float) returns (i64);
function $fp2ui.float.i80(f: float) returns (i80);
function $fp2ui.float.i88(f: float) returns (i88);
function $fp2ui.float.i96(f: float) returns (i96);
function $fp2ui.float.i128(f: float) returns (i128);
function $fp2ui.float.i160(f: float) returns (i160);
function $fp2ui.float.i256(f: float) returns (i256);
function $si2fp.i1.float(i: i1) returns (float);
function $si2fp.i5.float(i: i5) returns (float);
function $si2fp.i6.float(i: i6) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $si2fp.i128.float(i: i128) returns (float);
function $si2fp.i160.float(i: i160) returns (float);
function $si2fp.i256.float(i: i256) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $ui2fp.i5.float(i: i5) returns (float);
function $ui2fp.i6.float(i: i6) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $ui2fp.i160.float(i: i160) returns (float);
function $ui2fp.i256.float(i: i256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, f: float) returns ([ref] i8) { M[p := $bitcast.float.i8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const ldv_state_variable_1: ref;
axiom (ldv_state_variable_1 == $sub.ref(0, 2056));
const ref_cnt: ref;
axiom (ref_cnt == $sub.ref(0, 3084));
const ldv_state_variable_0: ref;
axiom (ldv_state_variable_0 == $sub.ref(0, 4112));
const ldv_state_variable_3: ref;
axiom (ldv_state_variable_3 == $sub.ref(0, 5140));
const ldv_state_variable_2: ref;
axiom (ldv_state_variable_2 == $sub.ref(0, 6168));
const ldv_retval_0: ref;
axiom (ldv_retval_0 == $sub.ref(0, 7196));
const ldv_count_1: ref;
axiom (ldv_count_1 == $sub.ref(0, 8224));
const ldv_count_2: ref;
axiom (ldv_count_2 == $sub.ref(0, 9252));
const {:count 6} .str.34: ref;
axiom (.str.34 == $sub.ref(0, 10282));
const {:count 4} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 11310));
const {:count 70} .str.33: ref;
axiom (.str.33 == $sub.ref(0, 12404));
const {:count 56} .str.19: ref;
axiom (.str.19 == $sub.ref(0, 13484));
const {:count 33} .str.20: ref;
axiom (.str.20 == $sub.ref(0, 14541));
const system_x_id: ref;
axiom (system_x_id == $sub.ref(0, 15568));
const {:count 20} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 16612));
const {:count 18} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 17654));
const {:count 12} .str.11: ref;
axiom (.str.11 == $sub.ref(0, 18690));
const aem_driver: ref;
axiom (aem_driver == $sub.ref(0, 19874));
const {:count 55} .str.12: ref;
axiom (.str.12 == $sub.ref(0, 20953));
const driver_data: ref;
axiom (driver_data == $sub.ref(0, 22049));
const {:count 26} .str.13: ref;
axiom (.str.13 == $sub.ref(0, 23099));
const aem_idr_lock: ref;
axiom (aem_idr_lock == $sub.ref(0, 24195));
const aem_idr: ref;
axiom (aem_idr == $sub.ref(0, 25315));
const {:count 13} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 26352));
const {:count 13} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 27389));
const __this_module: ref;
axiom (__this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776)));
const {:count 13} aem2_ro_sensors: ref;
axiom (aem2_ro_sensors == $sub.ref(0, 28725));
const {:count 3} aem2_rw_sensors: ref;
axiom (aem2_rw_sensors == $sub.ref(0, 29845));
const sensor_dev_attr_name: ref;
axiom (sensor_dev_attr_name == $sub.ref(0, 30925));
const sensor_dev_attr_version: ref;
axiom (sensor_dev_attr_version == $sub.ref(0, 32005));
const {:count 8} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 33037));
const {:count 5} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 34066));
const {:count 24} .str.17: ref;
axiom (.str.17 == $sub.ref(0, 35114));
const {:count 24} .str.32: ref;
axiom (.str.32 == $sub.ref(0, 36162));
const {:count 5} .str.18: ref;
axiom (.str.18 == $sub.ref(0, 37191));
const {:count 14} .str.14: ref;
axiom (.str.14 == $sub.ref(0, 38229));
const {:count 14} .str.21: ref;
axiom (.str.21 == $sub.ref(0, 39267));
const {:count 15} .str.15: ref;
axiom (.str.15 == $sub.ref(0, 40306));
const {:count 15} .str.22: ref;
axiom (.str.22 == $sub.ref(0, 41345));
const {:count 12} .str.23: ref;
axiom (.str.23 == $sub.ref(0, 42381));
const {:count 12} .str.24: ref;
axiom (.str.24 == $sub.ref(0, 43417));
const {:count 15} .str.25: ref;
axiom (.str.25 == $sub.ref(0, 44456));
const {:count 15} .str.26: ref;
axiom (.str.26 == $sub.ref(0, 45495));
const {:count 15} .str.27: ref;
axiom (.str.27 == $sub.ref(0, 46534));
const {:count 15} .str.28: ref;
axiom (.str.28 == $sub.ref(0, 47573));
const {:count 15} .str.29: ref;
axiom (.str.29 == $sub.ref(0, 48612));
const {:count 10} .str.30: ref;
axiom (.str.30 == $sub.ref(0, 49646));
const {:count 4} .str.31: ref;
axiom (.str.31 == $sub.ref(0, 50674));
const {:count 6} .str.16: ref;
axiom (.str.16 == $sub.ref(0, 51704));
const jiffies: ref;
axiom (jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784)));
const platform_bus_type: ref;
axiom (platform_bus_type == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792)));
const {:count 33} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 52761));
const {:count 3} aem1_ro_sensors: ref;
axiom (aem1_ro_sensors == $sub.ref(0, 53857));
const {:count 2} aem1_rw_sensors: ref;
axiom (aem1_rw_sensors == $sub.ref(0, 54945));
const {:count 48} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 56017));
const {:count 38} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 57079));
const .str: ref;
axiom (.str == $sub.ref(0, 58110));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 59142));
const {:count 3} .str.1.63: ref;
axiom (.str.1.63 == $sub.ref(0, 60169));
const {:count 14} .str.64: ref;
axiom (.str.64 == $sub.ref(0, 61207));
const errno_global: ref;
axiom (errno_global == $sub.ref(0, 62235));
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 63267));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 64299));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const ldv_zalloc: ref;
axiom (ldv_zalloc == $sub.ref(0, 65331));
procedure  ldv_zalloc($i0: i64)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2950, 13} true;
  assume {:verifier.code 1} true;
  call {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2950, 13} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2951, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2951, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2952, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2954, 11} true;
  assume {:verifier.code 0} true;
  call $p4 := calloc(1, $i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2956, 23} true;
  assume {:verifier.code 1} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2956, 41} true;
  assume {:verifier.code 1} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2956, 41} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2956, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2957, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $p4;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2960, 1} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const ldv_init_zalloc: ref;
axiom (ldv_init_zalloc == $sub.ref(0, 66363));
procedure  ldv_init_zalloc($i0: i64)
  returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2966, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2966, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := calloc(1, $i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2968, 21} true;
  assume {:verifier.code 1} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2968, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $ne.i64($i2, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2968, 39} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2968, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2969, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const ldv_memset: ref;
axiom (ldv_memset == $sub.ref(0, 67395));
procedure  ldv_memset($p0: ref, $i1: i32, $i2: i64)
  returns ($r: ref)
{
  var $i3: i8;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2976, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
  call {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2976, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i32.i8($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2976, 9} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p0, $i3, $i2, false);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2977, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 68427));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i1);
const ldv_undef_int: ref;
axiom (ldv_undef_int == $sub.ref(0, 69459));
procedure  ldv_undef_int()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2984, 9} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2984, 9} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2985, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 70491));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i64;
$bb0:
  call $initialize();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4108, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4108, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_init_zalloc(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4110, 13} true;
  assume {:verifier.code 0} true;
  call $p3 := ldv_init_zalloc(1104);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4111, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4112, 13} true;
  assume {:verifier.code 0} true;
  call $p5 := ldv_init_zalloc(48);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4113, 13} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4114, 13} true;
  assume {:verifier.code 0} true;
  call $p7 := ldv_init_zalloc(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4116, 13} true;
  assume {:verifier.code 0} true;
  call $p8 := ldv_init_zalloc(384);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4117, 13} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4118, 13} true;
  assume {:verifier.code 0} true;
  call $p10 := ldv_init_zalloc(1104);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4119, 13} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4120, 13} true;
  assume {:verifier.code 0} true;
  call $p12 := ldv_init_zalloc(1104);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4121, 13} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4122, 13} true;
  assume {:verifier.code 0} true;
  call $p14 := ldv_init_zalloc(48);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4123, 14} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p14);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4124, 13} true;
  assume {:verifier.code 0} true;
  call $p16 := ldv_init_zalloc(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4126, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4127, 14} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4127, 3} true;
  assume {:verifier.code 0} true;
  call $p18 := ldv_memset($p17, 0, 4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4128, 14} true;
  assume {:verifier.code 0} true;
  $p19 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4128, 3} true;
  assume {:verifier.code 0} true;
  call $p20 := ldv_memset($p19, 0, 4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4129, 24} true;
  assume {:verifier.code 0} true;
  $M.1 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4130, 11} true;
  assume {:verifier.code 0} true;
  $M.2 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4131, 24} true;
  assume {:verifier.code 0} true;
  $M.3 := 1;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4132, 24} true;
  assume {:verifier.code 0} true;
  $M.4 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4133, 24} true;
  assume {:verifier.code 0} true;
  $M.5 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4133, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4135, 13} true;
  assume {:verifier.code 1} true;
  call $i21 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i21);
  call {:cexpr "tmp___8"} boogie_si_record_i32($i21);
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  $i22 := $slt.i32($i21, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i22 == 1);
  assume {:verifier.code 0} true;
  $i25 := $slt.i32($i21, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb10, $bb11;
$bb4:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  $i23 := $slt.i32($i21, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i23 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4193, 7} true;
  assume {:verifier.code 0} true;
  $i51 := $M.4;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4193, 28} true;
  assume {:verifier.code 0} true;
  $i52 := $ne.i32($i51, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4193, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb57, $bb58;
$bb6:
  assume !(($i23 == 1));
  assume {:verifier.code 0} true;
  $i24 := $eq.i32($i21, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i24 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4225, 7} true;
  assume {:verifier.code 0} true;
  $i66 := $M.5;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4225, 28} true;
  assume {:verifier.code 0} true;
  $i67 := $ne.i32($i66, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4225, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i67} true;
  goto $bb82, $bb83;
$bb8:
  assume {:verifier.code 0} true;
  assume !(($i24 == 1));
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  goto $bb94;
$bb10:
  assume ($i25 == 1);
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i21, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb12, $bb13;
$bb11:
  assume !(($i25 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4156, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $M.3;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4156, 28} true;
  assume {:verifier.code 0} true;
  $i35 := $ne.i32($i34, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4156, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb27, $bb28;
$bb12:
  assume ($i26 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4138, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $M.1;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4138, 28} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.i32($i27, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4138, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb14, $bb15;
$bb13:
  assume {:verifier.code 0} true;
  assume !(($i26 == 1));
  goto $bb9;
$bb14:
  assume ($i28 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4139, 15} true;
  assume {:verifier.code 1} true;
  call $i29 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i29);
  call {:cexpr "tmp___9"} boogie_si_record_i32($i29);
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb16:
  assume {:verifier.code 0} true;
  $i30 := $eq.i32($i29, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i30 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4142, 9} true;
  assume {:verifier.code 0} true;
  $i31 := $M.1;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4142, 30} true;
  assume {:verifier.code 0} true;
  $i32 := $eq.i32($i31, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4142, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb19, $bb20;
$bb18:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb19:
  assume ($i32 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4143, 7} true;
  assume {:verifier.code 0} true;
  call $i33 := show_version($p4, $p6, $p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4144, 28} true;
  assume {:verifier.code 0} true;
  $M.1 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4145, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume !(($i32 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4147, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4152, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb23:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4149, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4150, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4150, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb25:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4154, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4246, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb27:
  assume ($i35 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4157, 16} true;
  assume {:verifier.code 1} true;
  call $i36 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i36);
  call {:cexpr "tmp___10"} boogie_si_record_i32($i36);
  assume {:verifier.code 0} true;
  goto $bb29;
$bb28:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb56;
$bb29:
  assume {:verifier.code 0} true;
  $i37 := $slt.i32($i36, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i37 == 1);
  assume {:verifier.code 0} true;
  $i39 := $eq.i32($i36, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb35, $bb36;
$bb31:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  $i38 := $eq.i32($i36, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i38 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4168, 9} true;
  assume {:verifier.code 0} true;
  $i44 := $M.3;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4168, 30} true;
  assume {:verifier.code 0} true;
  $i45 := $eq.i32($i44, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4168, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb45, $bb46;
$bb33:
  assume {:verifier.code 0} true;
  assume !(($i38 == 1));
  goto $bb34;
$bb34:
  assume {:verifier.code 0} true;
  goto $bb54;
$bb35:
  assume ($i39 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4160, 9} true;
  assume {:verifier.code 0} true;
  $i40 := $M.3;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4160, 30} true;
  assume {:verifier.code 0} true;
  $i41 := $eq.i32($i40, 3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4160, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb37, $bb38;
$bb36:
  assume {:verifier.code 0} true;
  assume !(($i39 == 1));
  goto $bb34;
$bb37:
  assume ($i41 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4160, 38} true;
  assume {:verifier.code 0} true;
  $i42 := $M.2;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4160, 46} true;
  assume {:verifier.code 0} true;
  $i43 := $eq.i32($i42, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4160, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb40, $bb41;
$bb38:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4160, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i41 == 1));
  goto $bb39;
$bb39:
  assume {:verifier.code 0} true;
  goto $bb43;
$bb40:
  assume ($i43 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4161, 7} true;
  assume {:verifier.code 0} true;
  call aem_exit();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4162, 28} true;
  assume {:verifier.code 0} true;
  $M.3 := 2;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4163, 7} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb41:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4160, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i43 == 1));
  goto $bb39;
$bb42:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4248, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4249, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
$bb43:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4166, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4189, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb45:
  assume ($i45 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4169, 22} true;
  assume {:verifier.code 0} true;
  call $i46 := aem_init();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4169, 20} true;
  assume {:verifier.code 0} true;
  $M.6 := $i46;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32($i46);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4170, 11} true;
  assume {:verifier.code 0} true;
  $i47 := $M.6;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4170, 24} true;
  assume {:verifier.code 0} true;
  $i48 := $eq.i32($i47, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4170, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb47, $bb48;
$bb46:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb53;
$bb47:
  assume ($i48 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4171, 30} true;
  assume {:verifier.code 0} true;
  $M.3 := 3;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4172, 30} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4173, 30} true;
  assume {:verifier.code 0} true;
  $M.4 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4174, 30} true;
  assume {:verifier.code 0} true;
  $M.1 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4175, 7} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb48:
  assume !(($i48 == 1));
  assume {:verifier.code 0} true;
  goto $bb49;
$bb49:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4177, 11} true;
  assume {:verifier.code 0} true;
  $i49 := $M.6;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4177, 24} true;
  assume {:verifier.code 0} true;
  $i50 := $ne.i32($i49, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4177, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i50} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i50 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4178, 30} true;
  assume {:verifier.code 0} true;
  $M.3 := 2;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4179, 9} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb51:
  assume !(($i50 == 1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4182, 5} true;
  assume {:verifier.code 0} true;
  goto $bb53;
$bb53:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4184, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb54:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4186, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4187, 5} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4187, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb56:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4191, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb57:
  assume ($i52 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4194, 16} true;
  assume {:verifier.code 1} true;
  call $i53 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i53);
  call {:cexpr "tmp___11"} boogie_si_record_i32($i53);
  assume {:verifier.code 0} true;
  goto $bb59;
$bb58:
  assume !(($i52 == 1));
  assume {:verifier.code 0} true;
  goto $bb81;
$bb59:
  assume {:verifier.code 0} true;
  $i54 := $slt.i32($i53, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb60, $bb61;
$bb60:
  assume ($i54 == 1);
  assume {:verifier.code 0} true;
  $i57 := $eq.i32($i53, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb67, $bb68;
$bb61:
  assume !(($i54 == 1));
  assume {:verifier.code 0} true;
  $i55 := $slt.i32($i53, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb62, $bb63;
$bb62:
  assume ($i55 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4204, 9} true;
  assume {:verifier.code 0} true;
  $i61 := $M.4;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4204, 30} true;
  assume {:verifier.code 0} true;
  $i62 := $eq.i32($i61, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4204, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb73, $bb74;
$bb63:
  assume !(($i55 == 1));
  assume {:verifier.code 0} true;
  $i56 := $eq.i32($i53, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb64, $bb65;
$bb64:
  assume ($i56 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4211, 9} true;
  assume {:verifier.code 0} true;
  $i64 := $M.4;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4211, 30} true;
  assume {:verifier.code 0} true;
  $i65 := $eq.i32($i64, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4211, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb76, $bb77;
$bb65:
  assume {:verifier.code 0} true;
  assume !(($i56 == 1));
  goto $bb66;
$bb66:
  assume {:verifier.code 0} true;
  goto $bb79;
$bb67:
  assume ($i57 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4197, 9} true;
  assume {:verifier.code 0} true;
  $i58 := $M.4;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4197, 30} true;
  assume {:verifier.code 0} true;
  $i59 := $eq.i32($i58, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4197, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i59} true;
  goto $bb69, $bb70;
$bb68:
  assume {:verifier.code 0} true;
  assume !(($i57 == 1));
  goto $bb66;
$bb69:
  assume ($i59 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4198, 20} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i32($M.0, $p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4198, 7} true;
  assume {:verifier.code 0} true;
  call aem_bmc_gone($i60);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4199, 28} true;
  assume {:verifier.code 0} true;
  $M.4 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4200, 5} true;
  assume {:verifier.code 0} true;
  goto $bb71;
$bb70:
  assume !(($i59 == 1));
  assume {:verifier.code 0} true;
  goto $bb71;
$bb71:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4202, 5} true;
  assume {:verifier.code 0} true;
  goto $bb72;
$bb72:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4221, 3} true;
  assume {:verifier.code 0} true;
  goto $bb81;
$bb73:
  assume ($i62 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4205, 24} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i32($M.0, $p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4205, 7} true;
  assume {:verifier.code 0} true;
  call aem_register_bmc($i63, $p11);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4206, 28} true;
  assume {:verifier.code 0} true;
  $M.4 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4207, 5} true;
  assume {:verifier.code 0} true;
  goto $bb75;
$bb74:
  assume !(($i62 == 1));
  assume {:verifier.code 0} true;
  goto $bb75;
$bb75:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4209, 5} true;
  assume {:verifier.code 0} true;
  goto $bb72;
$bb76:
  assume ($i65 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4212, 7} true;
  assume {:verifier.code 0} true;
  call aem_msg_handler($p9, $p7);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4213, 28} true;
  assume {:verifier.code 0} true;
  $M.4 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4214, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb77:
  assume !(($i65 == 1));
  assume {:verifier.code 0} true;
  goto $bb78;
$bb78:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4216, 5} true;
  assume {:verifier.code 0} true;
  goto $bb72;
$bb79:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4218, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4219, 5} true;
  assume {:verifier.code 0} true;
  goto $bb80;
$bb80:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4219, 5} true;
  assume {:verifier.code 0} true;
  goto $bb72;
$bb81:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4223, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb82:
  assume ($i67 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4226, 16} true;
  assume {:verifier.code 1} true;
  call $i68 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i68);
  call {:cexpr "tmp___12"} boogie_si_record_i32($i68);
  assume {:verifier.code 0} true;
  goto $bb84;
$bb83:
  assume !(($i67 == 1));
  assume {:verifier.code 0} true;
  goto $bb93;
$bb84:
  assume {:verifier.code 0} true;
  $i69 := $eq.i32($i68, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb85, $bb86;
$bb85:
  assume ($i69 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4229, 9} true;
  assume {:verifier.code 0} true;
  $i70 := $M.5;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4229, 30} true;
  assume {:verifier.code 0} true;
  $i71 := $eq.i32($i70, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4229, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i71} true;
  goto $bb87, $bb88;
$bb86:
  assume !(($i69 == 1));
  assume {:verifier.code 0} true;
  goto $bb91;
$bb87:
  assume ($i71 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4230, 7} true;
  assume {:verifier.code 0} true;
  call $i72 := show_name($p13, $p15, $p16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4231, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4232, 5} true;
  assume {:verifier.code 0} true;
  goto $bb89;
$bb88:
  assume !(($i71 == 1));
  assume {:verifier.code 0} true;
  goto $bb89;
$bb89:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4234, 5} true;
  assume {:verifier.code 0} true;
  goto $bb90;
$bb90:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4239, 3} true;
  assume {:verifier.code 0} true;
  goto $bb93;
$bb91:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4236, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4237, 5} true;
  assume {:verifier.code 0} true;
  goto $bb92;
$bb92:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4237, 5} true;
  assume {:verifier.code 0} true;
  goto $bb90;
$bb93:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4241, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb94:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4243, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4244, 3} true;
  assume {:verifier.code 0} true;
  goto $bb95;
$bb95:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4244, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
}
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 71523));
procedure  ldv_initialize()
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4388, 17} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4388, 17} true;
  assume {:verifier.code 0} true;
  $i0 := $M.7;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4388, 29} true;
  assume {:verifier.code 0} true;
  $i1 := $add.i32($i0, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4388, 15} true;
  assume {:verifier.code 0} true;
  $M.7 := $i1;
  call {:cexpr "ldv_count_1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4389, 17} true;
  assume {:verifier.code 0} true;
  $i2 := $M.7;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4389, 29} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i32($i2, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4389, 15} true;
  assume {:verifier.code 0} true;
  $M.7 := $i3;
  call {:cexpr "ldv_count_1"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4390, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const show_version: ref;
axiom (show_version == $sub.ref(0, 72555));
procedure  show_version($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3732, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3732, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := dev_get_drvdata($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3733, 10} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3734, 49} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3734, 49} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i8($M.8, $p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3734, 37} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i8.i32($i6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3734, 72} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(217, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3734, 72} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i8($M.8, $p8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3734, 60} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i8.i32($i9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3734, 13} true;
  assume {:verifier.code 0} true;
  call $i11 := sprintf.ref.ref.i32.i32($p2, .str, $i7, $i10);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i11);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3735, 11} true;
  assume {:verifier.code 0} true;
  $i12 := $sext.i32.i64($i11);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3735, 3} true;
  assume {:verifier.code 0} true;
  $r := $i12;
  $exn := false;
  return;
}
const ldv_stop: ref;
axiom (ldv_stop == $sub.ref(0, 73587));
procedure  ldv_stop()
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3006, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3006, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3008, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb2:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3010, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const aem_exit: ref;
axiom (aem_exit == $sub.ref(0, 74619));
procedure  aem_exit()
{
  var $i0: i32;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p9: ref;
  var $p10: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4057, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4057, 3} true;
  assume {:verifier.code 0} true;
  call $i0 := ipmi_smi_watcher_unregister($add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(16, 1)));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4058, 3} true;
  assume {:verifier.code 0} true;
  call driver_unregister($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4059, 62} true;
  assume {:verifier.code 0} true;
  $p1 := $load.ref($M.8, driver_data);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4060, 8} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4061, 46} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(0, 1));
  $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4061, 51} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.8, $p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4062, 11} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4070, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4070, 26} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, $p2i.ref.i64(driver_data));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4070, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4070, 7} true;
  assume {:verifier.code 0} true;
  $p9, $p10 := $p1, $p5;
  goto $bb4;
$bb2:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4070, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb8;
$bb4:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4071, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4065, 3} true;
  assume {:verifier.code 0} true;
  call aem_delete($p9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4067, 49} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1264)), $mul.ref(0, 1));
  $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1264)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4067, 54} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.8, $p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4068, 11} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p13);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4070, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p10);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4070, 26} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i64($i15, $p2i.ref.i64(driver_data));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4070, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i16 == 1);
  assume {:verifier.code 0} true;
  $p9, $p10 := $p10, $p13;
  goto $bb4;
$bb7:
  assume !(($i16 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4070, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4074, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const aem_init: ref;
axiom (aem_init == $sub.ref(0, 75651));
procedure  aem_init()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4032, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4032, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := driver_register($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)));
  call {:cexpr "res"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4033, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4033, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4034, 5} true;
  assume {:verifier.code 0} true;
  call $i2 := printk.ref(.str.6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4035, 5} true;
  assume {:verifier.code 0} true;
  $i3 := $i0;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4048, 1} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4038, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := ipmi_smi_watcher_register($add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(16, 1)));
  call {:cexpr "res"} boogie_si_record_i32($i4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4039, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4039, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i5 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4040, 5} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4045, 3} true;
  assume {:verifier.code 0} true;
  call driver_unregister($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4046, 3} true;
  assume {:verifier.code 0} true;
  $i3 := $i4;
  goto $bb3;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4043, 3} true;
  assume {:verifier.code 0} true;
  $i3 := 0;
  goto $bb3;
}
const aem_bmc_gone: ref;
axiom (aem_bmc_gone == $sub.ref(0, 76683));
procedure  aem_bmc_gone($i0: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p9: ref;
  var $p10: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3686, 62} true;
  assume {:verifier.code 0} true;
  call {:cexpr "aem_bmc_gone:arg:iface"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3686, 62} true;
  assume {:verifier.code 0} true;
  $p1 := $load.ref($M.8, driver_data);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3687, 8} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3688, 46} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(0, 1));
  $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1264)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3688, 51} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.8, $p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3689, 11} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3700, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3700, 26} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, $p2i.ref.i64(driver_data));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3700, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3700, 7} true;
  assume {:verifier.code 0} true;
  $p9, $p10 := $p5, $p1;
  goto $bb4;
$bb2:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3700, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb11;
$bb4:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3701, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3692, 11} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1264)), $mul.ref(224, 1));
  $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(144, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3692, 16} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.8, $p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3692, 26} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i13, $i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3692, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i14 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3693, 5} true;
  assume {:verifier.code 0} true;
  call aem_delete($p10);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3694, 3} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3697, 49} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p9, $mul.ref(0, 1264)), $mul.ref(0, 1));
  $p16 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 1264)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3697, 54} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.8, $p16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3698, 11} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3700, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64($p9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3700, 26} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i64($i19, $p2i.ref.i64(driver_data));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3700, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i20 == 1);
  assume {:verifier.code 0} true;
  $p9, $p10 := $p17, $p9;
  goto $bb4;
$bb10:
  assume !(($i20 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3700, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb11:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3704, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const aem_register_bmc: ref;
axiom (aem_register_bmc == $sub.ref(0, 77715));
procedure  aem_register_bmc($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3667, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(200, $zext.i32.i64(1)));
  call {:cexpr "aem_register_bmc:arg:iface"} boogie_si_record_i32($i0);
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3667, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := aem_init_ipmi_data($p2, $i0, $p1);
  call {:cexpr "tmp"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3668, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3668, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3669, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3677, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3672, 3} true;
  assume {:verifier.code 0} true;
  call $i5 := aem_init_aem1($p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3673, 3} true;
  assume {:verifier.code 0} true;
  call $i6 := aem_init_aem2($p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3674, 27} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(136, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3674, 27} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.8, $p7);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3674, 3} true;
  assume {:verifier.code 0} true;
  call $i9 := ipmi_destroy_user($p8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3675, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const aem_msg_handler: ref;
axiom (aem_msg_handler == $sub.ref(0, 78747));
procedure  aem_msg_handler($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i16;
  var $i49: i16;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3118, 10} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3118, 10} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3119, 12} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(72, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3119, 12} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.8, $p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3119, 27} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(168, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3119, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i64($M.8, $p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3119, 18} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i4, $i6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3119, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3120, 42} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3120, 42} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.8, $p8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3121, 24} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(72, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3121, 24} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i64($M.8, $p10);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3121, 13} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.i64.i32($i11);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3121, 43} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(168, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3121, 43} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i64($M.8, $p13);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3121, 31} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.i64.i32($i14);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3120, 5} true;
  assume {:verifier.code 0} true;
  call $i16 := dev_err.ref.ref.i32.i32($p9, .str.33, $i12, $i15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3122, 5} true;
  assume {:verifier.code 0} true;
  call ipmi_free_recv_msg($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3123, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3149, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3126, 29} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3126, 29} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i32($M.8, $p17);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3126, 9} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(188, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3126, 22} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p19, $i18);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3127, 27} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1));
  $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3127, 31} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i16($M.8, $p21);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3127, 7} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.i16.i32($i22);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3127, 40} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i32($i23, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3127, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i24 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3128, 30} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1));
  $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3128, 34} true;
  assume {:verifier.code 0} true;
  $p27 := $load.ref($M.8, $p26);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3128, 23} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i8($M.8, $p27);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3128, 11} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(186, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3128, 21} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p29, $i28);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3129, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i24 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3130, 11} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(186, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3130, 21} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p30, $sub.i8(0, 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3132, 27} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1));
  $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3132, 31} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i16($M.8, $p32);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3132, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i16.i32($i33);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3132, 40} true;
  assume {:verifier.code 0} true;
  $i35 := $ugt.i32($i34, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3132, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i35 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3133, 34} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1));
  $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3133, 38} true;
  assume {:verifier.code 0} true;
  $i38 := $load.i16($M.8, $p37);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3133, 14} true;
  assume {:verifier.code 0} true;
  $i39 := $zext.i16.i32($i38);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3133, 47} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i32($i39, 65535);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3133, 14} true;
  assume {:verifier.code 0} true;
  $i41 := $trunc.i32.i16($i40);
  call {:cexpr "rx_len"} boogie_si_record_i16($i41);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3134, 21} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3134, 21} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i16($M.8, $p42);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3134, 9} true;
  assume {:verifier.code 0} true;
  $i44 := $zext.i16.i32($i43);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3134, 34} true;
  assume {:verifier.code 0} true;
  $i45 := $zext.i16.i32($i41);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3134, 32} true;
  assume {:verifier.code 0} true;
  $i46 := $slt.i32($i44, $i45);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3134, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb10, $bb11;
$bb9:
  assume !(($i35 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3143, 11} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3143, 22} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p60, 0);
  assume {:verifier.code 0} true;
  goto $bb13;
$bb10:
  assume ($i46 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3135, 22} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3135, 22} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i16($M.8, $p47);
  call {:cexpr "rx_len"} boogie_si_record_i16($i48);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3136, 5} true;
  assume {:verifier.code 0} true;
  $i49 := $i48;
  goto $bb12;
$bb11:
  assume !(($i46 == 1));
  assume {:verifier.code 0} true;
  $i49 := $i41;
  goto $bb12;
$bb12:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3138, 11} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3138, 22} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p50, $i49);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3139, 28} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3139, 28} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i16($M.8, $p51);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3139, 13} true;
  assume {:verifier.code 0} true;
  $i53 := $zext.i16.i64($i52);
  call {:cexpr "__len"} boogie_si_record_i64($i53);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3140, 26} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(176, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3140, 26} true;
  assume {:verifier.code 0} true;
  $p55 := $load.ref($M.8, $p54);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3140, 58} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1));
  $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3140, 62} true;
  assume {:verifier.code 0} true;
  $p58 := $load.ref($M.8, $p57);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3140, 67} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($p58, $mul.ref(1, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3140, 13} true;
  assume {:verifier.code 0} true;
  call $M.8 := $memcpy.i8($M.8, $M.8, $p55, $p59, $i53, false);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3142, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3145, 3} true;
  assume {:verifier.code 0} true;
  call ipmi_free_recv_msg($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3146, 20} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3146, 3} true;
  assume {:verifier.code 0} true;
  call complete_($p61);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3147, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const show_name: ref;
axiom (show_name == $sub.ref(0, 79779));
procedure  show_name($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3713, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3713, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := dev_get_drvdata($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3714, 10} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3715, 63} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3715, 63} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i8($M.8, $p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3715, 51} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i8.i32($i6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3715, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := sprintf.ref.ref.ref.i32($p2, .str.34, .str.1, $i7);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3716, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.i32.i64($i8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3716, 3} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
}
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 80811));
procedure  ldv_check_final_state()
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4489, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4489, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dev_get_drvdata: ref;
axiom (dev_get_drvdata == $sub.ref(0, 81843));
procedure  dev_get_drvdata($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4421, 18} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4421, 18} true;
  assume {:verifier.code 0} true;
  call $p1 := external_alloc();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4421, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const sprintf: ref;
axiom (sprintf == $sub.ref(0, 82875));
procedure  sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
  returns ($r: i32);
procedure  sprintf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64)
  returns ($r: i32);
procedure  sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
  returns ($r: i32);
procedure  sprintf.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
  returns ($r: i32);
const external_alloc: ref;
axiom (external_alloc == $sub.ref(0, 83907));
procedure  external_alloc()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4529, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4529, 10} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet_pointer();
  call {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4529, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const dev_err: ref;
axiom (dev_err == $sub.ref(0, 84939));
procedure  dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4417, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4417, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4417, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
procedure  dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb1:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4417, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4417, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4417, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ipmi_free_recv_msg: ref;
axiom (ipmi_free_recv_msg == $sub.ref(0, 85971));
procedure  ipmi_free_recv_msg($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4466, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4466, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 87003));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i1);
const complete_: ref;
axiom (complete_ == $sub.ref(0, 88035));
procedure  complete_($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4413, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4413, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const aem_init_ipmi_data: ref;
axiom (aem_init_ipmi_data == $sub.ref(0, 89067));
procedure  aem_init_ipmi_data($p0: ref, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3066, 27} true;
  assume {:verifier.code 0} true;
  call {:cexpr "aem_init_ipmi_data:arg:iface"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3066, 27} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3066, 3} true;
  assume {:verifier.code 0} true;
  call init_completion($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3067, 9} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3067, 20} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p4, $p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3068, 9} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(96, 1));
  $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(96, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3068, 27} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p6, 12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3069, 9} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(96, 1));
  $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(96, 1)), $mul.ref(4, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3069, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p8, 15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3070, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(96, 1));
  $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(96, 1)), $mul.ref(6, 1));
  $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(96, 1)), $mul.ref(6, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3070, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p11, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3071, 9} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(144, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3071, 19} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p12, $i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3072, 9} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(168, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3072, 18} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i64($M.8, $p13, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3073, 9} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1));
  $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3073, 26} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p15, 46);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3074, 47} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(144, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3074, 47} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i32($M.8, $p16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3075, 26} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3075, 48} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(136, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3075, 40} true;
  assume {:verifier.code 0} true;
  $p20 := $bitcast.ref.ref($p19);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3074, 9} true;
  assume {:verifier.code 0} true;
  call $i21 := ipmi_create_user($i17, $add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(56, 1)), $p18, $p20);
  call {:cexpr "err"} boogie_si_record_i32($i21);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3076, 11} true;
  assume {:verifier.code 0} true;
  $i22 := $slt.i32($i21, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3076, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i22 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3078, 19} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(144, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3078, 19} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.8, $p23);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3077, 5} true;
  assume {:verifier.code 0} true;
  call $i25 := dev_err.ref.ref.i32($p2, .str.7, $i24);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3079, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i32(0, 13);
  goto $bb3;
$bb2:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3084, 1} true;
  assume {:verifier.code 0} true;
  $r := $i26;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3082, 3} true;
  assume {:verifier.code 0} true;
  $i26 := 0;
  goto $bb3;
}
const aem_init_aem1: ref;
axiom (aem_init_aem1 == $sub.ref(0, 90099));
procedure  aem_init_aem1($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i15: i32;
  var $i16: i1;
  var $i3: i32;
  var $i14: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3482, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3482, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := aem_find_aem1_count($p0);
  call {:cexpr "num"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3495, 9} true;
  assume {:verifier.code 0} true;
  $i2 := $slt.i32(0, $i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3495, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3495, 7} true;
  assume {:verifier.code 0} true;
  $i3 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3495, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3496, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3486, 42} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i32.i8($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3486, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i8.i32($i4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3486, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i32.i8($i5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3486, 9} true;
  assume {:verifier.code 0} true;
  call $i7 := aem_init_aem1_inst($p0, $i6);
  call {:cexpr "err"} boogie_si_record_i32($i7);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3487, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3487, 7} true;
  assume {:verifier.code 0} true;
  $i9, $i10 := $i7, $i3;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3486, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3488, 43} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3488, 43} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.8, $p11);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3488, 5} true;
  assume {:verifier.code 0} true;
  call $i13 := dev_err.ref.ref.i32.i32($p12, .str.8, $i9, $i10);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3490, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $i9;
  goto $bb8;
$bb7:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3501, 1} true;
  assume {:verifier.code 0} true;
  $r := $i14;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3493, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i3, 1);
  call {:cexpr "i"} boogie_si_record_i32($i15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3495, 9} true;
  assume {:verifier.code 0} true;
  $i16 := $slt.i32($i15, $i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3495, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i16 == 1);
  assume {:verifier.code 0} true;
  $i3 := $i15;
  goto $bb4;
$bb11:
  assume !(($i16 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3495, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb12:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3499, 3} true;
  assume {:verifier.code 0} true;
  $i14 := 0;
  goto $bb8;
}
const aem_init_aem2: ref;
axiom (aem_init_aem2 == $sub.ref(0, 91131));
procedure  aem_init_aem2($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i29: i32;
  var $i4: i32;
  var $i28: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3654, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(10, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3654, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := aem_find_aem2($p0, $p1, 0);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3655, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3655, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3655, 7} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3655, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb16;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3656, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3638, 30} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3638, 30} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i8($M.8, $p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3638, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i8.i32($i6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3638, 36} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3638, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3639, 43} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3639, 43} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.8, $p9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3640, 27} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3640, 27} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i8($M.8, $p11);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3640, 13} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i8.i32($i12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3639, 5} true;
  assume {:verifier.code 0} true;
  call $i14 := dev_err.ref.ref.i32($p10, .str.19, $i13);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3641, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i4, 1);
  call {:cexpr "i"} boogie_si_record_i32($i15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3642, 5} true;
  assume {:verifier.code 0} true;
  $i16 := $i15;
  goto $bb8;
$bb7:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3654, 9} true;
  assume {:verifier.code 0} true;
  call $i17 := aem_find_aem2($p0, $p1, $i16);
  call {:cexpr "tmp"} boogie_si_record_i32($i17);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3655, 11} true;
  assume {:verifier.code 0} true;
  $i18 := $eq.i32($i17, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3655, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i18 == 1);
  assume {:verifier.code 0} true;
  $i4 := $i16;
  goto $bb4;
$bb10:
  assume !(($i18 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3655, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb11:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3645, 9} true;
  assume {:verifier.code 0} true;
  call $i19 := aem_init_aem2_inst($p0, $p1);
  call {:cexpr "err"} boogie_si_record_i32($i19);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3646, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i32($i19, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3646, 7} true;
  assume {:verifier.code 0} true;
  $i21 := $i19;
  assume {:branchcond $i20} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i20 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3645, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3647, 43} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3647, 43} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.8, $p22);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3648, 32} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(6, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3648, 32} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i8($M.8, $p24);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3648, 18} true;
  assume {:verifier.code 0} true;
  $i26 := $zext.i8.i32($i25);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3647, 5} true;
  assume {:verifier.code 0} true;
  call $i27 := dev_err.ref.ref.i32.i32($p23, .str.20, $i21, $i26);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3649, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $i21;
  goto $bb14;
$bb13:
  assume !(($i20 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3661, 1} true;
  assume {:verifier.code 0} true;
  $r := $i28;
  $exn := false;
  return;
$bb15:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3652, 9} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i32($i4, 1);
  call {:cexpr "i"} boogie_si_record_i32($i29);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3652, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $i29;
  goto $bb8;
$bb16:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3659, 3} true;
  assume {:verifier.code 0} true;
  $i28 := 0;
  goto $bb14;
}
const ipmi_destroy_user: ref;
axiom (ipmi_destroy_user == $sub.ref(0, 92163));
procedure  ipmi_destroy_user($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4463, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4463, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4463, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const aem_init_aem2_inst: ref;
axiom (aem_init_aem2_inst == $sub.ref(0, 93195));
procedure  aem_init_aem2_inst($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i32: i32;
  var $p96: ref;
  var $i97: i32;
  var $i23: i32;
  var $p98: ref;
  var $i7: i32;
  var $p99: ref;
  var $p100: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3554, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3554, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := ldv_kzalloc_6(1264, 208);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3555, 10} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3556, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3556, 28} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3556, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3557, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 12);
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3627, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3560, 24} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3560, 3} true;
  assume {:verifier.code 0} true;
  call __mutex_init($p8, .str.11, $p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3561, 30} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3561, 30} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i8($M.8, $p9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3561, 9} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3561, 19} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p11, $i10);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3562, 30} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(5, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3562, 30} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i8($M.8, $p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3562, 9} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(217, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3562, 19} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p14, $i13);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3563, 34} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(6, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3563, 34} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i8($M.8, $p15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3563, 9} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(218, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3563, 23} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p17, $i16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3570, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3571, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3567, 9} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(1232, 1));
  $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(1232, 1)), $mul.ref(0, 8));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3567, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i64($M.8, $p19, 1000);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3571, 5} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3567, 9} true;
  assume {:verifier.code 0} true;
  $p99 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(1232, 1));
  $p100 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(1232, 1)), $mul.ref(1, 8));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3567, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i64($M.8, $p100, 1000);
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3574, 33} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(220, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3574, 13} true;
  assume {:verifier.code 0} true;
  call $i21 := aem_idr_get($p20);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i21);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3575, 15} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i32($i21, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3575, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i22 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3576, 5} true;
  assume {:verifier.code 0} true;
  $i23 := $sub.i32(0, 12);
  goto $bb11;
$bb10:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3553, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3624, 9} true;
  assume {:verifier.code 0} true;
  $p98 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3624, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p98);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3625, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i23;
  goto $bb3;
$bb12:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3579, 51} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(220, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3579, 51} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i32($M.8, $p24);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3579, 16} true;
  assume {:verifier.code 0} true;
  call $p26 := platform_device_alloc(.str.1, $i25);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3579, 9} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3579, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p27, $p26);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3580, 29} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3580, 29} true;
  assume {:verifier.code 0} true;
  $p29 := $load.ref($M.8, $p28);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3580, 7} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p29);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3580, 34} true;
  assume {:verifier.code 0} true;
  $i31 := $eq.i64($i30, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3580, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i31 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3581, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sub.i32(0, 12);
  goto $bb15;
$bb14:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3622, 21} true;
  assume {:verifier.code 0} true;
  $p96 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(220, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3622, 21} true;
  assume {:verifier.code 0} true;
  $i97 := $load.i32($M.8, $p96);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3622, 3} true;
  assume {:verifier.code 0} true;
  call aem_idr_put($i97);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3622, 3} true;
  assume {:verifier.code 0} true;
  $i23 := $i32;
  goto $bb11;
$bb16:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3584, 10} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3584, 10} true;
  assume {:verifier.code 0} true;
  $p34 := $load.ref($M.8, $p33);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3584, 17} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1152)), $mul.ref(16, 1));
  $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(272, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3584, 28} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p36, $add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3585, 35} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3585, 35} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.8, $p37);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3585, 9} true;
  assume {:verifier.code 0} true;
  call $i39 := platform_device_add($p38);
  call {:cexpr "res"} boogie_si_record_i32($i39);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3586, 11} true;
  assume {:verifier.code 0} true;
  $i40 := $ne.i32($i39, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3586, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i40 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3587, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3619, 28} true;
  assume {:verifier.code 0} true;
  $p91 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3619, 28} true;
  assume {:verifier.code 0} true;
  $p92 := $load.ref($M.8, $p91);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3619, 35} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($add.ref($p92, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3619, 3} true;
  assume {:verifier.code 0} true;
  call dev_set_drvdata($p93, $0.ref);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3620, 36} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3620, 36} true;
  assume {:verifier.code 0} true;
  $p95 := $load.ref($M.8, $p94);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3620, 3} true;
  assume {:verifier.code 0} true;
  call platform_device_unregister($p95);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3620, 3} true;
  assume {:verifier.code 0} true;
  $i32 := $i39;
  goto $bb15;
$bb20:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3590, 28} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3590, 28} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.8, $p41);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3590, 35} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3590, 40} true;
  assume {:verifier.code 0} true;
  $p44 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3590, 3} true;
  assume {:verifier.code 0} true;
  call dev_set_drvdata($p43, $p44);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3591, 40} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(224, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3591, 53} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(144, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3591, 53} true;
  assume {:verifier.code 0} true;
  $i47 := $load.i32($M.8, $p46);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3591, 71} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3591, 71} true;
  assume {:verifier.code 0} true;
  $p49 := $load.ref($M.8, $p48);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3591, 13} true;
  assume {:verifier.code 0} true;
  call $i50 := aem_init_ipmi_data($p45, $i47, $p49);
  call {:cexpr "tmp___1"} boogie_si_record_i32($i50);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3592, 15} true;
  assume {:verifier.code 0} true;
  $i51 := $ne.i32($i50, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3592, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i51 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3593, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb22:
  assume !(($i51 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3596, 52} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3596, 52} true;
  assume {:verifier.code 0} true;
  $p53 := $load.ref($M.8, $p52);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3596, 59} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p53, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3596, 21} true;
  assume {:verifier.code 0} true;
  call $p55 := hwmon_device_register($p54);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3596, 9} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3596, 19} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p56, $p55);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3597, 40} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3597, 40} true;
  assume {:verifier.code 0} true;
  $p58 := $load.ref($M.8, $p57);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3597, 20} true;
  assume {:verifier.code 0} true;
  $p59 := $bitcast.ref.ref($p58);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3597, 13} true;
  assume {:verifier.code 0} true;
  call $i60 := IS_ERR($p59);
  call {:cexpr "tmp___2"} boogie_si_record_i64($i60);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3598, 15} true;
  assume {:verifier.code 0} true;
  $i61 := $ne.i64($i60, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3598, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i61 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3599, 46} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3599, 46} true;
  assume {:verifier.code 0} true;
  $p63 := $load.ref($M.8, $p62);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3599, 53} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($add.ref($p63, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3600, 20} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(144, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3600, 20} true;
  assume {:verifier.code 0} true;
  $i66 := $load.i32($M.8, $p65);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3599, 5} true;
  assume {:verifier.code 0} true;
  call $i67 := dev_err.ref.ref.i32($p64, .str.12, $i66);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3601, 5} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb25:
  assume !(($i61 == 1));
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3617, 27} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(224, 1));
  $p88 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(136, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3617, 32} true;
  assume {:verifier.code 0} true;
  $p89 := $load.ref($M.8, $p88);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3617, 3} true;
  assume {:verifier.code 0} true;
  call $i90 := ipmi_destroy_user($p89);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3617, 3} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb27:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3604, 9} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(424, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3604, 16} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p68, update_aem2_sensors);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3605, 13} true;
  assume {:verifier.code 0} true;
  call $i69 := aem2_find_sensors($p4);
  call {:cexpr "tmp___3"} boogie_si_record_i32($i69);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3606, 15} true;
  assume {:verifier.code 0} true;
  $i70 := $ne.i32($i69, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3606, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i70} true;
  goto $bb28, $bb29;
$bb28:
  assume ($i70 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3607, 5} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb29:
  assume !(($i70 == 1));
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3615, 33} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3615, 33} true;
  assume {:verifier.code 0} true;
  $p86 := $load.ref($M.8, $p85);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3615, 3} true;
  assume {:verifier.code 0} true;
  call hwmon_device_unregister($p86);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3615, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb31:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3610, 25} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3610, 3} true;
  assume {:verifier.code 0} true;
  call list_add_tail($p71, driver_data);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3611, 42} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(224, 1));
  $p73 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3611, 47} true;
  assume {:verifier.code 0} true;
  $p74 := $load.ref($M.8, $p73);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3612, 25} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3612, 25} true;
  assume {:verifier.code 0} true;
  $i76 := $load.i8($M.8, $p75);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3612, 13} true;
  assume {:verifier.code 0} true;
  $i77 := $zext.i8.i32($i76);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3612, 48} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(217, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3612, 48} true;
  assume {:verifier.code 0} true;
  $i79 := $load.i8($M.8, $p78);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3612, 36} true;
  assume {:verifier.code 0} true;
  $i80 := $zext.i8.i32($i79);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3612, 71} true;
  assume {:verifier.code 0} true;
  $p81 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(218, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3612, 71} true;
  assume {:verifier.code 0} true;
  $i82 := $load.i8($M.8, $p81);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3612, 59} true;
  assume {:verifier.code 0} true;
  $i83 := $zext.i8.i32($i82);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3611, 3} true;
  assume {:verifier.code 0} true;
  call $i84 := _dev_info.ref.ref.i32.i32.i32($p74, .str.13, $i77, $i80, $i83);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3613, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
}
const aem_find_aem2: ref;
axiom (aem_find_aem2 == $sub.ref(0, 94227));
procedure  aem_find_aem2($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i24: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3510, 10} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(6, $zext.i32.i64(1)));
  call {:cexpr "aem_find_aem2:arg:instance_num"} boogie_si_record_i32($i2);
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3510, 10} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3510, 15} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3510, 15} true;
  assume {:verifier.code 0} true;
  call $M.8 := $memcpy.i8($M.8, $M.9, $p5, system_x_id, 3, false);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3511, 28} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i32.i8($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3511, 10} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(3, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3511, 26} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p7, $i6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3512, 10} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(4, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3512, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p8, 256);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3513, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1));
  $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1)), $mul.ref(1, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3513, 24} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p10, $sub.i8(0, 126));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3514, 27} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3514, 9} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1));
  $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3514, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p13, $p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3515, 9} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1));
  $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3515, 29} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p15, 6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3516, 23} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3516, 9} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(176, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3516, 21} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p17, $p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3517, 9} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3517, 20} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p18, 9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3518, 3} true;
  assume {:verifier.code 0} true;
  call $i19 := aem_send_message($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3519, 45} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3519, 9} true;
  assume {:verifier.code 0} true;
  call $i21 := wait_for_completion_timeout($p20, 7500);
  call {:cexpr "tmp"} boogie_si_record_i64($i21);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3520, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.i64.i32($i21);
  call {:cexpr "res"} boogie_si_record_i32($i22);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3521, 11} true;
  assume {:verifier.code 0} true;
  $i23 := $eq.i32($i22, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3521, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i23 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3522, 5} true;
  assume {:verifier.code 0} true;
  $i24 := $sub.i32(0, 110);
  goto $bb3;
$bb2:
  assume !(($i23 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3540, 1} true;
  assume {:verifier.code 0} true;
  $r := $i24;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 28} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(186, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 28} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i8($M.8, $p25);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i8.i32($i26);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 38} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.i32($i27, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 44} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb5, $bb7;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 44} true;
  assume {:verifier.code 0} true;
  assume ($i28 == 1);
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3526, 5} true;
  assume {:verifier.code 0} true;
  $i24 := $sub.i32(0, 2);
  goto $bb3;
$bb7:
  assume !(($i28 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 68} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 68} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i16($M.8, $p29);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 47} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.i16.i32($i30);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 79} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.i32($i31, 9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb8, $bb9;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3525, 7} true;
  assume {:verifier.code 0} true;
  assume ($i32 == 1);
  goto $bb6;
$bb9:
  assume !(($i32 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3528, 48} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3528, 22} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p33);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3528, 15} true;
  assume {:verifier.code 0} true;
  call $i35 := memcmp($p34, system_x_id, 3);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i35);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3530, 17} true;
  assume {:verifier.code 0} true;
  $i36 := $ne.i32($i35, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3530, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i36 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3531, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $sub.i32(0, 2);
  goto $bb3;
$bb11:
  assume !(($i36 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3533, 24} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(3, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3533, 24} true;
  assume {:verifier.code 0} true;
  $i38 := $load.i8($M.8, $p37);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3533, 9} true;
  assume {:verifier.code 0} true;
  $i39 := $zext.i8.i32($i38);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3533, 38} true;
  assume {:verifier.code 0} true;
  $i40 := $sle.i32($i39, $i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3533, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i40 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3534, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $sub.i32(0, 2);
  goto $bb3;
$bb13:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3538, 3} true;
  assume {:verifier.code 0} true;
  $i24 := 0;
  goto $bb3;
}
const aem_send_message: ref;
axiom (aem_send_message == $sub.ref(0, 95259));
procedure  aem_send_message($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i17: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3089, 36} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3089, 36} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(96, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3089, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := ipmi_validate_addr($p1, 40);
  call {:cexpr "err"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3090, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3090, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3091, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3106, 40} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3106, 40} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.8, $p21);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3106, 3} true;
  assume {:verifier.code 0} true;
  call $i23 := dev_err.ref.ref.i32($p22, .str.10, $i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3107, 3} true;
  assume {:verifier.code 0} true;
  $i17 := $i2;
  goto $bb9;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3094, 26} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(168, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3094, 26} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i64($M.8, $p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3094, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i64($i5, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3094, 9} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(168, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3094, 18} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i64($M.8, $p7, $i6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3095, 36} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(136, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3095, 36} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.8, $p8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3095, 50} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(96, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3095, 65} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(168, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3095, 65} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i64($M.8, $p11);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3095, 83} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3096, 30} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3095, 9} true;
  assume {:verifier.code 0} true;
  call $i15 := ipmi_request_settime($p9, $p10, $i12, $p13, $p14, 0, 0, 0);
  call {:cexpr "err"} boogie_si_record_i32($i15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3097, 11} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3097, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i16 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3098, 5} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3103, 40} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3103, 40} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.8, $p18);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3103, 3} true;
  assume {:verifier.code 0} true;
  call $i20 := dev_err.ref.ref.i32($p19, .str.9, $i15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3104, 3} true;
  assume {:verifier.code 0} true;
  $i17 := $i15;
  goto $bb9;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3101, 3} true;
  assume {:verifier.code 0} true;
  $i17 := 0;
  goto $bb9;
$bb9:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3109, 1} true;
  assume {:verifier.code 0} true;
  $r := $i17;
  $exn := false;
  return;
}
const wait_for_completion_timeout: ref;
axiom (wait_for_completion_timeout == $sub.ref(0, 96291));
procedure  wait_for_completion_timeout($p0: ref, $i1: i64)
  returns ($r: i64)
{
  var $i2: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4525, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4525, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4525, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const memcmp: ref;
axiom (memcmp == $sub.ref(0, 97323));
procedure  memcmp($p0: ref, $p1: ref, $i2: i64)
  returns ($r: i32);
const ipmi_validate_addr: ref;
axiom (ipmi_validate_addr == $sub.ref(0, 98355));
procedure  ipmi_validate_addr($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4482, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "ipmi_validate_addr:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4482, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4482, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ipmi_request_settime: ref;
axiom (ipmi_request_settime == $sub.ref(0, 99387));
procedure  ipmi_request_settime($p0: ref, $p1: ref, $i2: i64, $p3: ref, $p4: ref, $i5: i32, $i6: i32, $i7: i32)
  returns ($r: i32)
{
  var $i8: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4470, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "ipmi_request_settime:arg:arg2"} boogie_si_record_i64($i2);
  call {:cexpr "ipmi_request_settime:arg:arg5"} boogie_si_record_i32($i5);
  call {:cexpr "ipmi_request_settime:arg:arg6"} boogie_si_record_i32($i6);
  call {:cexpr "ipmi_request_settime:arg:arg7"} boogie_si_record_i32($i7);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4470, 10} true;
  assume {:verifier.code 1} true;
  call $i8 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4470, 3} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
}
const ldv_kzalloc_6: ref;
axiom (ldv_kzalloc_6 == $sub.ref(0, 100419));
procedure  ldv_kzalloc_6($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4264, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv_kzalloc_6:arg:size"} boogie_si_record_i64($i0);
  call {:cexpr "ldv_kzalloc_6:arg:flags"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4264, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_zalloc($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4265, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const __mutex_init: ref;
axiom (__mutex_init == $sub.ref(0, 101451));
procedure  __mutex_init($p0: ref, $p1: ref, $p2: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4400, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4400, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const aem_idr_get: ref;
axiom (aem_idr_get == $sub.ref(0, 102483));
procedure  aem_idr_get($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i14: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3160, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3160, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := idr_pre_get(aem_idr, 208);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3161, 37} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3161, 37} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3161, 33} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3161, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := ldv__builtin_expect($i5, 0);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3162, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3162, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3162, 7} true;
  assume {:verifier.code 0} true;
  assume ($i7 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3163, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 12);
  goto $bb8;
$bb3:
  assume !(($i7 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3162, 7} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  goto $bb9;
$bb5:
  assume ($i20 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3160, 9} true;
  assume {:verifier.code 0} true;
  call $i8 := idr_pre_get(aem_idr, 208);
  call {:cexpr "tmp"} boogie_si_record_i32($i8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3161, 37} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i8, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3161, 37} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i1.i32($i9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3161, 33} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3161, 13} true;
  assume {:verifier.code 0} true;
  call $i12 := ldv__builtin_expect($i11, 0);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3162, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i64($i12, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3162, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i13 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3162, 7} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb7:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3162, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i13 == 1));
  goto $bb4;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3182, 1} true;
  assume {:verifier.code 0} true;
  $r := $i14;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3166, 3} true;
  assume {:verifier.code 0} true;
  call spin_lock(aem_idr_lock);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3167, 9} true;
  assume {:verifier.code 0} true;
  call $i15 := idr_get_new(aem_idr, $0.ref, $p1);
  call {:cexpr "err"} boogie_si_record_i32($i15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3168, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock(aem_idr_lock);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3169, 37} true;
  assume {:verifier.code 0} true;
  $i16 := $eq.i32($i15, $sub.i32(0, 11));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3169, 37} true;
  assume {:verifier.code 0} true;
  $i17 := $zext.i1.i32($i16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3169, 33} true;
  assume {:verifier.code 0} true;
  $i18 := $sext.i32.i64($i17);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3169, 13} true;
  assume {:verifier.code 0} true;
  call $i19 := ldv__builtin_expect($i18, 0);
  call {:cexpr "tmp___2"} boogie_si_record_i64($i19);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3170, 15} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i64($i19, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3170, 7} true;
  assume {:verifier.code 0} true;
  $i21 := $i15;
  assume {:branchcond $i20} true;
  goto $bb5, $bb10;
$bb10:
  assume !(($i20 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3167, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3173, 39} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i32($i21, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3173, 39} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.i1.i32($i22);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3173, 35} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.i32.i64($i23);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3173, 15} true;
  assume {:verifier.code 0} true;
  call $i25 := ldv__builtin_expect($i24, 0);
  call {:cexpr "tmp___1"} boogie_si_record_i64($i25);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3174, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.i64($i25, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3174, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i26 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3175, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $i21;
  goto $bb8;
$bb12:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3179, 9} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i32($M.10, $p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3179, 11} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i:3179:11: warning: over-approximating bitwise operation and;
  $i28 := $and.i32($i27, 2147483647);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3179, 7} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p0, $i28);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3180, 3} true;
  assume {:verifier.code 0} true;
  $i14 := 0;
  goto $bb8;
}
const platform_device_alloc: ref;
axiom (platform_device_alloc == $sub.ref(0, 103515));
procedure  platform_device_alloc($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4510, 36} true;
  assume {:verifier.code 0} true;
  call {:cexpr "platform_device_alloc:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4510, 36} true;
  assume {:verifier.code 0} true;
  call $p2 := external_alloc();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4510, 10} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4510, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const platform_device_add: ref;
axiom (platform_device_add == $sub.ref(0, 104547));
procedure  platform_device_add($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4506, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4506, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4506, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const dev_set_drvdata: ref;
axiom (dev_set_drvdata == $sub.ref(0, 105579));
procedure  dev_set_drvdata($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4424, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4424, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const hwmon_device_register: ref;
axiom (hwmon_device_register == $sub.ref(0, 106611));
procedure  hwmon_device_register($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4441, 27} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4441, 27} true;
  assume {:verifier.code 0} true;
  call $p1 := external_alloc();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4441, 10} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4441, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const IS_ERR: ref;
axiom (IS_ERR == $sub.ref(0, 107643));
procedure  IS_ERR($p0: ref)
  returns ($r: i64)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4256, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4256, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_is_err($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4256, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i8($i1);
  call {:cexpr "tmp"} boogie_si_record_i8($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4257, 18} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i8.i1($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4257, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i64($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4257, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const update_aem2_sensors: ref;
axiom (update_aem2_sensors == $sub.ref(0, 108675));
procedure  update_aem2_sensors($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3315, 29} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3315, 29} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3315, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock_nested($p1, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 14} true;
  assume {:verifier.code 0} true;
  $i2 := $M.11;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 38} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(208, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 38} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.8, $p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 51} true;
  assume {:verifier.code 0} true;
  $i5 := $add.i64($i4, 250);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.i64($i2, $i5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 60} true;
  assume {:verifier.code 0} true;
  $i7 := $slt.i64($i6, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 65} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 95} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(200, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 95} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i8($M.8, $p8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 68} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.i8.i32($i9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 102} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i32($i10, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 65} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb7;
$bb4:
  assume ($i11 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3317, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3316, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i11 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3335, 24} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3335, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p22);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3336, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3320, 3} true;
  assume {:verifier.code 0} true;
  call update_aem_energy($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3321, 48} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1260, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3321, 31} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3321, 3} true;
  assume {:verifier.code 0} true;
  call $i14 := aem_read_sensor($p0, 9, 0, $p13, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3322, 48} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1260, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3322, 31} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3322, 54} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p16, $mul.ref(1, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3322, 3} true;
  assume {:verifier.code 0} true;
  call $i18 := aem_read_sensor($p0, 9, 1, $p17, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3330, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3331, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 61} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1248, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 44} true;
  assume {:verifier.code 0} true;
  $p20 := $bitcast.ref.ref($p19);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 3} true;
  assume {:verifier.code 0} true;
  call $i21 := aem_read_sensor($p0, 7, 0, $p20, 2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3331, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 61} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1248, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 44} true;
  assume {:verifier.code 0} true;
  $p24 := $bitcast.ref.ref($p23);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 67} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p24, $mul.ref(1, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 3} true;
  assume {:verifier.code 0} true;
  call $i26 := aem_read_sensor($p0, 7, 1, $p25, 2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3331, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3330, 12} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb12:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 61} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1248, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 44} true;
  assume {:verifier.code 0} true;
  $p28 := $bitcast.ref.ref($p27);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 67} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p28, $mul.ref(2, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 3} true;
  assume {:verifier.code 0} true;
  call $i30 := aem_read_sensor($p0, 7, 2, $p29, 2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3331, 5} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 61} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1248, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 44} true;
  assume {:verifier.code 0} true;
  $p32 := $bitcast.ref.ref($p31);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 67} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p32, $mul.ref(3, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 3} true;
  assume {:verifier.code 0} true;
  call $i34 := aem_read_sensor($p0, 7, 3, $p33, 2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3331, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 61} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1248, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 44} true;
  assume {:verifier.code 0} true;
  $p36 := $bitcast.ref.ref($p35);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 67} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p36, $mul.ref(4, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 3} true;
  assume {:verifier.code 0} true;
  call $i38 := aem_read_sensor($p0, 7, 4, $p37, 2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3331, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 61} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1248, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 44} true;
  assume {:verifier.code 0} true;
  $p40 := $bitcast.ref.ref($p39);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 67} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p40, $mul.ref(5, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3326, 3} true;
  assume {:verifier.code 0} true;
  call $i42 := aem_read_sensor($p0, 7, 5, $p41, 2);
  assume {:verifier.code 0} true;
  goto $bb11;
}
const aem2_find_sensors: ref;
axiom (aem2_find_sensors == $sub.ref(0, 109707));
procedure  aem2_find_sensors($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4023, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4023, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := aem_register_sensors($p0, aem2_ro_sensors, aem2_rw_sensors);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4025, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const list_add_tail: ref;
axiom (list_add_tail == $sub.ref(0, 110739));
procedure  list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2859, 25} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2859, 25} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2859, 25} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.8, $p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2859, 3} true;
  assume {:verifier.code 0} true;
  call __list_add($p0, $p3, $p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2860, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _dev_info: ref;
axiom (_dev_info == $sub.ref(0, 111771));
procedure  _dev_info.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4404, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4404, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4404, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const hwmon_device_unregister: ref;
axiom (hwmon_device_unregister == $sub.ref(0, 112803));
procedure  hwmon_device_unregister($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4444, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4444, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const platform_device_unregister: ref;
axiom (platform_device_unregister == $sub.ref(0, 113835));
procedure  platform_device_unregister($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4513, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4513, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const aem_idr_put: ref;
axiom (aem_idr_put == $sub.ref(0, 114867));
procedure  aem_idr_put($i0: i32)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3186, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "aem_idr_put:arg:id"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3186, 3} true;
  assume {:verifier.code 0} true;
  call spin_lock(aem_idr_lock);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3187, 3} true;
  assume {:verifier.code 0} true;
  call idr_remove(aem_idr, $i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3188, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock(aem_idr_lock);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3189, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const kfree: ref;
axiom (kfree == $sub.ref(0, 115899));
procedure  kfree($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4533, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4533, 3} true;
  assume {:verifier.code 0} true;
  call free_($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4534, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 116931));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const spin_lock: ref;
axiom (spin_lock == $sub.ref(0, 117963));
procedure  spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2869, 26} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2869, 26} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2869, 45} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2869, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_lock($p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2870, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const idr_remove: ref;
axiom (idr_remove == $sub.ref(0, 118995));
procedure  idr_remove($p0: ref, $i1: i32)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4455, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4455, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const spin_unlock: ref;
axiom (spin_unlock == $sub.ref(0, 120027));
procedure  spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2876, 28} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2876, 28} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2876, 47} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2876, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_unlock($p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2877, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_unlock: ref;
axiom (_raw_spin_unlock == $sub.ref(0, 121059));
procedure  _raw_spin_unlock($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4410, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4410, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_lock: ref;
axiom (_raw_spin_lock == $sub.ref(0, 122091));
procedure  _raw_spin_lock($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4407, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4407, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __list_add: ref;
axiom (__list_add == $sub.ref(0, 123123));
procedure  __list_add($p0: ref, $p1: ref, $p2: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4397, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4397, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const aem_register_sensors: ref;
axiom (aem_register_sensors == $sub.ref(0, 124155));
procedure  aem_register_sensors($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p13: ref;
  var $p14: ref;
  var $p45: ref;
  var $p12: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p50: ref;
  var $p51: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i38: i32;
  var $i88: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3866, 18} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3866, 18} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3866, 18} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.8, $p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3866, 25} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3867, 56} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(432, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3867, 13} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 27} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 27} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.12, $p8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 33} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i64($i10, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 7} true;
  assume {:verifier.code 0} true;
  $p12 := $p6;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 7} true;
  assume {:verifier.code 0} true;
  $p13, $p14 := $p1, $p6;
  goto $bb4;
$bb2:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i11 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb4:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3884, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3870, 51} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3870, 51} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.12, $p15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3870, 12} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(0, 1));
  $p18 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p19 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3870, 31} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p19, $p16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3871, 12} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(0, 1));
  $p21 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p22 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3871, 31} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p22, 292);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3872, 32} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3872, 32} true;
  assume {:verifier.code 0} true;
  $p24 := $load.ref($M.12, $p23);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3872, 12} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(0, 1));
  $p26 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3872, 26} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p26, $p24);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3873, 24} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3873, 24} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i32($M.12, $p27);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3873, 12} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3873, 18} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p29, $i28);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3874, 84} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3874, 9} true;
  assume {:verifier.code 0} true;
  call $i31 := ldv_device_create_file_9($p5, $p30);
  call {:cexpr "err"} boogie_si_record_i32($i31);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3875, 11} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.i32($i31, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3875, 7} true;
  assume {:verifier.code 0} true;
  $i33, $p34 := $i31, $p14;
  assume {:branchcond $i32} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i32 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3874, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3876, 14} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p34, $mul.ref(0, 56)), $mul.ref(0, 1));
  $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p37 := $add.ref($add.ref($add.ref($add.ref($p34, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3876, 33} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p37, $0.ref);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3877, 5} true;
  assume {:verifier.code 0} true;
  $i38 := $i33;
  goto $bb8;
$bb7:
  assume !(($i32 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3915, 3} true;
  assume {:verifier.code 0} true;
  call aem_remove_sensors($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3916, 3} true;
  assume {:verifier.code 0} true;
  $i88 := $i38;
  goto $bb27;
$bb9:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3880, 21} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p14, $mul.ref(1, 56));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3881, 11} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p13, $mul.ref(1, 24));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 27} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($add.ref($p13, $mul.ref(1, 24)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 27} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.12, $p41);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 7} true;
  assume {:verifier.code 0} true;
  $i43 := $p2i.ref.i64($p42);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 33} true;
  assume {:verifier.code 0} true;
  $i44 := $ne.i64($i43, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 7} true;
  assume {:verifier.code 0} true;
  $p45 := $p39;
  assume {:branchcond $i44} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i44 == 1);
  assume {:verifier.code 0} true;
  $p13, $p14 := $p40, $p39;
  goto $bb4;
$bb11:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3883, 7} true;
  assume {:verifier.code 0} true;
  $p12 := $p45;
  goto $bb3;
$bb12:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 27} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 27} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.13, $p46);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($p47);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 33} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i64($i48, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i49 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 7} true;
  assume {:verifier.code 0} true;
  $p50, $p51 := $p2, $p12;
  goto $bb16;
$bb14:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i49 == 1));
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  goto $bb23;
$bb16:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3904, 5} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3889, 51} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p50, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3889, 51} true;
  assume {:verifier.code 0} true;
  $p53 := $load.ref($M.13, $p52);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3889, 12} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1));
  $p55 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p56 := $add.ref($add.ref($add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3889, 31} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p56, $p53);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3890, 12} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1));
  $p58 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p59 := $add.ref($add.ref($add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3890, 31} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p59, 420);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3891, 32} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($add.ref($p50, $mul.ref(0, 32)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3891, 32} true;
  assume {:verifier.code 0} true;
  $p61 := $load.ref($M.13, $p60);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3891, 12} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1));
  $p63 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3891, 26} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p63, $p61);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3892, 33} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($add.ref($p50, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3892, 33} true;
  assume {:verifier.code 0} true;
  $p65 := $load.ref($M.13, $p64);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3892, 12} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1));
  $p67 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3892, 27} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p67, $p65);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3893, 24} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($add.ref($p50, $mul.ref(0, 32)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3893, 24} true;
  assume {:verifier.code 0} true;
  $i69 := $load.i32($M.13, $p68);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3893, 12} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3893, 18} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p70, $i69);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3894, 85} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3894, 9} true;
  assume {:verifier.code 0} true;
  call $i72 := ldv_device_create_file_10($p5, $p71);
  call {:cexpr "err"} boogie_si_record_i32($i72);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3895, 11} true;
  assume {:verifier.code 0} true;
  $i73 := $ne.i32($i72, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3895, 7} true;
  assume {:verifier.code 0} true;
  $i74, $p75 := $i72, $p51;
  assume {:branchcond $i73} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i73 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3894, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3896, 14} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($add.ref($p75, $mul.ref(0, 56)), $mul.ref(0, 1));
  $p77 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p78 := $add.ref($add.ref($add.ref($add.ref($p75, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3896, 33} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p78, $0.ref);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3897, 5} true;
  assume {:verifier.code 0} true;
  $i38 := $i74;
  goto $bb8;
$bb19:
  assume !(($i73 == 1));
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3900, 21} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($p51, $mul.ref(1, 56));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3901, 11} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($p50, $mul.ref(1, 32));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 27} true;
  assume {:verifier.code 0} true;
  $p81 := $add.ref($add.ref($p50, $mul.ref(1, 32)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 27} true;
  assume {:verifier.code 0} true;
  $p82 := $load.ref($M.13, $p81);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 7} true;
  assume {:verifier.code 0} true;
  $i83 := $p2i.ref.i64($p82);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 33} true;
  assume {:verifier.code 0} true;
  $i84 := $ne.i64($i83, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i84 == 1);
  assume {:verifier.code 0} true;
  $p50, $p51 := $p80, $p79;
  goto $bb16;
$bb22:
  assume !(($i84 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3903, 7} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb23:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3907, 9} true;
  assume {:verifier.code 0} true;
  call $i85 := ldv_device_create_file_11($p5, sensor_dev_attr_name);
  call {:cexpr "err"} boogie_si_record_i32($i85);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3908, 11} true;
  assume {:verifier.code 0} true;
  $i86 := $ne.i32($i85, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3908, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i86} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i86 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3909, 5} true;
  assume {:verifier.code 0} true;
  $i38 := $i85;
  goto $bb8;
$bb25:
  assume !(($i86 == 1));
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3912, 9} true;
  assume {:verifier.code 0} true;
  call $i87 := ldv_device_create_file_12($p5, sensor_dev_attr_version);
  call {:cexpr "err"} boogie_si_record_i32($i87);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3913, 3} true;
  assume {:verifier.code 0} true;
  $i88 := $i87;
  goto $bb27;
$bb27:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3918, 1} true;
  assume {:verifier.code 0} true;
  $r := $i88;
  $exn := false;
  return;
}
const ldv_device_create_file_9: ref;
axiom (ldv_device_create_file_9 == $sub.ref(0, 125187));
procedure  ldv_device_create_file_9($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4272, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4272, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := ldv_device_create_file();
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4273, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_device_create_file_10: ref;
axiom (ldv_device_create_file_10 == $sub.ref(0, 126219));
procedure  ldv_device_create_file_10($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4280, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4280, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := ldv_device_create_file();
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4281, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_device_create_file_11: ref;
axiom (ldv_device_create_file_11 == $sub.ref(0, 127251));
procedure  ldv_device_create_file_11($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4288, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4288, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := ldv_device_create_file();
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4289, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_device_create_file_12: ref;
axiom (ldv_device_create_file_12 == $sub.ref(0, 128283));
procedure  ldv_device_create_file_12($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4296, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4296, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := ldv_device_create_file();
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4297, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const aem_remove_sensors: ref;
axiom (aem_remove_sensors == $sub.ref(0, 129315));
procedure  aem_remove_sensors($p0: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i11: i32;
  var $i19: i32;
  var $i20: i1;
  var $i1: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3970, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3970, 7} true;
  assume {:verifier.code 0} true;
  $i1 := 0;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3971, 5} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3962, 29} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(432, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3962, 23} true;
  assume {:verifier.code 0} true;
  $i3 := $sext.i32.i64($i1);
  $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(432, 1)), $mul.ref($i3, 56));
  $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(432, 1)), $mul.ref($i3, 56)), $mul.ref(0, 1));
  $p6 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(432, 1)), $mul.ref($i3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(432, 1)), $mul.ref($i3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3962, 54} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.8, $p7);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3962, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3962, 59} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i64($i9, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3962, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i10 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3963, 5} true;
  assume {:verifier.code 0} true;
  $i11 := $i1;
  goto $bb5;
$bb4:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3968, 9} true;
  assume {:verifier.code 0} true;
  $i19 := $add.i32($i11, 1);
  call {:cexpr "i"} boogie_si_record_i32($i19);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3970, 9} true;
  assume {:verifier.code 0} true;
  $i20 := $sle.i32($i19, 13);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3970, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb7, $bb8;
$bb6:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3966, 31} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3966, 31} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.8, $p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3966, 38} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3966, 85} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(432, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3966, 79} true;
  assume {:verifier.code 0} true;
  $i16 := $sext.i32.i64($i1);
  $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(432, 1)), $mul.ref($i16, 56));
  $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(432, 1)), $mul.ref($i16, 56)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3966, 3} true;
  assume {:verifier.code 0} true;
  call device_remove_file($p14, $p18);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3966, 3} true;
  assume {:verifier.code 0} true;
  $i11 := $i1;
  goto $bb5;
$bb7:
  assume ($i20 == 1);
  assume {:verifier.code 0} true;
  $i1 := $i19;
  goto $bb1;
$bb8:
  assume !(($i20 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3974, 31} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3974, 31} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.8, $p21);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3974, 38} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3974, 3} true;
  assume {:verifier.code 0} true;
  call device_remove_file($p23, sensor_dev_attr_name);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3975, 31} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3975, 31} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.8, $p24);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3975, 38} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3975, 3} true;
  assume {:verifier.code 0} true;
  call device_remove_file($p26, sensor_dev_attr_version);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3976, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const device_remove_file: ref;
axiom (device_remove_file == $sub.ref(0, 130347));
procedure  device_remove_file($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4427, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4427, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_device_create_file: ref;
axiom (ldv_device_create_file == $sub.ref(0, 131379));
procedure  ldv_device_create_file()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4371, 19} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4371, 19} true;
  assume {:verifier.code 0} true;
  call $i0 := ldv_undef_int();
  call {:cexpr "nondetermined"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4372, 21} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4372, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4373, 19} true;
  assume {:verifier.code 0} true;
  $i2 := $M.14;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4373, 31} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i32($i2, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4373, 17} true;
  assume {:verifier.code 0} true;
  $M.14 := $i3;
  call {:cexpr "ldv_count_2"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4374, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $M.7;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4374, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $M.14;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4374, 21} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.i32($i4, $i5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4374, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4380, 11} true;
  assume {:verifier.code 0} true;
  call $i8 := ldv_undef_int_negative();
  call {:cexpr "tmp"} boogie_si_record_i32($i8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4381, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $i8;
  goto $bb6;
$bb3:
  assume ($i6 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4375, 7} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4376, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4378, 5} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4384, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const ldv_error: ref;
axiom (ldv_error == $sub.ref(0, 132411));
procedure  ldv_error()
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4302, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4302, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4304, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4306, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_undef_int_negative: ref;
axiom (ldv_undef_int_negative == $sub.ref(0, 133443));
procedure  ldv_undef_int_negative()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4312, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4312, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := ldv_undef_int();
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4314, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4314, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4315, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4316, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4318, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const aem_show_power_period: ref;
axiom (aem_show_power_period == $sub.ref(0, 134475));
procedure  aem_show_power_period($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $i15: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3822, 10} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3822, 10} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3823, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := dev_get_drvdata($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3824, 7} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3825, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(424, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3825, 9} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.8, $p6);
  call devirtbounce($p7, $p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3826, 38} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(1232, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3826, 57} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3826, 57} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.15, $p9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3826, 35} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(1232, 1)), $mul.ref($i11, 8));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3826, 35} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i64($M.8, $p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3826, 13} true;
  assume {:verifier.code 0} true;
  call $i14 := sprintf.ref.ref.i64($p2, .str.18, $i13);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i14);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3827, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $sext.i32.i64($i14);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3827, 3} true;
  assume {:verifier.code 0} true;
  $r := $i15;
  $exn := false;
  return;
}
const aem_set_power_period: ref;
axiom (aem_set_power_period == $sub.ref(0, 135507));
procedure  aem_set_power_period($p0: ref, $p1: ref, $p2: ref, $i3: i64)
  returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i11: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3841, 10} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call {:cexpr "aem_set_power_period:arg:count"} boogie_si_record_i64($i3);
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3841, 10} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3842, 9} true;
  assume {:verifier.code 0} true;
  call $p6 := dev_get_drvdata($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3843, 7} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3844, 9} true;
  assume {:verifier.code 0} true;
  call $i8 := kstrtoul($p2, 10, $p4);
  call {:cexpr "res"} boogie_si_record_i32($i8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3845, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i8, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3845, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3846, 13} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.i32.i64($i8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3846, 5} true;
  assume {:verifier.code 0} true;
  $i11 := $i10;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3858, 1} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3849, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i64($M.16, $p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3849, 12} true;
  assume {:verifier.code 0} true;
  $i13 := $ule.i64($i12, 199);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3849, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i13 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3850, 5} true;
  assume {:verifier.code 0} true;
  $i11 := $sub.i64(0, 22);
  goto $bb3;
$bb6:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3853, 26} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3853, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock_nested($p14, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3854, 34} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i64($M.16, $p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3854, 6} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(1232, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3854, 25} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3854, 25} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i32($M.17, $p17);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3854, 3} true;
  assume {:verifier.code 0} true;
  $i19 := $sext.i32.i64($i18);
  $p20 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(1232, 1)), $mul.ref($i19, 8));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3854, 32} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i64($M.8, $p20, $i15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3855, 21} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3855, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p21);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3856, 3} true;
  assume {:verifier.code 0} true;
  $i11 := $i3;
  goto $bb3;
}
const kstrtoul: ref;
axiom (kstrtoul == $sub.ref(0, 136539));
procedure  kstrtoul($p0: ref, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2838, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "kstrtoul:arg:base"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2838, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := kstrtoull($p0, $i1, $p2);
  call {:cexpr "tmp"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2839, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const mutex_lock_nested: ref;
axiom (mutex_lock_nested == $sub.ref(0, 137571));
procedure  mutex_lock_nested($p0: ref, $i1: i32)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4499, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4499, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const mutex_unlock: ref;
axiom (mutex_unlock == $sub.ref(0, 138603));
procedure  mutex_unlock($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4502, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4502, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const kstrtoull: ref;
axiom (kstrtoull == $sub.ref(0, 139635));
procedure  kstrtoull($p0: ref, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4486, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "kstrtoull:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4486, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4486, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const aem_show_energy: ref;
axiom (aem_show_energy == $sub.ref(0, 140667));
procedure  aem_show_energy($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i32;
  var $i18: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3802, 10} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3802, 10} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3803, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := dev_get_drvdata($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3804, 7} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3805, 26} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3805, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock_nested($p6, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3806, 34} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3806, 34} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.18, $p7);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3806, 3} true;
  assume {:verifier.code 0} true;
  call update_aem_energy_one($p5, $i8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3807, 21} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3807, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3808, 39} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(1216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3808, 52} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3808, 52} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.18, $p11);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3808, 36} true;
  assume {:verifier.code 0} true;
  $i13 := $sext.i32.i64($i12);
  $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(1216, 1)), $mul.ref($i13, 8));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3808, 36} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i64($M.8, $p14);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3808, 59} true;
  assume {:verifier.code 0} true;
  $i16 := $mul.i64($i15, 1000);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3808, 13} true;
  assume {:verifier.code 0} true;
  call $i17 := sprintf.ref.ref.i64($p2, .str.16, $i16);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i17);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3809, 11} true;
  assume {:verifier.code 0} true;
  $i18 := $sext.i32.i64($i17);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3809, 3} true;
  assume {:verifier.code 0} true;
  $r := $i18;
  $exn := false;
  return;
}
const aem_show_power: ref;
axiom (aem_show_power == $sub.ref(0, 141699));
procedure  aem_show_power($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i32;
  var $i46: i64;
  var $i28: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3765, 10} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3765, 10} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3766, 9} true;
  assume {:verifier.code 0} true;
  call $p6 := dev_get_drvdata($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3767, 10} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3768, 29} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3768, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock_nested($p8, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3769, 37} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3769, 37} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.19, $p9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3769, 3} true;
  assume {:verifier.code 0} true;
  call update_aem_energy_one($p7, $i10);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3770, 3} true;
  assume {:verifier.code 0} true;
  call getnstimeofday($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3771, 18} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(1216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3771, 31} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3771, 31} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.19, $p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3771, 12} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i32.i64($i13);
  $p15 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(1216, 1)), $mul.ref($i14, 8));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3771, 12} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i64($M.8, $p15);
  call {:cexpr "before"} boogie_si_record_i64($i16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3772, 57} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(1232, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3772, 76} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3772, 76} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i32($M.19, $p18);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3772, 51} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.i32.i64($i19);
  $p21 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(1232, 1)), $mul.ref($i20, 8));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3772, 51} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i64($M.8, $p21);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3772, 30} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.i64.i32($i22);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3772, 13} true;
  assume {:verifier.code 0} true;
  call $i24 := msecs_to_jiffies($i23);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i24);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3773, 14} true;
  assume {:verifier.code 0} true;
  call $i25 := schedule_timeout_interruptible($i24);
  call {:cexpr "leftover"} boogie_si_record_i64($i25);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3774, 16} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.i64($i25, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3774, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i26 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3775, 26} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3775, 5} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p27);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3776, 5} true;
  assume {:verifier.code 0} true;
  $i28 := 0;
  goto $bb3;
$bb2:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3791, 1} true;
  assume {:verifier.code 0} true;
  $r := $i28;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3779, 37} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3779, 37} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i32($M.19, $p29);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3779, 3} true;
  assume {:verifier.code 0} true;
  call update_aem_energy_one($p7, $i30);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3780, 3} true;
  assume {:verifier.code 0} true;
  call getnstimeofday($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3781, 17} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(1216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3781, 30} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3781, 30} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i32($M.19, $p32);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3781, 11} true;
  assume {:verifier.code 0} true;
  $i34 := $sext.i32.i64($i33);
  $p35 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(1216, 1)), $mul.ref($i34, 8));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3781, 11} true;
  assume {:verifier.code 0} true;
  $i36 := $load.i64($M.8, $p35);
  call {:cexpr "after"} boogie_si_record_i64($i36);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3782, 24} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p7, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3782, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p37);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3783, 13} true;
  assume {:verifier.code 0} true;
  call $i38 := timespec_to_ns($p4);
  call {:cexpr "tmp___1"} boogie_si_record_i64($i38);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3784, 13} true;
  assume {:verifier.code 0} true;
  call $i39 := timespec_to_ns($p3);
  call {:cexpr "tmp___2"} boogie_si_record_i64($i39);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3785, 25} true;
  assume {:verifier.code 0} true;
  $i40 := $sub.i64($i38, $i39);
  call {:cexpr "time"} boogie_si_record_i64($i40);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3786, 18} true;
  assume {:verifier.code 0} true;
  $i41 := $sub.i64($i36, $i16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3786, 28} true;
  assume {:verifier.code 0} true;
  $i42 := $mul.i64($i41, 1000);
  call {:cexpr "delta"} boogie_si_record_i64($i42);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3787, 29} true;
  assume {:verifier.code 0} true;
  $i43 := $mul.i64($i42, 1000000000);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3787, 13} true;
  assume {:verifier.code 0} true;
  call $i44 := div64_u64($i43, $i40);
  call {:cexpr "tmp___3"} boogie_si_record_i64($i44);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3788, 13} true;
  assume {:verifier.code 0} true;
  call $i45 := sprintf.ref.ref.i64($p2, .str.16, $i44);
  call {:cexpr "tmp___4"} boogie_si_record_i32($i45);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3789, 11} true;
  assume {:verifier.code 0} true;
  $i46 := $sext.i32.i64($i45);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3789, 3} true;
  assume {:verifier.code 0} true;
  $i28 := $i46;
  goto $bb3;
}
const aem2_show_temp: ref;
axiom (aem2_show_temp == $sub.ref(0, 142731));
procedure  aem2_show_temp($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3929, 10} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3929, 10} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3930, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := dev_get_drvdata($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3931, 7} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3932, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(424, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3932, 9} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.8, $p6);
  call devirtbounce($p7, $p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3933, 43} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(1260, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3933, 54} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3933, 54} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.20, $p9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3933, 40} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(1260, 1)), $mul.ref($i11, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3933, 40} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i8($M.8, $p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3933, 34} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i8.i32($i13);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3933, 61} true;
  assume {:verifier.code 0} true;
  $i15 := $mul.i32($i14, 1000);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3933, 13} true;
  assume {:verifier.code 0} true;
  call $i16 := sprintf.ref.ref.i32($p2, .str.31, $i15);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3934, 11} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3934, 3} true;
  assume {:verifier.code 0} true;
  $r := $i17;
  $exn := false;
  return;
}
const aem2_show_pcap_value: ref;
axiom (aem2_show_pcap_value == $sub.ref(0, 143763));
procedure  aem2_show_pcap_value($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3947, 10} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3947, 10} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3948, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := dev_get_drvdata($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3949, 7} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3950, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(424, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3950, 9} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.8, $p6);
  call devirtbounce($p7, $p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3951, 43} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(1248, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3951, 54} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3951, 54} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.21, $p9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3951, 40} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1264)), $mul.ref(1248, 1)), $mul.ref($i11, 2));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3951, 40} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i16($M.8, $p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3951, 34} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i16.i32($i13);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3951, 61} true;
  assume {:verifier.code 0} true;
  $i15 := $mul.i32($i14, 100000);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3951, 13} true;
  assume {:verifier.code 0} true;
  call $i16 := sprintf.ref.ref.i32($p2, .str.31, $i15);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3952, 11} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3952, 3} true;
  assume {:verifier.code 0} true;
  $r := $i17;
  $exn := false;
  return;
}
const update_aem_energy_one: ref;
axiom (update_aem_energy_one == $sub.ref(0, 144795));
procedure  update_aem_energy_one($p0: ref, $i1: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3280, 35} true;
  assume {:verifier.code 0} true;
  call {:cexpr "update_aem_energy_one:arg:which"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3280, 35} true;
  assume {:verifier.code 0} true;
  $i2 := $trunc.i32.i8($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3280, 28} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i8.i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3280, 28} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i32.i8($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3280, 65} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3280, 48} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3280, 75} true;
  assume {:verifier.code 0} true;
  $i7 := $sext.i32.i64($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3280, 73} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p6, $mul.ref($i7, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3280, 3} true;
  assume {:verifier.code 0} true;
  call $i9 := aem_read_sensor($p0, 1, $i4, $p8, 8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3282, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const getnstimeofday: ref;
axiom (getnstimeofday == $sub.ref(0, 145827));
procedure  getnstimeofday($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4437, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4437, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const msecs_to_jiffies: ref;
axiom (msecs_to_jiffies == $sub.ref(0, 146859));
procedure  msecs_to_jiffies($i0: i32)
  returns ($r: i64)
{
  var $i1: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4496, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4496, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_ulong();
  call {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4496, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const schedule_timeout_interruptible: ref;
axiom (schedule_timeout_interruptible == $sub.ref(0, 147891));
procedure  schedule_timeout_interruptible($i0: i64)
  returns ($r: i64)
{
  var $i1: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4521, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "schedule_timeout_interruptible:arg:arg0"} boogie_si_record_i64($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4521, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4521, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const timespec_to_ns: ref;
axiom (timespec_to_ns == $sub.ref(0, 148923));
procedure  timespec_to_ns($p0: ref)
  returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2885, 27} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2885, 27} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2885, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i64($M.22, $p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2885, 34} true;
  assume {:verifier.code 0} true;
  $i3 := $mul.i64($i2, 1000000000);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2885, 67} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2885, 67} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i64($M.23, $p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2885, 49} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i64($i3, $i5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2885, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const div64_u64: ref;
axiom (div64_u64 == $sub.ref(0, 149955));
procedure  div64_u64($i0: i64, $i1: i64)
  returns ($r: i64)
{
  var $i2: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2851, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "div64_u64:arg:dividend"} boogie_si_record_i64($i0);
  call {:cexpr "div64_u64:arg:divisor"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2851, 20} true;
  assume {:verifier.code 0} true;
  $i2 := $udiv.i64($i0, $i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2851, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const aem_read_sensor: ref;
axiom (aem_read_sensor == $sub.ref(0, 150987));
procedure  aem_read_sensor($p0: ref, $i1: i8, $i2: i8, $p3: ref, $i4: i64)
  returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i16;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i14: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3207, 18} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call {:cexpr "aem_read_sensor:arg:elt"} boogie_si_record_i8($i1);
  call {:cexpr "aem_read_sensor:arg:reg"} boogie_si_record_i8($i2);
  call {:cexpr "aem_read_sensor:arg:size"} boogie_si_record_i64($i4);
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3207, 18} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1));
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i7 := $slt.i64($i4, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i7 == 1);
  assume {:verifier.code 0} true;
  $i11 := $slt.i64($i4, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb13, $bb14;
$bb3:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  $i8 := $slt.i64($i4, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i8 == 1);
  assume {:verifier.code 0} true;
  $i10 := $eq.i64($i4, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb10, $bb12;
$bb5:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  $i9 := $eq.i64($i4, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb6, $bb8;
$bb6:
  assume {:verifier.code 0} true;
  assume ($i9 == 1);
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3213, 3} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb8:
  assume {:verifier.code 0} true;
  assume !(($i9 == 1));
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  goto $bb21;
$bb10:
  assume {:verifier.code 0} true;
  assume ($i10 == 1);
  goto $bb11;
$bb11:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3208, 17} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb12:
  assume {:verifier.code 0} true;
  assume !(($i10 == 1));
  goto $bb9;
$bb13:
  assume ($i11 == 1);
  assume {:verifier.code 0} true;
  $i13 := $eq.i64($i4, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb18, $bb19;
$bb14:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  $i12 := $eq.i64($i4, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb15, $bb17;
$bb15:
  assume {:verifier.code 0} true;
  assume ($i12 == 1);
  goto $bb16;
$bb16:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3208, 17} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb17:
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb9;
$bb18:
  assume ($i13 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3208, 17} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb19:
  assume {:verifier.code 0} true;
  assume !(($i13 == 1));
  goto $bb9;
$bb20:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3218, 10} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3218, 15} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3218, 15} true;
  assume {:verifier.code 0} true;
  call $M.8 := $memcpy.i8($M.8, $M.9, $p16, system_x_id, 3, false);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3219, 32} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(218, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3219, 32} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i8($M.8, $p17);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3219, 10} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(3, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3219, 24} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p19, $i18);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3220, 10} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3220, 18} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p20, $i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3221, 10} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(5, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3221, 21} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p21, $sub.i8(0, 126));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3222, 10} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(6, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3222, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p22, $i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3223, 24} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.i64.i8($i4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3223, 10} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(7, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3223, 22} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p24, $i23);
  $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(152, 1));
  $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(152, 1)), $mul.ref(1, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3224, 24} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p26, $sub.i8(0, 127));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3225, 27} true;
  assume {:verifier.code 0} true;
  $p27 := $bitcast.ref.ref($p5);
  $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(152, 1));
  $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(152, 1)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3225, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p29, $p5);
  $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(152, 1));
  $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(152, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3226, 29} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p31, 8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3227, 20} true;
  assume {:verifier.code 0} true;
  $i32 := $trunc.i64.i32($i4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3227, 40} true;
  assume {:verifier.code 0} true;
  $i33 := $add.i32($i32, 3);
  call {:cexpr "rs_size"} boogie_si_record_i32($i33);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3228, 23} true;
  assume {:verifier.code 0} true;
  $i34 := $sext.i32.i64($i33);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3228, 9} true;
  assume {:verifier.code 0} true;
  call $p35 := ldv_kzalloc_6($i34, 208);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3229, 13} true;
  assume {:verifier.code 0} true;
  $p36 := $bitcast.ref.ref($p35);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3230, 7} true;
  assume {:verifier.code 0} true;
  $i37 := $p2i.ref.i64($p36);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3230, 31} true;
  assume {:verifier.code 0} true;
  $i38 := $eq.i64($i37, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3230, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb23, $bb24;
$bb21:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3215, 3} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 22);
  goto $bb22;
$bb22:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3276, 1} true;
  assume {:verifier.code 0} true;
  $r := $i14;
  $exn := false;
  return;
$bb23:
  assume ($i38 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3231, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 12);
  goto $bb22;
$bb24:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3234, 23} true;
  assume {:verifier.code 0} true;
  $p39 := $bitcast.ref.ref($p36);
  $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(176, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3234, 21} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p40, $p35);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3235, 22} true;
  assume {:verifier.code 0} true;
  $i41 := $trunc.i32.i16($i33);
  $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3235, 20} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p42, $i41);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3236, 3} true;
  assume {:verifier.code 0} true;
  call $i43 := aem_send_message($p6);
  $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3237, 13} true;
  assume {:verifier.code 0} true;
  call $i45 := wait_for_completion_timeout($p44, 7500);
  call {:cexpr "tmp___0"} boogie_si_record_i64($i45);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3238, 9} true;
  assume {:verifier.code 0} true;
  $i46 := $trunc.i64.i32($i45);
  call {:cexpr "res"} boogie_si_record_i32($i46);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3239, 11} true;
  assume {:verifier.code 0} true;
  $i47 := $eq.i32($i46, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3239, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i47} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i47 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3240, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 110);
  goto $bb22;
$bb27:
  assume !(($i47 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(186, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3243, 28} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i8($M.8, $p48);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3243, 7} true;
  assume {:verifier.code 0} true;
  $i50 := $zext.i8.i32($i49);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3243, 38} true;
  assume {:verifier.code 0} true;
  $i51 := $ne.i32($i50, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3243, 44} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb29, $bb31;
$bb29:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3243, 44} true;
  assume {:verifier.code 0} true;
  assume ($i51 == 1);
  goto $bb30;
$bb30:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3244, 11} true;
  assume {:verifier.code 0} true;
  $p56 := $bitcast.ref.ref($p36);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3244, 5} true;
  assume {:verifier.code 0} true;
  call kfree($p56);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3245, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 2);
  goto $bb22;
$bb31:
  assume !(($i51 == 1));
  $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3243, 59} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i16($M.8, $p52);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3243, 47} true;
  assume {:verifier.code 0} true;
  $i54 := $zext.i16.i32($i53);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3243, 70} true;
  assume {:verifier.code 0} true;
  $i55 := $ne.i32($i54, $i33);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3243, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb32, $bb33;
$bb32:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3243, 7} true;
  assume {:verifier.code 0} true;
  assume ($i55 == 1);
  goto $bb30;
$bb33:
  assume !(($i55 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3247, 48} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p36, $mul.ref(0, 3)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3247, 22} true;
  assume {:verifier.code 0} true;
  $p58 := $bitcast.ref.ref($p57);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3247, 15} true;
  assume {:verifier.code 0} true;
  call $i59 := memcmp($p58, system_x_id, 3);
  call {:cexpr "tmp___1"} boogie_si_record_i32($i59);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3249, 17} true;
  assume {:verifier.code 0} true;
  $i60 := $ne.i32($i59, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3249, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i60} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i60 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3250, 13} true;
  assume {:verifier.code 0} true;
  $p61 := $bitcast.ref.ref($p36);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3250, 7} true;
  assume {:verifier.code 0} true;
  call kfree($p61);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3251, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 2);
  goto $bb22;
$bb35:
  assume !(($i60 == 1));
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  assume {:verifier.code 0} true;
  goto $bb38;
$bb38:
  assume {:verifier.code 0} true;
  $i62 := $slt.i64($i4, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb39, $bb40;
$bb39:
  assume ($i62 == 1);
  assume {:verifier.code 0} true;
  $i66 := $slt.i64($i4, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i66} true;
  goto $bb48, $bb49;
$bb40:
  assume !(($i62 == 1));
  assume {:verifier.code 0} true;
  $i63 := $slt.i64($i4, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb41, $bb42;
$bb41:
  assume ($i63 == 1);
  assume {:verifier.code 0} true;
  $i65 := $eq.i64($i4, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb46, $bb47;
$bb42:
  assume !(($i63 == 1));
  assume {:verifier.code 0} true;
  $i64 := $eq.i64($i4, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb43, $bb44;
$bb43:
  assume ($i64 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3269, 11} true;
  assume {:verifier.code 0} true;
  $p80 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3270, 55} true;
  assume {:verifier.code 0} true;
  $p81 := $add.ref($add.ref($p36, $mul.ref(0, 3)), $mul.ref(3, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3270, 27} true;
  assume {:verifier.code 0} true;
  $p82 := $bitcast.ref.ref($p81);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3270, 12} true;
  assume {:verifier.code 0} true;
  call $i83 := __be64_to_cpup($p82);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3270, 10} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i64($M.8, $p80, $i83);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3271, 3} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb44:
  assume {:verifier.code 0} true;
  assume !(($i64 == 1));
  goto $bb45;
$bb45:
  assume {:verifier.code 0} true;
  goto $bb55;
$bb46:
  assume ($i65 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3265, 11} true;
  assume {:verifier.code 0} true;
  $p76 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3266, 55} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($add.ref($p36, $mul.ref(0, 3)), $mul.ref(3, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3266, 27} true;
  assume {:verifier.code 0} true;
  $p78 := $bitcast.ref.ref($p77);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3266, 12} true;
  assume {:verifier.code 0} true;
  call $i79 := __be32_to_cpup($p78);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3266, 10} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p76, $i79);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3267, 3} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb47:
  assume {:verifier.code 0} true;
  assume !(($i65 == 1));
  goto $bb45;
$bb48:
  assume ($i66 == 1);
  assume {:verifier.code 0} true;
  $i68 := $eq.i64($i4, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb52, $bb53;
$bb49:
  assume !(($i66 == 1));
  assume {:verifier.code 0} true;
  $i67 := $eq.i64($i4, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i67} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i67 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3261, 11} true;
  assume {:verifier.code 0} true;
  $p72 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3262, 55} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($add.ref($p36, $mul.ref(0, 3)), $mul.ref(3, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3262, 27} true;
  assume {:verifier.code 0} true;
  $p74 := $bitcast.ref.ref($p73);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3262, 12} true;
  assume {:verifier.code 0} true;
  call $i75 := __be16_to_cpup($p74);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3262, 10} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p72, $i75);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3263, 3} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb51:
  assume {:verifier.code 0} true;
  assume !(($i67 == 1));
  goto $bb45;
$bb52:
  assume ($i68 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3258, 17} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($add.ref($p36, $mul.ref(0, 3)), $mul.ref(3, 1));
  $p70 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 3)), $mul.ref(3, 1)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3258, 8} true;
  assume {:verifier.code 0} true;
  $i71 := $load.i8($M.8, $p70);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3258, 6} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p3, $i71);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3259, 3} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb53:
  assume {:verifier.code 0} true;
  assume !(($i68 == 1));
  goto $bb45;
$bb54:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3274, 3} true;
  assume {:verifier.code 0} true;
  $i14 := 0;
  goto $bb22;
$bb55:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3272, 3} true;
  assume {:verifier.code 0} true;
  goto $bb54;
}
const __be16_to_cpup: ref;
axiom (__be16_to_cpup == $sub.ref(0, 152019));
procedure  __be16_to_cpup($p0: ref)
  returns ($r: i16)
{
  var $i1: i16;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2828, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2828, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __swab16p($p0);
  call {:cexpr "tmp"} boogie_si_record_i16($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2829, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __be32_to_cpup: ref;
axiom (__be32_to_cpup == $sub.ref(0, 153051));
procedure  __be32_to_cpup($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2820, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2820, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __swab32p($p0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2821, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __be64_to_cpup: ref;
axiom (__be64_to_cpup == $sub.ref(0, 154083));
procedure  __be64_to_cpup($p0: ref)
  returns ($r: i64)
{
  var $i1: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2812, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2812, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __swab64p($p0);
  call {:cexpr "tmp"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2813, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __swab64p: ref;
axiom (__swab64p == $sub.ref(0, 155115));
procedure  __swab64p($p0: ref)
  returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2804, 19} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2804, 19} true;
  assume {:verifier.code 0} true;
  $i1 := $load.i64($M.8, $p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2804, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := __fswab64($i1);
  call {:cexpr "tmp"} boogie_si_record_i64($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2805, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __fswab64: ref;
axiom (__fswab64 == $sub.ref(0, 156147));
procedure  __fswab64($i0: i64)
  returns ($r: i64)
{
  var $i1: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2780, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__fswab64:arg:val"} boogie_si_record_i64($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2780, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __arch_swab64($i0);
  call {:cexpr "tmp"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2781, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __arch_swab64: ref;
axiom (__arch_swab64 == $sub.ref(0, 157179));
procedure  __arch_swab64($i0: i64)
  returns ($r: i64)
{
  var $i1: i64;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2759, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__arch_swab64:arg:val"} boogie_si_record_i64($i0);
  call $i1 := devirtbounce.1(0, $i0);
  call {:cexpr "val"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2759, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __swab32p: ref;
axiom (__swab32p == $sub.ref(0, 158211));
procedure  __swab32p($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2796, 19} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2796, 19} true;
  assume {:verifier.code 0} true;
  $i1 := $load.i32($M.8, $p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2796, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := __fswab32($i1);
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2797, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __fswab32: ref;
axiom (__fswab32 == $sub.ref(0, 159243));
procedure  __fswab32($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2772, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2772, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __arch_swab32($i0);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2773, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __arch_swab32: ref;
axiom (__arch_swab32 == $sub.ref(0, 160275));
procedure  __arch_swab32($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2752, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
  call $i1 := devirtbounce.2(0, $i0);
  call {:cexpr "val"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2752, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __swab16p: ref;
axiom (__swab16p == $sub.ref(0, 161307));
procedure  __swab16p($p0: ref)
  returns ($r: i16)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2788, 25} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2788, 25} true;
  assume {:verifier.code 0} true;
  $i1 := $load.i16($M.8, $p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2788, 19} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i16.i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2788, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i32.i16($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2788, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := __fswab16($i3);
  call {:cexpr "tmp"} boogie_si_record_i16($i4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2789, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const __fswab16: ref;
axiom (__fswab16 == $sub.ref(0, 162339));
procedure  __fswab16($i0: i16)
  returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 36} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 36} true;
  assume {:verifier.code 0} true;
  $i1 := $zext.i16.i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 46} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i:2765:46: warning: over-approximating bitwise operation shl;
  $i2 := $shl.i32($i1, 8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i32.i16($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 20} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i16.i32($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 71} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 81} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i:2765:81: warning: over-approximating bitwise operation ashr;
  $i6 := $ashr.i32($i5, 8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 62} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i32.i16($i6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 55} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i16.i32($i7);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 53} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i:2765:53: warning: over-approximating bitwise operation or;
  $i9 := $or.i32($i4, $i8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i32.i16($i9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2765, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const update_aem_energy: ref;
axiom (update_aem_energy == $sub.ref(0, 163371));
procedure  update_aem_energy($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3288, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3288, 3} true;
  assume {:verifier.code 0} true;
  call update_aem_energy_one($p0, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3289, 28} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3289, 28} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i8($M.8, $p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3289, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i8.i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3289, 38} true;
  assume {:verifier.code 0} true;
  $i4 := $ule.i32($i3, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3289, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3290, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3296, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3293, 3} true;
  assume {:verifier.code 0} true;
  call update_aem_energy_one($p0, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3294, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const ldv_is_err: ref;
axiom (ldv_is_err == $sub.ref(0, 164403));
procedure  ldv_is_err($p0: ref)
  returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4324, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4324, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4324, 31} true;
  assume {:verifier.code 0} true;
  $i2 := $ugt.i64($i1, 2012);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4324, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const idr_pre_get: ref;
axiom (idr_pre_get == $sub.ref(0, 165435));
procedure  idr_pre_get($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4452, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "idr_pre_get:arg:arg1"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4452, 10} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4452, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv__builtin_expect: ref;
axiom (ldv__builtin_expect == $sub.ref(0, 166467));
procedure  ldv__builtin_expect($i0: i64, $i1: i64)
  returns ($r: i64)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3014, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
  call {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3014, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const idr_get_new: ref;
axiom (idr_get_new == $sub.ref(0, 167499));
procedure  idr_get_new($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $i3: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4448, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4448, 10} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4448, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const aem_find_aem1_count: ref;
axiom (aem_find_aem1_count == $sub.ref(0, 168531));
procedure  aem_find_aem1_count($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i22: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3361, 10} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3361, 10} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3361, 15} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3361, 15} true;
  assume {:verifier.code 0} true;
  call $M.8 := $memcpy.i8($M.8, $M.9, $p4, system_x_id, 3, false);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3362, 10} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3362, 16} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p5, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3363, 10} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(6, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3363, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p6, 256);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3364, 9} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1));
  $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1)), $mul.ref(1, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3364, 24} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p8, $sub.i8(0, 128));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3365, 27} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3365, 9} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1));
  $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3365, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p11, $p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3366, 9} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1));
  $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(152, 1)), $mul.ref(2, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3366, 29} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p13, 8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3367, 23} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3367, 9} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(176, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3367, 21} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p15, $p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3368, 9} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3368, 20} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i16($M.8, $p16, 4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3369, 3} true;
  assume {:verifier.code 0} true;
  call $i17 := aem_send_message($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3370, 45} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3370, 9} true;
  assume {:verifier.code 0} true;
  call $i19 := wait_for_completion_timeout($p18, 7500);
  call {:cexpr "tmp"} boogie_si_record_i64($i19);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3371, 9} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i64.i32($i19);
  call {:cexpr "res"} boogie_si_record_i32($i20);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3372, 11} true;
  assume {:verifier.code 0} true;
  $i21 := $eq.i32($i20, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3372, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i21 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3373, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 110);
  goto $bb3;
$bb2:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3388, 1} true;
  assume {:verifier.code 0} true;
  $r := $i22;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 28} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(186, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 28} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i8($M.8, $p23);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $zext.i8.i32($i24);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 38} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.i32($i25, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 44} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb5, $bb7;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 44} true;
  assume {:verifier.code 0} true;
  assume ($i26 == 1);
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3377, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 2);
  goto $bb3;
$bb7:
  assume !(($i26 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 68} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(184, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 68} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i16($M.8, $p27);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 47} true;
  assume {:verifier.code 0} true;
  $i29 := $zext.i16.i32($i28);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 79} true;
  assume {:verifier.code 0} true;
  $i30 := $ne.i32($i29, 4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb8, $bb9;
$bb8:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3376, 7} true;
  assume {:verifier.code 0} true;
  assume ($i30 == 1);
  goto $bb6;
$bb9:
  assume !(($i30 == 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3379, 47} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3379, 22} true;
  assume {:verifier.code 0} true;
  $p32 := $bitcast.ref.ref($p31);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3379, 15} true;
  assume {:verifier.code 0} true;
  call $i33 := memcmp($p32, system_x_id, 3);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i33);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3381, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $ne.i32($i33, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3381, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i34 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3382, 7} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 2);
  goto $bb3;
$bb11:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3386, 25} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(3, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3386, 25} true;
  assume {:verifier.code 0} true;
  $i36 := $load.i8($M.8, $p35);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3386, 11} true;
  assume {:verifier.code 0} true;
  $i37 := $zext.i8.i32($i36);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3386, 3} true;
  assume {:verifier.code 0} true;
  $i22 := $i37;
  goto $bb3;
}
const aem_init_aem1_inst: ref;
axiom (aem_init_aem1_inst == $sub.ref(0, 169563));
procedure  aem_init_aem1_inst($p0: ref, $i1: i8)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i26: i32;
  var $p90: ref;
  var $i91: i32;
  var $i17: i32;
  var $p92: ref;
  var $i7: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3402, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call {:cexpr "aem_init_aem1_inst:arg:module_handle"} boogie_si_record_i8($i1);
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3402, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := ldv_kzalloc_6(1264, 208);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3403, 10} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3404, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3404, 28} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3404, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3405, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 12);
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3475, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3408, 24} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3408, 3} true;
  assume {:verifier.code 0} true;
  call __mutex_init($p8, .str.11, $p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3409, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3409, 19} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p9, 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3410, 9} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(217, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3410, 19} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p10, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3411, 9} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(218, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3411, 23} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p11, $i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3418, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3419, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3415, 9} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(1232, 1));
  $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(1232, 1)), $mul.ref(0, 8));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3415, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i64($M.8, $p13, 1000);
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3422, 33} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(220, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3422, 13} true;
  assume {:verifier.code 0} true;
  call $i15 := aem_idr_get($p14);
  call {:cexpr "tmp___0"} boogie_si_record_i32($i15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3423, 15} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3423, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i16 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3424, 5} true;
  assume {:verifier.code 0} true;
  $i17 := $sub.i32(0, 12);
  goto $bb10;
$bb9:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3401, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3472, 9} true;
  assume {:verifier.code 0} true;
  $p92 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3472, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p92);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3473, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i17;
  goto $bb3;
$bb11:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3427, 51} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(220, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3427, 51} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i32($M.8, $p18);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3427, 16} true;
  assume {:verifier.code 0} true;
  call $p20 := platform_device_alloc(.str.1, $i19);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3427, 9} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3427, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p21, $p20);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3428, 29} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3428, 29} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.8, $p22);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3428, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $p2i.ref.i64($p23);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3428, 34} true;
  assume {:verifier.code 0} true;
  $i25 := $eq.i64($i24, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3428, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i25 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3429, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i32(0, 12);
  goto $bb14;
$bb13:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3470, 21} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(220, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3470, 21} true;
  assume {:verifier.code 0} true;
  $i91 := $load.i32($M.8, $p90);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3470, 3} true;
  assume {:verifier.code 0} true;
  call aem_idr_put($i91);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3470, 3} true;
  assume {:verifier.code 0} true;
  $i17 := $i26;
  goto $bb10;
$bb15:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3432, 10} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3432, 10} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.8, $p27);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3432, 17} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1152)), $mul.ref(16, 1));
  $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(272, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3432, 28} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p30, $add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3433, 35} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3433, 35} true;
  assume {:verifier.code 0} true;
  $p32 := $load.ref($M.8, $p31);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3433, 9} true;
  assume {:verifier.code 0} true;
  call $i33 := platform_device_add($p32);
  call {:cexpr "res"} boogie_si_record_i32($i33);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3434, 11} true;
  assume {:verifier.code 0} true;
  $i34 := $ne.i32($i33, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3434, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i34 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3435, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3467, 28} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3467, 28} true;
  assume {:verifier.code 0} true;
  $p86 := $load.ref($M.8, $p85);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3467, 35} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($add.ref($p86, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3467, 3} true;
  assume {:verifier.code 0} true;
  call dev_set_drvdata($p87, $0.ref);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3468, 36} true;
  assume {:verifier.code 0} true;
  $p88 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3468, 36} true;
  assume {:verifier.code 0} true;
  $p89 := $load.ref($M.8, $p88);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3468, 3} true;
  assume {:verifier.code 0} true;
  call platform_device_unregister($p89);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3468, 3} true;
  assume {:verifier.code 0} true;
  $i26 := $i33;
  goto $bb14;
$bb19:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3438, 28} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3438, 28} true;
  assume {:verifier.code 0} true;
  $p36 := $load.ref($M.8, $p35);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3438, 35} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p36, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3438, 40} true;
  assume {:verifier.code 0} true;
  $p38 := $bitcast.ref.ref($p4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3438, 3} true;
  assume {:verifier.code 0} true;
  call dev_set_drvdata($p37, $p38);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3439, 40} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(224, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3439, 53} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(144, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3439, 53} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.8, $p40);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3439, 71} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3439, 71} true;
  assume {:verifier.code 0} true;
  $p43 := $load.ref($M.8, $p42);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3439, 13} true;
  assume {:verifier.code 0} true;
  call $i44 := aem_init_ipmi_data($p39, $i41, $p43);
  call {:cexpr "tmp___1"} boogie_si_record_i32($i44);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3440, 15} true;
  assume {:verifier.code 0} true;
  $i45 := $ne.i32($i44, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3440, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i45 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3441, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb21:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3444, 52} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3444, 52} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.8, $p46);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3444, 59} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3444, 21} true;
  assume {:verifier.code 0} true;
  call $p49 := hwmon_device_register($p48);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3444, 9} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3444, 19} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p50, $p49);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3445, 40} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3445, 40} true;
  assume {:verifier.code 0} true;
  $p52 := $load.ref($M.8, $p51);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3445, 20} true;
  assume {:verifier.code 0} true;
  $p53 := $bitcast.ref.ref($p52);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3445, 13} true;
  assume {:verifier.code 0} true;
  call $i54 := IS_ERR($p53);
  call {:cexpr "tmp___2"} boogie_si_record_i64($i54);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3446, 15} true;
  assume {:verifier.code 0} true;
  $i55 := $ne.i64($i54, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3446, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i55 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3447, 46} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3447, 46} true;
  assume {:verifier.code 0} true;
  $p57 := $load.ref($M.8, $p56);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3447, 53} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p57, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3448, 20} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(144, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3448, 20} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i32($M.8, $p59);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3447, 5} true;
  assume {:verifier.code 0} true;
  call $i61 := dev_err.ref.ref.i32($p58, .str.12, $i60);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3449, 5} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i55 == 1));
  assume {:verifier.code 0} true;
  goto $bb26;
$bb25:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3465, 27} true;
  assume {:verifier.code 0} true;
  $p81 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(224, 1));
  $p82 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(136, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3465, 32} true;
  assume {:verifier.code 0} true;
  $p83 := $load.ref($M.8, $p82);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3465, 3} true;
  assume {:verifier.code 0} true;
  call $i84 := ipmi_destroy_user($p83);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3465, 3} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb26:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3452, 9} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(424, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3452, 16} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p62, update_aem1_sensors);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3453, 13} true;
  assume {:verifier.code 0} true;
  call $i63 := aem1_find_sensors($p4);
  call {:cexpr "tmp___3"} boogie_si_record_i32($i63);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3454, 15} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.i32($i63, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3454, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb27, $bb28;
$bb27:
  assume ($i64 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3455, 5} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb28:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  goto $bb30;
$bb29:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3463, 33} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3463, 33} true;
  assume {:verifier.code 0} true;
  $p80 := $load.ref($M.8, $p79);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3463, 3} true;
  assume {:verifier.code 0} true;
  call hwmon_device_unregister($p80);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3463, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb30:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3458, 25} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3458, 3} true;
  assume {:verifier.code 0} true;
  call list_add_tail($p65, driver_data);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3459, 42} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(224, 1));
  $p67 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(192, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3459, 47} true;
  assume {:verifier.code 0} true;
  $p68 := $load.ref($M.8, $p67);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3460, 25} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(216, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3460, 25} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i8($M.8, $p69);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3460, 13} true;
  assume {:verifier.code 0} true;
  $i71 := $zext.i8.i32($i70);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3460, 48} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(217, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3460, 48} true;
  assume {:verifier.code 0} true;
  $i73 := $load.i8($M.8, $p72);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3460, 36} true;
  assume {:verifier.code 0} true;
  $i74 := $zext.i8.i32($i73);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3460, 71} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($add.ref($p4, $mul.ref(0, 1264)), $mul.ref(218, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3460, 71} true;
  assume {:verifier.code 0} true;
  $i76 := $load.i8($M.8, $p75);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3460, 59} true;
  assume {:verifier.code 0} true;
  $i77 := $zext.i8.i32($i76);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3459, 3} true;
  assume {:verifier.code 0} true;
  call $i78 := _dev_info.ref.ref.i32.i32.i32($p68, .str.13, $i71, $i74, $i77);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3461, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
}
const update_aem1_sensors: ref;
axiom (update_aem1_sensors == $sub.ref(0, 170595));
procedure  update_aem1_sensors($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3300, 29} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3300, 29} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3300, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock_nested($p1, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 14} true;
  assume {:verifier.code 0} true;
  $i2 := $M.11;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 38} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(208, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 38} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.8, $p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 51} true;
  assume {:verifier.code 0} true;
  $i5 := $add.i64($i4, 250);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.i64($i2, $i5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 60} true;
  assume {:verifier.code 0} true;
  $i7 := $slt.i64($i6, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 65} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 95} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(200, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 95} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i8($M.8, $p8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 68} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.i8.i32($i9);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 102} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i32($i10, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 65} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb7;
$bb4:
  assume ($i11 == 1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3302, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3301, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i11 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3307, 24} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(32, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3307, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3308, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3305, 3} true;
  assume {:verifier.code 0} true;
  call update_aem_energy($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3305, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
}
const aem1_find_sensors: ref;
axiom (aem1_find_sensors == $sub.ref(0, 171627));
procedure  aem1_find_sensors($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4014, 9} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4014, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := aem_register_sensors($p0, aem1_ro_sensors, aem1_rw_sensors);
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4016, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const init_completion: ref;
axiom (init_completion == $sub.ref(0, 172659));
procedure  init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2897, 6} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2897, 6} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2897, 11} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p2, 0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2898, 30} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2898, 3} true;
  assume {:verifier.code 0} true;
  call __init_waitqueue_head($p3, $p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 2899, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ipmi_create_user: ref;
axiom (ipmi_create_user == $sub.ref(0, 173691));
procedure  ipmi_create_user($i0: i32, $p1: ref, $p2: ref, $p3: ref)
  returns ($r: i32)
{
  var $i4: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4459, 10} true;
  assume {:verifier.code 1} true;
  call {:cexpr "ipmi_create_user:arg:arg0"} boogie_si_record_i32($i0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4459, 10} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4459, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const __init_waitqueue_head: ref;
axiom (__init_waitqueue_head == $sub.ref(0, 174723));
procedure  __init_waitqueue_head($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4394, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4394, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const aem_delete: ref;
axiom (aem_delete == $sub.ref(0, 175755));
procedure  aem_delete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3342, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3342, 20} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(0, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3342, 3} true;
  assume {:verifier.code 0} true;
  call list_del($p1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3343, 3} true;
  assume {:verifier.code 0} true;
  call aem_remove_sensors($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3344, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3344, 33} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.8, $p2);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3344, 3} true;
  assume {:verifier.code 0} true;
  call hwmon_device_unregister($p3);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3345, 27} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1));
  $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(224, 1)), $mul.ref(136, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3345, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.8, $p5);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3345, 3} true;
  assume {:verifier.code 0} true;
  call $i7 := ipmi_destroy_user($p6);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3346, 28} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3346, 28} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.8, $p8);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3346, 35} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1152)), $mul.ref(16, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3346, 3} true;
  assume {:verifier.code 0} true;
  call dev_set_drvdata($p10, $0.ref);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3347, 36} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(24, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3347, 36} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.8, $p11);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3347, 3} true;
  assume {:verifier.code 0} true;
  call platform_device_unregister($p12);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3348, 21} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(220, 1));
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3348, 21} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i32($M.8, $p13);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3348, 3} true;
  assume {:verifier.code 0} true;
  call aem_idr_put($i14);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3349, 9} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p0);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3349, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p15);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 3350, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const list_del: ref;
axiom (list_del == $sub.ref(0, 176787));
procedure  list_del($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4492, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4492, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const driver_register: ref;
axiom (driver_register == $sub.ref(0, 177819));
procedure  driver_register($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4431, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4431, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4431, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const printk: ref;
axiom (printk == $sub.ref(0, 178851));
procedure  printk.ref($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4517, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4517, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4517, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ipmi_smi_watcher_register: ref;
axiom (ipmi_smi_watcher_register == $sub.ref(0, 179883));
procedure  ipmi_smi_watcher_register($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4474, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4474, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4474, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const driver_unregister: ref;
axiom (driver_unregister == $sub.ref(0, 180915));
procedure  driver_unregister($p0: ref)
{
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4434, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4434, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ipmi_smi_watcher_unregister: ref;
axiom (ipmi_smi_watcher_unregister == $sub.ref(0, 181947));
procedure  ipmi_smi_watcher_unregister($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4478, 10} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4478, 10} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "linux-stable-4ee267b-1-130_7a-drivers--hwmon--ibmaem.ko-entry_point_ldv-val-v0.8.cil.out-yhgdph9_.i", 4478, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 182979));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 39, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 184011));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 185043));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 186075));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 59, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 187107));
procedure  __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 188139));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 189171));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 190203));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 191235));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 192267));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 193299));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 194331));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 195363));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 196395));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 197427));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 198459));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 199491));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 200523));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __VERIFIER_nondet_long: ref;
axiom (__VERIFIER_nondet_long == $sub.ref(0, 201555));
procedure  __VERIFIER_nondet_long()
  returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 12} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 12} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_long();
  call {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 35} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 40} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i64($i0, 9223372036854775807);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 35} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 147, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 202587));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 203619));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 204651));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 205683));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_unsigned_long: ref;
axiom (__VERIFIER_nondet_unsigned_long == $sub.ref(0, 206715));
procedure  __VERIFIER_nondet_unsigned_long()
  returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 169, 21} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 169, 21} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 170, 23} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
  call {:cexpr "min"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 23} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_long();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
  call {:cexpr "max"} boogie_si_record_i64($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i64($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.i64($i2, 18446744073709551615);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 57} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.i64($i2, 18446744073709551615);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 50} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.i64($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 174, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 207747));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 208779));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 209811));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 210843));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 211875));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 212907));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 213939));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 214971));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_ulong: ref;
axiom (__VERIFIER_nondet_ulong == $sub.ref(0, 216003));
procedure  __VERIFIER_nondet_ulong()
  returns ($r: i64)
{
  var $i0: i64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 21} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 21} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
  call {:cexpr "x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __VERIFIER_nondet_pointer: ref;
axiom (__VERIFIER_nondet_pointer == $sub.ref(0, 217035));
procedure  __VERIFIER_nondet_pointer()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 48} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 48} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet();
  call {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 41} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const __VERIFIER_nondet: ref;
axiom (__VERIFIER_nondet == $sub.ref(0, 218067));
procedure  __VERIFIER_nondet()
  returns ($r: ref);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 219099));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 220131));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 221163));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 544, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_begin: ref;
axiom (__VERIFIER_atomic_begin == $sub.ref(0, 222195));
procedure  __VERIFIER_atomic_begin()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  call corral_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 79} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_end: ref;
axiom (__VERIFIER_atomic_end == $sub.ref(0, 223227));
procedure  __VERIFIER_atomic_end()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  call corral_atomic_end();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 75} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const calloc: ref;
axiom (calloc == $sub.ref(0, 224259));
procedure  calloc($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 1} true;
  call {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
  call {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 19, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 21, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 22, 5} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 23, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $mul.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 23, 11} true;
  assume {:verifier.code 0} true;
  call $p6 := malloc($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 24, 24} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.i64($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 24, 5} true;
  assume {:verifier.code 0} true;
  call $M.8 := $memset.i8($M.8, $p6, 0, $i7, false);
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 25, 5} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:verifier.code 0} true;
  $p4 := $p6;
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 27, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 225291));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 226323));
procedure  __SMACK_static_init()
{
$bb0:
  $M.24 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  $M.1 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  $M.2 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  $M.3 := 0;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
  $M.4 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  $M.5 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  $M.6 := 0;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
  $M.7 := 0;
  call {:cexpr "ldv_count_1"} boogie_si_record_i32(0);
  $M.14 := 0;
  call {:cexpr "ldv_count_2"} boogie_si_record_i32(0);
  $M.8 := $store.i8($M.8, .str.1, 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.1, $mul.ref(0, 4)), $mul.ref(1, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.1, $mul.ref(0, 4)), $mul.ref(2, 1)), 109);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.1, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
  $M.9 := $store.i8($M.9, system_x_id, 77);
  $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(system_x_id, $mul.ref(0, 3)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
  $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(system_x_id, $mul.ref(0, 3)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
  $M.8 := $store.ref($M.8, aem_driver, $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(8, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(16, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(24, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(32, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.1);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(8, 1)), platform_bus_type);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(16, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(aem_driver, $mul.ref(0, 160)), $mul.ref(152, 1)), $0.ref);
  $M.8 := $store.ref($M.8, driver_data, driver_data);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), driver_data);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref(16, 1)), __this_module);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref(24, 1)), aem_register_bmc);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref(32, 1)), aem_bmc_gone);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1)), aem_msg_handler);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(driver_data, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(8, 1)), $0.ref);
  $M.25 := $store.i32($M.25, aem_idr_lock, 0);
  $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(aem_idr_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
  $M.27 := $store.i32($M.27, $add.ref($add.ref($add.ref($add.ref(aem_idr_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
  $M.28 := $store.ref($M.28, $add.ref($add.ref($add.ref($add.ref(aem_idr_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
  $M.29 := $store.ref($M.29, $add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
  $M.30 := $store.ref($M.30, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.32 := $store.ref($M.32, $add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.4);
  $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
  $M.34 := $store.i64($M.34, $add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
  $M.35 := $store.ref($M.35, aem_idr, $0.ref);
  $M.36 := $store.ref($M.36, $add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(8, 1)), $0.ref);
  $M.37 := $store.i32($M.37, $add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(16, 1)), 0);
  $M.38 := $store.i32($M.38, $add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(20, 1)), 0);
  $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
  $M.41 := $store.i32($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
  $M.42 := $store.ref($M.42, $add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
  $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
  $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
  $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
  $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.5);
  $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
  $M.48 := $store.i64($M.48, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(aem_idr, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
  $M.12 := $store.ref($M.12, aem2_ro_sensors, .str.14);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(0, 24)), $mul.ref(8, 1)), aem_show_energy);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(1, 24)), $mul.ref(0, 1)), .str.21);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(1, 24)), $mul.ref(8, 1)), aem_show_energy);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(1, 24)), $mul.ref(16, 1)), 1);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(2, 24)), $mul.ref(0, 1)), .str.15);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(2, 24)), $mul.ref(8, 1)), aem_show_power);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(3, 24)), $mul.ref(0, 1)), .str.22);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(3, 24)), $mul.ref(8, 1)), aem_show_power);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(3, 24)), $mul.ref(16, 1)), 1);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(4, 24)), $mul.ref(0, 1)), .str.23);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(4, 24)), $mul.ref(8, 1)), aem2_show_temp);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(4, 24)), $mul.ref(16, 1)), 0);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(5, 24)), $mul.ref(0, 1)), .str.24);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(5, 24)), $mul.ref(8, 1)), aem2_show_temp);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(5, 24)), $mul.ref(16, 1)), 1);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(6, 24)), $mul.ref(0, 1)), .str.25);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(6, 24)), $mul.ref(8, 1)), aem2_show_pcap_value);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(6, 24)), $mul.ref(16, 1)), 1);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(7, 24)), $mul.ref(0, 1)), .str.26);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(7, 24)), $mul.ref(8, 1)), aem2_show_pcap_value);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(7, 24)), $mul.ref(16, 1)), 2);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(8, 24)), $mul.ref(0, 1)), .str.27);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(8, 24)), $mul.ref(8, 1)), aem2_show_pcap_value);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(8, 24)), $mul.ref(16, 1)), 3);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(9, 24)), $mul.ref(0, 1)), .str.28);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(9, 24)), $mul.ref(8, 1)), aem2_show_pcap_value);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(9, 24)), $mul.ref(16, 1)), 4);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(10, 24)), $mul.ref(0, 1)), .str.29);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(10, 24)), $mul.ref(8, 1)), aem2_show_pcap_value);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(10, 24)), $mul.ref(16, 1)), 5);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(11, 24)), $mul.ref(0, 1)), .str.30);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(11, 24)), $mul.ref(8, 1)), aem2_show_pcap_value);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(11, 24)), $mul.ref(16, 1)), 0);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(12, 24)), $mul.ref(0, 1)), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(12, 24)), $mul.ref(8, 1)), $0.ref);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem2_ro_sensors, $mul.ref(0, 312)), $mul.ref(12, 24)), $mul.ref(16, 1)), 0);
  $M.13 := $store.ref($M.13, aem2_rw_sensors, .str.17);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), aem_show_power_period);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), aem_set_power_period);
  $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), .str.32);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), aem_show_power_period);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), aem_set_power_period);
  $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), $0.ref);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), $0.ref);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), $0.ref);
  $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(aem2_rw_sensors, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
  $M.8 := $store.ref($M.8, sensor_dev_attr_name, .str.2);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_name);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(sensor_dev_attr_name, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
  $M.8 := $store.ref($M.8, sensor_dev_attr_version, .str.3);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_version);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(sensor_dev_attr_version, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
  $M.8 := $store.i8($M.8, .str.3, 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.3, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.3, $mul.ref(0, 8)), $mul.ref(2, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.3, $mul.ref(0, 8)), $mul.ref(3, 1)), 115);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.3, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.3, $mul.ref(0, 8)), $mul.ref(5, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.3, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.3, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
  $M.8 := $store.i8($M.8, .str.2, 110);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.2, $mul.ref(0, 5)), $mul.ref(1, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.2, $mul.ref(0, 5)), $mul.ref(2, 1)), 109);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.2, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.2, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
  $M.8 := $store.i8($M.8, .str.17, 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(1, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(2, 1)), 119);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(4, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(5, 1)), 49);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(7, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(8, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(9, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(10, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(11, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(12, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(15, 1)), 105);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(16, 1)), 110);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(17, 1)), 116);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(18, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(19, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(20, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(21, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(22, 1)), 108);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.17, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
  $M.8 := $store.i8($M.8, .str.32, 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(1, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(2, 1)), 119);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(4, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(5, 1)), 50);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(7, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(8, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(9, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(10, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(11, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(12, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(15, 1)), 105);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(16, 1)), 110);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(17, 1)), 116);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(18, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(19, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(20, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(21, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(22, 1)), 108);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.32, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
  $M.8 := $store.i8($M.8, .str.14, 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(2, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(3, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(4, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(5, 1)), 121);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(6, 1)), 49);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(8, 1)), 105);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(10, 1)), 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(11, 1)), 117);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
  $M.8 := $store.i8($M.8, .str.21, 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(2, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(3, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(4, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(5, 1)), 121);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(6, 1)), 50);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(8, 1)), 105);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(10, 1)), 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(11, 1)), 117);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
  $M.8 := $store.i8($M.8, .str.15, 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(2, 1)), 119);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(5, 1)), 49);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(8, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(12, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.15, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
  $M.8 := $store.i8($M.8, .str.22, 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(2, 1)), 119);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(5, 1)), 50);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(8, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(12, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
  $M.8 := $store.i8($M.8, .str.23, 116);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(4, 1)), 49);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(5, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(6, 1)), 105);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(7, 1)), 110);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(8, 1)), 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(9, 1)), 117);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.23, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
  $M.8 := $store.i8($M.8, .str.24, 116);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(4, 1)), 50);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(5, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(6, 1)), 105);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(7, 1)), 110);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(8, 1)), 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(9, 1)), 117);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
  $M.8 := $store.i8($M.8, .str.25, 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(2, 1)), 119);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(5, 1)), 52);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(8, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(12, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
  $M.8 := $store.i8($M.8, .str.26, 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(2, 1)), 119);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(5, 1)), 53);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(8, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(12, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
  $M.8 := $store.i8($M.8, .str.27, 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(2, 1)), 119);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(5, 1)), 54);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(8, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(12, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.27, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
  $M.8 := $store.i8($M.8, .str.28, 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(2, 1)), 119);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(5, 1)), 55);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(8, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(12, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
  $M.8 := $store.i8($M.8, .str.29, 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(2, 1)), 119);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(5, 1)), 51);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(8, 1)), 118);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(12, 1)), 103);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
  $M.8 := $store.i8($M.8, .str.30, 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(1, 1)), 111);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(2, 1)), 119);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(3, 1)), 101);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(4, 1)), 114);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(5, 1)), 95);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(6, 1)), 99);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(7, 1)), 97);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(8, 1)), 112);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
  $M.12 := $store.ref($M.12, aem1_ro_sensors, .str.14);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem1_ro_sensors, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(8, 1)), aem_show_energy);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem1_ro_sensors, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem1_ro_sensors, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), .str.15);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem1_ro_sensors, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(8, 1)), aem_show_power);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem1_ro_sensors, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem1_ro_sensors, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref($add.ref($add.ref(aem1_ro_sensors, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(8, 1)), $0.ref);
  $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(aem1_ro_sensors, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
  $M.13 := $store.ref($M.13, aem1_rw_sensors, .str.17);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem1_rw_sensors, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), aem_show_power_period);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem1_rw_sensors, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), aem_set_power_period);
  $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(aem1_rw_sensors, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem1_rw_sensors, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $0.ref);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem1_rw_sensors, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), $0.ref);
  $M.13 := $store.ref($M.13, $add.ref($add.ref($add.ref(aem1_rw_sensors, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), $0.ref);
  $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(aem1_rw_sensors, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
  $M.49 := .str.1.63;
  $M.50 := 0;
  call {:cexpr "errno_global"} boogie_si_record_i32(0);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 227355));
procedure  devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i2 := $eq.ref(update_aem1_sensors, $p0);
  assume {:branchcond $i2} true;
  goto $bb3, $bb5;
$bb2:
  assume ($i1 == 1);
  call update_aem2_sensors(arg);
  $exn := false;
  return;
$bb3:
  assume ($i2 == 1);
  call update_aem1_sensors(arg);
  $exn := false;
  return;
$bb4:
  assume !(($i1 == 1));
  assume false;
$bb5:
  assume !(($i2 == 1));
  $i1 := $eq.ref(update_aem2_sensors, $p0);
  assume {:branchcond $i1} true;
  goto $bb2, $bb4;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 228387));
procedure  devirtbounce.1(funcPtr: ref, arg: i64)
  returns ($r: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 229419));
procedure  devirtbounce.2(funcPtr: ref, arg: i32)
  returns ($r: i32)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
procedure  $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

procedure  boogie_si_record_i16(x: i16);
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i64(x: i64);
procedure  boogie_si_record_i8(x: i8);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
