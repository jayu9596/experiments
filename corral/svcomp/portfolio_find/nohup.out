SERVER: static alpha list : 100,0,50
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--ubi--gluebi.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
for clientid : 4 algo id is 1
for clientid : 2 algo id is 0
for clientid : 1 algo id is 0
for clientid : 3 algo id is 0
for clientid : 7 algo id is 1
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 8 algo id is 2
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => Spliiting due to client waiting
0 => callsites count before spliiting 5 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 21 currentId 6
Added AND Nodes: 20 21
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 21 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
4 => sending calltree : splitMode 0 mustReachId 26 currentId 11
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 25 26
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 26 from client 4 to 7
7 => after replyFromServer: 0
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => LOOP outcome: Correct & reachbound = False
4 => outcome: Correct
Added New : 
8 : 
for clientid : 4 algo id is 1
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 26 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 36 currentId 26
2 => Spliiting due to client waiting
2 => callsites count before spliiting 7 with id = 21 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 41 currentId 21
Added AND Nodes: 35 36
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 36 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
Added AND Nodes: 40 41
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 41 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 46 currentId 31
Added AND Nodes: 45 46
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 46 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 36 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 51 currentId 36
Added AND Nodes: 50 51
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 51 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 46 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 56 currentId 46
6 => Spliiting due to client waiting
Added AND Nodes: 55 56
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 56 from client 10 to 11
11 => after replyFromServer: 50
6 => callsites count before spliiting 2 with id = 51 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 61 currentId 51
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
Added AND Nodes: 60 61
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 61 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 61 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 7
6 => Spliiting due to client waiting
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 66 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 71 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 71 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 76 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => Spliiting due to client waiting
4 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 56 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 81 currentId 56
4 => Spliiting due to client waiting
1 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 7 with id = 76 and splitMode 0
1 => callsites count before spliiting 8 with id = 41 and splitMode 100
4 => sending calltree : splitMode 0 mustReachId 86 currentId 76
1 => sending calltree : splitMode 100 mustReachId 91 currentId 41
Added AND Nodes: 85 86
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 86 from client 4 to 7
7 => after replyFromServer: 0
4 => Spliiting due to client waiting
Added AND Nodes: 80 81
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 81 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
4 => Spliiting due to client waiting
for clientid : 11 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 86 and splitMode 0
4 => Spliiting due to client waiting
7 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 5
5 => after replyFromServer: 0
Added AND Nodes: 90 91
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 91 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 81 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 101 currentId 81
Added AND Nodes: 100 101
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 101 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 4 with id = 101 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 106 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 106 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 111 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 2 with id = 91 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 116 currentId 91
Added AND Nodes: 115 116
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 116 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 6 with id = 111 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 121 currentId 111
Added AND Nodes: 120 121
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 121 from client 11 to 8
8 => after replyFromServer: 50
11 => Spliiting due to client waiting
7 => callsites count before spliiting 200 with id = 95 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 126 currentId 95
Added AND Nodes: 125 126
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 210 with id = 60 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 131 currentId 60
Added AND Nodes: 130 131
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 210 with id = 85 and splitMode 0
7 => outcome: Correct
4 => sending calltree : splitMode 0 mustReachId 136 currentId 85
Added AND Nodes: 135 136
for clientid : 7 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 136 from client 4 to 7
8 => Spliiting due to client waiting
7 => after replyFromServer: 0
8 => callsites count before spliiting 5 with id = 121 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 141 currentId 121
Added AND Nodes: 140 141
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 141 from client 8 to 9
9 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
6 => LOOP outcome: Correct & reachbound = False
for clientid : 4 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 131 from client 6 to 4
Added New : 
6 : 
4 => after replyFromServer: 0
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => Spliiting due to client waiting
5 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
5 => callsites count before spliiting 164 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 146 currentId 96
Added AND Nodes: 145 146
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 146 from client 5 to 6
8 => LOOP outcome: Correct & reachbound = False
6 => after replyFromServer: 0
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 141 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 151 from client 9 to 10
10 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => callsites count before spliiting 16 with id = 120 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 156 currentId 120
Added AND Nodes: 155 156
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 156 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 1 with id = 116 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 161 currentId 116
Added AND Nodes: 160 161
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 161 from client 0 to 2
2 => after replyFromServer: 100
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
9 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 9 with id = 160 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 166 currentId 160
Added AND Nodes: 165 166
6 => Spliiting due to client waiting
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 166 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 14 with id = 156 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 171 currentId 156
Added AND Nodes: 170 171
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 171 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => Spliiting due to client waiting
8 => outcome: Correct
for clientid : 8 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 1 with id = 161 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 176 currentId 161
Added AND Nodes: 175 176
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 176 from client 2 to 3
3 => after replyFromServer: 100
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 171 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 181 currentId 171
Added AND Nodes: 180 181
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 181 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => callsites count before spliiting 3 with id = 151 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 186 currentId 151
Added AND Nodes: 185 186
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 186 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
2 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 13 with id = 150 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 191 currentId 150
Added AND Nodes: 190 191
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 191 from client 9 to 10
10 => after replyFromServer: 50
6 => Spliiting due to client waiting
1 => Spliiting due to client waiting
1 => callsites count before spliiting 9 with id = 166 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 196 currentId 166
Added AND Nodes: 195 196
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 196 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 176 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 201 currentId 176
Added AND Nodes: 200 201
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 201 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
2 => Spliiting due to client waiting
2 => callsites count before spliiting 4 with id = 175 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 206 currentId 175
Added AND Nodes: 205 206
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 206 from client 2 to 3
3 => after replyFromServer: 100
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
8 => callsites count before spliiting 253 with id = 181 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 211 currentId 181
Added AND Nodes: 210 211
0 => callsites count before spliiting 50 with id = 196 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 216 currentId 196
Added AND Nodes: 215 216
0 => LOOP outcome: Correct & reachbound = False
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => callsites count before spliiting 52 with id = 206 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 221 currentId 206
Added AND Nodes: 220 221
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 54 with id = 201 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 226 currentId 201
Added AND Nodes: 225 226
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 54 with id = 205 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 231 currentId 205
Added AND Nodes: 230 231
9 => callsites count before spliiting 228 with id = 190 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 236 currentId 190
Added AND Nodes: 235 236
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
6 => callsites count before spliiting 444 with id = 146 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 241 currentId 146
Added AND Nodes: 240 241
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 241 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => callsites count before spliiting 487 with id = 131 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 246 currentId 131
Added AND Nodes: 245 246
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 246 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => callsites count before spliiting 201 with id = 186 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 251 currentId 186
Added AND Nodes: 250 251
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => callsites count before spliiting 202 with id = 191 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 256 currentId 191
Added AND Nodes: 255 256
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
5 => Spliiting due to client waiting
5 => callsites count before spliiting 26 with id = 241 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 261 currentId 241
Added AND Nodes: 260 261
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 261 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 21 with id = 246 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 266 currentId 246
Added AND Nodes: 265 266
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 266 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
0 => callsites count before spliiting 58 with id = 216 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 271 currentId 216
Added AND Nodes: 270 271
0 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 263 with id = 211 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 276 currentId 211
Added AND Nodes: 275 276
6 => Spliiting due to client waiting
6 => callsites count before spliiting 25 with id = 261 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 281 currentId 261
Added AND Nodes: 280 281
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 281 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => callsites count before spliiting 66 with id = 221 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 286 currentId 221
Added AND Nodes: 285 286
3 => LOOP outcome: Correct & reachbound = True
4 => Spliiting due to client waiting
4 => callsites count before spliiting 24 with id = 266 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 291 currentId 266
Added AND Nodes: 290 291
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 291 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
1 => callsites count before spliiting 66 with id = 226 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 296 currentId 226
Added AND Nodes: 295 296
1 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 87 with id = 230 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 301 currentId 230
Added AND Nodes: 300 301
2 => LOOP outcome: Correct & reachbound = False
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 287 with id = 236 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 306 currentId 236
Added AND Nodes: 305 306
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => Spliiting due to client waiting
5 => callsites count before spliiting 21 with id = 281 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 311 currentId 281
Added AND Nodes: 310 311
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 311 from client 5 to 6
6 => after replyFromServer: 0
11 => callsites count before spliiting 237 with id = 251 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 316 currentId 251
Added AND Nodes: 315 316
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 25 with id = 291 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 321 currentId 291
Added AND Nodes: 320 321
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 321 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
10 => callsites count before spliiting 511 with id = 256 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 326 currentId 256
Added AND Nodes: 325 326
5 => callsites count before spliiting 26 with id = 310 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 331 currentId 310
Added AND Nodes: 330 331
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 331 from client 5 to 7
7 => after replyFromServer: 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => Spliiting due to client waiting
6 => callsites count before spliiting 25 with id = 311 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 336 currentId 311
Added AND Nodes: 335 336
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 336 from client 6 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 34 with id = 335 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 341 currentId 335
Added AND Nodes: 340 341
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 341 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => callsites count before spliiting 54 with id = 301 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 346 currentId 301
Added AND Nodes: 345 346
2 => LOOP outcome: Correct & reachbound = True
4 => Spliiting due to client waiting
4 => callsites count before spliiting 98 with id = 321 and splitMode 0
8 => callsites count before spliiting 223 with id = 276 and splitMode 50
4 => sending calltree : splitMode 0 mustReachId 351 currentId 321
8 => sending calltree : splitMode 50 mustReachId 356 currentId 276
Added AND Nodes: 355 356
Added AND Nodes: 350 351
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 351 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 8 with id = 341 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 361 currentId 341
Added AND Nodes: 360 361
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 361 from client 7 to 4
4 => after replyFromServer: 0
9 => callsites count before spliiting 202 with id = 306 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 366 currentId 306
0 => callsites count before spliiting 50 with id = 271 and splitMode 100
Added AND Nodes: 365 366
0 => sending calltree : splitMode 100 mustReachId 371 currentId 271
Added AND Nodes: 370 371
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => callsites count before spliiting 200 with id = 316 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 376 currentId 316
Added AND Nodes: 375 376
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
5 => Spliiting due to client waiting
5 => callsites count before spliiting 106 with id = 336 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 381 currentId 336
Added AND Nodes: 380 381
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 381 from client 5 to 7
7 => after replyFromServer: 0
3 => callsites count before spliiting 52 with id = 286 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 386 currentId 286
Added AND Nodes: 385 386
1 => callsites count before spliiting 52 with id = 296 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 391 currentId 296
Added AND Nodes: 390 391
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => LOOP outcome: Correct & reachbound = True
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
1 => LOOP outcome: Correct & reachbound = True
5 => Spliiting due to client waiting
5 => callsites count before spliiting 120 with id = 380 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 396 currentId 380
Added AND Nodes: 395 396
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 396 from client 5 to 4
4 => after replyFromServer: 0
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
0 => LOOP outcome: Correct & reachbound = True
9 => Spliiting due to client waiting
2 => callsites count before spliiting 53 with id = 346 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 401 currentId 346
Added AND Nodes: 400 401
8 => Spliiting due to client waiting
8 => callsites count before spliiting 77 with id = 356 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 406 currentId 356
Added AND Nodes: 405 406
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 406 from client 8 to 10
10 => after replyFromServer: 50
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 4 with id = 396 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 411 currentId 396
Added AND Nodes: 410 411
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 411 from client 4 to 5
5 => after replyFromServer: 0
2 => LOOP outcome: Correct & reachbound = True
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 121 with id = 381 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 416 currentId 381
Added AND Nodes: 415 416
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 416 from client 7 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => callsites count before spliiting 219 with id = 351 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 421 currentId 351
Added AND Nodes: 420 421
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 421 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 24 with id = 416 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 426 currentId 416
Added AND Nodes: 425 426
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 426 from client 4 to 6
6 => after replyFromServer: 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => callsites count before spliiting 51 with id = 371 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 431 currentId 371
Added AND Nodes: 430 431
11 => Spliiting due to client waiting
11 => callsites count before spliiting 45 with id = 376 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 436 currentId 376
Added AND Nodes: 435 436
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 436 from client 11 to 8
8 => after replyFromServer: 50
3 => callsites count before spliiting 52 with id = 386 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 441 currentId 386
Added AND Nodes: 440 441
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 115 with id = 406 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 446 currentId 406
Added AND Nodes: 445 446
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 446 from client 10 to 11
11 => after replyFromServer: 50
2 => callsites count before spliiting 60 with id = 401 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 451 currentId 401
Added AND Nodes: 450 451
1 => callsites count before spliiting 52 with id = 391 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 456 currentId 391
Added AND Nodes: 455 456
3 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 74 with id = 421 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 461 currentId 421
Added AND Nodes: 460 461
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 461 from client 5 to 7
7 => after replyFromServer: 0
0 => callsites count before spliiting 50 with id = 430 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 466 currentId 430
Added AND Nodes: 465 466
2 => LOOP outcome: Correct & reachbound = True
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 55 with id = 425 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 471 currentId 425
Added AND Nodes: 470 471
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 471 from client 4 to 5
5 => after replyFromServer: 0
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
11 => Spliiting due to client waiting
10 => Spliiting due to client waiting
11 => callsites count before spliiting 91 with id = 446 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 476 currentId 446
10 => callsites count before spliiting 153 with id = 445 and splitMode 50
Added AND Nodes: 475 476
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 476 from client 11 to 9
10 => sending calltree : splitMode 50 mustReachId 481 currentId 445
9 => after replyFromServer: 50
Added AND Nodes: 480 481
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
8 => Spliiting due to client waiting
8 => callsites count before spliiting 173 with id = 436 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 486 currentId 436
Added AND Nodes: 485 486
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 486 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 115 with id = 475 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 491 currentId 475
Added AND Nodes: 490 491
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 491 from client 11 to 8
8 => after replyFromServer: 50
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 231 from client 2 to 3
3 => after replyFromServer: 100
2 => callsites count before spliiting 60 with id = 451 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 496 currentId 451
Added AND Nodes: 495 496
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
6 => callsites count before spliiting 204 with id = 426 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 501 currentId 426
Added AND Nodes: 500 501
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 501 from client 6 to 4
4 => after replyFromServer: 0
5 => callsites count before spliiting 15 with id = 471 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 506 currentId 471
Added AND Nodes: 505 506
3 => callsites count before spliiting 54 with id = 231 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 511 currentId 231
Added AND Nodes: 510 511
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 496 from client 2 to 1
1 => after replyFromServer: 100
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 60 with id = 491 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 516 currentId 491
Added AND Nodes: 515 516
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 516 from client 8 to 11
11 => after replyFromServer: 50
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => callsites count before spliiting 52 with id = 431 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 521 currentId 431
Added AND Nodes: 520 521
2 => callsites count before spliiting 63 with id = 495 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 526 currentId 495
Added AND Nodes: 525 526
6 => Spliiting due to client waiting
6 => callsites count before spliiting 16 with id = 500 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 531 currentId 500
Added AND Nodes: 530 531
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 531 from client 6 to 5
5 => after replyFromServer: 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 38 with id = 486 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 536 currentId 486
Added AND Nodes: 535 536
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 536 from client 10 to 8
8 => after replyFromServer: 50
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 521 from client 0 to 2
2 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
3 => callsites count before spliiting 54 with id = 511 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 541 currentId 511
Added AND Nodes: 540 541
3 => LOOP outcome: Correct & reachbound = True
7 => callsites count before spliiting 206 with id = 461 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 546 currentId 461
Added AND Nodes: 545 546
9 => Spliiting due to client waiting
9 => callsites count before spliiting 94 with id = 476 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 551 currentId 476
Added AND Nodes: 550 551
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 551 from client 9 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => Spliiting due to client waiting
9 => callsites count before spliiting 103 with id = 550 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 556 currentId 550
Added AND Nodes: 555 556
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 556 from client 9 to 11
11 => after replyFromServer: 50
0 => callsites count before spliiting 50 with id = 520 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 561 currentId 520
Added AND Nodes: 560 561
1 => callsites count before spliiting 60 with id = 496 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 566 currentId 496
Added AND Nodes: 565 566
3 => callsites count before spliiting 56 with id = 541 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 571 currentId 541
Added AND Nodes: 570 571
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => LOOP outcome: Correct & reachbound = True
5 => Spliiting due to client waiting
5 => callsites count before spliiting 11 with id = 531 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 576 currentId 531
Added AND Nodes: 575 576
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 576 from client 5 to 6
6 => after replyFromServer: 0
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
2 => callsites count before spliiting 51 with id = 521 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 581 currentId 521
Added AND Nodes: 580 581
1 => callsites count before spliiting 51 with id = 565 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 586 currentId 565
Added AND Nodes: 585 586
9 => Spliiting due to client waiting
9 => callsites count before spliiting 197 with id = 555 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 591 currentId 555
Added AND Nodes: 590 591
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 591 from client 9 to 11
11 => after replyFromServer: 50
0 => callsites count before spliiting 50 with id = 560 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 596 currentId 560
Added AND Nodes: 595 596
9 => callsites count before spliiting 209 with id = 590 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 601 currentId 590
Added AND Nodes: 600 601
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => callsites count before spliiting 167 with id = 501 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 606 currentId 501
Added AND Nodes: 605 606
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 606 from client 4 to 5
5 => after replyFromServer: 0
7 => callsites count before spliiting 99 with id = 546 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 611 currentId 546
Added AND Nodes: 610 611
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 171 with id = 605 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 616 currentId 605
Added AND Nodes: 615 616
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 616 from client 4 to 6
6 => after replyFromServer: 0
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 2
Assign partition 566 from client 1 to 0
0 => after replyFromServer: 100
3 => callsites count before spliiting 52 with id = 571 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 621 currentId 571
Added AND Nodes: 620 621
2 => callsites count before spliiting 50 with id = 580 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 626 currentId 580
Added AND Nodes: 625 626
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 98 with id = 536 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 631 currentId 536
Added AND Nodes: 630 631
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 631 from client 8 to 9
9 => after replyFromServer: 50
3 => LOOP outcome: Correct & reachbound = True
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 44 with id = 591 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 636 currentId 591
Added AND Nodes: 635 636
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 636 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 182 with id = 551 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 641 currentId 551
Added AND Nodes: 640 641
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 641 from client 10 to 11
11 => after replyFromServer: 50
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 2
Assign partition 581 from client 2 to 1
1 => after replyFromServer: 100
2 => callsites count before spliiting 50 with id = 625 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 646 currentId 625
Added AND Nodes: 645 646
10 => callsites count before spliiting 210 with id = 640 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 651 currentId 640
Added AND Nodes: 650 651
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 651 from client 10 to 8
8 => after replyFromServer: 50
6 => callsites count before spliiting 7 with id = 616 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 656 currentId 616
Added AND Nodes: 655 656
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 656 from client 6 to 4
4 => after replyFromServer: 0
3 => callsites count before spliiting 56 with id = 621 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 661 currentId 621
Added AND Nodes: 660 661
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 60 with id = 566 and splitMode 100
6 => outcome: Correct
0 => sending calltree : splitMode 100 mustReachId 666 currentId 566
for clientid : 6 algo id is 1
Added AND Nodes: 665 666
5 => Spliiting due to client waiting
5 => callsites count before spliiting 94 with id = 606 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 671 currentId 606
Added AND Nodes: 670 671
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 671 from client 5 to 6
6 => after replyFromServer: 0
3 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 222 with id = 650 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 676 currentId 650
Added AND Nodes: 675 676
2 => callsites count before spliiting 52 with id = 645 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 681 currentId 645
Added AND Nodes: 680 681
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => callsites count before spliiting 50 with id = 665 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 686 currentId 665
Added AND Nodes: 685 686
5 => Spliiting due to client waiting
5 => callsites count before spliiting 104 with id = 670 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 691 currentId 670
Added AND Nodes: 690 691
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 691 from client 5 to 4
4 => after replyFromServer: 0
1 => callsites count before spliiting 52 with id = 581 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 696 currentId 581
Added AND Nodes: 695 696
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 676 from client 10 to 8
8 => after replyFromServer: 50
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 696 from client 1 to 2
2 => after replyFromServer: 100
10 => callsites count before spliiting 238 with id = 675 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 701 currentId 675
Added AND Nodes: 700 701
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
7 => callsites count before spliiting 208 with id = 611 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 706 currentId 611
Added AND Nodes: 705 706
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
2 => Spliiting due to client waiting
2 => callsites count before spliiting 3 with id = 696 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 711 currentId 696
Added AND Nodes: 710 711
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 711 from client 2 to 3
3 => after replyFromServer: 100
9 => Spliiting due to client waiting
9 => callsites count before spliiting 83 with id = 631 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 716 currentId 631
Added AND Nodes: 715 716
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 716 from client 9 to 10
10 => after replyFromServer: 50
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
1 => callsites count before spliiting 50 with id = 695 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 721 currentId 695
Added AND Nodes: 720 721
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 721 from client 1 to 0
0 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 23 with id = 676 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 726 currentId 676
Added AND Nodes: 725 726
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 726 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 165 with id = 641 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 731 currentId 641
Added AND Nodes: 730 731
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 731 from client 11 to 8
8 => after replyFromServer: 50
2 => callsites count before spliiting 51 with id = 710 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 736 currentId 710
Added AND Nodes: 735 736
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 736 from client 2 to 0
0 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 9 with id = 691 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 741 currentId 691
Added AND Nodes: 740 741
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 741 from client 4 to 5
5 => after replyFromServer: 0
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
1 => callsites count before spliiting 50 with id = 720 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 746 currentId 720
Added AND Nodes: 745 746
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 746 from client 1 to 0
0 => after replyFromServer: 100
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 88 with id = 706 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 751 currentId 706
Added AND Nodes: 750 751
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 751 from client 7 to 4
4 => after replyFromServer: 0
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
3 => callsites count before spliiting 56 with id = 711 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 756 currentId 711
Added AND Nodes: 755 756
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 756 from client 3 to 0
0 => after replyFromServer: 100
11 => callsites count before spliiting 201 with id = 730 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 761 currentId 730
Added AND Nodes: 760 761
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 761 from client 11 to 9
9 => after replyFromServer: 50
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => callsites count before spliiting 50 with id = 735 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 766 currentId 735
Added AND Nodes: 765 766
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 741 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 771 currentId 741
Added AND Nodes: 770 771
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 771 from client 5 to 7
7 => after replyFromServer: 0
11 => callsites count before spliiting 205 with id = 760 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 776 currentId 760
Added AND Nodes: 775 776
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
1 => callsites count before spliiting 50 with id = 745 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 781 currentId 745
Added AND Nodes: 780 781
6 => callsites count before spliiting 192 with id = 671 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 786 currentId 671
Added AND Nodes: 785 786
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 786 from client 6 to 5
5 => after replyFromServer: 0
3 => callsites count before spliiting 54 with id = 755 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 791 currentId 755
Added AND Nodes: 790 791
2 => callsites count before spliiting 50 with id = 765 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 796 currentId 765
Added AND Nodes: 795 796
11 => callsites count before spliiting 214 with id = 775 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 801 currentId 775
Added AND Nodes: 800 801
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 48 with id = 751 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 806 currentId 751
Added AND Nodes: 805 806
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 806 from client 4 to 7
7 => after replyFromServer: 0
1 => callsites count before spliiting 51 with id = 780 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 811 currentId 780
Added AND Nodes: 810 811
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
clientID of largest queue : 11
clientCalltreeQueue Count : 2
Assign partition 776 from client 11 to 9
9 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
3 => callsites count before spliiting 52 with id = 790 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 816 currentId 790
Added AND Nodes: 815 816
0 => callsites count before spliiting 60 with id = 756 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 821 currentId 756
Added AND Nodes: 820 821
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
6 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
6 => callsites count before spliiting 199 with id = 785 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 826 currentId 785
Added AND Nodes: 825 826
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 826 from client 6 to 4
4 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 90 with id = 731 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 831 currentId 731
Added AND Nodes: 830 831
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 831 from client 8 to 11
11 => after replyFromServer: 50
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 52 with id = 795 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 836 currentId 795
Added AND Nodes: 835 836
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 3
Assign partition 766 from client 2 to 1
1 => after replyFromServer: 100
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
0 => callsites count before spliiting 51 with id = 820 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 841 currentId 820
Added AND Nodes: 840 841
7 => callsites count before spliiting 27 with id = 806 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 846 currentId 806
Added AND Nodes: 845 846
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 846 from client 7 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
3 => callsites count before spliiting 50 with id = 815 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 851 currentId 815
Added AND Nodes: 850 851
5 => Spliiting due to client waiting
5 => callsites count before spliiting 82 with id = 786 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 856 currentId 786
Added AND Nodes: 855 856
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 856 from client 5 to 4
4 => after replyFromServer: 0
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
8 => callsites count before spliiting 169 with id = 830 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 861 currentId 830
Added AND Nodes: 860 861
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 861 from client 8 to 9
9 => after replyFromServer: 50
2 => callsites count before spliiting 50 with id = 835 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 866 currentId 835
Added AND Nodes: 865 866
1 => callsites count before spliiting 58 with id = 766 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 871 currentId 766
Added AND Nodes: 870 871
8 => Spliiting due to client waiting
8 => callsites count before spliiting 173 with id = 860 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 876 currentId 860
Added AND Nodes: 875 876
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 876 from client 8 to 10
10 => after replyFromServer: 50
0 => callsites count before spliiting 56 with id = 840 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 881 currentId 840
Added AND Nodes: 880 881
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => callsites count before spliiting 50 with id = 850 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 886 currentId 850
Added AND Nodes: 885 886
2 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 4
Assign partition 791 from client 3 to 1
1 => after replyFromServer: 100
6 => Spliiting due to client waiting
4 => Spliiting due to client waiting
6 => callsites count before spliiting 49 with id = 846 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 891 currentId 846
Added AND Nodes: 890 891
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 891 from client 6 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 23 with id = 856 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 896 currentId 856
Added AND Nodes: 895 896
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 896 from client 4 to 5
5 => after replyFromServer: 0
2 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 3
Assign partition 821 from client 0 to 1
1 => after replyFromServer: 100
8 => callsites count before spliiting 200 with id = 875 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 901 currentId 875
Added AND Nodes: 900 901
0 => callsites count before spliiting 54 with id = 880 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 906 currentId 880
Added AND Nodes: 905 906
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 901 from client 8 to 9
9 => after replyFromServer: 50
3 => callsites count before spliiting 50 with id = 885 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 911 currentId 885
Added AND Nodes: 910 911
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
2 => callsites count before spliiting 58 with id = 796 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 916 currentId 796
Added AND Nodes: 915 916
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 4
Assign partition 816 from client 3 to 2
2 => after replyFromServer: 100
8 => callsites count before spliiting 239 with id = 900 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 921 currentId 900
Added AND Nodes: 920 921
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 921 from client 8 to 10
10 => after replyFromServer: 50
0 => callsites count before spliiting 52 with id = 905 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 926 currentId 905
Added AND Nodes: 925 926
8 => callsites count before spliiting 245 with id = 920 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 931 currentId 920
Added AND Nodes: 930 931
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 4
Assign partition 841 from client 0 to 2
2 => after replyFromServer: 100
3 => callsites count before spliiting 51 with id = 910 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 936 currentId 910
Added AND Nodes: 935 936
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 931 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 4
Assign partition 851 from client 3 to 2
2 => after replyFromServer: 100
1 => callsites count before spliiting 55 with id = 821 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 941 currentId 821
Added AND Nodes: 940 941
11 => Spliiting due to client waiting
11 => callsites count before spliiting 158 with id = 831 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 946 currentId 831
Added AND Nodes: 945 946
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 946 from client 11 to 8
8 => after replyFromServer: 50
0 => callsites count before spliiting 50 with id = 925 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 951 currentId 925
Added AND Nodes: 950 951
3 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 4
Assign partition 881 from client 0 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 3
Assign partition 906 from client 0 to 3
3 => after replyFromServer: 100
11 => callsites count before spliiting 211 with id = 945 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 956 currentId 945
Added AND Nodes: 955 956
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 956 from client 11 to 10
10 => after replyFromServer: 50
1 => callsites count before spliiting 53 with id = 940 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 961 currentId 940
Added AND Nodes: 960 961
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 2
Assign partition 926 from client 0 to 2
2 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 57 with id = 895 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 966 currentId 895
Added AND Nodes: 965 966
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 966 from client 4 to 6
6 => after replyFromServer: 0
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 2
Assign partition 941 from client 1 to 3
3 => after replyFromServer: 100
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => callsites count before spliiting 252 with id = 955 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 971 currentId 955
Added AND Nodes: 970 971
5 => Spliiting due to client waiting
5 => callsites count before spliiting 106 with id = 896 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 976 currentId 896
Added AND Nodes: 975 976
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 976 from client 5 to 4
4 => after replyFromServer: 0
0 => callsites count before spliiting 50 with id = 950 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 981 currentId 950
Added AND Nodes: 980 981
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 2
Assign partition 951 from client 0 to 2
2 => after replyFromServer: 100
1 => callsites count before spliiting 51 with id = 960 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 986 currentId 960
Added AND Nodes: 985 986
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 971 from client 11 to 9
9 => after replyFromServer: 50
11 => callsites count before spliiting 272 with id = 970 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 991 currentId 970
Added AND Nodes: 990 991
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 991 from client 11 to 10
10 => after replyFromServer: 50
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 2
Assign partition 961 from client 1 to 2
2 => after replyFromServer: 100
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => callsites count before spliiting 50 with id = 980 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 996 currentId 980
Added AND Nodes: 995 996
5 => Spliiting due to client waiting
5 => callsites count before spliiting 126 with id = 975 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1001 currentId 975
Added AND Nodes: 1000 1001
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1001 from client 5 to 6
6 => after replyFromServer: 0
7 => callsites count before spliiting 214 with id = 891 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1006 currentId 891
Added AND Nodes: 1005 1006
11 => callsites count before spliiting 293 with id = 990 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1011 currentId 990
Added AND Nodes: 1010 1011
1 => callsites count before spliiting 50 with id = 985 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1016 currentId 985
Added AND Nodes: 1015 1016
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 2
Assign partition 981 from client 0 to 2
2 => after replyFromServer: 100
3 => callsites count before spliiting 50 with id = 941 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1021 currentId 941
Added AND Nodes: 1020 1021
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 2
Assign partition 986 from client 1 to 0
0 => after replyFromServer: 100
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1011 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
1 => callsites count before spliiting 50 with id = 1015 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1026 currentId 1015
Added AND Nodes: 1025 1026
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 2
Assign partition 1016 from client 1 to 0
0 => after replyFromServer: 100
3 => callsites count before spliiting 50 with id = 1020 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1031 currentId 1020
Added AND Nodes: 1030 1031
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 2
Assign partition 1021 from client 3 to 2
2 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 26 with id = 946 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1036 currentId 946
Added AND Nodes: 1035 1036
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1036 from client 8 to 11
11 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 58 with id = 1035 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1041 currentId 1035
Added AND Nodes: 1040 1041
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1041 from client 8 to 10
10 => after replyFromServer: 50
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1026 from client 1 to 0
0 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 13 with id = 1001 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1046 currentId 1001
Added AND Nodes: 1045 1046
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1046 from client 6 to 5
5 => after replyFromServer: 0
1 => callsites count before spliiting 52 with id = 1025 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1051 currentId 1025
Added AND Nodes: 1050 1051
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 67 with id = 1040 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1056 currentId 1040
Added AND Nodes: 1055 1056
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1056 from client 8 to 9
9 => after replyFromServer: 50
3 => callsites count before spliiting 51 with id = 1030 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1061 currentId 1030
Added AND Nodes: 1060 1061
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 2
Assign partition 1031 from client 3 to 0
0 => after replyFromServer: 100
1 => callsites count before spliiting 50 with id = 1050 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1066 currentId 1050
Added AND Nodes: 1065 1066
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 2
Assign partition 1051 from client 1 to 0
0 => after replyFromServer: 100
3 => callsites count before spliiting 53 with id = 1060 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1071 currentId 1060
Added AND Nodes: 1070 1071
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 126 with id = 1055 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1076 currentId 1055
Added AND Nodes: 1075 1076
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1076 from client 8 to 10
10 => after replyFromServer: 50
2 => callsites count before spliiting 50 with id = 1021 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1081 currentId 1021
Added AND Nodes: 1080 1081
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => callsites count before spliiting 117 with id = 1006 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1086 currentId 1006
Added AND Nodes: 1085 1086
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1086 from client 7 to 6
6 => after replyFromServer: 0
4 => callsites count before spliiting 185 with id = 976 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1091 currentId 976
Added AND Nodes: 1090 1091
1 => callsites count before spliiting 52 with id = 1065 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1096 currentId 1065
Added AND Nodes: 1095 1096
8 => Spliiting due to client waiting
8 => callsites count before spliiting 130 with id = 1075 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1101 currentId 1075
Added AND Nodes: 1100 1101
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1101 from client 8 to 9
9 => after replyFromServer: 50
3 => callsites count before spliiting 51 with id = 1070 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1106 currentId 1070
Added AND Nodes: 1105 1106
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1091 from client 4 to 5
5 => after replyFromServer: 0
0 => callsites count before spliiting 58 with id = 1051 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1111 currentId 1051
Added AND Nodes: 1110 1111
2 => callsites count before spliiting 51 with id = 1080 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1116 currentId 1080
Added AND Nodes: 1115 1116
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => callsites count before spliiting 50 with id = 1095 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1121 currentId 1095
Added AND Nodes: 1120 1121
0 => LOOP outcome: Correct & reachbound = True
4 => Spliiting due to client waiting
4 => callsites count before spliiting 195 with id = 1090 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1126 currentId 1090
Added AND Nodes: 1125 1126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1126 from client 4 to 7
7 => after replyFromServer: 0
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
3 => callsites count before spliiting 52 with id = 1105 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1131 currentId 1105
Added AND Nodes: 1130 1131
11 => Spliiting due to client waiting
11 => callsites count before spliiting 145 with id = 1036 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1136 currentId 1036
Added AND Nodes: 1135 1136
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1136 from client 11 to 10
10 => after replyFromServer: 50
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 4
Assign partition 1061 from client 3 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = True
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 169 with id = 1135 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1141 currentId 1135
Added AND Nodes: 1140 1141
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1141 from client 11 to 8
8 => after replyFromServer: 50
2 => callsites count before spliiting 53 with id = 1115 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1146 currentId 1115
Added AND Nodes: 1145 1146
1 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 3
Assign partition 1081 from client 2 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 201 with id = 1125 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1151 currentId 1125
Added AND Nodes: 1150 1151
3 => callsites count before spliiting 50 with id = 1130 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1156 currentId 1130
Added AND Nodes: 1155 1156
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 51 with id = 1145 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1161 currentId 1145
Added AND Nodes: 1160 1161
1 => callsites count before spliiting 58 with id = 1066 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1166 currentId 1066
Added AND Nodes: 1165 1166
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
11 => callsites count before spliiting 200 with id = 1140 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1171 currentId 1140
Added AND Nodes: 1170 1171
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1171 from client 11 to 9
9 => after replyFromServer: 50
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 4
Assign partition 1071 from client 3 to 1
1 => after replyFromServer: 100
3 => callsites count before spliiting 52 with id = 1155 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1176 currentId 1155
Added AND Nodes: 1175 1176
11 => callsites count before spliiting 219 with id = 1170 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1181 currentId 1170
Added AND Nodes: 1180 1181
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1181 from client 11 to 8
8 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => callsites count before spliiting 52 with id = 1160 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1186 currentId 1160
Added AND Nodes: 1185 1186
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 4
Assign partition 1116 from client 2 to 1
1 => after replyFromServer: 100
11 => callsites count before spliiting 222 with id = 1180 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1191 currentId 1180
Added AND Nodes: 1190 1191
7 => Spliiting due to client waiting
7 => callsites count before spliiting 10 with id = 1126 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1196 currentId 1126
Added AND Nodes: 1195 1196
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1196 from client 7 to 4
4 => after replyFromServer: 0
3 => callsites count before spliiting 50 with id = 1175 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1201 currentId 1175
Added AND Nodes: 1200 1201
11 => callsites count before spliiting 225 with id = 1190 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1206 currentId 1190
1 => LOOP outcome: Correct & reachbound = True
Added AND Nodes: 1205 1206
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 5
Assign partition 1106 from client 3 to 1
1 => after replyFromServer: 100
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 93 with id = 1086 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1211 currentId 1086
Added AND Nodes: 1210 1211
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1211 from client 6 to 7
7 => after replyFromServer: 0
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
clientID of largest queue : 11
clientCalltreeQueue Count : 2
Assign partition 1191 from client 11 to 9
9 => after replyFromServer: 50
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 51 with id = 1081 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1216 currentId 1081
Added AND Nodes: 1215 1216
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 3
Assign partition 1146 from client 2 to 3
3 => after replyFromServer: 100
2 => callsites count before spliiting 50 with id = 1185 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1221 currentId 1185
Added AND Nodes: 1220 1221
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 3
Assign partition 1161 from client 2 to 1
1 => after replyFromServer: 100
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 1196 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1226 currentId 1196
Added AND Nodes: 1225 1226
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1226 from client 4 to 6
6 => after replyFromServer: 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 68 with id = 1136 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1231 currentId 1136
Added AND Nodes: 1230 1231
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 1231 from client 10 to 8
8 => after replyFromServer: 50
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 2
Assign partition 1186 from client 2 to 3
3 => after replyFromServer: 100
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
0 => callsites count before spliiting 53 with id = 1215 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1236 currentId 1215
Added AND Nodes: 1235 1236
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 98 with id = 1230 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1241 currentId 1230
Added AND Nodes: 1240 1241
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 1241 from client 10 to 11
11 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 176 with id = 1091 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1246 currentId 1091
Added AND Nodes: 1245 1246
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1246 from client 5 to 4
4 => after replyFromServer: 0
2 => callsites count before spliiting 52 with id = 1220 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1251 currentId 1220
Added AND Nodes: 1250 1251
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 2
Assign partition 1216 from client 0 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 2
Assign partition 1221 from client 2 to 3
3 => after replyFromServer: 100
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => callsites count before spliiting 51 with id = 1235 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1256 currentId 1235
Added AND Nodes: 1255 1256
2 => callsites count before spliiting 50 with id = 1250 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1261 currentId 1250
Added AND Nodes: 1260 1261
5 => Spliiting due to client waiting
5 => callsites count before spliiting 180 with id = 1245 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1266 currentId 1245
Added AND Nodes: 1265 1266
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1266 from client 5 to 6
6 => after replyFromServer: 0
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
2 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 2
Assign partition 1236 from client 0 to 3
3 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 163 with id = 1240 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1271 currentId 1240
Added AND Nodes: 1270 1271
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 1271 from client 10 to 11
11 => after replyFromServer: 50
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1256 from client 0 to 2
2 => after replyFromServer: 100
0 => callsites count before spliiting 52 with id = 1255 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1276 currentId 1255
Added AND Nodes: 1275 1276
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1276 from client 0 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => callsites count before spliiting 37 with id = 1275 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1281 currentId 1275
Added AND Nodes: 1280 1281
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1281 from client 0 to 2
2 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 3 with id = 1266 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1286 currentId 1266
Added AND Nodes: 1285 1286
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1286 from client 6 to 5
5 => after replyFromServer: 0
1 => callsites count before spliiting 52 with id = 1216 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1291 currentId 1216
Added AND Nodes: 1290 1291
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
0 => callsites count before spliiting 50 with id = 1280 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1296 currentId 1280
Added AND Nodes: 1295 1296
8 => callsites count before spliiting 58 with id = 1231 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1301 currentId 1231
Added AND Nodes: 1300 1301
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1301 from client 8 to 11
11 => after replyFromServer: 50
10 => callsites count before spliiting 203 with id = 1270 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1306 currentId 1270
Added AND Nodes: 1305 1306
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1296 from client 0 to 3
3 => after replyFromServer: 100
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 1306 from client 10 to 9
9 => after replyFromServer: 50
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1291 from client 1 to 2
2 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => callsites count before spliiting 55 with id = 1211 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1311 currentId 1211
Added AND Nodes: 1310 1311
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1311 from client 7 to 6
6 => after replyFromServer: 0
10 => callsites count before spliiting 219 with id = 1305 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1316 currentId 1305
Added AND Nodes: 1315 1316
1 => callsites count before spliiting 50 with id = 1290 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1321 currentId 1290
Added AND Nodes: 1320 1321
0 => callsites count before spliiting 52 with id = 1295 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1326 currentId 1295
Added AND Nodes: 1325 1326
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1326 from client 0 to 3
3 => after replyFromServer: 100
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
4 => Spliiting due to client waiting
4 => callsites count before spliiting 57 with id = 1246 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1331 currentId 1246
Added AND Nodes: 1330 1331
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1331 from client 4 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
1 => callsites count before spliiting 51 with id = 1320 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1336 currentId 1320
Added AND Nodes: 1335 1336
0 => callsites count before spliiting 50 with id = 1325 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1341 currentId 1325
Added AND Nodes: 1340 1341
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
6 => Spliiting due to client waiting
9 => callsites count before spliiting 14 with id = 1306 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1346 currentId 1306
Added AND Nodes: 1345 1346
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1346 from client 9 to 10
10 => after replyFromServer: 50
6 => callsites count before spliiting 4 with id = 1311 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1351 currentId 1311
Added AND Nodes: 1350 1351
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1351 from client 6 to 5
5 => after replyFromServer: 0
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 2
Assign partition 1321 from client 1 to 0
0 => after replyFromServer: 100
1 => callsites count before spliiting 53 with id = 1335 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1356 currentId 1335
Added AND Nodes: 1355 1356
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 2
Assign partition 1336 from client 1 to 3
3 => after replyFromServer: 100
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 7 with id = 1331 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1361 currentId 1331
Added AND Nodes: 1360 1361
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1361 from client 7 to 4
4 => after replyFromServer: 0
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1356 from client 1 to 0
0 => after replyFromServer: 100
2 => callsites count before spliiting 51 with id = 1291 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1366 currentId 1291
Added AND Nodes: 1365 1366
1 => callsites count before spliiting 51 with id = 1355 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1371 currentId 1355
Added AND Nodes: 1370 1371
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1371 from client 1 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1366 from client 2 to 0
0 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
2 => callsites count before spliiting 53 with id = 1365 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1376 currentId 1365
Added AND Nodes: 1375 1376
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 147 with id = 1300 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1381 currentId 1300
Added AND Nodes: 1380 1381
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1381 from client 8 to 10
10 => after replyFromServer: 50
1 => callsites count before spliiting 52 with id = 1370 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1386 currentId 1370
Added AND Nodes: 1385 1386
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1386 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1376 from client 2 to 1
1 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 117 with id = 1301 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1391 currentId 1301
Added AND Nodes: 1390 1391
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1391 from client 11 to 9
9 => after replyFromServer: 50
2 => callsites count before spliiting 51 with id = 1375 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1396 currentId 1375
Added AND Nodes: 1395 1396
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 120 with id = 1390 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1401 currentId 1390
Added AND Nodes: 1400 1401
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1401 from client 11 to 8
8 => after replyFromServer: 50
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1396 from client 2 to 1
1 => after replyFromServer: 100
2 => callsites count before spliiting 52 with id = 1395 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1406 currentId 1395
Added AND Nodes: 1405 1406
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1406 from client 2 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
11 => Spliiting due to client waiting
2 => Spliiting due to client waiting
11 => callsites count before spliiting 140 with id = 1400 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1411 currentId 1400
Added AND Nodes: 1410 1411
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1411 from client 11 to 10
10 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 45 with id = 1366 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1416 currentId 1366
Added AND Nodes: 1415 1416
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1416 from client 0 to 1
1 => after replyFromServer: 100
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => callsites count before spliiting 52 with id = 1415 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1421 currentId 1415
Added AND Nodes: 1420 1421
4 => Spliiting due to client waiting
4 => callsites count before spliiting 30 with id = 1361 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1426 currentId 1361
Added AND Nodes: 1425 1426
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1426 from client 4 to 5
5 => after replyFromServer: 0
2 => callsites count before spliiting 50 with id = 1405 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1431 currentId 1405
Added AND Nodes: 1430 1431
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1421 from client 0 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 46 with id = 1420 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1436 currentId 1420
Added AND Nodes: 1435 1436
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1436 from client 0 to 3
3 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 33 with id = 1425 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1441 currentId 1425
Added AND Nodes: 1440 1441
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1441 from client 4 to 6
6 => after replyFromServer: 0
0 => callsites count before spliiting 50 with id = 1435 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1446 currentId 1435
Added AND Nodes: 1445 1446
9 => Spliiting due to client waiting
9 => callsites count before spliiting 32 with id = 1391 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1451 currentId 1391
Added AND Nodes: 1450 1451
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1451 from client 9 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 50 with id = 1450 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1456 currentId 1450
Added AND Nodes: 1455 1456
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1456 from client 9 to 11
11 => after replyFromServer: 50
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1446 from client 0 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
0 => callsites count before spliiting 51 with id = 1445 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1461 currentId 1445
Added AND Nodes: 1460 1461
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1461 from client 0 to 3
3 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
1 => callsites count before spliiting 51 with id = 1416 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1466 currentId 1416
Added AND Nodes: 1465 1466
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1466 from client 1 to 2
2 => after replyFromServer: 100
0 => callsites count before spliiting 57 with id = 1460 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1471 currentId 1460
Added AND Nodes: 1470 1471
0 => LOOP outcome: Correct & reachbound = True
11 => Spliiting due to client waiting
11 => callsites count before spliiting 35 with id = 1456 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1476 currentId 1456
Added AND Nodes: 1475 1476
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1476 from client 11 to 10
10 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 1451 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1481 currentId 1451
Added AND Nodes: 1480 1481
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1481 from client 8 to 9
9 => after replyFromServer: 50
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 42 with id = 1465 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1486 currentId 1465
Added AND Nodes: 1485 1486
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1486 from client 1 to 0
0 => after replyFromServer: 100
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 11 with id = 1441 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1491 currentId 1441
Added AND Nodes: 1490 1491
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1491 from client 6 to 7
7 => after replyFromServer: 0
1 => callsites count before spliiting 53 with id = 1485 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1496 currentId 1485
Added AND Nodes: 1495 1496
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1496 from client 1 to 3
3 => after replyFromServer: 100
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
4 => callsites count before spliiting 48 with id = 1440 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1501 currentId 1440
Added AND Nodes: 1500 1501
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1501 from client 4 to 6
6 => after replyFromServer: 0
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 47 with id = 1495 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1506 currentId 1495
Added AND Nodes: 1505 1506
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1506 from client 1 to 0
0 => after replyFromServer: 100
1 => callsites count before spliiting 51 with id = 1505 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1511 currentId 1505
Added AND Nodes: 1510 1511
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
1 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 34 with id = 1466 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1516 currentId 1466
Added AND Nodes: 1515 1516
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1516 from client 2 to 3
3 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 17 with id = 1426 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1521 currentId 1426
Added AND Nodes: 1520 1521
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1521 from client 5 to 4
4 => after replyFromServer: 0
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 37 with id = 1515 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1526 currentId 1515
Added AND Nodes: 1525 1526
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1526 from client 2 to 1
1 => after replyFromServer: 100
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 1481 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1531 currentId 1481
Added AND Nodes: 1530 1531
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1531 from client 9 to 11
11 => after replyFromServer: 50
2 => callsites count before spliiting 52 with id = 1525 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1536 currentId 1525
Added AND Nodes: 1535 1536
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1536 from client 2 to 0
0 => after replyFromServer: 100
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 36 with id = 1535 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1541 currentId 1535
Added AND Nodes: 1540 1541
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1541 from client 2 to 1
1 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1521 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1546 currentId 1521
Added AND Nodes: 1545 1546
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1546 from client 4 to 6
6 => after replyFromServer: 0
2 => callsites count before spliiting 50 with id = 1540 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1551 currentId 1540
Added AND Nodes: 1550 1551
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 7 with id = 1516 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1556 currentId 1516
Added AND Nodes: 1555 1556
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 1556 from client 3 to 2
2 => after replyFromServer: 100
6 => LOOP outcome: Correct & reachbound = False

LOCATION - 0: 11
removing 6
removing 21
removing 41
removing 91
removing 116
removing 160
removing 166
removing 196
removing 216
removing 271
removing 371
removing 431
removing 521
removing 581
removing 696
removing 711
removing 756
removing 821
removing 941
removing 1021
removing 1081
removing 1216
removing 1291
removing 1366
removing 1416
removing 1466
removing 1515
removing 1525
removing 1535
removing 1541
removing 1536
removing 1516
removing 1555
removing 1556
removing 16
removing 31
removing 46
removing 56
removing 81
removing 101
removing 106
removing 111
removing 120
removing 156
removing 171
removing 181
removing 211
removing 276
removing 356
removing 406
removing 446
removing 476
removing 551
removing 641
removing 731
removing 831
removing 946
removing 1036
removing 1136
removing 1231
removing 1301
removing 1391
removing 1451
removing 1481
removing 1531
Added New : 
6 : 1,0,3,2
Reached root of partition tree. Verfification Finished.
Reached root bestAlgo updated to 1
Verification Outcome : OK
Time Taken : 937.879297
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--phy--spi_ks8995.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
for clientid : 2 algo id is 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 9 algo id is 2
for clientid : 8 algo id is 2
for clientid : 10 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 9
9 => after replyFromServer: 50
Algo : 2 started with splitmode 50
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
0 => callsites count before spliiting 5 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 16 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 31 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 31 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 8 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 41 currentId 26
6 => Spliiting due to client waiting
Added AND Nodes: 40 41
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 41 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
for clientid : 1 algo id is 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 36
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 31 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 51 currentId 31
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 50 51
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 51 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 11 with id = 55 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 61 currentId 55
Added AND Nodes: 60 61
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 61 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
3 => Spliiting due to client waiting
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
5 => callsites count before spliiting 3 with id = 61 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
5 => sending calltree : splitMode 0 mustReachId 76 currentId 61
Added AND Nodes: 75 76
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 76 from client 5 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
3 => callsites count before spliiting 9 with id = 41 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 81 currentId 41
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 86 currentId 71
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
Added AND Nodes: 80 81
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 81 from client 3 to 2
2 => after replyFromServer: 100
5 => Spliiting due to client waiting
3 => LOOP outcome: Correct & reachbound = False
6 => Spliiting due to client waiting
3 => outcome: Correct
for clientid : 3 algo id is 0
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 76
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 15 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
10 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
10 => callsites count before spliiting 9 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 101 currentId 51
5 => callsites count before spliiting 50 with id = 75 and splitMode 0
4 => Spliiting due to client waiting
5 => sending calltree : splitMode 0 mustReachId 106 currentId 75
7 => Spliiting due to client waiting
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 6
6 => after replyFromServer: 0
Added AND Nodes: 100 101
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 101 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 101 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 111 currentId 101
Added AND Nodes: 110 111
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 111 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 3 with id = 81 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 116 currentId 81
Added AND Nodes: 115 116
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 116 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 111 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 121 currentId 111
Added AND Nodes: 120 121
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 121 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 5 with id = 121 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 126 from client 8 to 10
10 => after replyFromServer: 50
8 => Spliiting due to client waiting
4 => callsites count before spliiting 209 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 131 currentId 96
Added AND Nodes: 130 131
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 116 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 136 currentId 116
Added AND Nodes: 135 136
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 136 from client 0 to 1
1 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 12 with id = 125 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 141 currentId 125
Added AND Nodes: 140 141
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 141 from client 8 to 11
11 => after replyFromServer: 50
7 => callsites count before spliiting 207 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 146 currentId 91
Added AND Nodes: 145 146
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 11 with id = 135 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 151 currentId 135
Added AND Nodes: 150 151
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 151 from client 0 to 3
3 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 7 with id = 126 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 156 currentId 126
Added AND Nodes: 155 156
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 156 from client 10 to 9
9 => after replyFromServer: 50
5 => callsites count before spliiting 207 with id = 105 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 161 currentId 105
Added AND Nodes: 160 161
6 => callsites count before spliiting 204 with id = 106 and splitMode 0
5 => LOOP outcome: Correct & reachbound = False
6 => sending calltree : splitMode 0 mustReachId 166 currentId 106
Added New : 
5 : 
Added AND Nodes: 165 166
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => Spliiting due to client waiting
1 => callsites count before spliiting 13 with id = 136 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 171 currentId 136
Added AND Nodes: 170 171
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 171 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 15 with id = 150 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 176 currentId 150
Added AND Nodes: 175 176
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 176 from client 0 to 1
1 => after replyFromServer: 100
0 => callsites count before spliiting 61 with id = 175 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 181 currentId 175
Added AND Nodes: 180 181
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 64 with id = 176 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 186 currentId 176
Added AND Nodes: 185 186
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 64 with id = 151 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 191 currentId 151
Added AND Nodes: 190 191
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 51 with id = 171 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 196 currentId 171
Added AND Nodes: 195 196
4 => callsites count before spliiting 334 with id = 131 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 201 currentId 131
Added AND Nodes: 200 201
7 => callsites count before spliiting 303 with id = 146 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 206 currentId 146
Added AND Nodes: 205 206
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 303 with id = 166 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 211 currentId 166
Added AND Nodes: 210 211
5 => callsites count before spliiting 346 with id = 161 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 216 currentId 161
Added AND Nodes: 215 216
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 201 with id = 141 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 221 currentId 141
Added AND Nodes: 220 221
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
8 => callsites count before spliiting 214 with id = 140 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 226 currentId 140
Added AND Nodes: 225 226
10 => callsites count before spliiting 206 with id = 155 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 231 currentId 155
Added AND Nodes: 230 231
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 141 with id = 181 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 236 currentId 181
Added AND Nodes: 235 236
9 => callsites count before spliiting 201 with id = 156 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 241 currentId 156
Added AND Nodes: 240 241
1 => callsites count before spliiting 117 with id = 186 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 246 currentId 186
Added AND Nodes: 245 246
3 => callsites count before spliiting 117 with id = 191 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 251 currentId 191
Added AND Nodes: 250 251
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 102 with id = 195 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 256 currentId 195
Added AND Nodes: 255 256
2 => LOOP outcome: Correct & reachbound = False
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 201 with id = 206 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 261 currentId 206
Added AND Nodes: 260 261
0 => callsites count before spliiting 191 with id = 235 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 266 currentId 235
Added AND Nodes: 265 266
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 330 with id = 230 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 271 currentId 230
Added AND Nodes: 270 271
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 115 with id = 246 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 276 currentId 246
3 => callsites count before spliiting 115 with id = 251 and splitMode 100
Added AND Nodes: 275 276
3 => sending calltree : splitMode 100 mustReachId 281 currentId 251
Added AND Nodes: 280 281
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 383 with id = 240 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 286 currentId 240
Added AND Nodes: 285 286
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 211 with id = 221 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 291 currentId 221
Added AND Nodes: 290 291
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 121 with id = 256 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 296 currentId 256
Added AND Nodes: 295 296
2 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 202 with id = 226 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 301 currentId 226
Added AND Nodes: 300 301
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 227 with id = 211 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 306 currentId 211
Added AND Nodes: 305 306
5 => callsites count before spliiting 203 with id = 216 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 311 currentId 216
Added AND Nodes: 310 311
4 => callsites count before spliiting 207 with id = 201 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 316 currentId 201
Added AND Nodes: 315 316
0 => callsites count before spliiting 123 with id = 266 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 321 currentId 266
Added AND Nodes: 320 321
1 => callsites count before spliiting 98 with id = 276 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 326 currentId 276
3 => callsites count before spliiting 98 with id = 281 and splitMode 100
Added AND Nodes: 325 326
3 => sending calltree : splitMode 100 mustReachId 331 currentId 281
Added AND Nodes: 330 331
10 => callsites count before spliiting 204 with id = 271 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 336 currentId 271
Added AND Nodes: 335 336
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 105 with id = 296 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 341 currentId 296
Added AND Nodes: 340 341
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 59 with id = 321 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 346 currentId 321
Added AND Nodes: 345 346
9 => callsites count before spliiting 210 with id = 286 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 351 currentId 286
Added AND Nodes: 350 351
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 60 with id = 331 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 356 currentId 331
Added AND Nodes: 355 356
1 => callsites count before spliiting 60 with id = 326 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 361 currentId 326
Added AND Nodes: 360 361
8 => callsites count before spliiting 206 with id = 301 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 366 currentId 301
Added AND Nodes: 365 366
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 56 with id = 341 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 371 currentId 341
Added AND Nodes: 370 371
11 => callsites count before spliiting 212 with id = 291 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 376 currentId 291
Added AND Nodes: 375 376
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 100 with id = 345 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 381 currentId 345
Added AND Nodes: 380 381
3 => callsites count before spliiting 101 with id = 355 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 386 currentId 355
Added AND Nodes: 385 386
1 => callsites count before spliiting 101 with id = 360 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 391 currentId 360
Added AND Nodes: 390 391
10 => callsites count before spliiting 202 with id = 336 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 396 currentId 336
Added AND Nodes: 395 396
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 96 with id = 370 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 401 currentId 370
Added AND Nodes: 400 401
7 => callsites count before spliiting 217 with id = 261 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 406 currentId 261
Added AND Nodes: 405 406
0 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 111 with id = 390 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 411 currentId 390
Added AND Nodes: 410 411
9 => callsites count before spliiting 206 with id = 351 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 416 currentId 351
Added AND Nodes: 415 416
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => callsites count before spliiting 222 with id = 311 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 421 currentId 311
Added AND Nodes: 420 421
0 => callsites count before spliiting 58 with id = 381 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 426 currentId 381
Added AND Nodes: 425 426
2 => callsites count before spliiting 106 with id = 400 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 431 currentId 400
Added AND Nodes: 430 431
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 65 with id = 386 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 436 currentId 386
Added AND Nodes: 435 436
1 => callsites count before spliiting 80 with id = 391 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 441 currentId 391
Added AND Nodes: 440 441
0 => callsites count before spliiting 99 with id = 425 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 446 currentId 425
Added AND Nodes: 445 446
2 => callsites count before spliiting 78 with id = 401 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 451 currentId 401
Added AND Nodes: 450 451
6 => callsites count before spliiting 228 with id = 306 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 456 currentId 306
Added AND Nodes: 455 456
8 => callsites count before spliiting 211 with id = 366 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 461 currentId 366
Added AND Nodes: 460 461
3 => callsites count before spliiting 75 with id = 435 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 466 currentId 435
Added AND Nodes: 465 466
1 => callsites count before spliiting 90 with id = 440 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 471 currentId 440
Added AND Nodes: 470 471
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 109 with id = 445 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 476 currentId 445
Added AND Nodes: 475 476
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 116 with id = 450 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 481 currentId 450
Added AND Nodes: 480 481
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 204 with id = 376 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 486 currentId 376
Added AND Nodes: 485 486
1 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 203 with id = 316 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 491 currentId 316
Added AND Nodes: 490 491
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 50 with id = 436 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 496 currentId 436
Added AND Nodes: 495 496
10 => callsites count before spliiting 205 with id = 396 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 501 currentId 396
Added AND Nodes: 500 501
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 200 with id = 416 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 506 currentId 416
Added AND Nodes: 505 506
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 115 with id = 480 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 511 currentId 480
Added AND Nodes: 510 511
1 => callsites count before spliiting 56 with id = 441 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 516 currentId 441
Added AND Nodes: 515 516
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
0 => callsites count before spliiting 65 with id = 446 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 521 currentId 446
Added AND Nodes: 520 521
3 => callsites count before spliiting 67 with id = 495 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 526 currentId 495
Added AND Nodes: 525 526
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => callsites count before spliiting 85 with id = 515 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 531 currentId 515
Added AND Nodes: 530 531
0 => callsites count before spliiting 106 with id = 520 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 536 currentId 520
Added AND Nodes: 535 536
3 => callsites count before spliiting 66 with id = 525 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 541 currentId 525
Added AND Nodes: 540 541
2 => callsites count before spliiting 59 with id = 481 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 546 currentId 481
Added AND Nodes: 545 546
8 => callsites count before spliiting 221 with id = 461 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 551 currentId 461
Added AND Nodes: 550 551
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 95 with id = 530 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 556 currentId 530
Added AND Nodes: 555 556
0 => callsites count before spliiting 116 with id = 535 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 561 currentId 535
Added AND Nodes: 560 561
3 => callsites count before spliiting 76 with id = 540 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 566 currentId 540
Added AND Nodes: 565 566
2 => callsites count before spliiting 58 with id = 545 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 571 currentId 545
Added AND Nodes: 570 571
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 94 with id = 555 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 576 currentId 555
Added AND Nodes: 575 576
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 115 with id = 560 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 581 currentId 560
Added AND Nodes: 580 581
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 218 with id = 486 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 586 currentId 486
Added AND Nodes: 585 586
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 204 with id = 421 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 591 currentId 421
Added AND Nodes: 590 591
2 => callsites count before spliiting 64 with id = 570 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 596 currentId 570
Added AND Nodes: 595 596
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 65 with id = 526 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 601 currentId 526
Added AND Nodes: 600 601
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 58 with id = 531 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 606 currentId 531
Added AND Nodes: 605 606
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 59 with id = 536 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 611 currentId 536
Added AND Nodes: 610 611
9 => callsites count before spliiting 222 with id = 506 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 616 currentId 506
Added AND Nodes: 615 616
11 => callsites count before spliiting 258 with id = 585 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 621 currentId 585
Added AND Nodes: 620 621
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 203 with id = 501 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 626 currentId 501
Added AND Nodes: 625 626
3 => callsites count before spliiting 86 with id = 600 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 631 currentId 600
Added AND Nodes: 630 631
7 => callsites count before spliiting 207 with id = 406 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 636 currentId 406
Added AND Nodes: 635 636
1 => callsites count before spliiting 88 with id = 605 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 641 currentId 605
Added AND Nodes: 640 641
0 => callsites count before spliiting 58 with id = 610 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 646 currentId 610
Added AND Nodes: 645 646
9 => callsites count before spliiting 242 with id = 615 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 651 currentId 615
Added AND Nodes: 650 651
2 => callsites count before spliiting 64 with id = 546 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 656 currentId 546
Added AND Nodes: 655 656
11 => callsites count before spliiting 286 with id = 620 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 661 currentId 620
Added AND Nodes: 660 661
10 => callsites count before spliiting 246 with id = 625 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 666 currentId 625
Added AND Nodes: 665 666
3 => callsites count before spliiting 85 with id = 630 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 671 currentId 630
Added AND Nodes: 670 671
1 => callsites count before spliiting 87 with id = 640 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 676 currentId 640
Added AND Nodes: 675 676
9 => callsites count before spliiting 268 with id = 650 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 681 currentId 650
Added AND Nodes: 680 681
0 => callsites count before spliiting 64 with id = 645 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 686 currentId 645
Added AND Nodes: 685 686
2 => callsites count before spliiting 85 with id = 655 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 691 currentId 655
Added AND Nodes: 690 691
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => callsites count before spliiting 323 with id = 660 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 696 currentId 660
Added AND Nodes: 695 696
3 => callsites count before spliiting 91 with id = 670 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 701 currentId 670
Added AND Nodes: 700 701
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
4 => callsites count before spliiting 200 with id = 490 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 706 currentId 490
Added AND Nodes: 705 706
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 93 with id = 675 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 711 currentId 675
Added AND Nodes: 710 711
6 => callsites count before spliiting 207 with id = 456 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 716 currentId 456
Added AND Nodes: 715 716
2 => callsites count before spliiting 84 with id = 690 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 721 currentId 690
Added AND Nodes: 720 721
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 58 with id = 611 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 726 currentId 611
Added AND Nodes: 725 726
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 208 with id = 551 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 731 currentId 551
Added AND Nodes: 730 731
3 => LOOP outcome: Correct & reachbound = False
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => callsites count before spliiting 88 with id = 710 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 736 currentId 710
Added AND Nodes: 735 736
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 79 with id = 720 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 741 currentId 720
Added AND Nodes: 740 741
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 70 with id = 631 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 746 currentId 631
Added AND Nodes: 745 746
0 => callsites count before spliiting 88 with id = 725 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 751 currentId 725
Added AND Nodes: 750 751
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 254 with id = 730 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 756 currentId 730
Added AND Nodes: 755 756
2 => callsites count before spliiting 94 with id = 740 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 761 currentId 740
Added AND Nodes: 760 761
2 => LOOP outcome: Correct & reachbound = False
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 56 with id = 641 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 766 currentId 641
Added AND Nodes: 765 766
3 => callsites count before spliiting 87 with id = 745 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 771 currentId 745
Added AND Nodes: 770 771
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 87 with id = 750 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 776 currentId 750
Added AND Nodes: 775 776
10 => callsites count before spliiting 200 with id = 626 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 781 currentId 626
Added AND Nodes: 780 781
1 => callsites count before spliiting 51 with id = 765 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 786 currentId 765
Added AND Nodes: 785 786
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 56 with id = 741 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 791 currentId 741
Added AND Nodes: 790 791
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 82 with id = 770 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 796 currentId 770
Added AND Nodes: 795 796
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 93 with id = 775 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 801 currentId 775
Added AND Nodes: 800 801
10 => callsites count before spliiting 225 with id = 780 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 806 currentId 780
Added AND Nodes: 805 806
1 => callsites count before spliiting 50 with id = 785 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 811 currentId 785
Added AND Nodes: 810 811
6 => callsites count before spliiting 221 with id = 715 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 816 currentId 715
Added AND Nodes: 815 816
2 => callsites count before spliiting 69 with id = 691 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 821 currentId 691
Added AND Nodes: 820 821
3 => callsites count before spliiting 77 with id = 795 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 826 currentId 795
Added AND Nodes: 825 826
0 => callsites count before spliiting 88 with id = 800 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 831 currentId 800
Added AND Nodes: 830 831
4 => callsites count before spliiting 205 with id = 491 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 836 currentId 491
Added AND Nodes: 835 836
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 249 with id = 805 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 841 currentId 805
Added AND Nodes: 840 841
1 => callsites count before spliiting 56 with id = 810 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 846 currentId 810
Added AND Nodes: 845 846
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 74 with id = 820 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 851 currentId 820
Added AND Nodes: 850 851
3 => callsites count before spliiting 72 with id = 825 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 856 currentId 825
Added AND Nodes: 855 856
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 56 with id = 751 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 861 currentId 751
Added AND Nodes: 860 861
10 => callsites count before spliiting 277 with id = 840 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 866 currentId 840
Added AND Nodes: 865 866
3 => callsites count before spliiting 67 with id = 855 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 871 currentId 855
Added AND Nodes: 870 871
2 => callsites count before spliiting 69 with id = 850 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 876 currentId 850
Added AND Nodes: 875 876
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 83 with id = 860 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 881 currentId 860
Added AND Nodes: 880 881
10 => callsites count before spliiting 297 with id = 865 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 886 currentId 865
Added AND Nodes: 885 886
2 => callsites count before spliiting 64 with id = 875 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 891 currentId 875
Added AND Nodes: 890 891
5 => callsites count before spliiting 212 with id = 591 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 896 currentId 591
Added AND Nodes: 895 896
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 70 with id = 766 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 901 currentId 766
Added AND Nodes: 900 901
3 => callsites count before spliiting 65 with id = 771 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 906 currentId 771
Added AND Nodes: 905 906
0 => callsites count before spliiting 78 with id = 880 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 911 currentId 880
Added AND Nodes: 910 911
2 => callsites count before spliiting 68 with id = 890 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 916 currentId 890
Added AND Nodes: 915 916
9 => callsites count before spliiting 225 with id = 616 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 921 currentId 616
Added AND Nodes: 920 921
1 => callsites count before spliiting 76 with id = 900 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 926 currentId 900
Added AND Nodes: 925 926
3 => callsites count before spliiting 64 with id = 905 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 931 currentId 905
Added AND Nodes: 930 931
0 => callsites count before spliiting 73 with id = 910 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 936 currentId 910
Added AND Nodes: 935 936
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 63 with id = 915 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 941 currentId 915
Added AND Nodes: 940 941
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 209 with id = 835 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 946 currentId 835
Added AND Nodes: 945 946
9 => callsites count before spliiting 236 with id = 920 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 951 currentId 920
Added AND Nodes: 950 951
1 => callsites count before spliiting 71 with id = 925 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 956 currentId 925
Added AND Nodes: 955 956
7 => callsites count before spliiting 205 with id = 636 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 961 currentId 636
Added AND Nodes: 960 961
3 => callsites count before spliiting 59 with id = 930 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 966 currentId 930
Added AND Nodes: 965 966
0 => callsites count before spliiting 68 with id = 935 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 971 currentId 935
Added AND Nodes: 970 971
2 => callsites count before spliiting 60 with id = 891 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 976 currentId 891
Added AND Nodes: 975 976
1 => callsites count before spliiting 66 with id = 955 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 981 currentId 955
Added AND Nodes: 980 981
9 => callsites count before spliiting 261 with id = 950 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 986 currentId 950
Added AND Nodes: 985 986
3 => callsites count before spliiting 54 with id = 965 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 991 currentId 965
Added AND Nodes: 990 991
0 => callsites count before spliiting 63 with id = 970 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 996 currentId 970
Added AND Nodes: 995 996
11 => callsites count before spliiting 209 with id = 586 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1001 currentId 586
Added AND Nodes: 1000 1001
2 => LOOP outcome: Correct & reachbound = False
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 61 with id = 980 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1006 currentId 980
Added AND Nodes: 1005 1006
9 => callsites count before spliiting 288 with id = 985 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1011 currentId 985
Added AND Nodes: 1010 1011
2 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 60 with id = 990 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1016 currentId 990
Added AND Nodes: 1015 1016
11 => callsites count before spliiting 251 with id = 1000 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1021 currentId 1000
Added AND Nodes: 1020 1021
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 56 with id = 1005 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1026 currentId 1005
Added AND Nodes: 1025 1026
6 => callsites count before spliiting 200 with id = 815 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1031 currentId 815
Added AND Nodes: 1030 1031
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 56 with id = 851 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1036 currentId 851
Added AND Nodes: 1035 1036
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 269 with id = 1020 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1041 currentId 1020
Added AND Nodes: 1040 1041
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
0 => callsites count before spliiting 60 with id = 881 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1046 currentId 881
Added AND Nodes: 1045 1046
2 => callsites count before spliiting 92 with id = 1035 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1051 currentId 1035
Added AND Nodes: 1050 1051
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 204 with id = 756 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1056 currentId 756
Added AND Nodes: 1055 1056
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 288 with id = 1040 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1061 currentId 1040
Added AND Nodes: 1060 1061
3 => callsites count before spliiting 50 with id = 906 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1066 currentId 906
Added AND Nodes: 1065 1066
0 => callsites count before spliiting 75 with id = 1045 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1071 currentId 1045
Added AND Nodes: 1070 1071
2 => callsites count before spliiting 87 with id = 1050 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1076 currentId 1050
Added AND Nodes: 1075 1076
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 323 with id = 1060 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1081 currentId 1060
Added AND Nodes: 1080 1081
3 => callsites count before spliiting 56 with id = 1065 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1086 currentId 1065
Added AND Nodes: 1085 1086
0 => callsites count before spliiting 84 with id = 1070 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1091 currentId 1070
Added AND Nodes: 1090 1091
2 => callsites count before spliiting 82 with id = 1075 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1096 currentId 1075
Added AND Nodes: 1095 1096
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
5 => callsites count before spliiting 203 with id = 895 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1101 currentId 895
Added AND Nodes: 1100 1101
1 => callsites count before spliiting 56 with id = 926 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1106 currentId 926
Added AND Nodes: 1105 1106
3 => callsites count before spliiting 51 with id = 1085 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1111 currentId 1085
Added AND Nodes: 1110 1111
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
0 => callsites count before spliiting 79 with id = 1090 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1116 currentId 1090
Added AND Nodes: 1115 1116
2 => callsites count before spliiting 77 with id = 1095 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1121 currentId 1095
Added AND Nodes: 1120 1121
1 => callsites count before spliiting 83 with id = 1105 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1126 currentId 1105
Added AND Nodes: 1125 1126
10 => callsites count before spliiting 202 with id = 781 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1131 currentId 781
Added AND Nodes: 1130 1131
3 => callsites count before spliiting 50 with id = 1110 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1136 currentId 1110
Added AND Nodes: 1135 1136
2 => callsites count before spliiting 72 with id = 1120 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1141 currentId 1120
Added AND Nodes: 1140 1141
0 => callsites count before spliiting 74 with id = 1115 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1146 currentId 1115
Added AND Nodes: 1145 1146
1 => callsites count before spliiting 78 with id = 1125 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1151 currentId 1125
Added AND Nodes: 1150 1151
7 => callsites count before spliiting 200 with id = 960 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1156 currentId 960
Added AND Nodes: 1155 1156
10 => callsites count before spliiting 258 with id = 1130 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1161 currentId 1130
Added AND Nodes: 1160 1161
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 58 with id = 1145 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1166 currentId 1145
Added AND Nodes: 1165 1166
2 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 62 with id = 1150 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1171 currentId 1150
Added AND Nodes: 1170 1171
3 => callsites count before spliiting 56 with id = 1135 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1176 currentId 1135
Added AND Nodes: 1175 1176
6 => callsites count before spliiting 219 with id = 816 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1181 currentId 816
Added AND Nodes: 1180 1181
10 => callsites count before spliiting 309 with id = 1160 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1186 currentId 1160
Added AND Nodes: 1185 1186
0 => callsites count before spliiting 53 with id = 1165 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1191 currentId 1165
Added AND Nodes: 1190 1191
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 57 with id = 1170 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1196 currentId 1170
Added AND Nodes: 1195 1196
3 => callsites count before spliiting 51 with id = 1175 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1201 currentId 1175
Added AND Nodes: 1200 1201
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 334 with id = 1185 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1206 currentId 1185
Added AND Nodes: 1205 1206
2 => callsites count before spliiting 60 with id = 1051 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1211 currentId 1051
Added AND Nodes: 1210 1211
0 => callsites count before spliiting 59 with id = 1190 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1216 currentId 1190
Added AND Nodes: 1215 1216
1 => callsites count before spliiting 52 with id = 1195 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1221 currentId 1195
Added AND Nodes: 1220 1221
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 365 with id = 1205 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1226 currentId 1205
Added AND Nodes: 1225 1226
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 75 with id = 1210 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1231 currentId 1210
Added AND Nodes: 1230 1231
4 => callsites count before spliiting 230 with id = 946 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1236 currentId 946
Added AND Nodes: 1235 1236
1 => callsites count before spliiting 58 with id = 1220 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1241 currentId 1220
Added AND Nodes: 1240 1241
0 => callsites count before spliiting 58 with id = 1091 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1246 currentId 1091
Added AND Nodes: 1245 1246
10 => callsites count before spliiting 383 with id = 1225 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1251 currentId 1225
Added AND Nodes: 1250 1251
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 70 with id = 1230 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1256 currentId 1230
Added AND Nodes: 1255 1256
3 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 73 with id = 1245 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1261 currentId 1245
Added AND Nodes: 1260 1261
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 409 with id = 1250 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1266 currentId 1250
Added AND Nodes: 1265 1266
2 => callsites count before spliiting 65 with id = 1255 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1271 currentId 1255
Added AND Nodes: 1270 1271
3 => callsites count before spliiting 56 with id = 1086 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1276 currentId 1086
Added AND Nodes: 1275 1276
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => callsites count before spliiting 68 with id = 1260 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1281 currentId 1260
Added AND Nodes: 1280 1281
2 => callsites count before spliiting 60 with id = 1270 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1286 currentId 1270
Added AND Nodes: 1285 1286
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 83 with id = 1275 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1291 currentId 1275
Added AND Nodes: 1290 1291
0 => callsites count before spliiting 63 with id = 1280 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1296 currentId 1280
Added AND Nodes: 1295 1296
2 => callsites count before spliiting 55 with id = 1285 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1301 currentId 1285
Added AND Nodes: 1300 1301
1 => callsites count before spliiting 60 with id = 1126 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1306 currentId 1126
Added AND Nodes: 1305 1306
3 => callsites count before spliiting 78 with id = 1290 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1311 currentId 1290
Added AND Nodes: 1310 1311
9 => callsites count before spliiting 219 with id = 921 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1316 currentId 921
Added AND Nodes: 1315 1316
5 => callsites count before spliiting 219 with id = 896 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1321 currentId 896
Added AND Nodes: 1320 1321
11 => callsites count before spliiting 207 with id = 1021 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1326 currentId 1021
Added AND Nodes: 1325 1326
0 => callsites count before spliiting 58 with id = 1295 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1331 currentId 1295
Added AND Nodes: 1330 1331
2 => callsites count before spliiting 50 with id = 1300 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1336 currentId 1300
Added AND Nodes: 1335 1336
3 => callsites count before spliiting 62 with id = 1310 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1341 currentId 1310
Added AND Nodes: 1340 1341
1 => callsites count before spliiting 75 with id = 1305 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1346 currentId 1305
Added AND Nodes: 1345 1346
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 263 with id = 1315 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1351 currentId 1315
Added AND Nodes: 1350 1351
7 => callsites count before spliiting 222 with id = 961 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1356 currentId 961
Added AND Nodes: 1355 1356
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 53 with id = 1330 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1361 currentId 1330
Added AND Nodes: 1360 1361
3 => callsites count before spliiting 57 with id = 1340 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1366 currentId 1340
1 => callsites count before spliiting 70 with id = 1345 and splitMode 100
Added AND Nodes: 1365 1366
1 => sending calltree : splitMode 100 mustReachId 1371 currentId 1345
Added AND Nodes: 1370 1371
11 => callsites count before spliiting 259 with id = 1325 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1376 currentId 1325
Added AND Nodes: 1375 1376
8 => callsites count before spliiting 206 with id = 1056 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1381 currentId 1056
Added AND Nodes: 1380 1381
6 => callsites count before spliiting 201 with id = 1180 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1386 currentId 1180
Added AND Nodes: 1385 1386
9 => callsites count before spliiting 292 with id = 1350 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1391 currentId 1350
1 => callsites count before spliiting 54 with id = 1370 and splitMode 100
Added AND Nodes: 1390 1391
1 => sending calltree : splitMode 100 mustReachId 1396 currentId 1370
Added AND Nodes: 1395 1396
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 52 with id = 1365 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1401 currentId 1365
Added AND Nodes: 1400 1401
11 => callsites count before spliiting 281 with id = 1375 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1406 currentId 1375
Added AND Nodes: 1405 1406
0 => callsites count before spliiting 52 with id = 1360 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1411 currentId 1360
Added AND Nodes: 1410 1411
8 => callsites count before spliiting 211 with id = 1380 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1416 currentId 1380
Added AND Nodes: 1415 1416
2 => callsites count before spliiting 50 with id = 1231 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1421 currentId 1231
Added AND Nodes: 1420 1421
4 => callsites count before spliiting 203 with id = 1235 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1426 currentId 1235
Added AND Nodes: 1425 1426
1 => callsites count before spliiting 60 with id = 1395 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1431 currentId 1395
Added AND Nodes: 1430 1431
9 => callsites count before spliiting 311 with id = 1390 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1436 currentId 1390
Added AND Nodes: 1435 1436
0 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 293 with id = 1405 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1441 currentId 1405
Added AND Nodes: 1440 1441
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 58 with id = 1400 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1446 currentId 1400
Added AND Nodes: 1445 1446
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => callsites count before spliiting 56 with id = 1420 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1451 currentId 1420
Added AND Nodes: 1450 1451
8 => callsites count before spliiting 225 with id = 1415 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1456 currentId 1415
Added AND Nodes: 1455 1456
1 => callsites count before spliiting 55 with id = 1430 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1461 currentId 1430
Added AND Nodes: 1460 1461
0 => callsites count before spliiting 50 with id = 1261 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1466 currentId 1261
Added AND Nodes: 1465 1466
11 => callsites count before spliiting 320 with id = 1440 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1471 currentId 1440
Added AND Nodes: 1470 1471
3 => callsites count before spliiting 53 with id = 1445 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1476 currentId 1445
Added AND Nodes: 1475 1476
2 => callsites count before spliiting 51 with id = 1450 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1481 currentId 1450
Added AND Nodes: 1480 1481
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 235 with id = 1455 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1486 currentId 1455
Added AND Nodes: 1485 1486
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 50 with id = 1460 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1491 currentId 1460
Added AND Nodes: 1490 1491
10 => callsites count before spliiting 227 with id = 1186 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1496 currentId 1186
0 => callsites count before spliiting 56 with id = 1465 and splitMode 100
Added AND Nodes: 1495 1496
0 => sending calltree : splitMode 100 mustReachId 1501 currentId 1465
11 => callsites count before spliiting 336 with id = 1470 and splitMode 50
Added AND Nodes: 1500 1501
11 => sending calltree : splitMode 50 mustReachId 1506 currentId 1470
Added AND Nodes: 1505 1506
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 50 with id = 1480 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1511 currentId 1480
Added AND Nodes: 1510 1511
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
8 => callsites count before spliiting 254 with id = 1485 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1516 currentId 1485
Added AND Nodes: 1515 1516
0 => callsites count before spliiting 51 with id = 1500 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1521 currentId 1500
Added AND Nodes: 1520 1521
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 260 with id = 1495 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1526 currentId 1495
Added AND Nodes: 1525 1526
2 => callsites count before spliiting 56 with id = 1510 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1531 currentId 1510
Added AND Nodes: 1530 1531
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 50 with id = 1520 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1536 currentId 1520
Added AND Nodes: 1535 1536
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
10 => callsites count before spliiting 284 with id = 1525 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1541 currentId 1525
Added AND Nodes: 1540 1541
3 => callsites count before spliiting 60 with id = 1291 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1546 currentId 1291
Added AND Nodes: 1545 1546
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 200 with id = 1355 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1551 currentId 1355
Added AND Nodes: 1550 1551
2 => callsites count before spliiting 51 with id = 1530 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1556 currentId 1530
Added AND Nodes: 1555 1556
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 202 with id = 1320 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1561 currentId 1320
Added AND Nodes: 1560 1561
1 => callsites count before spliiting 50 with id = 1346 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1566 currentId 1346
Added AND Nodes: 1565 1566
0 => callsites count before spliiting 56 with id = 1535 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1571 currentId 1535
Added AND Nodes: 1570 1571
3 => callsites count before spliiting 75 with id = 1545 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1576 currentId 1545
Added AND Nodes: 1575 1576
10 => callsites count before spliiting 316 with id = 1540 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1581 currentId 1540
Added AND Nodes: 1580 1581
2 => callsites count before spliiting 50 with id = 1555 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1586 currentId 1555
Added AND Nodes: 1585 1586
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 59 with id = 1575 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1591 currentId 1575
2 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 1590 1591
1 => callsites count before spliiting 56 with id = 1565 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1596 currentId 1565
Added AND Nodes: 1595 1596
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 51 with id = 1570 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1601 currentId 1570
Added AND Nodes: 1600 1601
10 => callsites count before spliiting 338 with id = 1580 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1606 currentId 1580
Added AND Nodes: 1605 1606
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 50 with id = 1590 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1611 currentId 1590
Added AND Nodes: 1610 1611
1 => callsites count before spliiting 51 with id = 1595 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1616 currentId 1595
Added AND Nodes: 1615 1616
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 365 with id = 1605 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1621 currentId 1605
Added AND Nodes: 1620 1621
0 => callsites count before spliiting 50 with id = 1600 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1626 currentId 1600
Added AND Nodes: 1625 1626
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 56 with id = 1451 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1631 currentId 1451
Added AND Nodes: 1630 1631
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 50 with id = 1615 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1636 currentId 1615
Added AND Nodes: 1635 1636
3 => callsites count before spliiting 60 with id = 1610 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1641 currentId 1610
Added AND Nodes: 1640 1641
0 => callsites count before spliiting 56 with id = 1625 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1646 currentId 1625
Added AND Nodes: 1645 1646
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 51 with id = 1630 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1651 currentId 1630
Added AND Nodes: 1650 1651
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 55 with id = 1640 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1656 currentId 1640
Added AND Nodes: 1655 1656
1 => callsites count before spliiting 56 with id = 1635 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1661 currentId 1635
Added AND Nodes: 1660 1661
6 => callsites count before spliiting 232 with id = 1181 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1666 currentId 1181
Added AND Nodes: 1665 1666
0 => callsites count before spliiting 53 with id = 1521 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1671 currentId 1521
Added AND Nodes: 1670 1671
2 => callsites count before spliiting 50 with id = 1650 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1676 currentId 1650
Added AND Nodes: 1675 1676
3 => callsites count before spliiting 50 with id = 1655 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1681 currentId 1655
Added AND Nodes: 1680 1681
4 => callsites count before spliiting 231 with id = 1236 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1686 currentId 1236
Added AND Nodes: 1685 1686
1 => callsites count before spliiting 51 with id = 1660 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1691 currentId 1660
Added AND Nodes: 1690 1691
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => callsites count before spliiting 208 with id = 1376 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1696 currentId 1376
Added AND Nodes: 1695 1696
2 => callsites count before spliiting 56 with id = 1675 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1701 currentId 1675
Added AND Nodes: 1700 1701
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 60 with id = 1680 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1706 currentId 1680
Added AND Nodes: 1705 1706
1 => callsites count before spliiting 50 with id = 1690 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1711 currentId 1690
Added AND Nodes: 1710 1711
11 => callsites count before spliiting 218 with id = 1695 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1716 currentId 1695
Added AND Nodes: 1715 1716
2 => callsites count before spliiting 51 with id = 1700 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1721 currentId 1700
Added AND Nodes: 1720 1721
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 52 with id = 1501 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1726 currentId 1501
Added AND Nodes: 1725 1726
11 => callsites count before spliiting 226 with id = 1715 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1731 currentId 1715
Added AND Nodes: 1730 1731
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => callsites count before spliiting 56 with id = 1710 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1736 currentId 1710
Added AND Nodes: 1735 1736
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 50 with id = 1720 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1741 currentId 1720
Added AND Nodes: 1740 1741
0 => callsites count before spliiting 72 with id = 1725 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1746 currentId 1725
Added AND Nodes: 1745 1746
11 => callsites count before spliiting 235 with id = 1730 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1751 currentId 1730
Added AND Nodes: 1750 1751
1 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 211 with id = 1351 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1756 currentId 1351
Added AND Nodes: 1755 1756
0 => callsites count before spliiting 52 with id = 1745 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1761 currentId 1745
Added AND Nodes: 1760 1761
11 => callsites count before spliiting 252 with id = 1750 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1766 currentId 1750
Added AND Nodes: 1765 1766
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 56 with id = 1740 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1771 currentId 1740
Added AND Nodes: 1770 1771
7 => callsites count before spliiting 202 with id = 1356 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1776 currentId 1356
Added AND Nodes: 1775 1776
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 215 with id = 1526 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1781 currentId 1526
Added AND Nodes: 1780 1781
3 => callsites count before spliiting 50 with id = 1576 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1786 currentId 1576
Added AND Nodes: 1785 1786
2 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 266 with id = 1765 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1791 currentId 1765
Added AND Nodes: 1790 1791
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 222 with id = 1755 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1796 currentId 1755
Added AND Nodes: 1795 1796
0 => callsites count before spliiting 51 with id = 1760 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1801 currentId 1760
Added AND Nodes: 1800 1801
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 228 with id = 1780 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1806 currentId 1780
Added AND Nodes: 1805 1806
1 => callsites count before spliiting 56 with id = 1596 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1811 currentId 1596
Added AND Nodes: 1810 1811
3 => callsites count before spliiting 56 with id = 1785 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1816 currentId 1785
Added AND Nodes: 1815 1816
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 235 with id = 1795 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1821 currentId 1795
Added AND Nodes: 1820 1821
0 => callsites count before spliiting 57 with id = 1800 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1826 currentId 1800
Added AND Nodes: 1825 1826
2 => callsites count before spliiting 70 with id = 1631 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1831 currentId 1631
Added AND Nodes: 1830 1831
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 51 with id = 1810 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1836 currentId 1810
Added AND Nodes: 1835 1836
3 => callsites count before spliiting 51 with id = 1815 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1841 currentId 1815
Added AND Nodes: 1840 1841
10 => callsites count before spliiting 237 with id = 1805 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1846 currentId 1805
Added AND Nodes: 1845 1846
9 => callsites count before spliiting 253 with id = 1820 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1851 currentId 1820
Added AND Nodes: 1850 1851
6 => callsites count before spliiting 201 with id = 1665 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1856 currentId 1665
Added AND Nodes: 1855 1856
2 => callsites count before spliiting 54 with id = 1830 and splitMode 100
0 => callsites count before spliiting 52 with id = 1825 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1861 currentId 1825
2 => sending calltree : splitMode 100 mustReachId 1866 currentId 1830
Added AND Nodes: 1865 1866
Added AND Nodes: 1860 1861
4 => callsites count before spliiting 203 with id = 1685 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1871 currentId 1685
Added AND Nodes: 1870 1871
10 => callsites count before spliiting 247 with id = 1845 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1876 currentId 1845
Added AND Nodes: 1875 1876
9 => callsites count before spliiting 270 with id = 1850 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1881 currentId 1850
Added AND Nodes: 1880 1881
1 => callsites count before spliiting 50 with id = 1835 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1886 currentId 1835
Added AND Nodes: 1885 1886
3 => callsites count before spliiting 50 with id = 1840 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1891 currentId 1840
Added AND Nodes: 1890 1891
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
5 => callsites count before spliiting 204 with id = 1321 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1896 currentId 1321
Added AND Nodes: 1895 1896
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 60 with id = 1865 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1901 currentId 1865
Added AND Nodes: 1900 1901
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 51 with id = 1860 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1906 currentId 1860
Added AND Nodes: 1905 1906
10 => callsites count before spliiting 267 with id = 1875 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1911 currentId 1875
Added AND Nodes: 1910 1911
3 => callsites count before spliiting 56 with id = 1890 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1916 currentId 1890
Added AND Nodes: 1915 1916
9 => callsites count before spliiting 297 with id = 1880 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1921 currentId 1880
Added AND Nodes: 1920 1921
1 => callsites count before spliiting 56 with id = 1885 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1926 currentId 1885
Added AND Nodes: 1925 1926
10 => callsites count before spliiting 279 with id = 1910 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1931 currentId 1910
Added AND Nodes: 1930 1931
2 => callsites count before spliiting 55 with id = 1900 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1936 currentId 1900
Added AND Nodes: 1935 1936
0 => callsites count before spliiting 57 with id = 1905 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1941 currentId 1905
Added AND Nodes: 1940 1941
9 => callsites count before spliiting 308 with id = 1920 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1946 currentId 1920
3 => callsites count before spliiting 51 with id = 1915 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1951 currentId 1915
Added AND Nodes: 1945 1946
Added AND Nodes: 1950 1951
1 => callsites count before spliiting 51 with id = 1925 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1956 currentId 1925
Added AND Nodes: 1955 1956
10 => callsites count before spliiting 283 with id = 1930 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1961 currentId 1930
Added AND Nodes: 1960 1961
2 => callsites count before spliiting 50 with id = 1935 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1966 currentId 1935
Added AND Nodes: 1965 1966
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
0 => callsites count before spliiting 52 with id = 1940 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1971 currentId 1940
Added AND Nodes: 1970 1971
10 => callsites count before spliiting 296 with id = 1960 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1976 currentId 1960
Added AND Nodes: 1975 1976
3 => callsites count before spliiting 50 with id = 1950 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1981 currentId 1950
Added AND Nodes: 1980 1981
1 => callsites count before spliiting 50 with id = 1955 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1986 currentId 1955
Added AND Nodes: 1985 1986
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 60 with id = 1965 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1991 currentId 1965
Added AND Nodes: 1990 1991
0 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => callsites count before spliiting 315 with id = 1975 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1996 currentId 1975
Added AND Nodes: 1995 1996
3 => callsites count before spliiting 56 with id = 1980 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2001 currentId 1980
Added AND Nodes: 2000 2001
7 => callsites count before spliiting 202 with id = 1775 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2006 currentId 1775
Added AND Nodes: 2005 2006
1 => callsites count before spliiting 56 with id = 1985 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2011 currentId 1985
Added AND Nodes: 2010 2011
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => callsites count before spliiting 55 with id = 1990 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2016 currentId 1990
Added AND Nodes: 2015 2016
0 => callsites count before spliiting 53 with id = 1801 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2021 currentId 1801
Added AND Nodes: 2020 2021
10 => callsites count before spliiting 340 with id = 1995 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2026 currentId 1995
Added AND Nodes: 2025 2026
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => LOOP outcome: Correct & reachbound = False
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 50 with id = 2015 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2031 currentId 2015
Added AND Nodes: 2030 2031
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 60 with id = 1761 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2036 currentId 1761
Added AND Nodes: 2035 2036
2 => LOOP outcome: Correct & reachbound = False
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 53 with id = 1836 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2041 currentId 1836
Added AND Nodes: 2040 2041
3 => callsites count before spliiting 56 with id = 1816 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2046 currentId 1816
Added AND Nodes: 2045 2046
0 => callsites count before spliiting 55 with id = 2035 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2051 currentId 2035
Added AND Nodes: 2050 2051
2 => callsites count before spliiting 50 with id = 1866 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2056 currentId 1866
Added AND Nodes: 2055 2056
3 => callsites count before spliiting 51 with id = 2045 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2061 currentId 2045
Added AND Nodes: 2060 2061
0 => callsites count before spliiting 50 with id = 2050 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2066 currentId 2050
Added AND Nodes: 2065 2066
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 214 with id = 1381 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2071 currentId 1381
Added AND Nodes: 2070 2071
5 => callsites count before spliiting 205 with id = 1895 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2076 currentId 1895
Added AND Nodes: 2075 2076
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 60 with id = 2055 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2081 currentId 2055
Added AND Nodes: 2080 2081
3 => callsites count before spliiting 50 with id = 2060 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2086 currentId 2060
Added AND Nodes: 2085 2086
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 60 with id = 2065 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2091 currentId 2065
Added AND Nodes: 2090 2091
2 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 237 with id = 2070 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2096 currentId 2070
Added AND Nodes: 2095 2096
4 => callsites count before spliiting 210 with id = 1686 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2101 currentId 1686
Added AND Nodes: 2100 2101
1 => callsites count before spliiting 70 with id = 1811 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2106 currentId 1811
Added AND Nodes: 2105 2106
3 => callsites count before spliiting 56 with id = 2085 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2111 currentId 2085
Added AND Nodes: 2110 2111
2 => LOOP outcome: Correct & reachbound = False
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 203 with id = 1696 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2116 currentId 1696
Added AND Nodes: 2115 2116
0 => callsites count before spliiting 55 with id = 2090 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2121 currentId 2090
Added AND Nodes: 2120 2121
8 => callsites count before spliiting 242 with id = 2095 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2126 currentId 2095
Added AND Nodes: 2125 2126
1 => callsites count before spliiting 61 with id = 2105 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2131 currentId 2105
Added AND Nodes: 2130 2131
3 => callsites count before spliiting 51 with id = 2110 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2136 currentId 2110
Added AND Nodes: 2135 2136
11 => callsites count before spliiting 216 with id = 2115 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2141 currentId 2115
Added AND Nodes: 2140 2141
8 => callsites count before spliiting 246 with id = 2125 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2146 currentId 2125
Added AND Nodes: 2145 2146
2 => callsites count before spliiting 53 with id = 2056 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2151 currentId 2056
Added AND Nodes: 2150 2151
0 => callsites count before spliiting 50 with id = 2120 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2156 currentId 2120
Added AND Nodes: 2155 2156
1 => callsites count before spliiting 64 with id = 2130 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2161 currentId 2130
Added AND Nodes: 2160 2161
11 => callsites count before spliiting 224 with id = 2140 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2166 currentId 2140
Added AND Nodes: 2165 2166
2 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 274 with id = 2145 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2171 currentId 2145
Added AND Nodes: 2170 2171
3 => callsites count before spliiting 50 with id = 2135 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2176 currentId 2135
Added AND Nodes: 2175 2176
11 => callsites count before spliiting 229 with id = 2165 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2181 currentId 2165
Added AND Nodes: 2180 2181
1 => callsites count before spliiting 59 with id = 2160 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2186 currentId 2160
Added AND Nodes: 2185 2186
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 60 with id = 2155 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2191 currentId 2155
Added AND Nodes: 2190 2191
6 => callsites count before spliiting 207 with id = 1666 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2196 currentId 1666
Added AND Nodes: 2195 2196
8 => callsites count before spliiting 291 with id = 2170 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2201 currentId 2170
Added AND Nodes: 2200 2201
3 => callsites count before spliiting 56 with id = 2175 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2206 currentId 2175
Added AND Nodes: 2205 2206
1 => callsites count before spliiting 54 with id = 2185 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2211 currentId 2185
Added AND Nodes: 2210 2211
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 56 with id = 1831 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2216 currentId 1831
Added AND Nodes: 2215 2216
8 => callsites count before spliiting 301 with id = 2200 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2221 currentId 2200
Added AND Nodes: 2220 2221
11 => callsites count before spliiting 248 with id = 2180 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2226 currentId 2180
Added AND Nodes: 2225 2226
0 => callsites count before spliiting 55 with id = 2190 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2231 currentId 2190
Added AND Nodes: 2230 2231
2 => callsites count before spliiting 50 with id = 2215 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2236 currentId 2215
Added AND Nodes: 2235 2236
3 => callsites count before spliiting 51 with id = 2205 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2241 currentId 2205
Added AND Nodes: 2240 2241
11 => callsites count before spliiting 268 with id = 2225 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2246 currentId 2225
Added AND Nodes: 2245 2246
8 => callsites count before spliiting 330 with id = 2220 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2251 currentId 2220
Added AND Nodes: 2250 2251
1 => callsites count before spliiting 53 with id = 2210 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2256 currentId 2210
Added AND Nodes: 2255 2256
10 => callsites count before spliiting 205 with id = 1781 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2261 currentId 1781
Added AND Nodes: 2260 2261
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 50 with id = 2230 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2266 currentId 2230
Added AND Nodes: 2265 2266
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
11 => callsites count before spliiting 287 with id = 2245 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2271 currentId 2245
Added AND Nodes: 2270 2271
0 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 60 with id = 2235 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2276 currentId 2235
Added AND Nodes: 2275 2276
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 337 with id = 2250 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2281 currentId 2250
Added AND Nodes: 2280 2281
0 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 59 with id = 2255 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2286 currentId 2255
Added AND Nodes: 2285 2286
0 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 239 with id = 2260 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2291 currentId 2260
Added AND Nodes: 2290 2291
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 55 with id = 2275 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2296 currentId 2275
Added AND Nodes: 2295 2296
11 => callsites count before spliiting 303 with id = 2270 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2301 currentId 2270
Added AND Nodes: 2300 2301
10 => callsites count before spliiting 253 with id = 2290 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2306 currentId 2290
Added AND Nodes: 2305 2306
1 => callsites count before spliiting 54 with id = 2285 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2311 currentId 2285
Added AND Nodes: 2310 2311
8 => callsites count before spliiting 351 with id = 2280 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2316 currentId 2280
Added AND Nodes: 2315 2316
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 60 with id = 2051 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2321 currentId 2051
Added AND Nodes: 2320 2321
11 => callsites count before spliiting 318 with id = 2300 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2326 currentId 2300
Added AND Nodes: 2325 2326
2 => callsites count before spliiting 50 with id = 2295 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2331 currentId 2295
Added AND Nodes: 2330 2331
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
10 => callsites count before spliiting 260 with id = 2305 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2336 currentId 2305
Added AND Nodes: 2335 2336
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 207 with id = 1776 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2341 currentId 1776
Added AND Nodes: 2340 2341
1 => callsites count before spliiting 53 with id = 2310 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2346 currentId 2310
Added AND Nodes: 2345 2346
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 53 with id = 2061 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2351 currentId 2061
Added AND Nodes: 2350 2351
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 55 with id = 2320 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2356 currentId 2320
Added AND Nodes: 2355 2356
10 => callsites count before spliiting 267 with id = 2335 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2361 currentId 2335
Added AND Nodes: 2360 2361
2 => callsites count before spliiting 60 with id = 2330 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2366 currentId 2330
Added AND Nodes: 2365 2366
4 => callsites count before spliiting 204 with id = 2100 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2371 currentId 2100
Added AND Nodes: 2370 2371
1 => callsites count before spliiting 59 with id = 2345 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2376 currentId 2345
Added AND Nodes: 2375 2376
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => callsites count before spliiting 272 with id = 2360 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2381 currentId 2360
Added AND Nodes: 2380 2381
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 50 with id = 2355 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2386 currentId 2355
Added AND Nodes: 2385 2386
2 => callsites count before spliiting 55 with id = 2365 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2391 currentId 2365
Added AND Nodes: 2390 2391
1 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 276 with id = 2380 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2396 currentId 2380
Added AND Nodes: 2395 2396
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 50 with id = 2390 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2401 currentId 2390
Added AND Nodes: 2400 2401
0 => callsites count before spliiting 60 with id = 2385 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2406 currentId 2385
Added AND Nodes: 2405 2406
10 => callsites count before spliiting 298 with id = 2395 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2411 currentId 2395
Added AND Nodes: 2410 2411
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 70 with id = 2046 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2416 currentId 2046
Added AND Nodes: 2415 2416
3 => callsites count before spliiting 57 with id = 2415 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2421 currentId 2415
Added AND Nodes: 2420 2421
2 => callsites count before spliiting 60 with id = 2400 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2426 currentId 2400
Added AND Nodes: 2425 2426
0 => callsites count before spliiting 55 with id = 2405 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2431 currentId 2405
Added AND Nodes: 2430 2431
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
6 => callsites count before spliiting 202 with id = 2195 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2436 currentId 2195
Added AND Nodes: 2435 2436
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 311 with id = 2410 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2441 currentId 2410
Added AND Nodes: 2440 2441
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
5 => callsites count before spliiting 209 with id = 1896 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2446 currentId 1896
Added AND Nodes: 2445 2446
3 => callsites count before spliiting 61 with id = 2420 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2451 currentId 2420
Added AND Nodes: 2450 2451
0 => callsites count before spliiting 50 with id = 2430 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2456 currentId 2430
Added AND Nodes: 2455 2456
1 => callsites count before spliiting 60 with id = 2161 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2461 currentId 2161
Added AND Nodes: 2460 2461
2 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 338 with id = 2440 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2466 currentId 2440
Added AND Nodes: 2465 2466
3 => callsites count before spliiting 56 with id = 2450 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2471 currentId 2450
Added AND Nodes: 2470 2471
9 => callsites count before spliiting 206 with id = 1756 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2476 currentId 1756
Added AND Nodes: 2475 2476
10 => callsites count before spliiting 355 with id = 2465 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2481 currentId 2465
Added AND Nodes: 2480 2481
1 => callsites count before spliiting 55 with id = 2460 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2486 currentId 2460
Added AND Nodes: 2485 2486
2 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 60 with id = 2455 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2491 currentId 2455
Added AND Nodes: 2490 2491
3 => callsites count before spliiting 51 with id = 2470 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2496 currentId 2470
Added AND Nodes: 2495 2496
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 238 with id = 2475 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2501 currentId 2475
Added AND Nodes: 2500 2501
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => callsites count before spliiting 371 with id = 2480 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2506 currentId 2480
Added AND Nodes: 2505 2506
2 => callsites count before spliiting 54 with id = 2276 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2511 currentId 2276
Added AND Nodes: 2510 2511
1 => callsites count before spliiting 50 with id = 2485 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2516 currentId 2485
Added AND Nodes: 2515 2516
0 => callsites count before spliiting 55 with id = 2490 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2521 currentId 2490
Added AND Nodes: 2520 2521
9 => callsites count before spliiting 247 with id = 2500 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2526 currentId 2500
Added AND Nodes: 2525 2526
3 => callsites count before spliiting 50 with id = 2495 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2531 currentId 2495
Added AND Nodes: 2530 2531
10 => callsites count before spliiting 377 with id = 2505 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2536 currentId 2505
Added AND Nodes: 2535 2536
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 259 with id = 2525 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2541 currentId 2525
Added AND Nodes: 2540 2541
10 => callsites count before spliiting 393 with id = 2535 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2546 currentId 2535
Added AND Nodes: 2545 2546
1 => callsites count before spliiting 60 with id = 2515 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2551 currentId 2515
Added AND Nodes: 2550 2551
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
7 => callsites count before spliiting 204 with id = 2340 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2556 currentId 2340
Added AND Nodes: 2555 2556
0 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 56 with id = 2530 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2561 currentId 2530
Added AND Nodes: 2560 2561
2 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 265 with id = 2540 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2566 currentId 2540
Added AND Nodes: 2565 2566
10 => callsites count before spliiting 398 with id = 2545 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2571 currentId 2545
Added AND Nodes: 2570 2571
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 55 with id = 2550 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2576 currentId 2550
Added AND Nodes: 2575 2576
9 => callsites count before spliiting 283 with id = 2565 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2581 currentId 2565
3 => callsites count before spliiting 51 with id = 2560 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2586 currentId 2560
Added AND Nodes: 2580 2581
Added AND Nodes: 2585 2586
10 => callsites count before spliiting 403 with id = 2570 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2591 currentId 2570
Added AND Nodes: 2590 2591
2 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 291 with id = 2580 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2596 currentId 2580
Added AND Nodes: 2595 2596
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 50 with id = 2575 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2601 currentId 2575
Added AND Nodes: 2600 2601
2 => callsites count before spliiting 58 with id = 2236 and splitMode 100
0 => callsites count before spliiting 60 with id = 2321 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2606 currentId 2236
0 => sending calltree : splitMode 100 mustReachId 2611 currentId 2321
Added AND Nodes: 2605 2606
Added AND Nodes: 2610 2611
3 => callsites count before spliiting 50 with id = 2585 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2616 currentId 2585
Added AND Nodes: 2615 2616
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 326 with id = 2595 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2621 currentId 2595
Added AND Nodes: 2620 2621
2 => callsites count before spliiting 69 with id = 2605 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2626 currentId 2605
Added AND Nodes: 2625 2626
1 => callsites count before spliiting 60 with id = 2600 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2631 currentId 2600
Added AND Nodes: 2630 2631
0 => callsites count before spliiting 55 with id = 2610 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2636 currentId 2610
Added AND Nodes: 2635 2636
3 => callsites count before spliiting 56 with id = 2615 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2641 currentId 2615
Added AND Nodes: 2640 2641
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 53 with id = 2625 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2646 currentId 2625
Added AND Nodes: 2645 2646
9 => callsites count before spliiting 345 with id = 2620 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2651 currentId 2620
Added AND Nodes: 2650 2651
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 55 with id = 2630 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2656 currentId 2630
Added AND Nodes: 2655 2656
0 => callsites count before spliiting 50 with id = 2635 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2661 currentId 2635
Added AND Nodes: 2660 2661
3 => callsites count before spliiting 51 with id = 2640 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2666 currentId 2640
Added AND Nodes: 2665 2666
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 359 with id = 2650 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2671 currentId 2650
Added AND Nodes: 2670 2671
5 => callsites count before spliiting 200 with id = 2445 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2676 currentId 2445
Added AND Nodes: 2675 2676
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 59 with id = 2645 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2681 currentId 2645
Added AND Nodes: 2680 2681
1 => callsites count before spliiting 50 with id = 2655 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2686 currentId 2655
Added AND Nodes: 2685 2686
3 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 370 with id = 2670 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2691 currentId 2670
Added AND Nodes: 2690 2691
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 60 with id = 2660 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2696 currentId 2660
Added AND Nodes: 2695 2696
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 54 with id = 2680 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2701 currentId 2680
Added AND Nodes: 2700 2701
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 380 with id = 2690 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2706 currentId 2690
Added AND Nodes: 2705 2706
1 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 395 with id = 2705 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2711 currentId 2705
Added AND Nodes: 2710 2711
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 55 with id = 2695 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2716 currentId 2695
Added AND Nodes: 2715 2716
11 => callsites count before spliiting 201 with id = 2116 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2721 currentId 2116
Added AND Nodes: 2720 2721
2 => callsites count before spliiting 53 with id = 2700 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2726 currentId 2700
Added AND Nodes: 2725 2726
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
0 => callsites count before spliiting 50 with id = 2715 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2731 currentId 2715
Added AND Nodes: 2730 2731
3 => LOOP outcome: Correct & reachbound = True
11 => callsites count before spliiting 218 with id = 2720 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2736 currentId 2720
Added AND Nodes: 2735 2736
2 => callsites count before spliiting 59 with id = 2725 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2741 currentId 2725
Added AND Nodes: 2740 2741
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 53 with id = 2486 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2746 currentId 2486
Added AND Nodes: 2745 2746
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => callsites count before spliiting 54 with id = 2740 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2751 currentId 2740
Added AND Nodes: 2750 2751
11 => callsites count before spliiting 231 with id = 2735 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2756 currentId 2735
Added AND Nodes: 2755 2756
3 => callsites count before spliiting 56 with id = 2451 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2761 currentId 2451
Added AND Nodes: 2760 2761
0 => callsites count before spliiting 60 with id = 2730 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2766 currentId 2730
Added AND Nodes: 2765 2766
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 53 with id = 2750 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2771 currentId 2750
Added AND Nodes: 2770 2771
0 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 51 with id = 2760 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2776 currentId 2760
Added AND Nodes: 2775 2776
11 => callsites count before spliiting 250 with id = 2755 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2781 currentId 2755
Added AND Nodes: 2780 2781
4 => callsites count before spliiting 216 with id = 2101 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2786 currentId 2101
Added AND Nodes: 2785 2786
6 => callsites count before spliiting 221 with id = 2196 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2791 currentId 2196
Added AND Nodes: 2790 2791
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
11 => callsites count before spliiting 269 with id = 2780 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2796 currentId 2780
Added AND Nodes: 2795 2796
1 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 59 with id = 2770 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2801 currentId 2770
Added AND Nodes: 2800 2801
3 => callsites count before spliiting 50 with id = 2775 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2806 currentId 2775
Added AND Nodes: 2805 2806
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
11 => callsites count before spliiting 279 with id = 2795 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2811 currentId 2795
Added AND Nodes: 2810 2811
1 => callsites count before spliiting 54 with id = 2461 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2816 currentId 2461
Added AND Nodes: 2815 2816
3 => callsites count before spliiting 56 with id = 2805 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2821 currentId 2805
Added AND Nodes: 2820 2821
0 => callsites count before spliiting 60 with id = 2611 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2826 currentId 2611
Added AND Nodes: 2825 2826
11 => callsites count before spliiting 285 with id = 2810 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2831 currentId 2810
Added AND Nodes: 2830 2831
2 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 53 with id = 2815 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2836 currentId 2815
Added AND Nodes: 2835 2836
3 => callsites count before spliiting 51 with id = 2820 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2841 currentId 2820
Added AND Nodes: 2840 2841
11 => callsites count before spliiting 301 with id = 2830 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2846 currentId 2830
Added AND Nodes: 2845 2846
0 => callsites count before spliiting 55 with id = 2825 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2851 currentId 2825
Added AND Nodes: 2850 2851
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => callsites count before spliiting 320 with id = 2845 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2856 currentId 2845
Added AND Nodes: 2855 2856
3 => callsites count before spliiting 50 with id = 2840 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2861 currentId 2840
Added AND Nodes: 2860 2861
1 => callsites count before spliiting 52 with id = 2835 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2866 currentId 2835
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
Added AND Nodes: 2865 2866
2 => callsites count before spliiting 50 with id = 2646 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2871 currentId 2646
Added AND Nodes: 2870 2871
0 => callsites count before spliiting 50 with id = 2850 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2876 currentId 2850
Added AND Nodes: 2875 2876
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 332 with id = 2855 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2881 currentId 2855
Added AND Nodes: 2880 2881
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 58 with id = 2865 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2886 currentId 2865
Added AND Nodes: 2885 2886
3 => callsites count before spliiting 56 with id = 2860 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2891 currentId 2860
Added AND Nodes: 2890 2891
0 => callsites count before spliiting 60 with id = 2875 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2896 currentId 2875
Added AND Nodes: 2895 2896
2 => callsites count before spliiting 60 with id = 2870 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2901 currentId 2870
Added AND Nodes: 2900 2901
11 => callsites count before spliiting 340 with id = 2880 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2906 currentId 2880
Added AND Nodes: 2905 2906
1 => callsites count before spliiting 53 with id = 2885 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2911 currentId 2885
Added AND Nodes: 2910 2911
3 => callsites count before spliiting 51 with id = 2890 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2916 currentId 2890
Added AND Nodes: 2915 2916
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 55 with id = 2895 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2921 currentId 2895
Added AND Nodes: 2920 2921
2 => LOOP outcome: Correct & reachbound = True
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 352 with id = 2905 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2926 currentId 2905
Added AND Nodes: 2925 2926
1 => callsites count before spliiting 52 with id = 2910 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2931 currentId 2910
Added AND Nodes: 2930 2931
11 => callsites count before spliiting 360 with id = 2925 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2936 currentId 2925
Added AND Nodes: 2935 2936
3 => callsites count before spliiting 50 with id = 2915 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2941 currentId 2915
Added AND Nodes: 2940 2941
2 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 50 with id = 2920 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2946 currentId 2920
Added AND Nodes: 2945 2946
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
11 => callsites count before spliiting 376 with id = 2935 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2951 currentId 2935
Added AND Nodes: 2950 2951
3 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 58 with id = 2930 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2956 currentId 2930
Added AND Nodes: 2955 2956
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 50 with id = 2626 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2961 currentId 2626
Added AND Nodes: 2960 2961
0 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => LOOP outcome: Correct & reachbound = True
6 => callsites count before spliiting 200 with id = 2790 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2966 currentId 2790
Added AND Nodes: 2965 2966
1 => callsites count before spliiting 53 with id = 2955 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2971 currentId 2955
Added AND Nodes: 2970 2971
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 202 with id = 2785 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2976 currentId 2785
Added AND Nodes: 2975 2976
2 => callsites count before spliiting 60 with id = 2960 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2981 currentId 2960
Added AND Nodes: 2980 2981
0 => callsites count before spliiting 60 with id = 2826 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2986 currentId 2826
Added AND Nodes: 2985 2986
3 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 52 with id = 2970 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2991 currentId 2970
Added AND Nodes: 2990 2991
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 55 with id = 2980 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2996 currentId 2980
Added AND Nodes: 2995 2996
0 => callsites count before spliiting 55 with id = 2985 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3001 currentId 2985
Added AND Nodes: 3000 3001
3 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 58 with id = 2990 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3006 currentId 2990
Added AND Nodes: 3005 3006
2 => callsites count before spliiting 50 with id = 2995 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3011 currentId 2995
Added AND Nodes: 3010 3011
3 => callsites count before spliiting 53 with id = 2776 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3016 currentId 2776
Added AND Nodes: 3015 3016
0 => callsites count before spliiting 50 with id = 3000 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3021 currentId 3000
Added AND Nodes: 3020 3021
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 60 with id = 3010 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3026 currentId 3010
Added AND Nodes: 3025 3026
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 60 with id = 3020 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3031 currentId 3020
Added AND Nodes: 3030 3031
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 55 with id = 3025 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3036 currentId 3025
Added AND Nodes: 3035 3036
1 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => callsites count before spliiting 231 with id = 2446 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3041 currentId 2446
Added AND Nodes: 3040 3041
0 => callsites count before spliiting 55 with id = 3030 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3046 currentId 3030
Added AND Nodes: 3045 3046
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 50 with id = 3035 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3051 currentId 3035
Added AND Nodes: 3050 3051
10 => callsites count before spliiting 205 with id = 2291 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3056 currentId 2291
Added AND Nodes: 3055 3056
8 => callsites count before spliiting 204 with id = 2071 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3061 currentId 2071
Added AND Nodes: 3060 3061
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 216 with id = 3055 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3066 currentId 3055
Added AND Nodes: 3065 3066
0 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 241 with id = 3060 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3071 currentId 3060
Added AND Nodes: 3070 3071
2 => callsites count before spliiting 60 with id = 3050 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3076 currentId 3050
Added AND Nodes: 3075 3076
3 => callsites count before spliiting 60 with id = 2761 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3081 currentId 2761
Added AND Nodes: 3080 3081
1 => callsites count before spliiting 53 with id = 2866 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3086 currentId 2866
Added AND Nodes: 3085 3086
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => callsites count before spliiting 222 with id = 3065 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3091 currentId 3065
Added AND Nodes: 3090 3091
2 => callsites count before spliiting 55 with id = 3075 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3096 currentId 3075
Added AND Nodes: 3095 3096
8 => callsites count before spliiting 245 with id = 3070 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3101 currentId 3070
Added AND Nodes: 3100 3101
3 => callsites count before spliiting 55 with id = 3080 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3106 currentId 3080
Added AND Nodes: 3105 3106
10 => callsites count before spliiting 228 with id = 3090 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3111 currentId 3090
Added AND Nodes: 3110 3111
0 => callsites count before spliiting 60 with id = 2986 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3116 currentId 2986
Added AND Nodes: 3115 3116
8 => callsites count before spliiting 256 with id = 3100 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3121 currentId 3100
Added AND Nodes: 3120 3121
10 => callsites count before spliiting 233 with id = 3110 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3126 currentId 3110
Added AND Nodes: 3125 3126
2 => callsites count before spliiting 50 with id = 3095 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3131 currentId 3095
Added AND Nodes: 3130 3131
1 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 50 with id = 3105 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3136 currentId 3105
Added AND Nodes: 3135 3136
0 => callsites count before spliiting 55 with id = 3115 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3141 currentId 3115
Added AND Nodes: 3140 3141
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => callsites count before spliiting 237 with id = 3125 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3146 currentId 3125
Added AND Nodes: 3145 3146
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 268 with id = 3120 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3151 currentId 3120
Added AND Nodes: 3150 3151
2 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 60 with id = 3135 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3156 currentId 3135
Added AND Nodes: 3155 3156
10 => callsites count before spliiting 247 with id = 3145 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3161 currentId 3145
Added AND Nodes: 3160 3161
0 => callsites count before spliiting 50 with id = 3140 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3166 currentId 3140
Added AND Nodes: 3165 3166
8 => callsites count before spliiting 281 with id = 3150 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3171 currentId 3150
Added AND Nodes: 3170 3171
1 => callsites count before spliiting 56 with id = 2836 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3176 currentId 2836
Added AND Nodes: 3175 3176
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 55 with id = 3155 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3181 currentId 3155
Added AND Nodes: 3180 3181
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => callsites count before spliiting 273 with id = 3160 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3186 currentId 3160
Added AND Nodes: 3185 3186
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 311 with id = 3170 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3191 currentId 3170
Added AND Nodes: 3190 3191
0 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 51 with id = 3175 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3196 currentId 3175
Added AND Nodes: 3195 3196
10 => callsites count before spliiting 288 with id = 3185 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3201 currentId 3185
Added AND Nodes: 3200 3201
3 => callsites count before spliiting 50 with id = 3180 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3206 currentId 3180
Added AND Nodes: 3205 3206
8 => callsites count before spliiting 321 with id = 3190 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3211 currentId 3190
Added AND Nodes: 3210 3211
0 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 304 with id = 3200 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3216 currentId 3200
Added AND Nodes: 3215 3216
2 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 202 with id = 2501 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3221 currentId 2501
Added AND Nodes: 3220 3221
1 => callsites count before spliiting 50 with id = 3195 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3226 currentId 3195
Added AND Nodes: 3225 3226
8 => callsites count before spliiting 331 with id = 3210 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3231 currentId 3210
Added AND Nodes: 3230 3231
3 => callsites count before spliiting 60 with id = 3205 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3236 currentId 3205
Added AND Nodes: 3235 3236
0 => callsites count before spliiting 53 with id = 2036 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3241 currentId 2036
Added AND Nodes: 3240 3241
10 => callsites count before spliiting 326 with id = 3215 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3246 currentId 3215
Added AND Nodes: 3245 3246
2 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 349 with id = 3230 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3251 currentId 3230
Added AND Nodes: 3250 3251
7 => callsites count before spliiting 216 with id = 2341 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 3256 currentId 2341
Added AND Nodes: 3255 3256
9 => callsites count before spliiting 207 with id = 3220 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3261 currentId 3220
Added AND Nodes: 3260 3261
1 => callsites count before spliiting 56 with id = 3225 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3266 currentId 3225
Added AND Nodes: 3265 3266
2 => LOOP outcome: Correct & reachbound = True
5 => callsites count before spliiting 206 with id = 3040 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3271 currentId 3040
Added AND Nodes: 3270 3271
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 55 with id = 3235 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3276 currentId 3235
Added AND Nodes: 3275 3276
10 => callsites count before spliiting 339 with id = 3245 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3281 currentId 3245
Added AND Nodes: 3280 3281
8 => callsites count before spliiting 363 with id = 3250 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3286 currentId 3250
Added AND Nodes: 3285 3286
0 => callsites count before spliiting 52 with id = 3240 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3291 currentId 3240
Added AND Nodes: 3290 3291
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 54 with id = 3011 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3296 currentId 3011
Added AND Nodes: 3295 3296
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 51 with id = 3265 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3301 currentId 3265
Added AND Nodes: 3300 3301
3 => callsites count before spliiting 50 with id = 3275 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3306 currentId 3275
Added AND Nodes: 3305 3306
2 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 378 with id = 3285 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3311 currentId 3285
Added AND Nodes: 3310 3311
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 248 with id = 3260 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3316 currentId 3260
8 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 3315 3316
Added New : 
8 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 58 with id = 3290 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3321 currentId 3290
2 => LOOP outcome: Correct & reachbound = True
Added AND Nodes: 3320 3321
1 => callsites count before spliiting 50 with id = 3300 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3326 currentId 3300
Added AND Nodes: 3325 3326
2 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 60 with id = 3305 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3331 currentId 3305
Added AND Nodes: 3330 3331
9 => callsites count before spliiting 258 with id = 3315 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3336 currentId 3315
Added AND Nodes: 3335 3336
3 => LOOP outcome: Correct & reachbound = True
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => LOOP outcome: Correct & reachbound = True
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 56 with id = 3325 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3341 currentId 3325
Added AND Nodes: 3340 3341
3 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 264 with id = 3335 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3346 currentId 3335
Added AND Nodes: 3345 3346
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 60 with id = 2981 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3351 currentId 2981
Added AND Nodes: 3350 3351
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 272 with id = 3345 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3356 currentId 3345
Added AND Nodes: 3355 3356
1 => callsites count before spliiting 51 with id = 3340 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3361 currentId 3340
Added AND Nodes: 3360 3361
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 55 with id = 3350 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3366 currentId 3350
Added AND Nodes: 3365 3366
9 => callsites count before spliiting 284 with id = 3355 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3371 currentId 3355
Added AND Nodes: 3370 3371
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 50 with id = 3360 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3376 currentId 3360
2 => callsites count before spliiting 50 with id = 3365 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3381 currentId 3365
Added AND Nodes: 3375 3376
Added AND Nodes: 3380 3381
0 => callsites count before spliiting 60 with id = 3241 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3386 currentId 3241
Added AND Nodes: 3385 3386
3 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 290 with id = 3370 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3391 currentId 3370
Added AND Nodes: 3390 3391
3 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 224 with id = 2786 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 3396 currentId 2786
Added AND Nodes: 3395 3396
1 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => callsites count before spliiting 55 with id = 3385 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3401 currentId 3385
Added AND Nodes: 3400 3401
2 => callsites count before spliiting 60 with id = 3380 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3406 currentId 3380
Added AND Nodes: 3405 3406
9 => callsites count before spliiting 313 with id = 3390 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3411 currentId 3390
Added AND Nodes: 3410 3411
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
7 => callsites count before spliiting 207 with id = 3255 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 3416 currentId 3255
Added AND Nodes: 3415 3416
1 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 60 with id = 3106 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3421 currentId 3106
Added AND Nodes: 3420 3421
2 => callsites count before spliiting 55 with id = 3405 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3426 currentId 3405
Added AND Nodes: 3425 3426
0 => callsites count before spliiting 50 with id = 3400 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3431 currentId 3400
Added AND Nodes: 3430 3431
9 => callsites count before spliiting 333 with id = 3410 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3436 currentId 3410
Added AND Nodes: 3435 3436
1 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 55 with id = 3420 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3441 currentId 3420
Added AND Nodes: 3440 3441
2 => callsites count before spliiting 50 with id = 3425 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3446 currentId 3425
Added AND Nodes: 3445 3446
6 => callsites count before spliiting 221 with id = 2791 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 3451 currentId 2791
Added AND Nodes: 3450 3451
9 => callsites count before spliiting 344 with id = 3435 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3456 currentId 3435
Added AND Nodes: 3455 3456
0 => callsites count before spliiting 60 with id = 3430 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3461 currentId 3430
Added AND Nodes: 3460 3461
3 => callsites count before spliiting 50 with id = 3440 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3466 currentId 3440
Added AND Nodes: 3465 3466
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 358 with id = 3455 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3471 currentId 3455
Added AND Nodes: 3470 3471
0 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 60 with id = 3445 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3476 currentId 3445
0 => LOOP outcome: Correct & reachbound = True
Added AND Nodes: 3475 3476
0 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 364 with id = 3470 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3481 currentId 3470
Added AND Nodes: 3480 3481
3 => callsites count before spliiting 60 with id = 3465 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3486 currentId 3465
Added AND Nodes: 3485 3486
2 => callsites count before spliiting 55 with id = 3475 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3491 currentId 3475
Added AND Nodes: 3490 3491
9 => callsites count before spliiting 374 with id = 3480 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3496 currentId 3480
Added AND Nodes: 3495 3496
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 60 with id = 3386 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3501 currentId 3386
Added AND Nodes: 3500 3501
3 => callsites count before spliiting 55 with id = 3485 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3506 currentId 3485
Added AND Nodes: 3505 3506
2 => callsites count before spliiting 50 with id = 3490 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3511 currentId 3490
Added AND Nodes: 3510 3511
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 53 with id = 3196 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3516 currentId 3196
Added AND Nodes: 3515 3516
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 50 with id = 3505 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3521 currentId 3505
Added AND Nodes: 3520 3521
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 55 with id = 3500 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3526 currentId 3500
Added AND Nodes: 3525 3526
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => callsites count before spliiting 60 with id = 3510 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3531 currentId 3510
Added AND Nodes: 3530 3531
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 60 with id = 3520 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3536 currentId 3520
Added AND Nodes: 3535 3536
0 => callsites count before spliiting 50 with id = 3525 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3541 currentId 3525
Added AND Nodes: 3540 3541
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 55 with id = 3535 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3546 currentId 3535
Added AND Nodes: 3545 3546
4 => callsites count before spliiting 200 with id = 3395 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 3551 currentId 3395
Added AND Nodes: 3550 3551
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 60 with id = 3501 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3556 currentId 3501
Added AND Nodes: 3555 3556
3 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 60 with id = 3176 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3561 currentId 3176
Added AND Nodes: 3560 3561
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 55 with id = 3560 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3566 currentId 3560
Added AND Nodes: 3565 3566
2 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 210 with id = 3056 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3571 currentId 3056
Added AND Nodes: 3570 3571
3 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
6 => callsites count before spliiting 201 with id = 3450 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 3576 currentId 3450
Added AND Nodes: 3575 3576
1 => callsites count before spliiting 50 with id = 3565 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3581 currentId 3565
Added AND Nodes: 3580 3581
0 => callsites count before spliiting 57 with id = 1726 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3586 currentId 1726
Added AND Nodes: 3585 3586
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 60 with id = 3366 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3591 currentId 3366
Added AND Nodes: 3590 3591
10 => callsites count before spliiting 239 with id = 3570 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3596 currentId 3570
Added AND Nodes: 3595 3596
1 => callsites count before spliiting 60 with id = 3580 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3601 currentId 3580
Added AND Nodes: 3600 3601
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => callsites count before spliiting 245 with id = 3595 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3606 currentId 3595
Added AND Nodes: 3605 3606
0 => callsites count before spliiting 52 with id = 3585 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3611 currentId 3585
Added AND Nodes: 3610 3611
2 => callsites count before spliiting 55 with id = 3590 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3616 currentId 3590
Added AND Nodes: 3615 3616
1 => callsites count before spliiting 55 with id = 3600 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3621 currentId 3600
Added AND Nodes: 3620 3621
10 => callsites count before spliiting 254 with id = 3605 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3626 currentId 3605
Added AND Nodes: 3625 3626
2 => callsites count before spliiting 50 with id = 3615 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3631 currentId 3615
Added AND Nodes: 3630 3631
0 => callsites count before spliiting 51 with id = 3610 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3636 currentId 3610
Added AND Nodes: 3635 3636
1 => callsites count before spliiting 50 with id = 3620 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3641 currentId 3620
Added AND Nodes: 3640 3641
10 => callsites count before spliiting 262 with id = 3625 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3646 currentId 3625
Added AND Nodes: 3645 3646
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 60 with id = 3630 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3651 currentId 3630
Added AND Nodes: 3650 3651
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 60 with id = 3640 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3656 currentId 3640
Added AND Nodes: 3655 3656
10 => callsites count before spliiting 268 with id = 3645 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3661 currentId 3645
Added AND Nodes: 3660 3661
2 => callsites count before spliiting 55 with id = 3650 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3666 currentId 3650
Added AND Nodes: 3665 3666
3 => callsites count before spliiting 60 with id = 3441 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3671 currentId 3441
Added AND Nodes: 3670 3671
0 => callsites count before spliiting 50 with id = 3586 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3676 currentId 3586
Added AND Nodes: 3675 3676
1 => callsites count before spliiting 55 with id = 3655 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3681 currentId 3655
Added AND Nodes: 3680 3681
10 => callsites count before spliiting 274 with id = 3660 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3686 currentId 3660
Added AND Nodes: 3685 3686
2 => callsites count before spliiting 50 with id = 3665 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3691 currentId 3665
Added AND Nodes: 3690 3691
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 55 with id = 3670 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3696 currentId 3670
Added AND Nodes: 3695 3696
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 281 with id = 3685 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3701 currentId 3685
Added AND Nodes: 3700 3701
0 => callsites count before spliiting 60 with id = 3675 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3706 currentId 3675
Added AND Nodes: 3705 3706
3 => callsites count before spliiting 50 with id = 3695 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3711 currentId 3695
Added AND Nodes: 3710 3711
2 => callsites count before spliiting 60 with id = 3690 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3716 currentId 3690
Added AND Nodes: 3715 3716
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 55 with id = 3705 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3721 currentId 3705
Added AND Nodes: 3720 3721
10 => callsites count before spliiting 293 with id = 3700 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3726 currentId 3700
Added AND Nodes: 3725 3726
2 => callsites count before spliiting 55 with id = 3715 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3731 currentId 3715
Added AND Nodes: 3730 3731
9 => callsites count before spliiting 206 with id = 3316 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3736 currentId 3316
Added AND Nodes: 3735 3736
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 60 with id = 3710 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3741 currentId 3710
Added AND Nodes: 3740 3741
1 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 300 with id = 3725 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3746 currentId 3725
Added AND Nodes: 3745 3746
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 50 with id = 3720 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3751 currentId 3720
Added AND Nodes: 3750 3751
8 => callsites count before spliiting 204 with id = 3101 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3756 currentId 3101
Added AND Nodes: 3755 3756
9 => callsites count before spliiting 233 with id = 3735 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3761 currentId 3735
Added AND Nodes: 3760 3761
3 => callsites count before spliiting 55 with id = 3740 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3766 currentId 3740
Added AND Nodes: 3765 3766
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 304 with id = 3745 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3771 currentId 3745
Added AND Nodes: 3770 3771
2 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 226 with id = 3755 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3776 currentId 3755
Added AND Nodes: 3775 3776
3 => callsites count before spliiting 50 with id = 3765 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3781 currentId 3765
Added AND Nodes: 3780 3781
10 => callsites count before spliiting 308 with id = 3770 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3786 currentId 3770
Added AND Nodes: 3785 3786
3 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 262 with id = 3760 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3791 currentId 3760
Added AND Nodes: 3790 3791
3 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 242 with id = 3775 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3796 currentId 3775
Added AND Nodes: 3795 3796
1 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 325 with id = 3785 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3801 currentId 3785
Added AND Nodes: 3800 3801
0 => callsites count before spliiting 60 with id = 3676 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3806 currentId 3676
Added AND Nodes: 3805 3806
2 => callsites count before spliiting 60 with id = 3591 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3811 currentId 3591
Added AND Nodes: 3810 3811
9 => callsites count before spliiting 279 with id = 3790 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3816 currentId 3790
Added AND Nodes: 3815 3816
11 => callsites count before spliiting 204 with id = 2721 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3821 currentId 2721
Added AND Nodes: 3820 3821
8 => callsites count before spliiting 250 with id = 3795 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3826 currentId 3795
Added AND Nodes: 3825 3826
10 => callsites count before spliiting 329 with id = 3800 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3831 currentId 3800
Added AND Nodes: 3830 3831
3 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 287 with id = 3815 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3836 currentId 3815
Added AND Nodes: 3835 3836
2 => callsites count before spliiting 55 with id = 3810 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3841 currentId 3810
Added AND Nodes: 3840 3841
1 => callsites count before spliiting 60 with id = 3581 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3846 currentId 3581
Added AND Nodes: 3845 3846
8 => callsites count before spliiting 264 with id = 3825 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3851 currentId 3825
Added AND Nodes: 3850 3851
0 => callsites count before spliiting 55 with id = 3805 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3856 currentId 3805
10 => callsites count before spliiting 334 with id = 3830 and splitMode 50
Added AND Nodes: 3855 3856
10 => sending calltree : splitMode 50 mustReachId 3861 currentId 3830
Added AND Nodes: 3860 3861
5 => callsites count before spliiting 215 with id = 3041 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3866 currentId 3041
Added AND Nodes: 3865 3866
11 => callsites count before spliiting 227 with id = 3820 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3871 currentId 3820
Added AND Nodes: 3870 3871
9 => callsites count before spliiting 305 with id = 3835 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3876 currentId 3835
Added AND Nodes: 3875 3876
3 => callsites count before spliiting 60 with id = 3741 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3881 currentId 3741
Added AND Nodes: 3880 3881
2 => callsites count before spliiting 50 with id = 3840 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3886 currentId 3840
Added AND Nodes: 3885 3886
1 => callsites count before spliiting 55 with id = 3845 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3891 currentId 3845
Added AND Nodes: 3890 3891
8 => callsites count before spliiting 278 with id = 3850 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3896 currentId 3850
11 => callsites count before spliiting 238 with id = 3870 and splitMode 50
Added AND Nodes: 3895 3896
11 => sending calltree : splitMode 50 mustReachId 3901 currentId 3870
Added AND Nodes: 3900 3901
0 => callsites count before spliiting 50 with id = 3855 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3906 currentId 3855
Added AND Nodes: 3905 3906
9 => callsites count before spliiting 321 with id = 3875 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3911 currentId 3875
Added AND Nodes: 3910 3911
10 => callsites count before spliiting 354 with id = 3860 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3916 currentId 3860
Added AND Nodes: 3915 3916
8 => callsites count before spliiting 283 with id = 3895 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3921 currentId 3895
Added AND Nodes: 3920 3921
1 => callsites count before spliiting 50 with id = 3890 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3926 currentId 3890
Added AND Nodes: 3925 3926
11 => callsites count before spliiting 245 with id = 3900 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3931 currentId 3900
Added AND Nodes: 3930 3931
3 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 365 with id = 3915 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3936 currentId 3915
Added AND Nodes: 3935 3936
2 => callsites count before spliiting 60 with id = 3885 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3941 currentId 3885
Added AND Nodes: 3940 3941
9 => callsites count before spliiting 329 with id = 3910 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3946 currentId 3910
Added AND Nodes: 3945 3946
8 => callsites count before spliiting 293 with id = 3920 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3951 currentId 3920
Added AND Nodes: 3950 3951
0 => callsites count before spliiting 60 with id = 3905 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3956 currentId 3905
Added AND Nodes: 3955 3956
9 => callsites count before spliiting 343 with id = 3945 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3961 currentId 3945
Added AND Nodes: 3960 3961
11 => callsites count before spliiting 251 with id = 3930 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3966 currentId 3930
Added AND Nodes: 3965 3966
3 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 376 with id = 3935 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3971 currentId 3935
Added AND Nodes: 3970 3971
8 => callsites count before spliiting 306 with id = 3950 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3976 currentId 3950
Added AND Nodes: 3975 3976
2 => callsites count before spliiting 55 with id = 3940 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3981 currentId 3940
Added AND Nodes: 3980 3981
1 => callsites count before spliiting 60 with id = 3925 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3986 currentId 3925
Added AND Nodes: 3985 3986
9 => callsites count before spliiting 357 with id = 3960 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3991 currentId 3960
Added AND Nodes: 3990 3991
11 => callsites count before spliiting 257 with id = 3965 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3996 currentId 3965
Added AND Nodes: 3995 3996
10 => callsites count before spliiting 391 with id = 3970 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 4001 currentId 3970
Added AND Nodes: 4000 4001
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 361 with id = 3990 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4006 currentId 3990
Added AND Nodes: 4005 4006
2 => callsites count before spliiting 50 with id = 3980 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4011 currentId 3980
Added AND Nodes: 4010 4011
6 => LOOP outcome: Correct & reachbound = True
Added New : 
6 : 
1 => callsites count before spliiting 55 with id = 3985 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4016 currentId 3985
Added AND Nodes: 4015 4016
6 => LOOP outcome: Correct & reachbound = True
Added New : 
6 : 
11 => callsites count before spliiting 265 with id = 3995 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4021 currentId 3995
Added AND Nodes: 4020 4021
8 => callsites count before spliiting 329 with id = 3975 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4026 currentId 3975
Added AND Nodes: 4025 4026
9 => callsites count before spliiting 367 with id = 4005 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4031 currentId 4005
Added AND Nodes: 4030 4031
10 => callsites count before spliiting 404 with id = 4000 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 4036 currentId 4000
Added AND Nodes: 4035 4036
3 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 277 with id = 4020 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4041 currentId 4020
Added AND Nodes: 4040 4041
2 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
10 => callsites count before spliiting 413 with id = 4035 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 4046 currentId 4035
Added AND Nodes: 4045 4046
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
8 => callsites count before spliiting 341 with id = 4025 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4051 currentId 4025
Added AND Nodes: 4050 4051
2 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 60 with id = 3806 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4056 currentId 3806
Added AND Nodes: 4055 4056
11 => callsites count before spliiting 296 with id = 4040 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4061 currentId 4040
Added AND Nodes: 4060 4061
2 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
3 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 427 with id = 4045 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 4066 currentId 4045
Added AND Nodes: 4065 4066
8 => callsites count before spliiting 367 with id = 4050 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4071 currentId 4050
1 => LOOP outcome: Correct & reachbound = True
Added AND Nodes: 4070 4071
1 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
10 => callsites count before spliiting 435 with id = 4065 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 4076 currentId 4065
Added AND Nodes: 4075 4076
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
0 => callsites count before spliiting 55 with id = 4055 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4081 currentId 4055
Added AND Nodes: 4080 4081
11 => callsites count before spliiting 306 with id = 4060 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4086 currentId 4060
Added AND Nodes: 4085 4086
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
8 => callsites count before spliiting 384 with id = 4070 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4091 currentId 4070
Added AND Nodes: 4090 4091
3 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
11 => callsites count before spliiting 311 with id = 4085 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4096 currentId 4085
Added AND Nodes: 4095 4096
2 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
8 => callsites count before spliiting 406 with id = 4090 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4101 currentId 4090
Added AND Nodes: 4100 4101
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
1 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 50 with id = 4080 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4106 currentId 4080
Added AND Nodes: 4105 4106
11 => callsites count before spliiting 325 with id = 4095 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4111 currentId 4095
Added AND Nodes: 4110 4111
3 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 418 with id = 4100 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4116 currentId 4100
Added AND Nodes: 4115 4116
11 => callsites count before spliiting 341 with id = 4110 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4121 currentId 4110
Added AND Nodes: 4120 4121
2 => callsites count before spliiting 60 with id = 3811 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4126 currentId 3811
Added AND Nodes: 4125 4126
8 => callsites count before spliiting 436 with id = 4115 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4131 currentId 4115
Added AND Nodes: 4130 4131
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 53 with id = 3081 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4136 currentId 3081
Added AND Nodes: 4135 4136
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
11 => callsites count before spliiting 347 with id = 4120 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4141 currentId 4120
Added AND Nodes: 4140 4141
1 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 60 with id = 4105 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4146 currentId 4105
Added AND Nodes: 4145 4146
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 208 with id = 3865 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 4151 currentId 3865
Added AND Nodes: 4150 4151
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 55 with id = 4125 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4156 currentId 4125
Added AND Nodes: 4155 4156
11 => callsites count before spliiting 367 with id = 4140 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4161 currentId 4140
Added AND Nodes: 4160 4161
3 => callsites count before spliiting 52 with id = 4135 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4166 currentId 4135
Added AND Nodes: 4165 4166
0 => callsites count before spliiting 55 with id = 4145 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4171 currentId 4145
Added AND Nodes: 4170 4171
2 => callsites count before spliiting 50 with id = 4155 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4176 currentId 4155
Added AND Nodes: 4175 4176
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => callsites count before spliiting 388 with id = 4160 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4181 currentId 4160
Added AND Nodes: 4180 4181
0 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 207 with id = 3396 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 4186 currentId 3396
Added AND Nodes: 4185 4186
0 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 60 with id = 4175 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4191 currentId 4175
Added AND Nodes: 4190 4191
11 => callsites count before spliiting 403 with id = 4180 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4196 currentId 4180
Added AND Nodes: 4195 4196
1 => LOOP outcome: Correct & reachbound = True
11 => callsites count before spliiting 421 with id = 4195 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 4201 currentId 4195
Added AND Nodes: 4200 4201
2 => callsites count before spliiting 55 with id = 4190 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4206 currentId 4190
Added AND Nodes: 4205 4206
0 => callsites count before spliiting 53 with id = 4146 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4211 currentId 4146
Added AND Nodes: 4210 4211
6 => callsites count before spliiting 204 with id = 3451 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 4216 currentId 3451
Added AND Nodes: 4215 4216
0 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => callsites count before spliiting 224 with id = 3256 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 4221 currentId 3256
Added AND Nodes: 4220 4221
3 => callsites count before spliiting 60 with id = 4136 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4226 currentId 4136
Added AND Nodes: 4225 4226
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 53 with id = 3561 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4231 currentId 3561
Added AND Nodes: 4230 4231
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
2 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
0 => callsites count before spliiting 60 with id = 4056 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4236 currentId 4056
Added AND Nodes: 4235 4236
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 53 with id = 2961 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4241 currentId 2961
Added AND Nodes: 4240 4241
0 => callsites count before spliiting 55 with id = 4235 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4246 currentId 4235
Added AND Nodes: 4245 4246
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => callsites count before spliiting 73 with id = 2421 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4251 currentId 2421
Added AND Nodes: 4250 4251
1 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 50 with id = 4245 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4256 currentId 4245
Added AND Nodes: 4255 4256
3 => callsites count before spliiting 53 with id = 4250 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4261 currentId 4250
Added AND Nodes: 4260 4261
1 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 60 with id = 4241 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4266 currentId 4241
Added AND Nodes: 4265 4266
3 => callsites count before spliiting 52 with id = 4260 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4271 currentId 4260
Added AND Nodes: 4270 4271
0 => callsites count before spliiting 60 with id = 4255 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4276 currentId 4255
Added AND Nodes: 4275 4276
9 => callsites count before spliiting 225 with id = 3791 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4281 currentId 3791
Added AND Nodes: 4280 4281
1 => callsites count before spliiting 53 with id = 2816 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4286 currentId 2816
Added AND Nodes: 4285 4286
0 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 55 with id = 4265 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4291 currentId 4265
Added AND Nodes: 4290 4291
3 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 232 with id = 4280 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4296 currentId 4280
Added AND Nodes: 4295 4296
0 => LOOP outcome: Correct & reachbound = True
7 => callsites count before spliiting 204 with id = 4220 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 4301 currentId 4220
Added AND Nodes: 4300 4301
1 => callsites count before spliiting 52 with id = 4285 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4306 currentId 4285
Added AND Nodes: 4305 4306
9 => callsites count before spliiting 238 with id = 4295 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4311 currentId 4295
Added AND Nodes: 4310 4311
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 53 with id = 4256 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4316 currentId 4256
Added AND Nodes: 4315 4316
3 => callsites count before spliiting 60 with id = 4251 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4321 currentId 4251
Added AND Nodes: 4320 4321
9 => callsites count before spliiting 243 with id = 4310 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4326 currentId 4310
Added AND Nodes: 4325 4326
1 => callsites count before spliiting 58 with id = 4305 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4331 currentId 4305
Added AND Nodes: 4330 4331
0 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
9 => callsites count before spliiting 254 with id = 4325 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4336 currentId 4325
Added AND Nodes: 4335 4336
3 => callsites count before spliiting 55 with id = 4320 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4341 currentId 4320
Added AND Nodes: 4340 4341
2 => callsites count before spliiting 60 with id = 4266 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4346 currentId 4266
Added AND Nodes: 4345 4346
4 => callsites count before spliiting 203 with id = 4185 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 4351 currentId 4185
Added AND Nodes: 4350 4351
9 => callsites count before spliiting 269 with id = 4335 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4356 currentId 4335
Added AND Nodes: 4355 4356
6 => callsites count before spliiting 205 with id = 4215 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 4361 currentId 4215
Added AND Nodes: 4360 4361
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 50 with id = 4340 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4366 currentId 4340
Added AND Nodes: 4365 4366
0 => callsites count before spliiting 60 with id = 4236 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4371 currentId 4236
Added AND Nodes: 4370 4371
2 => LOOP outcome: Correct & reachbound = True
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 275 with id = 4355 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4376 currentId 4355
Added AND Nodes: 4375 4376
9 => callsites count before spliiting 280 with id = 4375 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4381 currentId 4375
Added AND Nodes: 4380 4381
0 => callsites count before spliiting 55 with id = 4370 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4386 currentId 4370
Added AND Nodes: 4385 4386
1 => callsites count before spliiting 60 with id = 4286 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4391 currentId 4286
Added AND Nodes: 4390 4391
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 290 with id = 4380 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4396 currentId 4380
Added AND Nodes: 4395 4396
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => LOOP outcome: Correct & reachbound = True
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 51 with id = 2606 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4401 currentId 2606
Added AND Nodes: 4400 4401
0 => callsites count before spliiting 50 with id = 4385 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4406 currentId 4385
Added AND Nodes: 4405 4406
1 => callsites count before spliiting 55 with id = 4390 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4411 currentId 4390
Added AND Nodes: 4410 4411
9 => callsites count before spliiting 304 with id = 4395 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4416 currentId 4395
Added AND Nodes: 4415 4416
0 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 309 with id = 4415 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4421 currentId 4415
Added AND Nodes: 4420 4421
2 => callsites count before spliiting 50 with id = 4400 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4426 currentId 4400
Added AND Nodes: 4425 4426
1 => callsites count before spliiting 50 with id = 4410 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4431 currentId 4410
Added AND Nodes: 4430 4431
0 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 60 with id = 4321 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4436 currentId 4321
Added AND Nodes: 4435 4436
9 => callsites count before spliiting 321 with id = 4420 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4441 currentId 4420
Added AND Nodes: 4440 4441
2 => callsites count before spliiting 56 with id = 4425 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4446 currentId 4425
Added AND Nodes: 4445 4446
3 => callsites count before spliiting 55 with id = 4435 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4451 currentId 4435
Added AND Nodes: 4450 4451
9 => callsites count before spliiting 327 with id = 4440 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4456 currentId 4440
Added AND Nodes: 4455 4456
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
1 => callsites count before spliiting 60 with id = 4430 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4461 currentId 4430
Added AND Nodes: 4460 4461
0 => callsites count before spliiting 53 with id = 4386 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4466 currentId 4386
Added AND Nodes: 4465 4466
0 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 332 with id = 4455 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4471 currentId 4455
Added AND Nodes: 4470 4471
2 => callsites count before spliiting 51 with id = 4445 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4476 currentId 4445
Added AND Nodes: 4475 4476
3 => callsites count before spliiting 50 with id = 4450 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4481 currentId 4450
Added AND Nodes: 4480 4481
0 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 343 with id = 4470 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4486 currentId 4470
Added AND Nodes: 4485 4486
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 60 with id = 4480 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4491 currentId 4480
Added AND Nodes: 4490 4491
0 => callsites count before spliiting 60 with id = 4371 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4496 currentId 4371
Added AND Nodes: 4495 4496
9 => callsites count before spliiting 355 with id = 4485 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4501 currentId 4485
Added AND Nodes: 4500 4501
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
2 => callsites count before spliiting 59 with id = 4401 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4506 currentId 4401
Added AND Nodes: 4505 4506
3 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 359 with id = 4500 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4511 currentId 4500
Added AND Nodes: 4510 4511
1 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 55 with id = 4495 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4516 currentId 4495
Added AND Nodes: 4515 4516
2 => callsites count before spliiting 54 with id = 4505 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4521 currentId 4505
Added AND Nodes: 4520 4521
9 => callsites count before spliiting 365 with id = 4510 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4526 currentId 4510
Added AND Nodes: 4525 4526
0 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 222 with id = 3796 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4531 currentId 3796
Added AND Nodes: 4530 4531
3 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 60 with id = 4391 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4536 currentId 4391
Added AND Nodes: 4535 4536
9 => callsites count before spliiting 376 with id = 4525 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4541 currentId 4525
Added AND Nodes: 4540 4541
8 => callsites count before spliiting 237 with id = 4530 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4546 currentId 4530
Added AND Nodes: 4545 4546
2 => callsites count before spliiting 53 with id = 4520 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4551 currentId 4520
Added AND Nodes: 4550 4551
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
9 => callsites count before spliiting 380 with id = 4540 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 4556 currentId 4540
Added AND Nodes: 4555 4556
8 => callsites count before spliiting 245 with id = 4545 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4561 currentId 4545
Added AND Nodes: 4560 4561
1 => callsites count before spliiting 55 with id = 4535 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4566 currentId 4535
Added AND Nodes: 4565 4566
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
2 => callsites count before spliiting 59 with id = 4550 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4571 currentId 4550
Added AND Nodes: 4570 4571
8 => callsites count before spliiting 250 with id = 4560 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4576 currentId 4560
Added AND Nodes: 4575 4576
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
3 => callsites count before spliiting 60 with id = 4436 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4581 currentId 4436
Added AND Nodes: 4580 4581
0 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 50 with id = 4565 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4586 currentId 4565
Added AND Nodes: 4585 4586
8 => callsites count before spliiting 256 with id = 4575 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4591 currentId 4575
Added AND Nodes: 4590 4591
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
2 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
8 => callsites count before spliiting 260 with id = 4590 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4596 currentId 4590
Added AND Nodes: 4595 4596
3 => callsites count before spliiting 55 with id = 4580 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4601 currentId 4580
Added AND Nodes: 4600 4601
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 266 with id = 4595 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4606 currentId 4595
Added AND Nodes: 4605 4606
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
8 => callsites count before spliiting 272 with id = 4605 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4611 currentId 4605
Added AND Nodes: 4610 4611
1 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 54 with id = 4506 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4616 currentId 4506
Added AND Nodes: 4615 4616
3 => callsites count before spliiting 50 with id = 4600 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4621 currentId 4600
Added AND Nodes: 4620 4621
8 => callsites count before spliiting 293 with id = 4610 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4626 currentId 4610
Added AND Nodes: 4625 4626
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
5 => callsites count before spliiting 213 with id = 3866 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 4631 currentId 3866
Added AND Nodes: 4630 4631
2 => callsites count before spliiting 53 with id = 4615 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4636 currentId 4615
Added AND Nodes: 4635 4636
8 => callsites count before spliiting 302 with id = 4625 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4641 currentId 4625
Added AND Nodes: 4640 4641
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 54 with id = 1246 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4646 currentId 1246
Added AND Nodes: 4645 4646
8 => callsites count before spliiting 314 with id = 4640 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4651 currentId 4640
Added AND Nodes: 4650 4651
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 59 with id = 4635 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4656 currentId 4635
Added AND Nodes: 4655 4656
8 => callsites count before spliiting 333 with id = 4650 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4661 currentId 4650
Added AND Nodes: 4660 4661
1 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 53 with id = 4645 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4666 currentId 4645
Added AND Nodes: 4665 4666
8 => callsites count before spliiting 370 with id = 4660 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4671 currentId 4660
Added AND Nodes: 4670 4671
2 => callsites count before spliiting 54 with id = 4655 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4676 currentId 4655
Added AND Nodes: 4675 4676
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 386 with id = 4670 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4681 currentId 4670
Added AND Nodes: 4680 4681
1 => callsites count before spliiting 60 with id = 4536 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4686 currentId 4536
Added AND Nodes: 4685 4686
6 => LOOP outcome: Correct & reachbound = True
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = True
Added New : 
6 : 
0 => callsites count before spliiting 59 with id = 4646 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4691 currentId 4646
Added AND Nodes: 4690 4691
8 => callsites count before spliiting 403 with id = 4680 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4696 currentId 4680
Added AND Nodes: 4695 4696
2 => callsites count before spliiting 53 with id = 4675 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4701 currentId 4675
Added AND Nodes: 4700 4701
3 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 427 with id = 4695 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4706 currentId 4695
Added AND Nodes: 4705 4706
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 54 with id = 4690 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4711 currentId 4690
Added AND Nodes: 4710 4711
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 442 with id = 4705 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4716 currentId 4705
Added AND Nodes: 4715 4716
1 => LOOP outcome: Correct & reachbound = True
8 => callsites count before spliiting 460 with id = 4715 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 4721 currentId 4715
Added AND Nodes: 4720 4721
3 => callsites count before spliiting 60 with id = 4581 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4726 currentId 4581
Added AND Nodes: 4725 4726
0 => callsites count before spliiting 53 with id = 4710 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4731 currentId 4710
Added AND Nodes: 4730 4731
2 => LOOP outcome: Correct & reachbound = True
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => LOOP outcome: Correct & reachbound = True
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
1 => callsites count before spliiting 73 with id = 2131 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4736 currentId 2131
Added AND Nodes: 4735 4736
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 64 with id = 4691 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4741 currentId 4691
Added AND Nodes: 4740 4741
2 => callsites count before spliiting 60 with id = 4616 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4746 currentId 4616
Added AND Nodes: 4745 4746
1 => callsites count before spliiting 53 with id = 4735 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4751 currentId 4735
Added AND Nodes: 4750 4751
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
0 => callsites count before spliiting 59 with id = 4740 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4756 currentId 4740
Added AND Nodes: 4755 4756
2 => callsites count before spliiting 55 with id = 4745 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4761 currentId 4745
Added AND Nodes: 4760 4761
3 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 52 with id = 4750 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4766 currentId 4750
Added AND Nodes: 4765 4766
3 => callsites count before spliiting 59 with id = 2416 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4771 currentId 2416
0 => callsites count before spliiting 54 with id = 4755 and splitMode 100
Added AND Nodes: 4770 4771
0 => sending calltree : splitMode 100 mustReachId 4776 currentId 4755
Added AND Nodes: 4775 4776
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 50 with id = 4760 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4781 currentId 4760
Added AND Nodes: 4780 4781
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
5 => callsites count before spliiting 202 with id = 4630 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 4786 currentId 4630
Added AND Nodes: 4785 4786
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 54 with id = 4770 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4791 currentId 4770
Added AND Nodes: 4790 4791
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
1 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 53 with id = 4775 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4796 currentId 4775
Added AND Nodes: 4795 4796
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
0 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
2 => callsites count before spliiting 60 with id = 4780 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4801 currentId 4780
Added AND Nodes: 4800 4801
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 53 with id = 4790 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4806 currentId 4790
Added AND Nodes: 4805 4806
1 => callsites count before spliiting 51 with id = 4736 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4811 currentId 4736
Added AND Nodes: 4810 4811
6 => callsites count before spliiting 220 with id = 4216 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 4816 currentId 4216
Added AND Nodes: 4815 4816
0 => callsites count before spliiting 50 with id = 4741 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4821 currentId 4741
Added AND Nodes: 4820 4821
2 => callsites count before spliiting 55 with id = 4800 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4826 currentId 4800
Added AND Nodes: 4825 4826
1 => callsites count before spliiting 50 with id = 4810 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4831 currentId 4810
Added AND Nodes: 4830 4831
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 50 with id = 4825 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4836 currentId 4825
Added AND Nodes: 4835 4836
0 => callsites count before spliiting 60 with id = 4820 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4841 currentId 4820
Added AND Nodes: 4840 4841
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
3 => callsites count before spliiting 50 with id = 4771 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4846 currentId 4771
Added AND Nodes: 4845 4846
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
1 => callsites count before spliiting 56 with id = 4830 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4851 currentId 4830
Added AND Nodes: 4850 4851
0 => callsites count before spliiting 55 with id = 4840 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4856 currentId 4840
Added AND Nodes: 4855 4856
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 60 with id = 4845 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4861 currentId 4845
Added AND Nodes: 4860 4861
2 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 50 with id = 4855 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4866 currentId 4855
Added AND Nodes: 4865 4866
3 => callsites count before spliiting 55 with id = 4860 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4871 currentId 4860
Added AND Nodes: 4870 4871
2 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 50 with id = 4811 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4876 currentId 4811
Added AND Nodes: 4875 4876
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
0 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
0 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 50 with id = 4870 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 4881 currentId 4870
Added AND Nodes: 4880 4881
1 => callsites count before spliiting 60 with id = 4875 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 4886 currentId 4875
Added AND Nodes: 4885 4886
2 => callsites count before spliiting 60 with id = 4761 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 4891 currentId 4761
Added AND Nodes: 4890 4891
0 => callsites count before spliiting 53 with id = 4856 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 4896 currentId 4856
Added AND Nodes: 4895 4896
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
3 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 219 with id = 4186 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 4901 currentId 4186
Added AND Nodes: 4900 4901
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--rtc--rtc-ds3232.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
for clientid : 5 algo id is 1
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
for clientid : 10 algo id is 2
for clientid : 9 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
0 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => Spliiting due to client waiting
Added AND Nodes: 25 26
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 26 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
10 => Spliiting due to client waiting
5 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 26 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 36 currentId 26
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 41 currentId 21
Added AND Nodes: 35 36
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 36 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
Added AND Nodes: 40 41
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 41 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 8 with id = 31 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 46 currentId 31
Added AND Nodes: 45 46
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 46 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 41 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 51 currentId 41
Added AND Nodes: 50 51
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 51 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 6 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 56 currentId 36
Added AND Nodes: 55 56
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 56 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 51 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 61 currentId 51
Added AND Nodes: 60 61
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 61 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
11 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 61 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => callsites count before spliiting 1 with id = 56 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 71 currentId 56
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 66 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 76 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
Added AND Nodes: 70 71
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 71 from client 11 to 8
8 => after replyFromServer: 50
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 76 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 81 from client 6 to 7
7 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 71 and splitMode 50
6 => Spliiting due to client waiting
8 => sending calltree : splitMode 50 mustReachId 86 currentId 71
Added AND Nodes: 85 86
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 86 from client 8 to 10
10 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 81 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 91 currentId 81
Added AND Nodes: 90 91
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 91 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
6 => Spliiting due to client waiting
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 19 with id = 80 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 80
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 5
5 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
2 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 91 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 91
6 => Spliiting due to client waiting
Added AND Nodes: 100 101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 101 from client 4 to 7
7 => after replyFromServer: 0
2 => callsites count before spliiting 8 with id = 46 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 106 currentId 46
Added AND Nodes: 105 106
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 106 from client 2 to 3
3 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 5 with id = 86 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 111 currentId 86
Added AND Nodes: 110 111
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 111 from client 10 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 85 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 116 currentId 85
Added AND Nodes: 115 116
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 116 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
2 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => callsites count before spliiting 12 with id = 110 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 121 currentId 110
Added AND Nodes: 120 121
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 121 from client 10 to 8
8 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 11 with id = 105 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 126 currentId 105
Added AND Nodes: 125 126
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 126 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => Spliiting due to client waiting
6 => callsites count before spliiting 209 with id = 95 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 131 currentId 95
Added AND Nodes: 130 131
3 => callsites count before spliiting 2 with id = 106 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 136 currentId 106
Added AND Nodes: 135 136
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 136 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 200 with id = 100 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 100
Added AND Nodes: 140 141
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 208 with id = 101 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 146 currentId 101
Added AND Nodes: 145 146
5 => callsites count before spliiting 213 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 151 currentId 96
Added AND Nodes: 150 151
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 2 with id = 126 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 156 currentId 126
Added AND Nodes: 155 156
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 156 from client 0 to 2
2 => after replyFromServer: 100
1 => Spliiting due to client waiting
1 => callsites count before spliiting 1 with id = 136 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 161 currentId 136
Added AND Nodes: 160 161
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 161 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 5 with id = 155 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 166 currentId 155
Added AND Nodes: 165 166
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 166 from client 0 to 1
1 => after replyFromServer: 100
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 311 with id = 131 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 171 currentId 131
Added AND Nodes: 170 171
0 => callsites count before spliiting 50 with id = 165 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 176 currentId 165
Added AND Nodes: 175 176
0 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 201 with id = 111 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 181 currentId 111
Added AND Nodes: 180 181
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => callsites count before spliiting 284 with id = 146 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 186 currentId 146
10 => callsites count before spliiting 200 with id = 120 and splitMode 50
Added AND Nodes: 185 186
10 => sending calltree : splitMode 50 mustReachId 191 currentId 120
Added AND Nodes: 190 191
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => callsites count before spliiting 495 with id = 141 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 196 currentId 141
Added AND Nodes: 195 196
5 => callsites count before spliiting 472 with id = 151 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 201 currentId 151
Added AND Nodes: 200 201
2 => callsites count before spliiting 50 with id = 156 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 206 currentId 156
Added AND Nodes: 205 206
2 => LOOP outcome: Correct & reachbound = False
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 203 with id = 116 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 211 currentId 116
Added AND Nodes: 210 211
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 50 with id = 166 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 216 currentId 166
Added AND Nodes: 215 216
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 53 with id = 161 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 221 currentId 161
Added AND Nodes: 220 221
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 203 with id = 121 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 226 currentId 121
Added AND Nodes: 225 226
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 299 with id = 181 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 231 currentId 181
Added AND Nodes: 230 231
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => callsites count before spliiting 206 with id = 185 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 236 currentId 185
Added AND Nodes: 235 236
4 => callsites count before spliiting 269 with id = 196 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 241 currentId 196
Added AND Nodes: 240 241
1 => callsites count before spliiting 52 with id = 216 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 246 currentId 216
Added AND Nodes: 245 246
1 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => callsites count before spliiting 56 with id = 176 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 251 currentId 176
Added AND Nodes: 250 251
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 54 with id = 206 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 256 currentId 206
Added AND Nodes: 255 256
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 236 with id = 201 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 261 currentId 201
Added AND Nodes: 260 261
3 => callsites count before spliiting 51 with id = 221 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 266 currentId 221
Added AND Nodes: 265 266
3 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 208 with id = 171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 271 currentId 171
Added AND Nodes: 270 271
8 => callsites count before spliiting 202 with id = 226 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 276 currentId 226
Added AND Nodes: 275 276
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => callsites count before spliiting 206 with id = 211 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 281 currentId 211
Added AND Nodes: 280 281
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => callsites count before spliiting 51 with id = 246 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 286 currentId 246
Added AND Nodes: 285 286
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 51 with id = 251 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 291 currentId 251
Added AND Nodes: 290 291
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 51 with id = 256 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 296 currentId 256
Added AND Nodes: 295 296
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 203 with id = 191 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 301 currentId 191
Added AND Nodes: 300 301
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 201 with id = 276 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 306 currentId 276
Added AND Nodes: 305 306
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 229 with id = 186 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 311 currentId 186
Added AND Nodes: 310 311
3 => callsites count before spliiting 54 with id = 266 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 316 currentId 266
Added AND Nodes: 315 316
3 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
9 => callsites count before spliiting 232 with id = 231 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 321 currentId 231
Added AND Nodes: 320 321
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 54 with id = 286 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 326 currentId 286
Added AND Nodes: 325 326
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 54 with id = 291 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 331 currentId 291
Added AND Nodes: 330 331
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 54 with id = 296 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 336 currentId 296
Added AND Nodes: 335 336
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 204 with id = 261 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 341 currentId 261
Added AND Nodes: 340 341
11 => callsites count before spliiting 227 with id = 281 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 346 currentId 281
Added AND Nodes: 345 346
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 51 with id = 316 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 351 currentId 316
Added AND Nodes: 350 351
3 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 219 with id = 241 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 356 currentId 241
Added AND Nodes: 355 356
6 => callsites count before spliiting 204 with id = 271 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 361 currentId 271
Added AND Nodes: 360 361
1 => callsites count before spliiting 51 with id = 326 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 366 currentId 326
Added AND Nodes: 365 366
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 51 with id = 331 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 371 currentId 331
Added AND Nodes: 370 371
0 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 211 with id = 321 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 376 currentId 321
Added AND Nodes: 375 376
10 => callsites count before spliiting 238 with id = 301 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 381 currentId 301
Added AND Nodes: 380 381
8 => callsites count before spliiting 226 with id = 306 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 386 currentId 306
Added AND Nodes: 385 386
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 51 with id = 336 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 391 currentId 336
Added AND Nodes: 390 391
2 => LOOP outcome: Correct & reachbound = False
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 54 with id = 351 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 396 currentId 351
Added AND Nodes: 395 396
3 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 226 with id = 346 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 401 currentId 346
Added AND Nodes: 400 401
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 54 with id = 366 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 406 currentId 366
Added AND Nodes: 405 406
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 54 with id = 371 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 411 currentId 371
Added AND Nodes: 410 411
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 54 with id = 391 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 416 currentId 391
Added AND Nodes: 415 416
10 => callsites count before spliiting 215 with id = 381 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 421 currentId 381
Added AND Nodes: 420 421
2 => LOOP outcome: Correct & reachbound = False
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => callsites count before spliiting 240 with id = 386 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 426 currentId 386
Added AND Nodes: 425 426
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 210 with id = 311 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 431 currentId 311
Added AND Nodes: 430 431
3 => callsites count before spliiting 51 with id = 396 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 436 currentId 396
Added AND Nodes: 435 436
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 51 with id = 406 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 441 currentId 406
Added AND Nodes: 440 441
0 => callsites count before spliiting 51 with id = 411 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 446 currentId 411
Added AND Nodes: 445 446
4 => callsites count before spliiting 231 with id = 356 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 451 currentId 356
Added AND Nodes: 450 451
1 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 51 with id = 416 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 456 currentId 416
Added AND Nodes: 455 456
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 215 with id = 361 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 461 currentId 361
Added AND Nodes: 460 461
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 54 with id = 436 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 466 currentId 436
Added AND Nodes: 465 466
9 => callsites count before spliiting 235 with id = 376 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 471 currentId 376
Added AND Nodes: 470 471
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 54 with id = 441 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 476 currentId 441
Added AND Nodes: 475 476
0 => callsites count before spliiting 54 with id = 446 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 481 currentId 446
Added AND Nodes: 480 481
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 202 with id = 401 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 486 currentId 401
Added AND Nodes: 485 486
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => callsites count before spliiting 54 with id = 456 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 491 currentId 456
Added AND Nodes: 490 491
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => callsites count before spliiting 241 with id = 430 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 496 currentId 430
Added AND Nodes: 495 496
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 225 with id = 460 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 501 currentId 460
Added AND Nodes: 500 501
5 => callsites count before spliiting 228 with id = 341 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 506 currentId 341
Added AND Nodes: 505 506
3 => callsites count before spliiting 51 with id = 466 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 511 currentId 466
Added AND Nodes: 510 511
1 => callsites count before spliiting 51 with id = 476 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 516 currentId 476
Added AND Nodes: 515 516
0 => callsites count before spliiting 51 with id = 481 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 521 currentId 481
Added AND Nodes: 520 521
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 239 with id = 421 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 526 currentId 421
Added AND Nodes: 525 526
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 202 with id = 426 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 531 currentId 426
Added AND Nodes: 530 531
2 => callsites count before spliiting 51 with id = 491 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 536 currentId 491
Added AND Nodes: 535 536
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => callsites count before spliiting 218 with id = 451 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 541 currentId 451
Added AND Nodes: 540 541
2 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => callsites count before spliiting 207 with id = 486 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 546 currentId 486
Added AND Nodes: 545 546
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 228 with id = 471 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 551 currentId 471
Added AND Nodes: 550 551
3 => callsites count before spliiting 54 with id = 511 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 556 currentId 511
Added AND Nodes: 555 556
1 => callsites count before spliiting 54 with id = 516 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 561 currentId 516
Added AND Nodes: 560 561
0 => callsites count before spliiting 54 with id = 521 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 566 currentId 521
Added AND Nodes: 565 566
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 54 with id = 536 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 571 currentId 536
Added AND Nodes: 570 571
2 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 239 with id = 506 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 576 currentId 506
Added AND Nodes: 575 576
1 => callsites count before spliiting 51 with id = 561 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 581 currentId 561
Added AND Nodes: 580 581
0 => callsites count before spliiting 51 with id = 566 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 586 currentId 566
Added AND Nodes: 585 586
3 => callsites count before spliiting 51 with id = 556 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 591 currentId 556
Added AND Nodes: 590 591
4 => callsites count before spliiting 220 with id = 541 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 596 currentId 541
Added AND Nodes: 595 596
1 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 51 with id = 571 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 601 currentId 571
Added AND Nodes: 600 601
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 220 with id = 551 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 606 currentId 551
Added AND Nodes: 605 606
8 => callsites count before spliiting 239 with id = 531 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 611 currentId 531
Added AND Nodes: 610 611
0 => callsites count before spliiting 54 with id = 586 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 616 currentId 586
Added AND Nodes: 615 616
1 => callsites count before spliiting 54 with id = 581 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 621 currentId 581
Added AND Nodes: 620 621
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 243 with id = 605 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 626 currentId 605
Added AND Nodes: 625 626
10 => callsites count before spliiting 241 with id = 526 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 631 currentId 526
Added AND Nodes: 630 631
3 => callsites count before spliiting 54 with id = 591 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 636 currentId 591
Added AND Nodes: 635 636
0 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
7 => callsites count before spliiting 226 with id = 496 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 641 currentId 496
Added AND Nodes: 640 641
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 212 with id = 546 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 646 currentId 546
Added AND Nodes: 645 646
2 => callsites count before spliiting 54 with id = 601 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 651 currentId 601
Added AND Nodes: 650 651
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = True
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
6 => callsites count before spliiting 228 with id = 501 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 656 currentId 501
Added AND Nodes: 655 656
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 210 with id = 576 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 661 currentId 576
Added AND Nodes: 660 661
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
3 => callsites count before spliiting 50 with id = 636 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 666 currentId 636
Added AND Nodes: 665 666
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 666 from client 3 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
8 => callsites count before spliiting 211 with id = 611 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 671 currentId 611
Added AND Nodes: 670 671
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => callsites count before spliiting 221 with id = 596 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 676 currentId 596
Added AND Nodes: 675 676
0 => Spliiting due to client waiting
0 => callsites count before spliiting 6 with id = 666 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 681 currentId 666
Added AND Nodes: 680 681
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 681 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
9 => callsites count before spliiting 220 with id = 606 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 686 currentId 606
Added AND Nodes: 685 686
1 => Spliiting due to client waiting
1 => callsites count before spliiting 9 with id = 681 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 691 currentId 681
Added AND Nodes: 690 691
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 691 from client 1 to 3
3 => after replyFromServer: 100
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
10 => callsites count before spliiting 204 with id = 631 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 696 currentId 631
Added AND Nodes: 695 696
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => Spliiting due to client waiting
3 => callsites count before spliiting 5 with id = 691 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 701 currentId 691
Added AND Nodes: 700 701
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 701 from client 3 to 2
2 => after replyFromServer: 100
10 => callsites count before spliiting 253 with id = 695 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 706 currentId 695
Added AND Nodes: 705 706
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => callsites count before spliiting 230 with id = 646 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 711 currentId 646
Added AND Nodes: 710 711
8 => callsites count before spliiting 200 with id = 671 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 716 currentId 671
Added AND Nodes: 715 716
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => LOOP outcome: Correct & reachbound = True

LOCATION - 0: 6
removing 11
removing 21
removing 41
removing 51
removing 61
removing 66
removing 76
removing 80
removing 95
removing 131
removing 171
removing 271
removing 361
removing 460
removing 501
removing 655
removing 656
removing 461
removing 96
removing 151
removing 201
removing 261
removing 341
removing 506
removing 576
removing 660
removing 661
removing 81
removing 91
removing 100
removing 141
removing 196
removing 241
removing 356
removing 451
removing 541
removing 596
removing 675
removing 676
removing 101
removing 146
removing 186
removing 311
removing 430
removing 496
removing 641
removing 431
removing 16
removing 26
removing 36
removing 56
removing 71
removing 85
removing 116
removing 211
removing 281
removing 346
removing 401
removing 486
removing 546
removing 646
removing 711
removing 86
removing 110
removing 120
removing 191
removing 301
removing 381
removing 421
removing 526
removing 631
removing 696
removing 121
removing 226
removing 276
removing 306
removing 386
removing 426
removing 531
removing 611
removing 671
removing 715
removing 716
removing 111
removing 181
removing 231
removing 321
removing 376
removing 471
removing 551
removing 606
removing 686
Reached root of partition tree. Verfification Finished.
Reached root bestAlgo updated to 0
Verification Outcome : ReachedBound
Time Taken : 417.653573
bestAlgo: 0
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--staging--iio--dds--ad9951.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
for clientid : 5 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
for clientid : 6 algo id is 1
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 7 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 9 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 41 currentId 26
7 => Spliiting due to client waiting
Added AND Nodes: 40 41
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 41 from client 1 to 2
2 => after replyFromServer: 100
7 => callsites count before spliiting 1 with id = 36 and splitMode 0
1 => LOOP outcome: Correct & reachbound = False
7 => sending calltree : splitMode 0 mustReachId 46 currentId 36
1 => outcome: Correct
for clientid : 1 algo id is 0
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 9 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 31
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 46 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 56 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 66 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 71 from client 7 to 6
6 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 71 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 76
7 => Spliiting due to client waiting
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 14 with id = 70 and splitMode 0
4 => Spliiting due to client waiting
7 => sending calltree : splitMode 0 mustReachId 86 currentId 70
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 91 currentId 81
6 => Spliiting due to client waiting
Added AND Nodes: 90 91
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 91 from client 5 to 7
7 => after replyFromServer: 0
10 => Spliiting due to client waiting
2 => Spliiting due to client waiting
10 => callsites count before spliiting 8 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 96 currentId 51
2 => callsites count before spliiting 8 with id = 41 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 101 currentId 41
Added AND Nodes: 95 96
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 96 from client 10 to 11
11 => after replyFromServer: 50
Added AND Nodes: 100 101
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 101 from client 2 to 3
3 => after replyFromServer: 100
10 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 96 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 106 currentId 96
Added AND Nodes: 105 106
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 106 from client 11 to 8
8 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 16 with id = 100 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 111 currentId 100
Added AND Nodes: 110 111
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 111 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
10 => Spliiting due to client waiting
for clientid : 2 algo id is 0
10 => callsites count before spliiting 17 with id = 95 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 116 currentId 95
Added AND Nodes: 115 116
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 116 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 116 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 121 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 121 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 126 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 8 with id = 101 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 131 currentId 101
Added AND Nodes: 130 131
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 131 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 7 with id = 106 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 136 currentId 106
Added AND Nodes: 135 136
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 136 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 111 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 141 currentId 111
Added AND Nodes: 140 141
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 141 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 7 with id = 126 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 146 currentId 126
Added AND Nodes: 145 146
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 146 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 131 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 151 currentId 131
Added AND Nodes: 150 151
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 151 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
4 => callsites count before spliiting 202 with id = 80 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 156 currentId 80
Added AND Nodes: 155 156
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 136 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 161 currentId 136
Added AND Nodes: 160 161
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 161 from client 9 to 8
8 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => callsites count before spliiting 200 with id = 86 and splitMode 0
8 => Spliiting due to client waiting
6 => sending calltree : splitMode 0 mustReachId 166 currentId 86
8 => callsites count before spliiting 5 with id = 161 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 171 currentId 161
Added AND Nodes: 165 166
Added AND Nodes: 170 171
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 171 from client 8 to 10
10 => after replyFromServer: 50
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 202 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 176 currentId 91
Added AND Nodes: 175 176
2 => Spliiting due to client waiting
2 => callsites count before spliiting 11 with id = 141 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 181 currentId 141
Added AND Nodes: 180 181
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 181 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 10 with id = 146 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 186 currentId 146
Added AND Nodes: 185 186
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 186 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => Spliiting due to client waiting
3 => callsites count before spliiting 7 with id = 151 and splitMode 100
8 => Spliiting due to client waiting
3 => sending calltree : splitMode 100 mustReachId 191 currentId 151
8 => callsites count before spliiting 12 with id = 170 and splitMode 50
Added AND Nodes: 190 191
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 191 from client 3 to 1
1 => after replyFromServer: 100
8 => sending calltree : splitMode 50 mustReachId 196 currentId 170
Added AND Nodes: 195 196
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 196 from client 8 to 11
11 => after replyFromServer: 50
5 => callsites count before spliiting 202 with id = 90 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 201 currentId 90
8 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 200 201
3 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
3 => outcome: Correct
for clientid : 8 algo id is 2
for clientid : 3 algo id is 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 186 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 206 currentId 186
Added AND Nodes: 205 206
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 206 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 6 with id = 171 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 211 currentId 171
Added AND Nodes: 210 211
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 211 from client 10 to 9
9 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 9 with id = 181 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 216 currentId 181
Added AND Nodes: 215 216
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 216 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 191 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 221 currentId 191
Added AND Nodes: 220 221
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 221 from client 1 to 3
3 => after replyFromServer: 100
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 16 with id = 210 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 226 currentId 210
Added AND Nodes: 225 226
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 226 from client 10 to 11
11 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 8 with id = 216 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 231 currentId 216
Added AND Nodes: 230 231
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 231 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 14 with id = 220 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 236 currentId 220
Added AND Nodes: 235 236
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 236 from client 1 to 2
2 => after replyFromServer: 100
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 27 with id = 225 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 241 currentId 225
Added AND Nodes: 240 241
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 241 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 49 with id = 211 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 246 currentId 211
Added AND Nodes: 245 246
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 246 from client 9 to 10
10 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 14 with id = 221 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 251 currentId 221
Added AND Nodes: 250 251
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 251 from client 3 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 231 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 256 currentId 231
Added AND Nodes: 255 256
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 256 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 21 with id = 250 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 261 currentId 250
Added AND Nodes: 260 261
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 261 from client 3 to 0
0 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 30 with id = 206 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 266 currentId 206
Added AND Nodes: 265 266
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 266 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 3 with id = 246 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 271 currentId 246
Added AND Nodes: 270 271
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 271 from client 10 to 8
8 => after replyFromServer: 50
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 33 with id = 260 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 276 currentId 260
Added AND Nodes: 275 276
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 276 from client 3 to 0
0 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 40 with id = 275 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 281 currentId 275
Added AND Nodes: 280 281
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 281 from client 3 to 0
0 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 21 with id = 251 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 286 currentId 251
Added AND Nodes: 285 286
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 286 from client 2 to 0
0 => after replyFromServer: 100
3 => callsites count before spliiting 52 with id = 280 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 291 currentId 280
Added AND Nodes: 290 291
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 21 with id = 256 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 296 currentId 256
Added AND Nodes: 295 296
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 296 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 28 with id = 285 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 301 currentId 285
Added AND Nodes: 300 301
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 301 from client 2 to 1
1 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 286 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 306 currentId 286
Added AND Nodes: 305 306
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 306 from client 0 to 1
1 => after replyFromServer: 100
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 84 with id = 271 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 311 currentId 271
Added AND Nodes: 310 311
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 311 from client 8 to 9
9 => after replyFromServer: 50
2 => callsites count before spliiting 59 with id = 300 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 316 currentId 300
Added AND Nodes: 315 316
4 => callsites count before spliiting 204 with id = 156 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 321 currentId 156
Added AND Nodes: 320 321
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 207 with id = 166 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 326 currentId 166
Added AND Nodes: 325 326
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
7 => callsites count before spliiting 204 with id = 176 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 331 currentId 176
Added AND Nodes: 330 331
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => callsites count before spliiting 52 with id = 305 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 336 currentId 305
Added AND Nodes: 335 336
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 336 from client 0 to 2
2 => after replyFromServer: 100
5 => callsites count before spliiting 201 with id = 201 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 341 currentId 201
Added AND Nodes: 340 341
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 14 with id = 335 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 346 currentId 335
Added AND Nodes: 345 346
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 346 from client 0 to 2
2 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 52 with id = 311 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 351 currentId 311
Added AND Nodes: 350 351
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 351 from client 9 to 10
10 => after replyFromServer: 50
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 21 with id = 345 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 356 currentId 345
Added AND Nodes: 355 356
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 356 from client 0 to 2
2 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 33 with id = 355 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 361 currentId 355
Added AND Nodes: 360 361
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 361 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 49 with id = 306 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 366 currentId 306
Added AND Nodes: 365 366
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 366 from client 1 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
1 => callsites count before spliiting 56 with id = 365 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 371 currentId 365
Added AND Nodes: 370 371
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 371 from client 1 to 2
2 => after replyFromServer: 100
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 19 with id = 351 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 376 currentId 351
Added AND Nodes: 375 376
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 376 from client 10 to 8
8 => after replyFromServer: 50
3 => callsites count before spliiting 63 with id = 296 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 381 currentId 296
Added AND Nodes: 380 381
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 381 from client 3 to 2
2 => after replyFromServer: 100
11 => callsites count before spliiting 205 with id = 266 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 386 currentId 266
Added AND Nodes: 385 386
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 37 with id = 370 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 391 currentId 370
Added AND Nodes: 390 391
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 391 from client 1 to 3
3 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 28 with id = 366 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 396 currentId 366
Added AND Nodes: 395 396
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 396 from client 0 to 3
3 => after replyFromServer: 100
1 => callsites count before spliiting 56 with id = 390 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 401 currentId 390
Added AND Nodes: 400 401
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 60 with id = 376 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 406 currentId 376
Added AND Nodes: 405 406
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 406 from client 8 to 9
9 => after replyFromServer: 50
0 => callsites count before spliiting 54 with id = 395 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 411 currentId 395
Added AND Nodes: 410 411
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 411 from client 0 to 1
1 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
2 => callsites count before spliiting 54 with id = 381 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 416 currentId 381
Added AND Nodes: 415 416
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 416 from client 2 to 1
1 => after replyFromServer: 100
3 => callsites count before spliiting 50 with id = 396 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 421 currentId 396
Added AND Nodes: 420 421
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 421 from client 3 to 2
2 => after replyFromServer: 100
9 => Spliiting due to client waiting
9 => callsites count before spliiting 44 with id = 406 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 426 currentId 406
Added AND Nodes: 425 426
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 426 from client 9 to 10
10 => after replyFromServer: 50
0 => callsites count before spliiting 92 with id = 410 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 431 currentId 410
Added AND Nodes: 430 431
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 26 with id = 416 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 436 currentId 416
Added AND Nodes: 435 436
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 436 from client 1 to 0
0 => after replyFromServer: 100
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => callsites count before spliiting 220 with id = 386 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 441 currentId 386
Added AND Nodes: 440 441
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 441 from client 11 to 8
8 => after replyFromServer: 50
11 => callsites count before spliiting 227 with id = 440 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 446 currentId 440
Added AND Nodes: 445 446
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 100 with id = 425 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 451 currentId 425
Added AND Nodes: 450 451
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 451 from client 9 to 11
11 => after replyFromServer: 50
1 => callsites count before spliiting 52 with id = 435 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 456 currentId 435
Added AND Nodes: 455 456
7 => callsites count before spliiting 209 with id = 331 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 461 currentId 331
Added AND Nodes: 460 461
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
3 => callsites count before spliiting 83 with id = 420 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 466 currentId 420
Added AND Nodes: 465 466
9 => Spliiting due to client waiting
9 => callsites count before spliiting 119 with id = 450 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 471 currentId 450
Added AND Nodes: 470 471
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 471 from client 9 to 11
11 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 466 from client 3 to 1
1 => after replyFromServer: 100
9 => Spliiting due to client waiting
9 => callsites count before spliiting 140 with id = 470 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 476 currentId 470
Added AND Nodes: 475 476
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 476 from client 9 to 11
11 => after replyFromServer: 50
4 => callsites count before spliiting 208 with id = 321 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 481 currentId 321
Added AND Nodes: 480 481
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 57 with id = 421 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 486 currentId 421
Added AND Nodes: 485 486
6 => callsites count before spliiting 204 with id = 326 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 491 currentId 326
Added AND Nodes: 490 491
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 486 from client 2 to 1
1 => after replyFromServer: 100
0 => callsites count before spliiting 50 with id = 436 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 496 currentId 436
Added AND Nodes: 495 496
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 496 from client 0 to 3
3 => after replyFromServer: 100
11 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => callsites count before spliiting 88 with id = 426 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 501 currentId 426
Added AND Nodes: 500 501
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 501 from client 10 to 9
9 => after replyFromServer: 50
5 => callsites count before spliiting 208 with id = 341 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 506 currentId 341
Added AND Nodes: 505 506
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 110 with id = 500 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 511 currentId 500
Added AND Nodes: 510 511
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 511 from client 10 to 11
11 => after replyFromServer: 50
2 => callsites count before spliiting 90 with id = 485 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 516 currentId 485
Added AND Nodes: 515 516
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 135 with id = 510 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 521 currentId 510
Added AND Nodes: 520 521
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 521 from client 10 to 11
11 => after replyFromServer: 50
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 516 from client 2 to 0
0 => after replyFromServer: 100
1 => callsites count before spliiting 57 with id = 486 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 526 currentId 486
Added AND Nodes: 525 526
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 526 from client 1 to 0
0 => after replyFromServer: 100
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 170 with id = 520 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 531 currentId 520
Added AND Nodes: 530 531
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 531 from client 10 to 11
11 => after replyFromServer: 50
3 => callsites count before spliiting 57 with id = 496 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 536 currentId 496
Added AND Nodes: 535 536
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 47 with id = 501 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 541 currentId 501
Added AND Nodes: 540 541
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 541 from client 9 to 11
11 => after replyFromServer: 50
10 => callsites count before spliiting 201 with id = 530 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 546 currentId 530
Added AND Nodes: 545 546
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 536 from client 3 to 2
2 => after replyFromServer: 100
8 => callsites count before spliiting 211 with id = 441 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 551 currentId 441
Added AND Nodes: 550 551
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
1 => callsites count before spliiting 83 with id = 525 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 556 currentId 525
Added AND Nodes: 555 556
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 73 with id = 540 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 561 currentId 540
Added AND Nodes: 560 561
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 561 from client 9 to 10
10 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
3 => callsites count before spliiting 83 with id = 535 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 566 currentId 535
Added AND Nodes: 565 566
11 => Spliiting due to client waiting
11 => callsites count before spliiting 33 with id = 541 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 571 currentId 541
Added AND Nodes: 570 571
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 571 from client 11 to 10
10 => after replyFromServer: 50
0 => callsites count before spliiting 57 with id = 526 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 576 currentId 526
Added AND Nodes: 575 576
3 => LOOP outcome: Correct & reachbound = True
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 576 from client 0 to 3
3 => after replyFromServer: 100
1 => callsites count before spliiting 109 with id = 555 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 581 currentId 555
Added AND Nodes: 580 581
2 => callsites count before spliiting 57 with id = 536 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 586 currentId 536
Added AND Nodes: 585 586
1 => LOOP outcome: Correct & reachbound = True
1 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 71 with id = 575 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 591 currentId 575
Added AND Nodes: 590 591
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 591 from client 0 to 1
1 => after replyFromServer: 100
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
11 => Spliiting due to client waiting
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 586 from client 2 to 1
1 => after replyFromServer: 100
11 => callsites count before spliiting 112 with id = 570 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 596 currentId 570
Added AND Nodes: 595 596
clientID of largest queue : 11
clientCalltreeQueue Count : 1
10 => callsites count before spliiting 119 with id = 571 and splitMode 50
Assign partition 596 from client 11 to 9
10 => sending calltree : splitMode 50 mustReachId 601 currentId 571
9 => after replyFromServer: 50
Added AND Nodes: 600 601
2 => callsites count before spliiting 83 with id = 585 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 606 currentId 585
Added AND Nodes: 605 606
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 606 from client 2 to 0
0 => after replyFromServer: 100
3 => callsites count before spliiting 57 with id = 576 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 611 currentId 576
Added AND Nodes: 610 611
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 611 from client 3 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
3 => Spliiting due to client waiting
1 => Spliiting due to client waiting
1 => callsites count before spliiting 19 with id = 586 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 616 currentId 586
Added AND Nodes: 615 616
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 616 from client 1 to 2
2 => after replyFromServer: 100
10 => callsites count before spliiting 202 with id = 600 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 621 currentId 600
Added AND Nodes: 620 621
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 2
Assign partition 601 from client 10 to 9
9 => after replyFromServer: 50
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 45 with id = 615 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 626 currentId 615
Added AND Nodes: 625 626
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 626 from client 1 to 3
3 => after replyFromServer: 100
1 => callsites count before spliiting 57 with id = 625 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 631 currentId 625
Added AND Nodes: 630 631
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 621 from client 10 to 11
11 => after replyFromServer: 50
4 => callsites count before spliiting 204 with id = 481 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 636 currentId 481
Added AND Nodes: 635 636
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 631 from client 1 to 3
3 => after replyFromServer: 100
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 206 with id = 461 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 641 currentId 461
Added AND Nodes: 640 641
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 19 with id = 611 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 646 currentId 611
Added AND Nodes: 645 646
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 646 from client 0 to 3
3 => after replyFromServer: 100
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => outcome: ReachedBound
for clientid : 11 algo id is 2
6 => callsites count before spliiting 208 with id = 491 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 651 currentId 491
Added AND Nodes: 650 651
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 10 with id = 601 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 656 currentId 601
Added AND Nodes: 655 656
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 656 from client 9 to 11
11 => after replyFromServer: 50
10 => callsites count before spliiting 241 with id = 620 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 661 currentId 620
Added AND Nodes: 660 661
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 661 from client 10 to 8
8 => after replyFromServer: 50
2 => callsites count before spliiting 57 with id = 616 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 666 currentId 616
Added AND Nodes: 665 666
0 => callsites count before spliiting 57 with id = 645 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 671 currentId 645
Added AND Nodes: 670 671
1 => callsites count before spliiting 71 with id = 630 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 676 currentId 630
Added AND Nodes: 675 676
10 => callsites count before spliiting 261 with id = 660 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 681 currentId 660
Added AND Nodes: 680 681
0 => LOOP outcome: Correct & reachbound = True
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 676 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 666 from client 2 to 1
1 => after replyFromServer: 100
5 => callsites count before spliiting 203 with id = 506 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 686 currentId 506
Added AND Nodes: 685 686
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 681 from client 10 to 8
8 => after replyFromServer: 50
2 => Spliiting due to client waiting
3 => Spliiting due to client waiting
3 => callsites count before spliiting 7 with id = 646 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 691 currentId 646
Added AND Nodes: 690 691
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 691 from client 3 to 0
0 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
9 => callsites count before spliiting 41 with id = 655 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 696 currentId 655
Added AND Nodes: 695 696
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 696 from client 9 to 10
10 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 26 with id = 690 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 701 currentId 690
Added AND Nodes: 700 701
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 701 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 26 with id = 666 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 706 currentId 666
Added AND Nodes: 705 706
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 706 from client 1 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 38 with id = 705 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 711 currentId 705
Added AND Nodes: 710 711
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 711 from client 1 to 2
2 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
1 => callsites count before spliiting 57 with id = 710 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 716 currentId 710
Added AND Nodes: 715 716
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 716 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 12 with id = 691 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 721 currentId 691
Added AND Nodes: 720 721
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 721 from client 0 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 31 with id = 720 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 726 currentId 720
Added AND Nodes: 725 726
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 726 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 12 with id = 706 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 731 currentId 706
Added AND Nodes: 730 731
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 731 from client 3 to 0
0 => after replyFromServer: 100
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
8 => outcome: ReachedBound
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 46 with id = 696 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 736 currentId 696
Added AND Nodes: 735 736
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 736 from client 10 to 8
8 => after replyFromServer: 50
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 31 with id = 730 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 741 currentId 730
Added AND Nodes: 740 741
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 741 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 721 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 746 currentId 721
Added AND Nodes: 745 746
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 746 from client 1 to 3
3 => after replyFromServer: 100
1 => Spliiting due to client waiting
1 => callsites count before spliiting 19 with id = 745 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 751 currentId 745
Added AND Nodes: 750 751
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 751 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 19 with id = 731 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 756 currentId 731
Added AND Nodes: 755 756
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 756 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = True
0 => outcome: ReachedBound
for clientid : 0 algo id is 0
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 182 with id = 656 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 761 currentId 656
Added AND Nodes: 760 761
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 761 from client 11 to 9
9 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 12 with id = 746 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 766 currentId 746
Added AND Nodes: 765 766
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 766 from client 3 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = True
1 => outcome: ReachedBound
for clientid : 1 algo id is 0
3 => LOOP outcome: Correct & reachbound = True
3 => outcome: ReachedBound
for clientid : 3 algo id is 0
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 197 with id = 760 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 771 currentId 760
Added AND Nodes: 770 771
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 771 from client 11 to 10
10 => after replyFromServer: 50
11 => callsites count before spliiting 214 with id = 770 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 776 currentId 770
Added AND Nodes: 775 776
10 => LOOP outcome: Correct & reachbound = True
Added New : 
10 : 
10 => outcome: ReachedBound
for clientid : 10 algo id is 2
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 776 from client 11 to 10
10 => after replyFromServer: 50
0 => LOOP outcome: Correct & reachbound = True

LOCATION - 0: 6
removing 11
removing 21
removing 36
removing 46
removing 56
removing 61
removing 66
removing 70
removing 86
removing 166
removing 326
removing 491
removing 651
removing 71
removing 76
removing 80
removing 156
removing 321
removing 481
removing 636
removing 81
removing 90
removing 201
removing 341
removing 506
removing 686
removing 91
removing 176
removing 331
removing 461
removing 641
removing 16
removing 31
removing 51
removing 96
removing 106
removing 136
removing 161
removing 171
removing 211
removing 246
removing 271
removing 311
removing 351
removing 376
removing 406
removing 426
removing 501
removing 541
removing 571
removing 601
removing 655
removing 696
removing 736
removing 656
removing 760
removing 770
removing 775
removing 776
removing 761
Reached root of partition tree. Verfification Finished.
Reached root bestAlgo updated to 0
Verification Outcome : ReachedBound
Time Taken : 173.631332
bestAlgo: 0
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_false-unreach-call_linux-3.8-rc1-32_7a-drivers--gpu--drm--vmwgfx--vmwgfx.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => Spliiting due to client waiting
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
for clientid : 7 algo id is 1
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => Spliiting due to client waiting
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
8 => Spliiting due to client waiting
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
for clientid : 10 algo id is 2
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 36 currentId 26
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 41 currentId 31
Added AND Nodes: 35 36
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 36 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 40 41
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 41 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
0 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 41 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 46 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 36 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 36
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 46 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 56 from client 8 to 11
11 => after replyFromServer: 50
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 4
4 => after replyFromServer: 0
8 => Spliiting due to client waiting
7 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 5 with id = 55 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 61 currentId 55
Added AND Nodes: 60 61
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 61 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 5 with id = 50 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 66 currentId 50
Added AND Nodes: 65 66
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 66 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 71 currentId 51
Added AND Nodes: 70 71
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 71 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 12 with id = 61 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 76 currentId 61
11 => Spliiting due to client waiting
Added AND Nodes: 75 76
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 76 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
11 => callsites count before spliiting 11 with id = 56 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 81 currentId 56
Added AND Nodes: 80 81
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 81 from client 11 to 8
8 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 12 with id = 66 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 66
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 71 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 71
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 12 with id = 86 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 91 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 101 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 106 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 106 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 111 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 5 with id = 111 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 116 from client 4 to 6
6 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 12 with id = 115 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 115
Added AND Nodes: 120 121
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 121 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 21 with id = 120 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 120
Added AND Nodes: 125 126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 126 from client 4 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 202 with id = 125 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 131 currentId 125
Added AND Nodes: 130 131
6 => callsites count before spliiting 209 with id = 116 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 136 currentId 116
Added AND Nodes: 135 136
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 237 with id = 130 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 130
Added AND Nodes: 140 141
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 230 with id = 141 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
6 => callsites count before spliiting 249 with id = 136 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 151 currentId 136
Added AND Nodes: 150 151
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 221 with id = 121 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 156 currentId 121
Added AND Nodes: 155 156
7 => callsites count before spliiting 215 with id = 126 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 161 currentId 126
Added AND Nodes: 160 161
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 220 with id = 150 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 166 currentId 150
Added AND Nodes: 165 166
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 264 with id = 146 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 171 currentId 146
Added AND Nodes: 170 171
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 234 with id = 166 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 176 currentId 166
Added AND Nodes: 175 176
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 270 with id = 171 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 181 currentId 171
Added AND Nodes: 180 181
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 217 with id = 155 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 186 currentId 155
Added AND Nodes: 185 186
4 => callsites count before spliiting 290 with id = 181 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 181
Added AND Nodes: 190 191
6 => callsites count before spliiting 256 with id = 176 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 196 currentId 176
Added AND Nodes: 195 196
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 216 with id = 191 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 201 currentId 191
Added AND Nodes: 200 201
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 240 with id = 201 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 206 currentId 201
Added AND Nodes: 205 206
6 => callsites count before spliiting 397 with id = 196 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 211 currentId 196
Added AND Nodes: 210 211
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 206 with id = 185 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 216 currentId 185
Added AND Nodes: 215 216
6 => callsites count before spliiting 225 with id = 211 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 221 currentId 211
Added AND Nodes: 220 221
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 218 with id = 131 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 226 currentId 131
Added AND Nodes: 225 226
6 => callsites count before spliiting 384 with id = 221 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 231 currentId 221
Added AND Nodes: 230 231
4 => callsites count before spliiting 205 with id = 225 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 236 currentId 225
Added AND Nodes: 235 236
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 20 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 241 currentId 6
Added AND Nodes: 240 241
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 241 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => callsites count before spliiting 223 with id = 235 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 246 currentId 235
Added AND Nodes: 245 246
8 => Spliiting due to client waiting
8 => callsites count before spliiting 3 with id = 81 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 251 currentId 81
Added AND Nodes: 250 251
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 251 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 251 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 256 currentId 251
Added AND Nodes: 255 256
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 256 from client 9 to 11
11 => after replyFromServer: 50
4 => callsites count before spliiting 207 with id = 245 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 261 currentId 245
Added AND Nodes: 260 261
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 388 with id = 231 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 266 currentId 231
Added AND Nodes: 265 266
6 => callsites count before spliiting 352 with id = 265 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 271 currentId 265
Added AND Nodes: 270 271
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 207 with id = 261 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 276 currentId 261
Added AND Nodes: 275 276
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 417 with id = 271 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 281 currentId 271
Added AND Nodes: 280 281
7 => callsites count before spliiting 239 with id = 161 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 286 currentId 161
Added AND Nodes: 285 286
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => Spliiting due to client waiting
1 => callsites count before spliiting 2 with id = 241 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 291 currentId 241
Added AND Nodes: 290 291
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 291 from client 1 to 2
2 => after replyFromServer: 100
6 => callsites count before spliiting 538 with id = 280 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 296 currentId 280
Added AND Nodes: 295 296
9 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 256 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 301 currentId 256
Added AND Nodes: 300 301
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 301 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => callsites count before spliiting 209 with id = 276 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 306 currentId 276
Added AND Nodes: 305 306
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 599 with id = 295 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 311 currentId 295
Added AND Nodes: 310 311
6 => callsites count before spliiting 563 with id = 310 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 316 currentId 310
Added AND Nodes: 315 316
6 => callsites count before spliiting 651 with id = 315 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 321 currentId 315
Added AND Nodes: 320 321
6 => callsites count before spliiting 728 with id = 320 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 326 currentId 320
Added AND Nodes: 325 326
6 => callsites count before spliiting 763 with id = 325 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 331 currentId 325
Added AND Nodes: 330 331
6 => callsites count before spliiting 893 with id = 330 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 336 currentId 330
Added AND Nodes: 335 336
2 => Spliiting due to client waiting
2 => callsites count before spliiting 6 with id = 291 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 341 currentId 291
Added AND Nodes: 340 341
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 341 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
6 => callsites count before spliiting 962 with id = 335 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 346 currentId 335
Added AND Nodes: 345 346
4 => callsites count before spliiting 211 with id = 306 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 351 currentId 306
Added AND Nodes: 350 351
1 => Spliiting due to client waiting
6 => callsites count before spliiting 973 with id = 345 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 356 currentId 345
Added AND Nodes: 355 356
9 => Spliiting due to client waiting
9 => callsites count before spliiting 12 with id = 255 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 361 currentId 255
Added AND Nodes: 360 361
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 361 from client 9 to 8
8 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 7 with id = 361 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 366 currentId 361
Added AND Nodes: 365 366
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 366 from client 8 to 11
11 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 3 with id = 301 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 371 currentId 301
Added AND Nodes: 370 371
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 371 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => callsites count before spliiting 1004 with id = 355 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 376 currentId 355
Added AND Nodes: 375 376
6 => callsites count before spliiting 984 with id = 375 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 381 currentId 375
Added AND Nodes: 380 381
6 => callsites count before spliiting 1058 with id = 380 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 386 currentId 380
Added AND Nodes: 385 386
6 => callsites count before spliiting 1059 with id = 385 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 391 currentId 385
Added AND Nodes: 390 391
6 => callsites count before spliiting 1034 with id = 390 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 396 currentId 390
Added AND Nodes: 395 396
1 => Spliiting due to client waiting
1 => callsites count before spliiting 16 with id = 290 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 401 currentId 290
Added AND Nodes: 400 401
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 401 from client 1 to 0
0 => after replyFromServer: 100
6 => callsites count before spliiting 1020 with id = 395 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 406 currentId 395
Added AND Nodes: 405 406
4 => callsites count before spliiting 203 with id = 350 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 411 currentId 350
Added AND Nodes: 410 411
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => Spliiting due to client waiting
3 => callsites count before spliiting 3 with id = 341 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 416 currentId 341
Added AND Nodes: 415 416
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 416 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 47 with id = 365 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 421 currentId 365
Added AND Nodes: 420 421
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 421 from client 8 to 10
10 => after replyFromServer: 50
6 => callsites count before spliiting 1168 with id = 405 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 426 currentId 405
Added AND Nodes: 425 426
7 => callsites count before spliiting 211 with id = 286 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 431 currentId 286
Added AND Nodes: 430 431
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 1214 with id = 425 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 436 currentId 425
Added AND Nodes: 435 436
1 => Spliiting due to client waiting
1 => callsites count before spliiting 26 with id = 400 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 441 currentId 400
Added AND Nodes: 440 441
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 441 from client 1 to 3
3 => after replyFromServer: 100
4 => callsites count before spliiting 214 with id = 411 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 446 currentId 411
Added AND Nodes: 445 446
6 => outcome: Errors
Outcome NOK bestAlgo updated to 1
Verification Outcome : NOK
Time Taken : 1805.284418
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_false-unreach-call_linux-3.8-rc1-32_7a-fs--hfs--hfs.ko-ldv_main6_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 1 algo id is 0
Added OR Node: 6
for clientid : 2 algo id is 0
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
0 => Spliiting due to client waiting
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => Spliiting due to client waiting
8 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6

Unhandled Exception:
System.AggregateException: One or more errors occurred. (An error occurred while sending the request.) ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.IO.IOException: The server returned an invalid or unrecognized response.
  at System.Net.Http.HttpConnection.SendAsyncCore (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x00cf5] in <058a720a2a3f4087a491439aab537fb3>:0 
   --- End of inner exception stack trace ---
  at System.Net.Http.HttpConnection.SendAsyncCore (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x012e5] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpConnectionPool.SendWithNtConnectionAuthAsync (System.Net.Http.HttpConnection connection, System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x0012b] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpConnectionPool.SendWithRetryAsync (System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x0014b] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.RedirectHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ba] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpClient.FinishSendAsyncBuffered (System.Threading.Tasks.Task`1[TResult] sendTask, System.Net.Http.HttpRequestMessage request, System.Threading.CancellationTokenSource cts, System.Boolean disposeCts) [0x0017e] in <058a720a2a3f4087a491439aab537fb3>:0 
   --- End of inner exception stack trace ---
  at System.Threading.Tasks.Task.ThrowIfExceptional (System.Boolean includeTaskCanceledExceptions) [0x00011] in <5dfd69ae4e3b402db546d8ded6fc755e>:0 
  at System.Threading.Tasks.Task`1[TResult].GetResultCore (System.Boolean waitCompletionNotification) [0x0002b] in <5dfd69ae4e3b402db546d8ded6fc755e>:0 
  at System.Threading.Tasks.Task`1[TResult].get_Result () [0x0000f] in <5dfd69ae4e3b402db546d8ded6fc755e>:0 
  at CoreLib.StratifiedInlining.sendCalltreeToServer (System.String calltree) [0x00046] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at CoreLib.StratifiedInlining.UnSatCoreSplitStyleParallel (System.Collections.Generic.HashSet`1[T] openCallSites, CoreLib.StratifiedInliningErrorReporter reporter, CoreLib.StratifiedInlining+TimeGraph timeGraph, System.Collections.Generic.Stack`1[T] prevMustAssertedSoFar, System.Collections.Generic.Stack`1[T] backtrack, System.Collections.Generic.Stack`1[T] dc) [0x00dfa] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at CoreLib.StratifiedInlining.VerifyImplementationHydra (Microsoft.Boogie.Implementation impl, Microsoft.Boogie.VerifierCallback callback) [0x00e27] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at CoreLib.StratifiedInlining.VerifyImplementation (Microsoft.Boogie.Implementation impl, Microsoft.Boogie.VerifierCallback callback) [0x0000a] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at VC.ConditionGeneration.VerifyImplementation (Microsoft.Boogie.Implementation impl, System.Collections.Generic.List`1[Microsoft.Boogie.Counterexample]& errors, System.String requestId) [0x00019] in <16ef557c336342649ed42d06c590e799>:0 
  at cba.Util.BoogieVerify.Verify (Microsoft.Boogie.Program program, System.Boolean needErrorTraces, System.Collections.Generic.List`1[cba.Util.BoogieErrorTrace]& allErrors, System.Collections.Generic.List`1[System.String]& timedOut, System.Boolean isCBA) [0x003da] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at cba.Util.BoogieVerify.Verify (Microsoft.Boogie.Program program, System.Collections.Generic.List`1[cba.Util.BoogieErrorTrace]& allErrors, System.Boolean isCBA) [0x00007] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at cba.Driver.GetInputProgram (cba.Configs config) [0x001aa] in <d8773d033380480cb4bcac8472317e05>:0 
  at cba.Driver.run (System.String[] args) [0x00073] in <d8773d033380480cb4bcac8472317e05>:0 
  at cba.Driver.Main (System.String[] args) [0x00067] in <d8773d033380480cb4bcac8472317e05>:0 
---> (Inner Exception #0) System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.IO.IOException: The server returned an invalid or unrecognized response.
  at System.Net.Http.HttpConnection.SendAsyncCore (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x00cf5] in <058a720a2a3f4087a491439aab537fb3>:0 
   --- End of inner exception stack trace ---
  at System.Net.Http.HttpConnection.SendAsyncCore (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x012e5] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpConnectionPool.SendWithNtConnectionAuthAsync (System.Net.Http.HttpConnection connection, System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x0012b] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpConnectionPool.SendWithRetryAsync (System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x0014b] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.RedirectHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ba] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpClient.FinishSendAsyncBuffered (System.Threading.Tasks.Task`1[TResult] sendTask, System.Net.Http.HttpRequestMessage request, System.Threading.CancellationTokenSource cts, System.Boolean disposeCts) [0x0017e] in <058a720a2a3f4087a491439aab537fb3>:0 <---

[ERROR] FATAL UNHANDLED EXCEPTION: System.AggregateException: One or more errors occurred. (An error occurred while sending the request.) ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.IO.IOException: The server returned an invalid or unrecognized response.
  at System.Net.Http.HttpConnection.SendAsyncCore (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x00cf5] in <058a720a2a3f4087a491439aab537fb3>:0 
   --- End of inner exception stack trace ---
  at System.Net.Http.HttpConnection.SendAsyncCore (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x012e5] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpConnectionPool.SendWithNtConnectionAuthAsync (System.Net.Http.HttpConnection connection, System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x0012b] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpConnectionPool.SendWithRetryAsync (System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x0014b] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.RedirectHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ba] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpClient.FinishSendAsyncBuffered (System.Threading.Tasks.Task`1[TResult] sendTask, System.Net.Http.HttpRequestMessage request, System.Threading.CancellationTokenSource cts, System.Boolean disposeCts) [0x0017e] in <058a720a2a3f4087a491439aab537fb3>:0 
   --- End of inner exception stack trace ---
  at System.Threading.Tasks.Task.ThrowIfExceptional (System.Boolean includeTaskCanceledExceptions) [0x00011] in <5dfd69ae4e3b402db546d8ded6fc755e>:0 
  at System.Threading.Tasks.Task`1[TResult].GetResultCore (System.Boolean waitCompletionNotification) [0x0002b] in <5dfd69ae4e3b402db546d8ded6fc755e>:0 
  at System.Threading.Tasks.Task`1[TResult].get_Result () [0x0000f] in <5dfd69ae4e3b402db546d8ded6fc755e>:0 
  at CoreLib.StratifiedInlining.sendCalltreeToServer (System.String calltree) [0x00046] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at CoreLib.StratifiedInlining.UnSatCoreSplitStyleParallel (System.Collections.Generic.HashSet`1[T] openCallSites, CoreLib.StratifiedInliningErrorReporter reporter, CoreLib.StratifiedInlining+TimeGraph timeGraph, System.Collections.Generic.Stack`1[T] prevMustAssertedSoFar, System.Collections.Generic.Stack`1[T] backtrack, System.Collections.Generic.Stack`1[T] dc) [0x00dfa] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at CoreLib.StratifiedInlining.VerifyImplementationHydra (Microsoft.Boogie.Implementation impl, Microsoft.Boogie.VerifierCallback callback) [0x00e27] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at CoreLib.StratifiedInlining.VerifyImplementation (Microsoft.Boogie.Implementation impl, Microsoft.Boogie.VerifierCallback callback) [0x0000a] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at VC.ConditionGeneration.VerifyImplementation (Microsoft.Boogie.Implementation impl, System.Collections.Generic.List`1[Microsoft.Boogie.Counterexample]& errors, System.String requestId) [0x00019] in <16ef557c336342649ed42d06c590e799>:0 
  at cba.Util.BoogieVerify.Verify (Microsoft.Boogie.Program program, System.Boolean needErrorTraces, System.Collections.Generic.List`1[cba.Util.BoogieErrorTrace]& allErrors, System.Collections.Generic.List`1[System.String]& timedOut, System.Boolean isCBA) [0x003da] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at cba.Util.BoogieVerify.Verify (Microsoft.Boogie.Program program, System.Collections.Generic.List`1[cba.Util.BoogieErrorTrace]& allErrors, System.Boolean isCBA) [0x00007] in <5b4399bd4a074d3ea7c5e48f4857fdf5>:0 
  at cba.Driver.GetInputProgram (cba.Configs config) [0x001aa] in <d8773d033380480cb4bcac8472317e05>:0 
  at cba.Driver.run (System.String[] args) [0x00073] in <d8773d033380480cb4bcac8472317e05>:0 
  at cba.Driver.Main (System.String[] args) [0x00067] in <d8773d033380480cb4bcac8472317e05>:0 
---> (Inner Exception #0) System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.IO.IOException: The server returned an invalid or unrecognized response.
  at System.Net.Http.HttpConnection.SendAsyncCore (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x00cf5] in <058a720a2a3f4087a491439aab537fb3>:0 
   --- End of inner exception stack trace ---
  at System.Net.Http.HttpConnection.SendAsyncCore (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x012e5] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpConnectionPool.SendWithNtConnectionAuthAsync (System.Net.Http.HttpConnection connection, System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x0012b] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpConnectionPool.SendWithRetryAsync (System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x0014b] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.RedirectHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ba] in <058a720a2a3f4087a491439aab537fb3>:0 
  at System.Net.Http.HttpClient.FinishSendAsyncBuffered (System.Threading.Tasks.Task`1[TResult] sendTask, System.Net.Http.HttpRequestMessage request, System.Threading.CancellationTokenSource cts, System.Boolean disposeCts) [0x0017e] in <058a720a2a3f4087a491439aab537fb3>:0 <---

8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 41 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 41 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 51 currentId 41
Added AND Nodes: 50 51
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 51 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 5 with id = 55 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 61 currentId 55
Added AND Nodes: 60 61
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 61 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 7 with id = 51 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 71 currentId 51
Added AND Nodes: 70 71
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 71 from client 11 to 8
8 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
11 => Spliiting due to client waiting
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 7 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 81 currentId 61
Added AND Nodes: 80 81
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 81 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => Spliiting due to client waiting
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 76 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 7 with id = 81 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 81
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 96 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 7 with id = 101 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 106 from client 4 to 6
6 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 28 with id = 105 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 105
Added AND Nodes: 110 111
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 111 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 8 with id = 106 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 116 from client 6 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 204 with id = 110 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 110
Added AND Nodes: 120 121
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 71 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 126 currentId 71
Added AND Nodes: 125 126
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 126 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => callsites count before spliiting 219 with id = 116 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 131 currentId 116
Added AND Nodes: 130 131
5 => callsites count before spliiting 201 with id = 111 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 136 currentId 111
Added AND Nodes: 135 136
4 => outcome: Errors
Outcome NOK bestAlgo updated to 1
Verification Outcome : NOK
Time Taken : 16.320057
bestAlgo: 1
6 => outcome: Errors
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_false-unreach-call_linux-3.8-rc1-32_7a-fs--ubifs--ubifs.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => Spliiting due to client waiting
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 21 currentId 6
Added AND Nodes: 20 21
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 21 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 8 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 26 currentId 11
Added AND Nodes: 25 26
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 26 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
for clientid : 10 algo id is 2
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 26 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 26
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 4 with id = 21 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 41 currentId 21
Added AND Nodes: 40 41
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 41 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 4 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 46 currentId 31
Added AND Nodes: 45 46
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 46 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 51 currentId 36
Added AND Nodes: 50 51
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 51 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 15 with id = 46 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 56 from client 10 to 8
8 => after replyFromServer: 50
10 => Spliiting due to client waiting
7 => Spliiting due to client waiting
10 => callsites count before spliiting 24 with id = 55 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 61 currentId 55
Added AND Nodes: 60 61
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 61 from client 10 to 11
11 => after replyFromServer: 50
7 => callsites count before spliiting 1 with id = 51 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 66 currentId 51
Added AND Nodes: 65 66
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 66 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 32 with id = 60 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 71 currentId 60
Added AND Nodes: 70 71
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 71 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 66 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 76 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 30 with id = 75 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 75
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 10 with id = 76 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 8 with id = 71 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 91 currentId 71
Added AND Nodes: 90 91
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 91 from client 9 to 10
10 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 24 with id = 85 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 96 currentId 85
Added AND Nodes: 95 96
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 96 from client 5 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 32 with id = 95 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 101 currentId 95
Added AND Nodes: 100 101
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 101 from client 5 to 6
6 => after replyFromServer: 0
5 => callsites count before spliiting 238 with id = 100 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 100
Added AND Nodes: 105 106
7 => callsites count before spliiting 217 with id = 86 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 111 currentId 86
Added AND Nodes: 110 111
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 207 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 96
Added AND Nodes: 115 116
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 201 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 121 currentId 101
Added AND Nodes: 120 121
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 240 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 126 currentId 111
Added AND Nodes: 125 126
4 => callsites count before spliiting 257 with id = 116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 131 currentId 116
Added AND Nodes: 130 131
4 => callsites count before spliiting 268 with id = 130 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 136 currentId 130
Added AND Nodes: 135 136
4 => callsites count before spliiting 227 with id = 135 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 135
Added AND Nodes: 140 141
2 => Spliiting due to client waiting
2 => callsites count before spliiting 8 with id = 41 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 146 currentId 41
Added AND Nodes: 145 146
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 146 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => outcome: Errors
Outcome NOK bestAlgo updated to 1
Verification Outcome : NOK
Time Taken : 909.096229
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_false-unreach-call_linux-3.8-rc1-drivers--gpu--drm--vmwgfx--vmwgfx.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
for clientid : 1 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 7 algo id is 1
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 25 26
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 26 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 36 currentId 31
Added AND Nodes: 35 36
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 36 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 6 with id = 26 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 41 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 41 from client 9 to 10
10 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 13 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 46 currentId 6
Added AND Nodes: 45 46
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 46 from client 0 to 2
2 => after replyFromServer: 100
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 36 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 36
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 41 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 56 currentId 41
Added AND Nodes: 55 56
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 56 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 51
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 17 with id = 56 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 71 currentId 56
Added AND Nodes: 70 71
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 71 from client 11 to 8
8 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 17 with id = 76 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 37 with id = 80 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 86 currentId 80
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 71 with id = 85 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 91 currentId 85
Added AND Nodes: 90 91
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 91 from client 7 to 6
6 => after replyFromServer: 0
7 => callsites count before spliiting 232 with id = 90 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 90
Added AND Nodes: 95 96
4 => callsites count before spliiting 264 with id = 81 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 81
Added AND Nodes: 100 101
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 264 with id = 91 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 91
Added AND Nodes: 105 106
5 => callsites count before spliiting 274 with id = 86 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 111 currentId 86
Added AND Nodes: 110 111
7 => callsites count before spliiting 355 with id = 95 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 116 currentId 95
Added AND Nodes: 115 116
7 => callsites count before spliiting 337 with id = 115 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 115
Added AND Nodes: 120 121
6 => callsites count before spliiting 289 with id = 105 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 126 currentId 105
Added AND Nodes: 125 126
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 203 with id = 110 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 131 currentId 110
Added AND Nodes: 130 131
4 => callsites count before spliiting 276 with id = 101 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 136 currentId 101
Added AND Nodes: 135 136
4 => callsites count before spliiting 210 with id = 135 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 135
Added AND Nodes: 140 141
7 => callsites count before spliiting 307 with id = 120 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 146 currentId 120
Added AND Nodes: 145 146
5 => callsites count before spliiting 366 with id = 130 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 151 currentId 130
Added AND Nodes: 150 151
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 361 with id = 126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 156 currentId 126
Added AND Nodes: 155 156
11 => Spliiting due to client waiting
11 => callsites count before spliiting 21 with id = 70 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 161 currentId 70
Added AND Nodes: 160 161
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 161 from client 11 to 9
9 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => callsites count before spliiting 40 with id = 160 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 166 currentId 160
Added AND Nodes: 165 166
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 166 from client 11 to 10
10 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 3 with id = 46 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 171 currentId 46
Added AND Nodes: 170 171
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 171 from client 2 to 1
1 => after replyFromServer: 100
4 => callsites count before spliiting 397 with id = 140 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 140
Added AND Nodes: 175 176
7 => callsites count before spliiting 349 with id = 145 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 181 currentId 145
Added AND Nodes: 180 181
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 417 with id = 155 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 186 currentId 155
Added AND Nodes: 185 186
6 => callsites count before spliiting 282 with id = 185 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 191 currentId 185
Added AND Nodes: 190 191
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 345 with id = 151 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 196 currentId 151
Added AND Nodes: 195 196
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => Spliiting due to client waiting
1 => callsites count before spliiting 6 with id = 171 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 201 currentId 171
Added AND Nodes: 200 201
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 201 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
4 => callsites count before spliiting 417 with id = 175 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 206 currentId 175
Added AND Nodes: 205 206
4 => callsites count before spliiting 220 with id = 205 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 211 currentId 205
Added AND Nodes: 210 211
2 => Spliiting due to client waiting
2 => callsites count before spliiting 7 with id = 170 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 216 currentId 170
Added AND Nodes: 215 216
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 216 from client 2 to 0
0 => after replyFromServer: 100
4 => callsites count before spliiting 232 with id = 210 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 221 currentId 210
Added AND Nodes: 220 221
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 246 with id = 221 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 226 currentId 221
Added AND Nodes: 225 226
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 333 with id = 226 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 231 currentId 226
Added AND Nodes: 230 231
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 207 with id = 231 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 236 currentId 231
Added AND Nodes: 235 236
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 254 with id = 181 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 241 currentId 181
Added AND Nodes: 240 241
4 => callsites count before spliiting 423 with id = 236 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 246 currentId 236
Added AND Nodes: 245 246
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 281 with id = 246 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 251 currentId 246
Added AND Nodes: 250 251
4 => callsites count before spliiting 410 with id = 250 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 256 currentId 250
Added AND Nodes: 255 256
6 => callsites count before spliiting 200 with id = 191 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 261 currentId 191
Added AND Nodes: 260 261
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 447 with id = 255 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 266 currentId 255
Added AND Nodes: 265 266
4 => callsites count before spliiting 454 with id = 265 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 271 currentId 265
Added AND Nodes: 270 271
3 => Spliiting due to client waiting
3 => callsites count before spliiting 9 with id = 201 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 276 currentId 201
Added AND Nodes: 275 276
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 276 from client 3 to 1
1 => after replyFromServer: 100
4 => callsites count before spliiting 587 with id = 270 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 281 currentId 270
Added AND Nodes: 280 281
4 => callsites count before spliiting 781 with id = 280 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 286 currentId 280
Added AND Nodes: 285 286
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 364 with id = 286 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 291 currentId 286
Added AND Nodes: 290 291
4 => callsites count before spliiting 606 with id = 290 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 296 currentId 290
Added AND Nodes: 295 296
4 => callsites count before spliiting 799 with id = 295 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 301 currentId 295
Added AND Nodes: 300 301
4 => callsites count before spliiting 927 with id = 300 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 306 currentId 300
Added AND Nodes: 305 306
11 => callsites count before spliiting 202 with id = 165 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 311 currentId 165
Added AND Nodes: 310 311
4 => callsites count before spliiting 1161 with id = 305 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 316 currentId 305
Added AND Nodes: 315 316
11 => callsites count before spliiting 372 with id = 310 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 321 currentId 310
Added AND Nodes: 320 321
4 => callsites count before spliiting 1355 with id = 315 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 326 currentId 315
Added AND Nodes: 325 326
4 => callsites count before spliiting 1625 with id = 325 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 331 currentId 325
Added AND Nodes: 330 331
4 => callsites count before spliiting 1972 with id = 330 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 336 currentId 330
Added AND Nodes: 335 336
4 => callsites count before spliiting 2176 with id = 335 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 341 currentId 335
Added AND Nodes: 340 341
4 => callsites count before spliiting 2330 with id = 340 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 346 currentId 340
Added AND Nodes: 345 346
6 => callsites count before spliiting 203 with id = 261 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 351 currentId 261
Added AND Nodes: 350 351
11 => callsites count before spliiting 523 with id = 320 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 356 currentId 320
Added AND Nodes: 355 356
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => callsites count before spliiting 2712 with id = 345 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 361 currentId 345
Added AND Nodes: 360 361
10 => callsites count before spliiting 209 with id = 166 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 366 currentId 166
Added AND Nodes: 365 366
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => callsites count before spliiting 3100 with id = 360 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 371 currentId 360
Added AND Nodes: 370 371
4 => callsites count before spliiting 3364 with id = 370 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 376 currentId 370
Added AND Nodes: 375 376
11 => callsites count before spliiting 219 with id = 356 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 381 currentId 356
Added AND Nodes: 380 381
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => callsites count before spliiting 3741 with id = 375 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 386 currentId 375
Added AND Nodes: 385 386
6 => callsites count before spliiting 204 with id = 350 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 391 currentId 350
Added AND Nodes: 390 391
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 3983 with id = 385 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 396 currentId 385
Added AND Nodes: 395 396
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 458 with id = 196 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 401 currentId 196
Added AND Nodes: 400 401
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 200 with id = 391 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 406 currentId 391
Added AND Nodes: 405 406
4 => callsites count before spliiting 494 with id = 396 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 411 currentId 396
Added AND Nodes: 410 411
4 => callsites count before spliiting 592 with id = 410 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 416 currentId 410
Added AND Nodes: 415 416
6 => callsites count before spliiting 216 with id = 405 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 421 currentId 405
Added AND Nodes: 420 421
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 536 with id = 415 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 426 currentId 415
Added AND Nodes: 425 426
4 => callsites count before spliiting 492 with id = 425 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 431 currentId 425
Added AND Nodes: 430 431
9 => callsites count before spliiting 213 with id = 161 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 436 currentId 161
Added AND Nodes: 435 436
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
4 => callsites count before spliiting 494 with id = 430 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 441 currentId 430
Added AND Nodes: 440 441
6 => callsites count before spliiting 203 with id = 421 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 446 currentId 421
Added AND Nodes: 445 446
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 360 with id = 240 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 451 currentId 240
Added AND Nodes: 450 451
4 => callsites count before spliiting 526 with id = 440 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 456 currentId 440
Added AND Nodes: 455 456
10 => callsites count before spliiting 324 with id = 366 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 461 currentId 366
Added AND Nodes: 460 461
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => callsites count before spliiting 618 with id = 455 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 466 currentId 455
Added AND Nodes: 465 466
6 => callsites count before spliiting 205 with id = 446 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 471 currentId 446
Added AND Nodes: 470 471
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 671 with id = 465 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 476 currentId 465
Added AND Nodes: 475 476
4 => callsites count before spliiting 524 with id = 475 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 481 currentId 475
Added AND Nodes: 480 481
9 => callsites count before spliiting 357 with id = 436 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 486 currentId 436
Added AND Nodes: 485 486
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 339 with id = 71 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 491 currentId 71
Added AND Nodes: 490 491
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => callsites count before spliiting 380 with id = 480 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 496 currentId 480
Added AND Nodes: 495 496
4 => callsites count before spliiting 282 with id = 495 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 501 currentId 495
Added AND Nodes: 500 501
6 => callsites count before spliiting 214 with id = 471 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 506 currentId 471
Added AND Nodes: 505 506
4 => callsites count before spliiting 311 with id = 500 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 511 currentId 500
Added AND Nodes: 510 511
6 => callsites count before spliiting 200 with id = 505 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 516 currentId 505
Added AND Nodes: 515 516
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--media--dvb-core--dvb-core.ko-ldv_main5_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
for clientid : 10 algo id is 2
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
for clientid : 11 algo id is 2
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => callsites count before spliiting 58 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 1
1 => after replyFromServer: 100
8 => Spliiting due to client waiting
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 46 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 46 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 41
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 56 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 56 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 61 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 61 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 66 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 66 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 71 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 71 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 76 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 76 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 81 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 81 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => callsites count before spliiting 58 with id = 46 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 91 currentId 46
Added AND Nodes: 90 91
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 91 from client 10 to 11
11 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 86 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 101 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => callsites count before spliiting 69 with id = 31 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 111 currentId 31
Added AND Nodes: 110 111
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 111 from client 1 to 2
2 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 106 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 116 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 116 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 121 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 121 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 126 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 126 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 131 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 131 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 136 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 136 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 141 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 91 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 146 currentId 91
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 141 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 151 from client 4 to 5
5 => after replyFromServer: 0
Added AND Nodes: 145 146
clientID of largest queue : 11
clientCalltreeQueue Count : 1
4 => LOOP outcome: Correct & reachbound = False
Assign partition 146 from client 11 to 8
Added New : 
4 : 
8 => after replyFromServer: 50
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 151 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 156 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 156 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 161 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 161 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 166 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 166 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 171 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 171 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 176 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 176 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 181 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 181 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 186 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 186 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 191 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 191 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 196 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 196 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 201 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 201 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 206 currentId 201
Added AND Nodes: 205 206
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 206 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 206 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 211 currentId 206
Added AND Nodes: 210 211
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 211 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 211 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 216 currentId 211
Added AND Nodes: 215 216
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 216 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 216 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 221 currentId 216
Added AND Nodes: 220 221
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 221 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 221 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 226 currentId 221
Added AND Nodes: 225 226
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 226 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 226 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 231 currentId 226
Added AND Nodes: 230 231
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 231 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 231 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 236 currentId 231
Added AND Nodes: 235 236
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 236 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 236 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 241 currentId 236
Added AND Nodes: 240 241
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 241 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 241 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 246 currentId 241
Added AND Nodes: 245 246
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 246 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 246 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 251 currentId 246
Added AND Nodes: 250 251
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 251 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 251 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 256 currentId 251
Added AND Nodes: 255 256
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 256 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 256 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 261 currentId 256
Added AND Nodes: 260 261
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 261 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 261 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 266 currentId 261
Added AND Nodes: 265 266
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 266 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 266 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 271 currentId 266
Added AND Nodes: 270 271
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 271 from client 4 to 5
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => after replyFromServer: 0
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 271 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 276 currentId 271
Added AND Nodes: 275 276
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 276 from client 5 to 6
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 68 with id = 276 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 281 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 281 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 286 currentId 281
Added AND Nodes: 285 286
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 286 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 286 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 291 currentId 286
Added AND Nodes: 290 291
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 291 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 291 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 296 currentId 291
Added AND Nodes: 295 296
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 296 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 296 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 301 currentId 296
Added AND Nodes: 300 301
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 301 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 301 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 306 currentId 301
Added AND Nodes: 305 306
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 306 from client 7 to 4
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 306 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 311 currentId 306
Added AND Nodes: 310 311
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 311 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 311 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 316 currentId 311
Added AND Nodes: 315 316
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 316 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 316 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 321 currentId 316
Added AND Nodes: 320 321
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 321 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 321 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 326 currentId 321
Added AND Nodes: 325 326
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 326 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 326 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 331 currentId 326
Added AND Nodes: 330 331
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 331 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 331 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 336 currentId 331
Added AND Nodes: 335 336
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 336 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 336 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 341 currentId 336
Added AND Nodes: 340 341
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 341 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 341 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 346 currentId 341
Added AND Nodes: 345 346
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 346 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 346 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 351 currentId 346
Added AND Nodes: 350 351
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 351 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 351 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 356 currentId 351
Added AND Nodes: 355 356
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 356 from client 5 to 6
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 356 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 361 currentId 356
Added AND Nodes: 360 361
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 361 from client 6 to 7
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => after replyFromServer: 0
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 361 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 366 currentId 361
Added AND Nodes: 365 366
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 366 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 366 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 371 currentId 366
Added AND Nodes: 370 371
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 371 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 371 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 376 currentId 371
Added AND Nodes: 375 376
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 376 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 376 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 381 currentId 376
Added AND Nodes: 380 381
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 381 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 381 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 386 currentId 381
Added AND Nodes: 385 386
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 386 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 386 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 391 currentId 386
Added AND Nodes: 390 391
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 391 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 391 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 396 currentId 391
Added AND Nodes: 395 396
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 396 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 396 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 401 currentId 396
Added AND Nodes: 400 401
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 401 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 401 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 406 currentId 401
Added AND Nodes: 405 406
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 406 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 406 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 411 currentId 406
Added AND Nodes: 410 411
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 411 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 411 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 416 currentId 411
Added AND Nodes: 415 416
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 416 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 416 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 421 currentId 416
Added AND Nodes: 420 421
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 421 from client 6 to 7
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 421 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 426 currentId 421
Added AND Nodes: 425 426
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 426 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 426 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 431 currentId 426
Added AND Nodes: 430 431
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 431 from client 4 to 5
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 431 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 436 currentId 431
Added AND Nodes: 435 436
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 436 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 436 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 441 currentId 436
Added AND Nodes: 440 441
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 441 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 441 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 446 currentId 441
Added AND Nodes: 445 446
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 446 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 446 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 451 currentId 446
Added AND Nodes: 450 451
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 451 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 451 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 456 currentId 451
Added AND Nodes: 455 456
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 456 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 456 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 461 currentId 456
Added AND Nodes: 460 461
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 461 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 461 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 466 currentId 461
Added AND Nodes: 465 466
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 466 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 466 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 471 currentId 466
Added AND Nodes: 470 471
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 471 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 471 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 476 currentId 471
Added AND Nodes: 475 476
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 476 from client 5 to 6
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 476 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 481 currentId 476
Added AND Nodes: 480 481
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 481 from client 6 to 7
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => after replyFromServer: 0
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 481 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 486 currentId 481
Added AND Nodes: 485 486
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 486 from client 7 to 4
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 486 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 491 currentId 486
Added AND Nodes: 490 491
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 491 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 491 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 496 currentId 491
Added AND Nodes: 495 496
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 496 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 496 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 501 currentId 496
Added AND Nodes: 500 501
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 501 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 501 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 506 currentId 501
Added AND Nodes: 505 506
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 506 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 506 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 511 currentId 506
Added AND Nodes: 510 511
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 511 from client 4 to 5
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 511 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 516 currentId 511
Added AND Nodes: 515 516
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 516 from client 5 to 6
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 516 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 521 currentId 516
Added AND Nodes: 520 521
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 521 from client 6 to 7
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 521 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 526 currentId 521
Added AND Nodes: 525 526
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 526 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 526 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 531 currentId 526
Added AND Nodes: 530 531
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 531 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 531 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 536 currentId 531
Added AND Nodes: 535 536
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 536 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 536 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 541 currentId 536
Added AND Nodes: 540 541
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 541 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 541 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 546 currentId 541
Added AND Nodes: 545 546
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 546 from client 7 to 4
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 546 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 551 currentId 546
Added AND Nodes: 550 551
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 551 from client 4 to 5
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 551 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 556 currentId 551
Added AND Nodes: 555 556
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 556 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 556 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 561 currentId 556
Added AND Nodes: 560 561
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 561 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 561 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 566 currentId 561
Added AND Nodes: 565 566
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 566 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => callsites count before spliiting 56 with id = 111 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 571 currentId 111
Added AND Nodes: 570 571
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 571 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 65 with id = 146 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 576 currentId 146
Added AND Nodes: 575 576
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 576 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 576 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 581 currentId 576
Added AND Nodes: 580 581
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 581 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 19 with id = 566 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 586 currentId 566
Added AND Nodes: 585 586
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 586 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 11 with id = 586 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 591 currentId 586
Added AND Nodes: 590 591
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 591 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 17 with id = 590 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 596 currentId 590
Added AND Nodes: 595 596
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 596 from client 5 to 7
5 => Spliiting due to client waiting
7 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 23 with id = 595 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 601 currentId 595
Added AND Nodes: 600 601
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 601 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 12 with id = 591 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 606 currentId 591
Added AND Nodes: 605 606
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 606 from client 6 to 5
5 => after replyFromServer: 0
4 => callsites count before spliiting 292 with id = 601 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 611 currentId 601
Added AND Nodes: 610 611
5 => callsites count before spliiting 330 with id = 606 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 616 currentId 606
Added AND Nodes: 615 616
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 225 with id = 610 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 621 currentId 610
Added AND Nodes: 620 621
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 418 with id = 616 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 626 currentId 616
Added AND Nodes: 625 626
6 => callsites count before spliiting 228 with id = 605 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 631 currentId 605
Added AND Nodes: 630 631
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 354 with id = 621 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 636 currentId 621
Added AND Nodes: 635 636
10 => Spliiting due to client waiting
10 => callsites count before spliiting 56 with id = 581 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 641 currentId 581
Added AND Nodes: 640 641
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 641 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => callsites count before spliiting 490 with id = 625 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 646 currentId 625
Added AND Nodes: 645 646
5 => callsites count before spliiting 584 with id = 645 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 651 currentId 645
Added AND Nodes: 650 651
3 => Spliiting due to client waiting
3 => callsites count before spliiting 17 with id = 571 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 656 currentId 571
Added AND Nodes: 655 656
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 656 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
6 => callsites count before spliiting 334 with id = 631 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 661 currentId 631
Added AND Nodes: 660 661
5 => callsites count before spliiting 657 with id = 650 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 666 currentId 650
Added AND Nodes: 665 666
5 => callsites count before spliiting 582 with id = 665 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 671 currentId 665
Added AND Nodes: 670 671
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 208 with id = 596 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 676 currentId 596
Added AND Nodes: 675 676
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 272 with id = 671 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 681 currentId 671
Added AND Nodes: 680 681
5 => callsites count before spliiting 248 with id = 680 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 686 currentId 680
Added AND Nodes: 685 686
5 => callsites count before spliiting 304 with id = 685 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 691 currentId 685
Added AND Nodes: 690 691
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => Spliiting due to client waiting
11 => callsites count before spliiting 16 with id = 641 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 696 currentId 641
Added AND Nodes: 695 696
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 696 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 656 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 701 currentId 656
Added AND Nodes: 700 701
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 701 from client 0 to 1
1 => after replyFromServer: 100
6 => callsites count before spliiting 351 with id = 660 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 706 currentId 660
Added AND Nodes: 705 706
5 => callsites count before spliiting 288 with id = 691 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 711 currentId 691
Added AND Nodes: 710 711
5 => callsites count before spliiting 233 with id = 710 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 716 currentId 710
Added AND Nodes: 715 716
4 => outcome: Errors
Outcome NOK bestAlgo updated to 1
Verification Outcome : NOK
Time Taken : 468.726641
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--media--i2c--cx25840--cx25840.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 21 currentId 6
Added AND Nodes: 20 21
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 21 from client 0 to 1
1 => after replyFromServer: 100
for clientid : 7 algo id is 1
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
4 => Spliiting due to client waiting
for clientid : 0 algo id is 0
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 26 currentId 11
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
Added AND Nodes: 25 26
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 26 from client 4 to 5
5 => after replyFromServer: 0
for clientid : 11 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 36 currentId 31
Added AND Nodes: 35 36
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 36 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => Spliiting due to client waiting
5 => Spliiting due to client waiting
1 => callsites count before spliiting 9 with id = 21 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 41 currentId 21
5 => callsites count before spliiting 7 with id = 26 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 46 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 41 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
Added AND Nodes: 45 46
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 46 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 36 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 51 currentId 36
Added AND Nodes: 50 51
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 51 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 46 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 56 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 10 with id = 51 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 61 currentId 51
Added AND Nodes: 60 61
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 61 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 56 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 66 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 61 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 71 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 42 with id = 65 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 65
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 7 with id = 66 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 66
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 6
6 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 71 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 86 currentId 71
Added AND Nodes: 85 86
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 86 from client 9 to 10
10 => after replyFromServer: 50
4 => callsites count before spliiting 27 with id = 80 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 80
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 238 with id = 90 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 96 currentId 90
Added AND Nodes: 95 96
6 => callsites count before spliiting 207 with id = 81 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 101 currentId 81
Added AND Nodes: 100 101
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 200 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 106 currentId 91
Added AND Nodes: 105 106
4 => callsites count before spliiting 580 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 96
Added AND Nodes: 110 111
7 => callsites count before spliiting 444 with id = 105 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 116 currentId 105
Added AND Nodes: 115 116
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 322 with id = 116 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
4 => callsites count before spliiting 280 with id = 111 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 111
Added AND Nodes: 125 126
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 407 with id = 120 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 131 currentId 120
Added AND Nodes: 130 131
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 284 with id = 126 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 136 currentId 126
Added AND Nodes: 135 136
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => Spliiting due to client waiting
2 => callsites count before spliiting 10 with id = 41 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 141 currentId 41
Added AND Nodes: 140 141
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 141 from client 2 to 3
3 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 16 with id = 86 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 146 currentId 86
Added AND Nodes: 145 146
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 146 from client 10 to 11
11 => after replyFromServer: 50
7 => callsites count before spliiting 251 with id = 131 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 131
Added AND Nodes: 150 151
9 => Spliiting due to client waiting
9 => callsites count before spliiting 12 with id = 85 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 156 currentId 85
Added AND Nodes: 155 156
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 156 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => Spliiting due to client waiting
8 => callsites count before spliiting 5 with id = 156 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 161 from client 8 to 9
9 => after replyFromServer: 50
4 => callsites count before spliiting 215 with id = 136 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 166 currentId 136
Added AND Nodes: 165 166
6 => callsites count before spliiting 243 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 171 currentId 101
Added AND Nodes: 170 171
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 205 with id = 165 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 165
Added AND Nodes: 175 176
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 318 with id = 171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 181 currentId 171
Added AND Nodes: 180 181
6 => callsites count before spliiting 372 with id = 180 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 186 currentId 180
Added AND Nodes: 185 186
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 209 with id = 176 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 176
Added AND Nodes: 190 191
6 => callsites count before spliiting 200 with id = 186 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 196 currentId 186
Added AND Nodes: 195 196
7 => callsites count before spliiting 299 with id = 151 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 201 currentId 151
Added AND Nodes: 200 201
2 => Spliiting due to client waiting
2 => callsites count before spliiting 16 with id = 140 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 206 currentId 140
Added AND Nodes: 205 206
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 206 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
7 => callsites count before spliiting 253 with id = 200 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 211 currentId 200
Added AND Nodes: 210 211
4 => callsites count before spliiting 201 with id = 190 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 216 currentId 190
Added AND Nodes: 215 216
3 => Spliiting due to client waiting
3 => callsites count before spliiting 10 with id = 141 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 221 currentId 141
Added AND Nodes: 220 221
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 221 from client 3 to 1
1 => after replyFromServer: 100
7 => callsites count before spliiting 204 with id = 210 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 226 currentId 210
Added AND Nodes: 225 226
7 => callsites count before spliiting 205 with id = 225 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 231 currentId 225
Added AND Nodes: 230 231
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 200 with id = 215 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 236 currentId 215
Added AND Nodes: 235 236
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 202 with id = 226 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 241 currentId 226
Added AND Nodes: 240 241
6 => callsites count before spliiting 201 with id = 196 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 246 currentId 196
Added AND Nodes: 245 246
0 => Spliiting due to client waiting
0 => callsites count before spliiting 19 with id = 206 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 251 currentId 206
Added AND Nodes: 250 251
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 251 from client 0 to 2
2 => after replyFromServer: 100
4 => callsites count before spliiting 216 with id = 236 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 256 currentId 236
Added AND Nodes: 255 256
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 201 with id = 245 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 261 currentId 245
Added AND Nodes: 260 261
7 => callsites count before spliiting 203 with id = 211 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 266 currentId 211
Added AND Nodes: 265 266
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 212 with id = 256 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 271 currentId 256
Added AND Nodes: 270 271
6 => callsites count before spliiting 203 with id = 261 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 276 currentId 261
Added AND Nodes: 275 276
7 => callsites count before spliiting 203 with id = 265 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 281 currentId 265
Added AND Nodes: 280 281
6 => callsites count before spliiting 201 with id = 275 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 286 currentId 275
Added AND Nodes: 285 286
8 => callsites count before spliiting 208 with id = 160 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 291 currentId 160
Added AND Nodes: 290 291
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => callsites count before spliiting 200 with id = 270 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 296 currentId 270
Added AND Nodes: 295 296
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 247 with id = 76 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 301 currentId 76
Added AND Nodes: 300 301
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 202 with id = 285 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 306 currentId 285
Added AND Nodes: 305 306
7 => callsites count before spliiting 201 with id = 280 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 311 currentId 280
Added AND Nodes: 310 311
5 => callsites count before spliiting 321 with id = 301 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 316 currentId 301
Added AND Nodes: 315 316
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 505 with id = 315 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 321 currentId 315
Added AND Nodes: 320 321
6 => callsites count before spliiting 200 with id = 305 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 326 currentId 305
Added AND Nodes: 325 326
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 202 with id = 321 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 331 currentId 321
Added AND Nodes: 330 331
5 => callsites count before spliiting 232 with id = 330 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 336 currentId 330
Added AND Nodes: 335 336
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 214 with id = 271 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 341 currentId 271
Added AND Nodes: 340 341
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 209 with id = 336 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 346 currentId 336
Added AND Nodes: 345 346
0 => callsites count before spliiting 77 with id = 250 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 351 currentId 250
Added AND Nodes: 350 351
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 78 with id = 221 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 356 currentId 221
Added AND Nodes: 355 356
1 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 88 with id = 220 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 361 currentId 220
Added AND Nodes: 360 361
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 74 with id = 251 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 366 currentId 251
Added AND Nodes: 365 366
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 220 with id = 316 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 371 currentId 316
Added AND Nodes: 370 371
6 => callsites count before spliiting 285 with id = 181 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 376 currentId 181
Added AND Nodes: 375 376
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 276 with id = 370 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 381 currentId 370
Added AND Nodes: 380 381
5 => callsites count before spliiting 397 with id = 380 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 386 currentId 380
Added AND Nodes: 385 386
4 => callsites count before spliiting 201 with id = 341 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 391 currentId 341
Added AND Nodes: 390 391
6 => callsites count before spliiting 281 with id = 375 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 396 currentId 375
Added AND Nodes: 395 396
7 => callsites count before spliiting 201 with id = 311 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 401 currentId 311
Added AND Nodes: 400 401
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 208 with id = 395 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 406 currentId 395
Added AND Nodes: 405 406
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 202 with id = 391 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 411 currentId 391
Added AND Nodes: 410 411
7 => callsites count before spliiting 200 with id = 281 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 416 currentId 281
Added AND Nodes: 415 416
5 => callsites count before spliiting 253 with id = 385 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 421 currentId 385
Added AND Nodes: 420 421
9 => callsites count before spliiting 318 with id = 161 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 426 currentId 161
Added AND Nodes: 425 426
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 66 with id = 356 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 431 currentId 356
Added AND Nodes: 430 431
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 58 with id = 351 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 436 currentId 351
Added AND Nodes: 435 436
0 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 218 with id = 420 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 441 currentId 420
Added AND Nodes: 440 441
3 => callsites count before spliiting 64 with id = 361 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 446 currentId 361
Added AND Nodes: 445 446
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 249 with id = 291 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 451 currentId 291
Added AND Nodes: 450 451
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 211 with id = 406 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 456 currentId 406
Added AND Nodes: 455 456
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 208 with id = 440 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 461 currentId 440
Added AND Nodes: 460 461
4 => callsites count before spliiting 203 with id = 410 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 466 currentId 410
Added AND Nodes: 465 466
5 => callsites count before spliiting 206 with id = 460 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 471 currentId 460
Added AND Nodes: 470 471
7 => callsites count before spliiting 307 with id = 201 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 476 currentId 201
Added AND Nodes: 475 476
9 => callsites count before spliiting 382 with id = 426 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 481 currentId 426
Added AND Nodes: 480 481
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 200 with id = 481 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 486 currentId 481
Added AND Nodes: 485 486
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 202 with id = 471 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 491 currentId 471
Added AND Nodes: 490 491
6 => callsites count before spliiting 203 with id = 456 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 496 currentId 456
Added AND Nodes: 495 496
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 202 with id = 490 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 501 currentId 490
Added AND Nodes: 500 501
2 => callsites count before spliiting 55 with id = 366 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 506 currentId 366
Added AND Nodes: 505 506
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 202 with id = 216 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 511 currentId 216
Added AND Nodes: 510 511
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
9 => callsites count before spliiting 224 with id = 485 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 516 currentId 485
Added AND Nodes: 515 516
4 => callsites count before spliiting 207 with id = 191 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 521 currentId 191
Added AND Nodes: 520 521
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 203 with id = 495 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 526 currentId 495
Added AND Nodes: 525 526
5 => callsites count before spliiting 206 with id = 461 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 531 currentId 461
Added AND Nodes: 530 531
4 => callsites count before spliiting 208 with id = 520 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 536 currentId 520
Added AND Nodes: 535 536
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 231 with id = 530 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 541 currentId 530
Added AND Nodes: 540 541
5 => callsites count before spliiting 229 with id = 540 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 546 currentId 540
Added AND Nodes: 545 546
9 => callsites count before spliiting 263 with id = 515 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 551 currentId 515
Added AND Nodes: 550 551
4 => callsites count before spliiting 213 with id = 536 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 556 currentId 536
Added AND Nodes: 555 556
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 218 with id = 525 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 561 currentId 525
Added AND Nodes: 560 561
7 => callsites count before spliiting 227 with id = 475 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 566 currentId 475
Added AND Nodes: 565 566
2 => callsites count before spliiting 51 with id = 506 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 571 currentId 506
Added AND Nodes: 570 571
9 => callsites count before spliiting 300 with id = 550 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 576 currentId 550
Added AND Nodes: 575 576
10 => callsites count before spliiting 223 with id = 145 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 581 currentId 145
Added AND Nodes: 580 581
7 => callsites count before spliiting 223 with id = 565 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 586 currentId 565
Added AND Nodes: 585 586
6 => callsites count before spliiting 208 with id = 560 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 591 currentId 560
Added AND Nodes: 590 591
11 => callsites count before spliiting 228 with id = 146 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 596 currentId 146
Added AND Nodes: 595 596
9 => callsites count before spliiting 324 with id = 575 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 601 currentId 575
Added AND Nodes: 600 601
10 => callsites count before spliiting 231 with id = 580 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 606 currentId 580
Added AND Nodes: 605 606
7 => callsites count before spliiting 219 with id = 585 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 611 currentId 585
Added AND Nodes: 610 611
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 51 with id = 431 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 616 currentId 431
Added AND Nodes: 615 616
11 => callsites count before spliiting 233 with id = 595 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 621 currentId 595
Added AND Nodes: 620 621
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
5 => callsites count before spliiting 205 with id = 545 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 626 currentId 545
Added AND Nodes: 625 626
10 => callsites count before spliiting 235 with id = 605 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 631 currentId 605
Added AND Nodes: 630 631
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 227 with id = 611 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 636 currentId 611
Added AND Nodes: 635 636
11 => callsites count before spliiting 259 with id = 621 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 641 currentId 621
Added AND Nodes: 640 641
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 376 with id = 600 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 646 currentId 600
Added AND Nodes: 645 646
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => callsites count before spliiting 247 with id = 635 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 651 currentId 635
Added AND Nodes: 650 651
5 => callsites count before spliiting 216 with id = 626 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 656 currentId 626
Added AND Nodes: 655 656
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 207 with id = 556 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 661 currentId 556
Added AND Nodes: 660 661
2 => callsites count before spliiting 76 with id = 570 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 666 currentId 570
Added AND Nodes: 665 666
0 => callsites count before spliiting 51 with id = 436 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 671 currentId 436
Added AND Nodes: 670 671
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 201 with id = 451 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 676 currentId 451
Added AND Nodes: 675 676
5 => callsites count before spliiting 207 with id = 656 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 681 currentId 656
Added AND Nodes: 680 681
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 62 with id = 446 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 686 currentId 446
Added AND Nodes: 685 686
6 => callsites count before spliiting 201 with id = 590 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 691 currentId 590
Added AND Nodes: 690 691
2 => callsites count before spliiting 63 with id = 665 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 696 currentId 665
Added AND Nodes: 695 696
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 214 with id = 650 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 701 currentId 650
Added AND Nodes: 700 701
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 213 with id = 681 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 706 currentId 681
Added AND Nodes: 705 706
8 => callsites count before spliiting 294 with id = 675 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 711 currentId 675
Added AND Nodes: 710 711
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 85 with id = 615 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 716 currentId 615
Added AND Nodes: 715 716
1 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 216 with id = 700 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 721 currentId 700
Added AND Nodes: 720 721
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 208 with id = 705 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 726 currentId 705
Added AND Nodes: 725 726
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 206 with id = 721 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 731 currentId 721
Added AND Nodes: 730 731
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
8 => callsites count before spliiting 300 with id = 710 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 736 currentId 710
Added AND Nodes: 735 736
4 => callsites count before spliiting 209 with id = 660 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 741 currentId 660
Added AND Nodes: 740 741
7 => callsites count before spliiting 215 with id = 730 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 746 currentId 730
Added AND Nodes: 745 746
6 => callsites count before spliiting 209 with id = 591 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 751 currentId 591
Added AND Nodes: 750 751
7 => callsites count before spliiting 209 with id = 745 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 756 currentId 745
Added AND Nodes: 755 756
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 218 with id = 706 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 761 currentId 706
Added AND Nodes: 760 761
6 => callsites count before spliiting 217 with id = 750 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 766 currentId 750
Added AND Nodes: 765 766
11 => callsites count before spliiting 327 with id = 641 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 771 currentId 641
Added AND Nodes: 770 771
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => callsites count before spliiting 208 with id = 756 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 776 currentId 756
8 => callsites count before spliiting 418 with id = 735 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 781 currentId 735
Added AND Nodes: 775 776
Added AND Nodes: 780 781
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 66 with id = 716 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 786 currentId 716
Added AND Nodes: 785 786
8 => callsites count before spliiting 266 with id = 781 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 791 currentId 781
Added AND Nodes: 790 791
4 => callsites count before spliiting 202 with id = 740 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 796 currentId 740
Added AND Nodes: 795 796
5 => callsites count before spliiting 205 with id = 760 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 801 currentId 760
Added AND Nodes: 800 801
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 209 with id = 765 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 806 currentId 765
Added AND Nodes: 805 806
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 297 with id = 771 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 811 currentId 771
Added AND Nodes: 810 811
7 => callsites count before spliiting 227 with id = 775 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 816 currentId 775
Added AND Nodes: 815 816
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 50 with id = 696 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 821 currentId 696
Added AND Nodes: 820 821
3 => callsites count before spliiting 96 with id = 685 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 826 currentId 685
Added AND Nodes: 825 826
6 => callsites count before spliiting 207 with id = 806 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 831 currentId 806
Added AND Nodes: 830 831
11 => callsites count before spliiting 325 with id = 810 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 836 currentId 810
Added AND Nodes: 835 836
7 => callsites count before spliiting 200 with id = 815 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 841 currentId 815
Added AND Nodes: 840 841
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 202 with id = 796 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 846 currentId 796
Added AND Nodes: 845 846
1 => callsites count before spliiting 51 with id = 785 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 851 currentId 785
Added AND Nodes: 850 851
3 => callsites count before spliiting 85 with id = 825 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 856 currentId 825
Added AND Nodes: 855 856
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 206 with id = 801 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 861 currentId 801
Added AND Nodes: 860 861
7 => callsites count before spliiting 205 with id = 841 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 866 currentId 841
Added AND Nodes: 865 866
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => callsites count before spliiting 368 with id = 835 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 871 currentId 835
Added AND Nodes: 870 871
6 => callsites count before spliiting 202 with id = 830 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 876 currentId 830
Added AND Nodes: 875 876
10 => callsites count before spliiting 270 with id = 631 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 881 currentId 631
Added AND Nodes: 880 881
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
7 => callsites count before spliiting 217 with id = 816 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 886 currentId 816
Added AND Nodes: 885 886
8 => callsites count before spliiting 363 with id = 791 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 891 currentId 791
Added AND Nodes: 890 891
11 => callsites count before spliiting 443 with id = 870 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 896 currentId 870
Added AND Nodes: 895 896
7 => callsites count before spliiting 212 with id = 885 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 901 currentId 885
Added AND Nodes: 900 901
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => callsites count before spliiting 305 with id = 881 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 906 currentId 881
Added AND Nodes: 905 906
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 73 with id = 820 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 911 currentId 820
Added AND Nodes: 910 911
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 204 with id = 901 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 916 currentId 901
Added AND Nodes: 915 916
8 => callsites count before spliiting 511 with id = 890 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 921 currentId 890
Added AND Nodes: 920 921
3 => callsites count before spliiting 56 with id = 856 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 926 currentId 856
Added AND Nodes: 925 926
11 => callsites count before spliiting 682 with id = 895 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 931 currentId 895
Added AND Nodes: 930 931
6 => callsites count before spliiting 209 with id = 831 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 936 currentId 831
Added AND Nodes: 935 936
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 558 with id = 920 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 941 currentId 920
Added AND Nodes: 940 941
5 => callsites count before spliiting 200 with id = 860 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 946 currentId 860
Added AND Nodes: 945 946
4 => callsites count before spliiting 200 with id = 845 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 951 currentId 845
Added AND Nodes: 950 951
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => callsites count before spliiting 733 with id = 940 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 956 currentId 940
Added AND Nodes: 955 956
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 206 with id = 935 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 961 currentId 935
Added AND Nodes: 960 961
7 => callsites count before spliiting 212 with id = 916 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 966 currentId 916
Added AND Nodes: 965 966
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 744 with id = 930 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 971 currentId 930
Added AND Nodes: 970 971
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => callsites count before spliiting 224 with id = 906 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 976 currentId 906
Added AND Nodes: 975 976
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 769 with id = 955 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 981 currentId 955
Added AND Nodes: 980 981
10 => callsites count before spliiting 294 with id = 976 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 986 currentId 976
Added AND Nodes: 985 986
8 => callsites count before spliiting 832 with id = 980 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 991 currentId 980
Added AND Nodes: 990 991
6 => callsites count before spliiting 212 with id = 961 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 996 currentId 961
Added AND Nodes: 995 996
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => callsites count before spliiting 875 with id = 990 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1001 currentId 990
Added AND Nodes: 1000 1001
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 205 with id = 966 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1006 currentId 966
Added AND Nodes: 1005 1006
2 => callsites count before spliiting 60 with id = 911 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1011 currentId 911
Added AND Nodes: 1010 1011
9 => callsites count before spliiting 211 with id = 646 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1016 currentId 646
Added AND Nodes: 1015 1016
11 => callsites count before spliiting 787 with id = 970 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1021 currentId 970
Added AND Nodes: 1020 1021
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
8 => callsites count before spliiting 911 with id = 1000 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1026 currentId 1000
Added AND Nodes: 1025 1026
4 => callsites count before spliiting 201 with id = 846 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1031 currentId 846
Added AND Nodes: 1030 1031
8 => callsites count before spliiting 1012 with id = 1025 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1036 currentId 1025
Added AND Nodes: 1035 1036
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => callsites count before spliiting 1103 with id = 1035 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1041 currentId 1035
Added AND Nodes: 1040 1041
6 => callsites count before spliiting 204 with id = 996 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1046 currentId 996
Added AND Nodes: 1045 1046
5 => callsites count before spliiting 204 with id = 761 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1051 currentId 761
Added AND Nodes: 1050 1051
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
10 => callsites count before spliiting 441 with id = 985 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1056 currentId 985
Added AND Nodes: 1055 1056
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => callsites count before spliiting 212 with id = 741 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1061 currentId 741
Added AND Nodes: 1060 1061
5 => callsites count before spliiting 204 with id = 1050 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1066 currentId 1050
Added AND Nodes: 1065 1066
7 => callsites count before spliiting 201 with id = 1005 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1071 currentId 1005
Added AND Nodes: 1070 1071
0 => callsites count before spliiting 54 with id = 671 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1076 currentId 671
Added AND Nodes: 1075 1076
2 => callsites count before spliiting 54 with id = 1010 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1081 currentId 1010
Added AND Nodes: 1080 1081
1 => callsites count before spliiting 60 with id = 850 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1086 currentId 850
Added AND Nodes: 1085 1086
9 => callsites count before spliiting 465 with id = 1015 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1091 currentId 1015
Added AND Nodes: 1090 1091
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => callsites count before spliiting 200 with id = 1065 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1096 currentId 1065
Added AND Nodes: 1095 1096
4 => callsites count before spliiting 201 with id = 1060 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1101 currentId 1060
Added AND Nodes: 1100 1101
3 => callsites count before spliiting 60 with id = 925 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1106 currentId 925
Added AND Nodes: 1105 1106
5 => callsites count before spliiting 200 with id = 1095 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1111 currentId 1095
Added AND Nodes: 1110 1111
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 201 with id = 1045 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1116 currentId 1045
Added AND Nodes: 1115 1116
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 77 with id = 1080 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1121 currentId 1080
Added AND Nodes: 1120 1121
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 94 with id = 1085 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1126 currentId 1085
Added AND Nodes: 1125 1126
8 => callsites count before spliiting 223 with id = 1036 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1131 currentId 1036
Added AND Nodes: 1130 1131
9 => callsites count before spliiting 241 with id = 1091 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1136 currentId 1091
Added AND Nodes: 1135 1136
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 202 with id = 1110 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1141 currentId 1110
Added AND Nodes: 1140 1141
7 => callsites count before spliiting 204 with id = 1071 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1146 currentId 1071
Added AND Nodes: 1145 1146
1 => callsites count before spliiting 83 with id = 1125 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1151 currentId 1125
Added AND Nodes: 1150 1151
1 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 211 with id = 1061 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1156 currentId 1061
Added AND Nodes: 1155 1156
8 => callsites count before spliiting 274 with id = 1130 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1161 currentId 1130
Added AND Nodes: 1160 1161
3 => callsites count before spliiting 94 with id = 1105 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1166 currentId 1105
Added AND Nodes: 1165 1166
11 => callsites count before spliiting 207 with id = 1021 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1171 currentId 1021
Added AND Nodes: 1170 1171
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 280 with id = 1135 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1176 currentId 1135
Added AND Nodes: 1175 1176
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 83 with id = 1165 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1181 currentId 1165
Added AND Nodes: 1180 1181
5 => callsites count before spliiting 203 with id = 1141 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1186 currentId 1141
Added AND Nodes: 1185 1186
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 226 with id = 1056 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1191 currentId 1056
Added AND Nodes: 1190 1191
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 277 with id = 1160 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1196 currentId 1160
Added AND Nodes: 1195 1196
1 => callsites count before spliiting 52 with id = 1151 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1201 currentId 1151
Added AND Nodes: 1200 1201
3 => callsites count before spliiting 58 with id = 1180 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1206 currentId 1180
Added AND Nodes: 1205 1206
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 202 with id = 1096 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1211 currentId 1096
Added AND Nodes: 1210 1211
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 200 with id = 1145 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1216 currentId 1145
Added AND Nodes: 1215 1216
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 62 with id = 1121 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1221 currentId 1121
Added AND Nodes: 1220 1221
4 => callsites count before spliiting 201 with id = 1155 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1226 currentId 1155
Added AND Nodes: 1225 1226
5 => callsites count before spliiting 200 with id = 1211 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1231 currentId 1211
Added AND Nodes: 1230 1231
8 => callsites count before spliiting 298 with id = 1195 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1236 currentId 1195
Added AND Nodes: 1235 1236
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => callsites count before spliiting 398 with id = 1235 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1241 currentId 1235
Added AND Nodes: 1240 1241
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 54 with id = 1220 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1246 currentId 1220
Added AND Nodes: 1245 1246
11 => callsites count before spliiting 236 with id = 1171 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1251 currentId 1171
Added AND Nodes: 1250 1251
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => callsites count before spliiting 217 with id = 1191 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1256 currentId 1191
Added AND Nodes: 1255 1256
5 => callsites count before spliiting 200 with id = 1230 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1261 currentId 1230
Added AND Nodes: 1260 1261
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => callsites count before spliiting 414 with id = 1240 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1266 currentId 1240
Added AND Nodes: 1265 1266
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 210 with id = 936 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1271 currentId 936
Added AND Nodes: 1270 1271
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 205 with id = 1271 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1276 currentId 1271
Added AND Nodes: 1275 1276
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 62 with id = 1206 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1281 currentId 1206
Added AND Nodes: 1280 1281
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 203 with id = 1066 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1286 currentId 1066
Added AND Nodes: 1285 1286
10 => callsites count before spliiting 277 with id = 1255 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1291 currentId 1255
Added AND Nodes: 1290 1291
2 => callsites count before spliiting 77 with id = 1245 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1296 currentId 1245
Added AND Nodes: 1295 1296
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 213 with id = 1276 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1301 currentId 1276
Added AND Nodes: 1300 1301
7 => callsites count before spliiting 200 with id = 1146 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1306 currentId 1146
Added AND Nodes: 1305 1306
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 290 with id = 1290 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1311 currentId 1290
Added AND Nodes: 1310 1311
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => callsites count before spliiting 204 with id = 1300 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1316 currentId 1300
Added AND Nodes: 1315 1316
1 => callsites count before spliiting 71 with id = 1200 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1321 currentId 1200
Added AND Nodes: 1320 1321
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--message--i2o--i2o_core.ko-ldv_main4_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
for clientid : 2 algo id is 0
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
0 => LOOP outcome: Correct & reachbound = False
for clientid : 4 algo id is 1
0 => outcome: Correct
for clientid : 0 algo id is 0
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 7 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 41 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 41 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 56 currentId 31
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 51
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
Added AND Nodes: 55 56
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 56 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 22 with id = 70 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 81 currentId 70
Added AND Nodes: 80 81
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 81 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
2 => Spliiting due to client waiting
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 7 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 86 from client 4 to 7
7 => after replyFromServer: 0
2 => callsites count before spliiting 6 with id = 41 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 91 currentId 41
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
Added AND Nodes: 90 91
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 91 from client 2 to 3
3 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
10 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 6 with id = 86 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 6
6 => after replyFromServer: 0
10 => callsites count before spliiting 6 with id = 56 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 101 currentId 56
Added AND Nodes: 100 101
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 101 from client 10 to 11
11 => after replyFromServer: 50
10 => Spliiting due to client waiting
2 => Spliiting due to client waiting
2 => callsites count before spliiting 12 with id = 90 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 106 currentId 90
Added AND Nodes: 105 106
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 106 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 14 with id = 100 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 111 currentId 100
Added AND Nodes: 110 111
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 111 from client 10 to 8
8 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 91 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 116 currentId 91
Added AND Nodes: 115 116
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 116 from client 3 to 1
1 => after replyFromServer: 100
0 => Spliiting due to client waiting
0 => callsites count before spliiting 12 with id = 106 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 121 currentId 106
Added AND Nodes: 120 121
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 121 from client 0 to 2
2 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 6 with id = 101 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 126 currentId 101
Added AND Nodes: 125 126
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 126 from client 11 to 9
9 => after replyFromServer: 50
4 => callsites count before spliiting 218 with id = 85 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 131 currentId 85
Added AND Nodes: 130 131
7 => callsites count before spliiting 221 with id = 95 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 136 currentId 95
Added AND Nodes: 135 136
6 => callsites count before spliiting 215 with id = 96 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 141 currentId 96
Added AND Nodes: 140 141
5 => callsites count before spliiting 208 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 146 currentId 81
Added AND Nodes: 145 146
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 67 with id = 120 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 151 currentId 120
Added AND Nodes: 150 151
2 => callsites count before spliiting 67 with id = 121 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 156 currentId 121
Added AND Nodes: 155 156
0 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 69 with id = 115 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 161 currentId 115
Added AND Nodes: 160 161
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 63 with id = 116 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 166 currentId 116
Added AND Nodes: 165 166
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 201 with id = 110 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 171 currentId 110
Added AND Nodes: 170 171
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => callsites count before spliiting 446 with id = 140 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 176 currentId 140
Added AND Nodes: 175 176
11 => callsites count before spliiting 241 with id = 125 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 181 currentId 125
Added AND Nodes: 180 181
5 => callsites count before spliiting 392 with id = 146 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 186 currentId 146
Added AND Nodes: 185 186
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => callsites count before spliiting 486 with id = 135 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 191 currentId 135
Added AND Nodes: 190 191
4 => callsites count before spliiting 651 with id = 130 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 196 currentId 130
Added AND Nodes: 195 196
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 67 with id = 151 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 201 currentId 151
Added AND Nodes: 200 201
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 285 with id = 161 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 206 currentId 161
Added AND Nodes: 205 206
9 => callsites count before spliiting 240 with id = 126 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 211 currentId 126
Added AND Nodes: 210 211
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 213 with id = 111 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 216 currentId 111
Added AND Nodes: 215 216
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 285 with id = 166 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 221 currentId 166
Added AND Nodes: 220 221
6 => callsites count before spliiting 635 with id = 175 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 226 currentId 175
Added AND Nodes: 225 226
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 236 with id = 186 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 231 currentId 186
Added AND Nodes: 230 231
7 => callsites count before spliiting 577 with id = 190 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 236 currentId 190
Added AND Nodes: 235 236
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 395 with id = 196 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 241 currentId 196
Added AND Nodes: 240 241
10 => callsites count before spliiting 222 with id = 171 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 246 currentId 171
Added AND Nodes: 245 246
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 308 with id = 156 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 251 currentId 156
Added AND Nodes: 250 251
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 229 with id = 211 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 256 currentId 211
Added AND Nodes: 255 256
1 => callsites count before spliiting 467 with id = 220 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 261 currentId 220
Added AND Nodes: 260 261
3 => callsites count before spliiting 587 with id = 205 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 266 currentId 205
Added AND Nodes: 265 266
5 => callsites count before spliiting 337 with id = 230 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 271 currentId 230
Added AND Nodes: 270 271
4 => callsites count before spliiting 426 with id = 240 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 276 currentId 240
Added AND Nodes: 275 276
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 209 with id = 236 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 281 currentId 236
Added AND Nodes: 280 281
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => callsites count before spliiting 247 with id = 181 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 286 currentId 181
Added AND Nodes: 285 286
6 => callsites count before spliiting 203 with id = 226 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 291 currentId 226
Added AND Nodes: 290 291
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 114 with id = 251 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 296 currentId 251
Added AND Nodes: 295 296
9 => callsites count before spliiting 457 with id = 255 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 301 currentId 255
Added AND Nodes: 300 301
1 => callsites count before spliiting 687 with id = 260 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 306 currentId 260
Added AND Nodes: 305 306
8 => callsites count before spliiting 207 with id = 216 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 311 currentId 216
Added AND Nodes: 310 311
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 415 with id = 270 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 316 currentId 270
Added AND Nodes: 315 316
10 => callsites count before spliiting 267 with id = 246 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 321 currentId 246
Added AND Nodes: 320 321
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 246 with id = 295 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 326 currentId 295
Added AND Nodes: 325 326
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 804 with id = 265 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 331 currentId 265
Added AND Nodes: 330 331
5 => callsites count before spliiting 366 with id = 315 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 336 currentId 315
Added AND Nodes: 335 336
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 601 with id = 285 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 341 currentId 285
Added AND Nodes: 340 341
4 => callsites count before spliiting 204 with id = 276 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 346 currentId 276
Added AND Nodes: 345 346
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => callsites count before spliiting 745 with id = 305 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 351 currentId 305
Added AND Nodes: 350 351
0 => callsites count before spliiting 51 with id = 201 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 356 currentId 201
Added AND Nodes: 355 356
0 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 517 with id = 300 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 361 currentId 300
Added AND Nodes: 360 361
11 => callsites count before spliiting 881 with id = 340 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 366 currentId 340
Added AND Nodes: 365 366
7 => callsites count before spliiting 205 with id = 281 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 371 currentId 281
Added AND Nodes: 370 371
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 806 with id = 330 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 376 currentId 330
Added AND Nodes: 375 376
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 791 with id = 350 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 381 currentId 350
Added AND Nodes: 380 381
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 245 with id = 336 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 386 currentId 336
Added AND Nodes: 385 386
8 => callsites count before spliiting 226 with id = 311 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 391 currentId 311
Added AND Nodes: 390 391
2 => callsites count before spliiting 217 with id = 326 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 396 currentId 326
Added AND Nodes: 395 396
9 => callsites count before spliiting 566 with id = 360 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 401 currentId 360
Added AND Nodes: 400 401
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
6 => callsites count before spliiting 205 with id = 291 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 406 currentId 291
Added AND Nodes: 405 406
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 869 with id = 375 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 411 currentId 375
Added AND Nodes: 410 411
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 122 with id = 381 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 416 currentId 381
Added AND Nodes: 415 416
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 244 with id = 385 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 421 currentId 385
Added AND Nodes: 420 421
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
8 => callsites count before spliiting 297 with id = 390 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 426 currentId 390
Added AND Nodes: 425 426
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 252 with id = 395 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 431 currentId 395
Added AND Nodes: 430 431
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 203 with id = 346 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 436 currentId 346
Added AND Nodes: 435 436
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 53 with id = 356 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 441 currentId 356
Added AND Nodes: 440 441
3 => callsites count before spliiting 69 with id = 411 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 446 currentId 411
Added AND Nodes: 445 446
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 189 with id = 431 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 451 currentId 431
Added AND Nodes: 450 451
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 79 with id = 440 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 456 currentId 440
Added AND Nodes: 455 456
0 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 236 with id = 421 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 461 currentId 421
Added AND Nodes: 460 461
1 => callsites count before spliiting 56 with id = 416 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 466 currentId 416
Added AND Nodes: 465 466
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 214 with id = 366 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 471 currentId 366
Added AND Nodes: 470 471
9 => callsites count before spliiting 250 with id = 401 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 476 currentId 401
Added AND Nodes: 475 476
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 206 with id = 426 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 481 currentId 426
Added AND Nodes: 480 481
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 204 with id = 371 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 486 currentId 371
Added AND Nodes: 485 486
2 => callsites count before spliiting 115 with id = 451 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 491 currentId 451
Added AND Nodes: 490 491
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 210 with id = 461 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 496 currentId 461
Added AND Nodes: 495 496
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 285 with id = 456 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 501 currentId 456
Added AND Nodes: 500 501
11 => callsites count before spliiting 332 with id = 470 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 506 currentId 470
Added AND Nodes: 505 506
2 => callsites count before spliiting 115 with id = 491 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 511 currentId 491
Added AND Nodes: 510 511
2 => callsites count before spliiting 112 with id = 510 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 516 currentId 510
Added AND Nodes: 515 516
5 => callsites count before spliiting 265 with id = 496 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 521 currentId 496
Added AND Nodes: 520 521
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 359 with id = 500 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 526 currentId 500
Added AND Nodes: 525 526
7 => callsites count before spliiting 204 with id = 486 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 531 currentId 486
Added AND Nodes: 530 531
2 => callsites count before spliiting 293 with id = 515 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 536 currentId 515
Added AND Nodes: 535 536
5 => callsites count before spliiting 249 with id = 521 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 541 currentId 521
Added AND Nodes: 540 541
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 386 with id = 505 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 546 currentId 505
Added AND Nodes: 545 546
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => callsites count before spliiting 209 with id = 436 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 551 currentId 436
Added AND Nodes: 550 551
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 427 with id = 525 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 556 currentId 525
Added AND Nodes: 555 556
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 361 with id = 535 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 561 currentId 535
Added AND Nodes: 560 561
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 201 with id = 406 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 566 currentId 406
Added AND Nodes: 565 566
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 202 with id = 241 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 571 currentId 241
Added AND Nodes: 570 571
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 324 with id = 541 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 576 currentId 541
Added AND Nodes: 575 576
0 => callsites count before spliiting 137 with id = 556 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 581 currentId 556
Added AND Nodes: 580 581
0 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 213 with id = 571 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 586 currentId 571
Added AND Nodes: 585 586
2 => callsites count before spliiting 116 with id = 561 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 591 currentId 561
Added AND Nodes: 590 591
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 232 with id = 575 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 596 currentId 575
Added AND Nodes: 595 596
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 250 with id = 585 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 601 currentId 585
Added AND Nodes: 600 601
2 => callsites count before spliiting 138 with id = 591 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 606 currentId 591
Added AND Nodes: 605 606
4 => callsites count before spliiting 212 with id = 600 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 611 currentId 600
Added AND Nodes: 610 611
2 => callsites count before spliiting 145 with id = 605 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 616 currentId 605
Added AND Nodes: 615 616
0 => callsites count before spliiting 102 with id = 581 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 621 currentId 581
Added AND Nodes: 620 621
0 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 266 with id = 610 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 626 currentId 610
Added AND Nodes: 625 626
5 => callsites count before spliiting 203 with id = 596 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 631 currentId 596
Added AND Nodes: 630 631
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 258 with id = 615 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 636 currentId 615
Added AND Nodes: 635 636
4 => callsites count before spliiting 336 with id = 625 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 641 currentId 625
Added AND Nodes: 640 641
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 213 with id = 531 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 646 currentId 531
Added AND Nodes: 645 646
2 => callsites count before spliiting 334 with id = 635 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 651 currentId 635
Added AND Nodes: 650 651
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 210 with id = 626 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 656 currentId 626
Added AND Nodes: 655 656
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 222 with id = 631 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 661 currentId 631
Added AND Nodes: 660 661
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 238 with id = 176 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 666 currentId 176
Added AND Nodes: 665 666
2 => callsites count before spliiting 140 with id = 651 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 671 currentId 651
Added AND Nodes: 670 671
6 => callsites count before spliiting 255 with id = 665 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 676 currentId 665
Added AND Nodes: 675 676
4 => callsites count before spliiting 226 with id = 601 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 681 currentId 601
Added AND Nodes: 680 681
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 228 with id = 680 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 686 currentId 680
Added AND Nodes: 685 686
5 => callsites count before spliiting 237 with id = 660 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 691 currentId 660
Added AND Nodes: 690 691
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 240 with id = 676 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 696 currentId 676
Added AND Nodes: 695 696
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 262 with id = 685 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 701 currentId 685
Added AND Nodes: 700 701
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 238 with id = 696 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 706 currentId 696
Added AND Nodes: 705 706
4 => callsites count before spliiting 239 with id = 701 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 711 currentId 701
Added AND Nodes: 710 711
6 => callsites count before spliiting 292 with id = 705 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 716 currentId 705
Added AND Nodes: 715 716
4 => callsites count before spliiting 203 with id = 710 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 721 currentId 710
Added AND Nodes: 720 721
6 => callsites count before spliiting 230 with id = 715 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 726 currentId 715
Added AND Nodes: 725 726
4 => callsites count before spliiting 239 with id = 720 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 731 currentId 720
Added AND Nodes: 730 731
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 236 with id = 725 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 736 currentId 725
Added AND Nodes: 735 736
4 => callsites count before spliiting 200 with id = 731 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 741 currentId 731
Added AND Nodes: 740 741
7 => callsites count before spliiting 204 with id = 191 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 746 currentId 191
Added AND Nodes: 745 746
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 262 with id = 745 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 751 currentId 745
Added AND Nodes: 750 751
4 => callsites count before spliiting 207 with id = 741 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 756 currentId 741
Added AND Nodes: 755 756
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 212 with id = 735 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 761 currentId 735
Added AND Nodes: 760 761
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 270 with id = 691 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 766 currentId 691
Added AND Nodes: 765 766
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 250 with id = 756 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 771 currentId 756
Added AND Nodes: 770 771
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 253 with id = 761 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 776 currentId 761
Added AND Nodes: 775 776
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 215 with id = 746 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 781 currentId 746
Added AND Nodes: 780 781
3 => callsites count before spliiting 90 with id = 446 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 786 currentId 446
Added AND Nodes: 785 786
6 => callsites count before spliiting 239 with id = 776 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 791 currentId 776
Added AND Nodes: 790 791
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 291 with id = 771 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 796 currentId 771
Added AND Nodes: 795 796
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 219 with id = 780 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 801 currentId 780
Added AND Nodes: 800 801
6 => callsites count before spliiting 225 with id = 791 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 806 currentId 791
Added AND Nodes: 805 806
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 259 with id = 796 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 811 currentId 796
Added AND Nodes: 810 811
6 => callsites count before spliiting 220 with id = 806 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 816 currentId 806
Added AND Nodes: 815 816
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 308 with id = 810 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 821 currentId 810
Added AND Nodes: 820 821
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 212 with id = 800 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 826 currentId 800
Added AND Nodes: 825 826
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 281 with id = 816 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 831 currentId 816
Added AND Nodes: 830 831
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 298 with id = 821 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 836 currentId 821
Added AND Nodes: 835 836
5 => callsites count before spliiting 244 with id = 766 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 841 currentId 766
Added AND Nodes: 840 841
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 327 with id = 831 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 846 currentId 831
Added AND Nodes: 845 846
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 257 with id = 835 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 851 currentId 835
Added AND Nodes: 850 851
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 240 with id = 846 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 856 currentId 846
Added AND Nodes: 855 856
7 => callsites count before spliiting 201 with id = 826 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 861 currentId 826
Added AND Nodes: 860 861
4 => callsites count before spliiting 220 with id = 851 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 866 currentId 851
Added AND Nodes: 865 866
6 => callsites count before spliiting 204 with id = 855 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 871 currentId 855
Added AND Nodes: 870 871
1 => callsites count before spliiting 56 with id = 466 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 876 currentId 466
Added AND Nodes: 875 876
7 => callsites count before spliiting 205 with id = 860 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 881 currentId 860
Added AND Nodes: 880 881
6 => callsites count before spliiting 206 with id = 870 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 886 currentId 870
Added AND Nodes: 885 886
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 236 with id = 865 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 891 currentId 865
Added AND Nodes: 890 891
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 281 with id = 841 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 896 currentId 841
Added AND Nodes: 895 896
2 => callsites count before spliiting 216 with id = 670 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 901 currentId 670
Added AND Nodes: 900 901
6 => callsites count before spliiting 221 with id = 886 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 906 currentId 886
Added AND Nodes: 905 906
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 212 with id = 895 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 911 currentId 895
Added AND Nodes: 910 911
2 => callsites count before spliiting 313 with id = 900 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 916 currentId 900
Added AND Nodes: 915 916
2 => callsites count before spliiting 311 with id = 915 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 921 currentId 915
Added AND Nodes: 920 921
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 205 with id = 881 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 926 currentId 881
Added AND Nodes: 925 926
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 78 with id = 921 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 931 currentId 921
Added AND Nodes: 930 931
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 282 with id = 891 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 936 currentId 891
Added AND Nodes: 935 936
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 243 with id = 906 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 941 currentId 906
Added AND Nodes: 940 941
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 52 with id = 931 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 946 currentId 931
Added AND Nodes: 945 946
2 => callsites count before spliiting 99 with id = 945 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 951 currentId 945
Added AND Nodes: 950 951
6 => callsites count before spliiting 214 with id = 941 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 956 currentId 941
Added AND Nodes: 955 956
2 => callsites count before spliiting 272 with id = 950 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 961 currentId 950
Added AND Nodes: 960 961
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 203 with id = 926 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 966 currentId 926
Added AND Nodes: 965 966
5 => callsites count before spliiting 238 with id = 910 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 971 currentId 910
Added AND Nodes: 970 971
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 206 with id = 936 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 976 currentId 936
Added AND Nodes: 975 976
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 116 with id = 961 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 981 currentId 961
Added AND Nodes: 980 981
2 => callsites count before spliiting 202 with id = 980 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 986 currentId 980
Added AND Nodes: 985 986
6 => callsites count before spliiting 242 with id = 955 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 991 currentId 955
Added AND Nodes: 990 991
4 => callsites count before spliiting 208 with id = 976 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 996 currentId 976
Added AND Nodes: 995 996
2 => callsites count before spliiting 257 with id = 985 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1001 currentId 985
Added AND Nodes: 1000 1001
2 => callsites count before spliiting 243 with id = 1000 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1006 currentId 1000
Added AND Nodes: 1005 1006
7 => callsites count before spliiting 202 with id = 965 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1011 currentId 965
Added AND Nodes: 1010 1011
2 => callsites count before spliiting 349 with id = 1005 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1016 currentId 1005
Added AND Nodes: 1015 1016
2 => callsites count before spliiting 417 with id = 1015 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1021 currentId 1015
Added AND Nodes: 1020 1021
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 319 with id = 990 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1026 currentId 990
Added AND Nodes: 1025 1026
4 => callsites count before spliiting 264 with id = 995 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1031 currentId 995
Added AND Nodes: 1030 1031
7 => callsites count before spliiting 207 with id = 1010 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1036 currentId 1010
Added AND Nodes: 1035 1036
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 126 with id = 1021 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1041 currentId 1021
Added AND Nodes: 1040 1041
6 => callsites count before spliiting 269 with id = 1025 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1046 currentId 1025
Added AND Nodes: 1045 1046
2 => callsites count before spliiting 198 with id = 1040 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1051 currentId 1040
Added AND Nodes: 1050 1051
4 => callsites count before spliiting 201 with id = 1030 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1056 currentId 1030
Added AND Nodes: 1055 1056
2 => callsites count before spliiting 286 with id = 1050 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1061 currentId 1050
Added AND Nodes: 1060 1061
2 => callsites count before spliiting 254 with id = 1060 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1066 currentId 1060
Added AND Nodes: 1065 1066
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 204 with id = 1011 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1071 currentId 1011
Added AND Nodes: 1070 1071
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 262 with id = 1045 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1076 currentId 1045
Added AND Nodes: 1075 1076
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 81 with id = 1066 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1081 currentId 1066
Added AND Nodes: 1080 1081
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 86 with id = 1081 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1086 currentId 1081
Added AND Nodes: 1085 1086
4 => callsites count before spliiting 279 with id = 1055 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1091 currentId 1055
Added AND Nodes: 1090 1091
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 139 with id = 1085 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1096 currentId 1085
Added AND Nodes: 1095 1096
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 360 with id = 971 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1101 currentId 971
Added AND Nodes: 1100 1101
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 81 with id = 875 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1106 currentId 875
Added AND Nodes: 1105 1106
5 => callsites count before spliiting 266 with id = 1100 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1111 currentId 1100
Added AND Nodes: 1110 1111
1 => callsites count before spliiting 60 with id = 1105 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1116 currentId 1105
Added AND Nodes: 1115 1116
1 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 316 with id = 1091 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1121 currentId 1091
Added AND Nodes: 1120 1121
7 => callsites count before spliiting 204 with id = 781 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1126 currentId 781
Added AND Nodes: 1125 1126
0 => callsites count before spliiting 63 with id = 621 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1131 currentId 621
Added AND Nodes: 1130 1131
0 => callsites count before spliiting 80 with id = 1130 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1136 currentId 1130
Added AND Nodes: 1135 1136
7 => callsites count before spliiting 221 with id = 1125 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1141 currentId 1125
Added AND Nodes: 1140 1141
5 => callsites count before spliiting 228 with id = 1110 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1146 currentId 1110
Added AND Nodes: 1145 1146
0 => callsites count before spliiting 195 with id = 1135 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1151 currentId 1135
Added AND Nodes: 1150 1151
0 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 279 with id = 1026 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1156 currentId 1026
Added AND Nodes: 1155 1156
7 => callsites count before spliiting 209 with id = 1140 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1161 currentId 1140
Added AND Nodes: 1160 1161
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 297 with id = 1120 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1166 currentId 1120
Added AND Nodes: 1165 1166
7 => callsites count before spliiting 203 with id = 1160 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1171 currentId 1160
Added AND Nodes: 1170 1171
0 => callsites count before spliiting 123 with id = 1151 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1176 currentId 1151
Added AND Nodes: 1175 1176
7 => callsites count before spliiting 202 with id = 1170 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1181 currentId 1170
Added AND Nodes: 1180 1181
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 270 with id = 1165 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1186 currentId 1165
Added AND Nodes: 1185 1186
7 => callsites count before spliiting 225 with id = 1181 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1191 currentId 1181
Added AND Nodes: 1190 1191
0 => callsites count before spliiting 197 with id = 1175 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1196 currentId 1175
Added AND Nodes: 1195 1196
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 225 with id = 1191 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1201 currentId 1191
Added AND Nodes: 1200 1201
0 => callsites count before spliiting 322 with id = 1195 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1206 currentId 1195
Added AND Nodes: 1205 1206
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 332 with id = 1145 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1211 currentId 1145
Added AND Nodes: 1210 1211
0 => callsites count before spliiting 388 with id = 1205 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1216 currentId 1205
Added AND Nodes: 1215 1216
0 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 223 with id = 1201 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1221 currentId 1201
Added AND Nodes: 1220 1221
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 290 with id = 1156 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1226 currentId 1156
Added AND Nodes: 1225 1226
4 => callsites count before spliiting 245 with id = 1185 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1231 currentId 1185
Added AND Nodes: 1230 1231
7 => callsites count before spliiting 257 with id = 1221 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1236 currentId 1221
Added AND Nodes: 1235 1236
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 297 with id = 1210 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1241 currentId 1210
Added AND Nodes: 1240 1241
0 => callsites count before spliiting 136 with id = 1216 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1246 currentId 1216
Added AND Nodes: 1245 1246
0 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 268 with id = 1236 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1251 currentId 1236
Added AND Nodes: 1250 1251
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 266 with id = 1225 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1256 currentId 1225
Added AND Nodes: 1255 1256
9 => callsites count before spliiting 229 with id = 476 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1261 currentId 476
Added AND Nodes: 1260 1261
4 => callsites count before spliiting 319 with id = 1230 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1266 currentId 1230
Added AND Nodes: 1265 1266
9 => callsites count before spliiting 286 with id = 1260 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1271 currentId 1260
Added AND Nodes: 1270 1271
0 => callsites count before spliiting 135 with id = 1246 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1276 currentId 1246
Added AND Nodes: 1275 1276
5 => callsites count before spliiting 312 with id = 1240 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1281 currentId 1240
Added AND Nodes: 1280 1281
0 => callsites count before spliiting 229 with id = 1275 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1286 currentId 1275
Added AND Nodes: 1285 1286
9 => callsites count before spliiting 324 with id = 1270 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1291 currentId 1270
Added AND Nodes: 1290 1291
4 => callsites count before spliiting 263 with id = 1265 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1296 currentId 1265
Added AND Nodes: 1295 1296
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => callsites count before spliiting 249 with id = 1280 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1301 currentId 1280
Added AND Nodes: 1300 1301
2 => callsites count before spliiting 117 with id = 1096 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1306 currentId 1096
Added AND Nodes: 1305 1306
7 => callsites count before spliiting 272 with id = 1251 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1311 currentId 1251
Added AND Nodes: 1310 1311
4 => callsites count before spliiting 235 with id = 1295 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1316 currentId 1295
Added AND Nodes: 1315 1316
0 => callsites count before spliiting 284 with id = 1285 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1321 currentId 1285
Added AND Nodes: 1320 1321
6 => callsites count before spliiting 340 with id = 1255 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1326 currentId 1255
Added AND Nodes: 1325 1326
7 => callsites count before spliiting 210 with id = 1310 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1331 currentId 1310
Added AND Nodes: 1330 1331
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 276 with id = 1300 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1336 currentId 1300
Added AND Nodes: 1335 1336
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 183 with id = 1305 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1341 currentId 1305
Added AND Nodes: 1340 1341
6 => callsites count before spliiting 283 with id = 1325 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1346 currentId 1325
Added AND Nodes: 1345 1346
7 => callsites count before spliiting 252 with id = 1331 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1351 currentId 1331
Added AND Nodes: 1350 1351
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 270 with id = 1340 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1356 currentId 1340
Added AND Nodes: 1355 1356
5 => callsites count before spliiting 249 with id = 1336 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1361 currentId 1336
Added AND Nodes: 1360 1361
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 228 with id = 1345 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1366 currentId 1345
Added AND Nodes: 1365 1366
2 => callsites count before spliiting 234 with id = 1355 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1371 currentId 1355
Added AND Nodes: 1370 1371
2 => callsites count before spliiting 233 with id = 1370 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1376 currentId 1370
Added AND Nodes: 1375 1376
2 => callsites count before spliiting 244 with id = 1375 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1381 currentId 1375
Added AND Nodes: 1380 1381
7 => callsites count before spliiting 223 with id = 1351 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1386 currentId 1351
Added AND Nodes: 1385 1386
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 382 with id = 1380 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1391 currentId 1380
Added AND Nodes: 1390 1391
6 => callsites count before spliiting 223 with id = 1365 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1396 currentId 1365
Added AND Nodes: 1395 1396
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 249 with id = 1361 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1401 currentId 1361
Added AND Nodes: 1400 1401
4 => callsites count before spliiting 203 with id = 1315 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1406 currentId 1315
Added AND Nodes: 1405 1406
7 => callsites count before spliiting 211 with id = 1386 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1411 currentId 1386
Added AND Nodes: 1410 1411
2 => callsites count before spliiting 116 with id = 1391 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1416 currentId 1391
Added AND Nodes: 1415 1416
6 => callsites count before spliiting 285 with id = 1395 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1421 currentId 1395
Added AND Nodes: 1420 1421
2 => callsites count before spliiting 180 with id = 1415 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1426 currentId 1415
Added AND Nodes: 1425 1426
2 => callsites count before spliiting 138 with id = 1425 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1431 currentId 1425
Added AND Nodes: 1430 1431
6 => callsites count before spliiting 251 with id = 1420 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1436 currentId 1420
Added AND Nodes: 1435 1436
2 => callsites count before spliiting 145 with id = 1430 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1441 currentId 1430
Added AND Nodes: 1440 1441
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 284 with id = 1410 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1446 currentId 1410
Added AND Nodes: 1445 1446
2 => callsites count before spliiting 81 with id = 1441 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1451 currentId 1441
Added AND Nodes: 1450 1451
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 143 with id = 1450 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1456 currentId 1450
Added AND Nodes: 1455 1456
1 => callsites count before spliiting 88 with id = 1116 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1461 currentId 1116
Added AND Nodes: 1460 1461
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 200 with id = 1400 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1466 currentId 1400
Added AND Nodes: 1465 1466
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 280 with id = 1320 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1471 currentId 1320
Added AND Nodes: 1470 1471
2 => callsites count before spliiting 206 with id = 1455 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1476 currentId 1455
Added AND Nodes: 1475 1476
7 => callsites count before spliiting 230 with id = 1446 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1481 currentId 1446
Added AND Nodes: 1480 1481
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 270 with id = 1475 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1486 currentId 1475
Added AND Nodes: 1485 1486
6 => callsites count before spliiting 206 with id = 1435 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1491 currentId 1435
Added AND Nodes: 1490 1491
4 => callsites count before spliiting 202 with id = 1405 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1496 currentId 1405
Added AND Nodes: 1495 1496
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 360 with id = 1485 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1501 currentId 1485
Added AND Nodes: 1500 1501
2 => callsites count before spliiting 318 with id = 1500 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1506 currentId 1500
Added AND Nodes: 1505 1506
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 213 with id = 1481 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1511 currentId 1481
Added AND Nodes: 1510 1511
2 => callsites count before spliiting 57 with id = 1506 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1516 currentId 1506
Added AND Nodes: 1515 1516
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 81 with id = 1516 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1521 currentId 1516
Added AND Nodes: 1520 1521
2 => callsites count before spliiting 143 with id = 1520 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1526 currentId 1520
Added AND Nodes: 1525 1526
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 208 with id = 1510 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1531 currentId 1510
Added AND Nodes: 1530 1531
2 => callsites count before spliiting 113 with id = 1526 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1536 currentId 1526
Added AND Nodes: 1535 1536
2 => callsites count before spliiting 178 with id = 1535 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1541 currentId 1535
Added AND Nodes: 1540 1541
2 => callsites count before spliiting 136 with id = 1540 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1546 currentId 1540
Added AND Nodes: 1545 1546
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 1546 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1551 currentId 1546
Added AND Nodes: 1550 1551
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 81 with id = 1551 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1556 currentId 1551
Added AND Nodes: 1555 1556
7 => callsites count before spliiting 355 with id = 1530 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1561 currentId 1530
Added AND Nodes: 1560 1561
6 => callsites count before spliiting 206 with id = 1490 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1566 currentId 1490
Added AND Nodes: 1565 1566
2 => callsites count before spliiting 143 with id = 1555 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1571 currentId 1555
Added AND Nodes: 1570 1571
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 251 with id = 1560 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1576 currentId 1560
Added AND Nodes: 1575 1576
7 => callsites count before spliiting 296 with id = 1575 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1581 currentId 1575
Added AND Nodes: 1580 1581
2 => callsites count before spliiting 206 with id = 1570 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1586 currentId 1570
Added AND Nodes: 1585 1586
7 => callsites count before spliiting 222 with id = 1580 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1591 currentId 1580
Added AND Nodes: 1590 1591
2 => callsites count before spliiting 271 with id = 1585 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1596 currentId 1585
Added AND Nodes: 1595 1596
2 => callsites count before spliiting 229 with id = 1595 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1601 currentId 1595
Added AND Nodes: 1600 1601
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 1601 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1606 currentId 1601
Added AND Nodes: 1605 1606
8 => callsites count before spliiting 267 with id = 481 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1611 currentId 481
Added AND Nodes: 1610 1611
2 => LOOP outcome: Correct & reachbound = False
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 315 with id = 1590 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1616 currentId 1590
Added AND Nodes: 1615 1616
2 => callsites count before spliiting 81 with id = 1606 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1621 currentId 1606
Added AND Nodes: 1620 1621
2 => callsites count before spliiting 143 with id = 1620 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1626 currentId 1620
Added AND Nodes: 1625 1626
1 => callsites count before spliiting 55 with id = 1461 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1631 currentId 1461
Added AND Nodes: 1630 1631
7 => callsites count before spliiting 236 with id = 1615 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1636 currentId 1615
Added AND Nodes: 1635 1636
7 => callsites count before spliiting 247 with id = 1635 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1641 currentId 1635
Added AND Nodes: 1640 1641
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 241 with id = 1641 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1646 currentId 1641
Added AND Nodes: 1645 1646
2 => callsites count before spliiting 206 with id = 1625 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1651 currentId 1625
Added AND Nodes: 1650 1651
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 270 with id = 1650 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1656 currentId 1650
Added AND Nodes: 1655 1656
2 => callsites count before spliiting 228 with id = 1655 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1661 currentId 1655
Added AND Nodes: 1660 1661
7 => callsites count before spliiting 254 with id = 1646 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1666 currentId 1646
Added AND Nodes: 1665 1666
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 194 with id = 1660 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1671 currentId 1660
Added AND Nodes: 1670 1671
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 202 with id = 1496 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1676 currentId 1496
Added AND Nodes: 1675 1676
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 122 with id = 1671 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1681 currentId 1671
Added AND Nodes: 1680 1681
7 => callsites count before spliiting 270 with id = 1666 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1686 currentId 1666
Added AND Nodes: 1685 1686
2 => callsites count before spliiting 184 with id = 1680 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1691 currentId 1680
Added AND Nodes: 1690 1691
7 => callsites count before spliiting 203 with id = 1685 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1696 currentId 1685
Added AND Nodes: 1695 1696
2 => callsites count before spliiting 247 with id = 1690 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1701 currentId 1690
Added AND Nodes: 1700 1701
2 => callsites count before spliiting 205 with id = 1700 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1706 currentId 1700
Added AND Nodes: 1705 1706
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 1706 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1711 currentId 1706
Added AND Nodes: 1710 1711
5 => callsites count before spliiting 211 with id = 1466 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1716 currentId 1466
Added AND Nodes: 1715 1716
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 88 with id = 1710 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1721 currentId 1710
Added AND Nodes: 1720 1721
2 => callsites count before spliiting 150 with id = 1720 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1726 currentId 1720
Added AND Nodes: 1725 1726
2 => callsites count before spliiting 213 with id = 1725 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1731 currentId 1725
Added AND Nodes: 1730 1731
2 => callsites count before spliiting 168 with id = 1730 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1736 currentId 1730
Added AND Nodes: 1735 1736
7 => callsites count before spliiting 211 with id = 1695 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1741 currentId 1695
Added AND Nodes: 1740 1741
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 121 with id = 1735 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1746 currentId 1735
Added AND Nodes: 1745 1746
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 1746 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1751 currentId 1746
Added AND Nodes: 1750 1751
2 => callsites count before spliiting 88 with id = 1750 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1756 currentId 1750
Added AND Nodes: 1755 1756
2 => callsites count before spliiting 150 with id = 1755 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1761 currentId 1755
Added AND Nodes: 1760 1761
6 => callsites count before spliiting 208 with id = 1566 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1766 currentId 1566
Added AND Nodes: 1765 1766
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 213 with id = 1760 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1771 currentId 1760
Added AND Nodes: 1770 1771
2 => callsites count before spliiting 168 with id = 1770 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1776 currentId 1770
Added AND Nodes: 1775 1776
2 => callsites count before spliiting 121 with id = 1775 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1781 currentId 1775
Added AND Nodes: 1780 1781
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 1781 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1786 currentId 1781
Added AND Nodes: 1785 1786
2 => callsites count before spliiting 88 with id = 1785 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1791 currentId 1785
Added AND Nodes: 1790 1791
2 => callsites count before spliiting 150 with id = 1790 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1796 currentId 1790
Added AND Nodes: 1795 1796
2 => callsites count before spliiting 105 with id = 1795 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1801 currentId 1795
Added AND Nodes: 1800 1801
2 => callsites count before spliiting 58 with id = 1800 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1806 currentId 1800
Added AND Nodes: 1805 1806
2 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 200 with id = 1676 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1811 currentId 1676
Added AND Nodes: 1810 1811
2 => callsites count before spliiting 57 with id = 1806 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1816 currentId 1806
Added AND Nodes: 1815 1816
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 88 with id = 1815 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1821 currentId 1815
Added AND Nodes: 1820 1821
2 => callsites count before spliiting 150 with id = 1820 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1826 currentId 1820
Added AND Nodes: 1825 1826
7 => callsites count before spliiting 233 with id = 1686 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1831 currentId 1686
Added AND Nodes: 1830 1831
2 => callsites count before spliiting 105 with id = 1825 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1836 currentId 1825
Added AND Nodes: 1835 1836
7 => callsites count before spliiting 203 with id = 1830 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1841 currentId 1830
Added AND Nodes: 1840 1841
2 => callsites count before spliiting 71 with id = 1835 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1846 currentId 1835
Added AND Nodes: 1845 1846
2 => LOOP outcome: Correct & reachbound = True
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 295 with id = 1841 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1851 currentId 1841
Added AND Nodes: 1850 1851
2 => callsites count before spliiting 122 with id = 1846 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1856 currentId 1846
Added AND Nodes: 1855 1856
7 => callsites count before spliiting 208 with id = 1850 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1861 currentId 1850
Added AND Nodes: 1860 1861
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 184 with id = 1855 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1866 currentId 1855
Added AND Nodes: 1865 1866
7 => callsites count before spliiting 248 with id = 1861 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1871 currentId 1861
Added AND Nodes: 1870 1871
2 => LOOP outcome: Correct & reachbound = True
1 => callsites count before spliiting 82 with id = 1630 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1876 currentId 1630
Added AND Nodes: 1875 1876
1 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 369 with id = 1870 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1881 currentId 1870
Added AND Nodes: 1880 1881
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 318 with id = 1881 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1886 currentId 1881
Added AND Nodes: 1885 1886
2 => callsites count before spliiting 114 with id = 1866 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1891 currentId 1866
Added AND Nodes: 1890 1891
7 => callsites count before spliiting 229 with id = 1885 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1896 currentId 1885
Added AND Nodes: 1895 1896
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 259 with id = 1436 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1901 currentId 1436
Added AND Nodes: 1900 1901
2 => callsites count before spliiting 178 with id = 1890 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1906 currentId 1890
Added AND Nodes: 1905 1906
2 => LOOP outcome: Correct & reachbound = True
6 => callsites count before spliiting 230 with id = 1900 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1911 currentId 1900
Added AND Nodes: 1910 1911
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 202 with id = 1896 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1916 currentId 1896
Added AND Nodes: 1915 1916
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 270 with id = 1911 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1921 currentId 1911
Added AND Nodes: 1920 1921
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 139 with id = 1906 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1926 currentId 1906
Added AND Nodes: 1925 1926
4 => callsites count before spliiting 292 with id = 1316 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1931 currentId 1316
Added AND Nodes: 1930 1931
7 => callsites count before spliiting 254 with id = 1915 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1936 currentId 1915
4 => callsites count before spliiting 264 with id = 1930 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1941 currentId 1930
Added AND Nodes: 1935 1936
Added AND Nodes: 1940 1941
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
2 => callsites count before spliiting 192 with id = 1925 and splitMode 100
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--ethernet--sfc--sfc.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Verifying 250 impls
Verifying 250 impls
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
0 => LOOP outcome: Correct & reachbound = False

LOCATION - 0: 6
removing 11
removing 16
Reached root of partition tree. Verfification Finished.
Reached root bestAlgo updated to 0
Verification Outcome : OK
Time Taken : 65.473652
bestAlgo: 0
Verifying 250 impls
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--wireless--ipw2x00--ipw2100.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 2 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 21 currentId 6
Added AND Nodes: 20 21
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 21 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 26 currentId 11
for clientid : 7 algo id is 1
Added AND Nodes: 25 26
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 26 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 26 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 26
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 36 currentId 31
8 => callsites count before spliiting 7 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 41 currentId 16
Added AND Nodes: 40 41
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 41 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
Added AND Nodes: 35 36
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 36 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 36 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 51 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 56 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
for clientid : 11 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 13 with id = 21 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 61 currentId 21
Added AND Nodes: 60 61
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 61 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 41 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 66 currentId 41
Added AND Nodes: 65 66
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 66 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 56 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 56
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 5 with id = 55 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 76 currentId 55
Added AND Nodes: 75 76
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 76 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 91 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 96 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 101 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 106 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 106 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 111 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 111 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 116 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 116 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 121 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 121 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 126 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 126 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 131 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 131 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 136 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 136 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 141 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 141 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 146 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 6 with id = 146 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 151 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 16 with id = 150 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 156 currentId 150
Added AND Nodes: 155 156
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 156 from client 6 to 5
5 => after replyFromServer: 0
6 => callsites count before spliiting 216 with id = 155 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 161 currentId 155
Added AND Nodes: 160 161
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 206 with id = 151 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 166 currentId 151
Added AND Nodes: 165 166
5 => callsites count before spliiting 203 with id = 156 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 171 currentId 156
Added AND Nodes: 170 171
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 398 with id = 165 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 165
Added AND Nodes: 175 176
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 345 with id = 176 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
4 => callsites count before spliiting 309 with id = 180 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 186 currentId 180
Added AND Nodes: 185 186
4 => callsites count before spliiting 414 with id = 185 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 185
Added AND Nodes: 190 191
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => Spliiting due to client waiting
2 => callsites count before spliiting 12 with id = 61 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 196 currentId 61
Added AND Nodes: 195 196
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 196 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
7 => callsites count before spliiting 211 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 201 currentId 71
Added AND Nodes: 200 201
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 311 with id = 201 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 206 currentId 201
Added AND Nodes: 205 206
6 => callsites count before spliiting 240 with id = 161 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 211 currentId 161
Added AND Nodes: 210 211
10 => Spliiting due to client waiting
10 => callsites count before spliiting 12 with id = 66 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 216 currentId 66
Added AND Nodes: 215 216
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 216 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 216 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 221 currentId 216
Added AND Nodes: 220 221
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 221 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 221 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 226 currentId 221
Added AND Nodes: 225 226
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 226 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => callsites count before spliiting 332 with id = 205 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 231 currentId 205
Added AND Nodes: 230 231
6 => callsites count before spliiting 354 with id = 210 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 236 currentId 210
Added AND Nodes: 235 236
6 => callsites count before spliiting 351 with id = 235 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 241 currentId 235
Added AND Nodes: 240 241
7 => callsites count before spliiting 203 with id = 230 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 246 currentId 230
Added AND Nodes: 245 246
6 => callsites count before spliiting 200 with id = 240 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 251 currentId 240
Added AND Nodes: 250 251
6 => callsites count before spliiting 200 with id = 250 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 256 currentId 250
Added AND Nodes: 255 256
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 223 with id = 186 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 261 currentId 186
Added AND Nodes: 260 261
4 => callsites count before spliiting 221 with id = 260 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 266 currentId 260
Added AND Nodes: 265 266
6 => callsites count before spliiting 200 with id = 256 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 271 currentId 256
Added AND Nodes: 270 271
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 206 with id = 271 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 276 currentId 271
Added AND Nodes: 275 276
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 202 with id = 276 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 281 currentId 276
Added AND Nodes: 280 281
6 => callsites count before spliiting 226 with id = 280 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 286 currentId 280
Added AND Nodes: 285 286
6 => callsites count before spliiting 216 with id = 285 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 291 currentId 285
Added AND Nodes: 290 291
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => Spliiting due to client waiting
9 => callsites count before spliiting 12 with id = 226 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 296 currentId 226
Added AND Nodes: 295 296
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 296 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 296 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 301 currentId 296
Added AND Nodes: 300 301
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 301 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 196 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 306 currentId 196
Added AND Nodes: 305 306
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 306 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
5 => callsites count before spliiting 219 with id = 171 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 311 currentId 171
Added AND Nodes: 310 311
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 201 with id = 245 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 316 currentId 245
Added AND Nodes: 315 316
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 204 with id = 311 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 321 currentId 311
Added AND Nodes: 320 321
7 => callsites count before spliiting 200 with id = 316 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 326 currentId 316
Added AND Nodes: 325 326
7 => callsites count before spliiting 200 with id = 325 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 331 currentId 325
Added AND Nodes: 330 331
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 200 with id = 265 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 336 currentId 265
Added AND Nodes: 335 336
4 => callsites count before spliiting 208 with id = 335 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 341 currentId 335
Added AND Nodes: 340 341
7 => callsites count before spliiting 209 with id = 326 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 346 currentId 326
Added AND Nodes: 345 346
7 => callsites count before spliiting 206 with id = 345 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 351 currentId 345
Added AND Nodes: 350 351
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--pcmcia--pcmcia.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 1 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => Spliiting due to client waiting
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 10 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
8 => callsites count before spliiting 4 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 13 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 46 currentId 26
Added AND Nodes: 45 46
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 46 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 41
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 56 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
9 => callsites count before spliiting 12 with id = 36 and splitMode 50
for clientid : 4 algo id is 1
9 => sending calltree : splitMode 50 mustReachId 61 currentId 36
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 56 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
Added AND Nodes: 60 61
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 61 from client 9 to 10
10 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => Spliiting due to client waiting
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 12 with id = 65 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 65
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 86 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 61 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 91 currentId 61
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 96 currentId 81
Added AND Nodes: 95 96
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 96 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 101 currentId 86
Added AND Nodes: 100 101
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 101 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 90 91
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 91 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 101 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 106 from client 4 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 1 with id = 96 and splitMode 0
Added New : 
4 : 
7 => sending calltree : splitMode 0 mustReachId 111 currentId 96
Added AND Nodes: 110 111
4 => outcome: Correct
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 111 from client 7 to 6
6 => after replyFromServer: 0
for clientid : 4 algo id is 1
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 106 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 116 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 111 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 121 currentId 111
Added AND Nodes: 120 121
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 121 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 91 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 126 currentId 91
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 131 currentId 116
Added AND Nodes: 130 131
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 131 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
Added AND Nodes: 125 126
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 126 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 131 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 136 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 126 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 141 currentId 126
Added AND Nodes: 140 141
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 141 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 136 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 146 currentId 136
Added AND Nodes: 145 146
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 146 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 141 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 151 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 146 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 156 currentId 146
Added AND Nodes: 155 156
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 156 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 151 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 161 currentId 151
Added AND Nodes: 160 161
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 161 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 156 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 166 currentId 156
Added AND Nodes: 165 166
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 166 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 166 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 171 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 176 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 3 with id = 176 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 181 from client 4 to 7
7 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 181 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 186 from client 7 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 12 with id = 180 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 180
7 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 190 191
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 191 from client 4 to 6
6 => after replyFromServer: 0
Added New : 
7 : 
7 => outcome: Correct
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
for clientid : 7 algo id is 1
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 191 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 196 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 3 with id = 186 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 201 currentId 186
Added AND Nodes: 200 201
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 201 from client 5 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 196 and splitMode 0
5 => Spliiting due to client waiting
7 => sending calltree : splitMode 0 mustReachId 206 currentId 196
Added AND Nodes: 205 206
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 206 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 7 with id = 201 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 211 currentId 201
Added AND Nodes: 210 211
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 211 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 6 with id = 206 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 216 currentId 206
Added AND Nodes: 215 216
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 216 from client 6 to 4
4 => after replyFromServer: 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 8 with id = 46 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 221 currentId 46
Added AND Nodes: 220 221
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 221 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 10 with id = 161 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 226 currentId 161
Added AND Nodes: 225 226
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 226 from client 11 to 8
8 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 5 with id = 221 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 231 currentId 221
Added AND Nodes: 230 231
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 231 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 4 with id = 226 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 236 currentId 226
Added AND Nodes: 235 236
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 236 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 236 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 241 currentId 236
Added AND Nodes: 240 241
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 241 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 241 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 246 currentId 241
Added AND Nodes: 245 246
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 246 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 8 with id = 246 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 251 currentId 246
Added AND Nodes: 250 251
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 251 from client 11 to 8
8 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 251 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 256 currentId 251
Added AND Nodes: 255 256
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 256 from client 8 to 9
9 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 3 with id = 256 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 261 currentId 256
Added AND Nodes: 260 261
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 261 from client 9 to 10
10 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 3 with id = 231 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 266 currentId 231
Added AND Nodes: 265 266
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 266 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 1 with id = 266 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 271 currentId 266
Added AND Nodes: 270 271
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 271 from client 1 to 2
2 => after replyFromServer: 100
2 => Spliiting due to client waiting
2 => callsites count before spliiting 5 with id = 271 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 276 currentId 271
Added AND Nodes: 275 276
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 276 from client 2 to 3
3 => after replyFromServer: 100
3 => Spliiting due to client waiting
3 => callsites count before spliiting 5 with id = 276 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 281 from client 3 to 0
0 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 21 with id = 255 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 286 currentId 255
Added AND Nodes: 285 286
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 286 from client 8 to 10
10 => after replyFromServer: 50
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 14 with id = 280 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 291 currentId 280
Added AND Nodes: 290 291
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 291 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 17 with id = 275 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 296 currentId 275
Added AND Nodes: 295 296
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 296 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 5 with id = 270 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 301 currentId 270
Added AND Nodes: 300 301
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 301 from client 1 to 2
2 => after replyFromServer: 100
5 => callsites count before spliiting 217 with id = 200 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 306 currentId 200
Added AND Nodes: 305 306
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 217 with id = 215 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 311 currentId 215
Added AND Nodes: 310 311
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 208 with id = 211 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 316 currentId 211
Added AND Nodes: 315 316
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 203 with id = 216 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 321 currentId 216
Added AND Nodes: 320 321
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 219 with id = 306 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 326 currentId 306
Added AND Nodes: 325 326
6 => callsites count before spliiting 211 with id = 311 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 331 currentId 311
Added AND Nodes: 330 331
1 => callsites count before spliiting 56 with id = 300 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 336 currentId 300
Added AND Nodes: 335 336
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 282 with id = 325 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 341 currentId 325
Added AND Nodes: 340 341
7 => callsites count before spliiting 208 with id = 316 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 346 currentId 316
Added AND Nodes: 345 346
0 => callsites count before spliiting 51 with id = 291 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 351 currentId 291
Added AND Nodes: 350 351
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 56 with id = 296 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 356 currentId 296
Added AND Nodes: 355 356
4 => callsites count before spliiting 204 with id = 321 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 361 currentId 321
Added AND Nodes: 360 361
6 => callsites count before spliiting 218 with id = 330 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 366 currentId 330
Added AND Nodes: 365 366
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 216 with id = 260 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 371 currentId 260
Added AND Nodes: 370 371
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => callsites count before spliiting 61 with id = 301 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 376 currentId 301
Added AND Nodes: 375 376
6 => callsites count before spliiting 206 with id = 366 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 381 currentId 366
Added AND Nodes: 380 381
5 => callsites count before spliiting 277 with id = 340 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 386 currentId 340
Added AND Nodes: 385 386
7 => callsites count before spliiting 264 with id = 345 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 391 currentId 345
Added AND Nodes: 390 391
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 203 with id = 250 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 396 currentId 250
Added AND Nodes: 395 396
4 => callsites count before spliiting 218 with id = 360 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 401 currentId 360
Added AND Nodes: 400 401
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => callsites count before spliiting 220 with id = 286 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 406 currentId 286
Added AND Nodes: 405 406
1 => callsites count before spliiting 67 with id = 336 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 411 currentId 336
Added AND Nodes: 410 411
7 => callsites count before spliiting 205 with id = 390 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 416 currentId 390
Added AND Nodes: 415 416
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => callsites count before spliiting 242 with id = 395 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 421 currentId 395
Added AND Nodes: 420 421
8 => callsites count before spliiting 207 with id = 285 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 426 currentId 285
Added AND Nodes: 425 426
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 61 with id = 351 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 431 currentId 351
Added AND Nodes: 430 431
5 => callsites count before spliiting 235 with id = 386 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 436 currentId 386
Added AND Nodes: 435 436
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 268 with id = 405 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 441 currentId 405
Added AND Nodes: 440 441
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => callsites count before spliiting 61 with id = 355 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 446 currentId 355
Added AND Nodes: 445 446
3 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 311 with id = 401 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 451 currentId 401
Added AND Nodes: 450 451
5 => callsites count before spliiting 226 with id = 436 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 456 currentId 436
Added AND Nodes: 455 456
1 => callsites count before spliiting 58 with id = 410 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 461 currentId 410
Added AND Nodes: 460 461
9 => callsites count before spliiting 218 with id = 371 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 466 currentId 371
Added AND Nodes: 465 466
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => callsites count before spliiting 254 with id = 391 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 471 currentId 391
Added AND Nodes: 470 471
6 => callsites count before spliiting 200 with id = 380 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 476 currentId 380
Added AND Nodes: 475 476
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => callsites count before spliiting 222 with id = 426 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 481 currentId 426
Added AND Nodes: 480 481
4 => callsites count before spliiting 206 with id = 450 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 486 currentId 450
Added AND Nodes: 485 486
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => callsites count before spliiting 53 with id = 446 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 491 currentId 446
Added AND Nodes: 490 491
8 => callsites count before spliiting 284 with id = 480 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 496 currentId 480
Added AND Nodes: 495 496
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => callsites count before spliiting 231 with id = 421 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 501 currentId 421
Added AND Nodes: 500 501
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 211 with id = 466 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 506 currentId 466
Added AND Nodes: 505 506
2 => callsites count before spliiting 50 with id = 375 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 511 currentId 375
Added AND Nodes: 510 511
0 => callsites count before spliiting 59 with id = 430 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 516 currentId 430
Added AND Nodes: 515 516
9 => callsites count before spliiting 239 with id = 505 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 521 currentId 505
Added AND Nodes: 520 521
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 56 with id = 460 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 526 currentId 460
Added AND Nodes: 525 526
5 => callsites count before spliiting 249 with id = 455 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 531 currentId 455
Added AND Nodes: 530 531
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 63 with id = 490 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 536 currentId 490
Added AND Nodes: 535 536
0 => callsites count before spliiting 57 with id = 515 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 541 currentId 515
Added AND Nodes: 540 541
7 => callsites count before spliiting 332 with id = 470 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 546 currentId 470
Added AND Nodes: 545 546
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 51 with id = 510 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 551 currentId 510
Added AND Nodes: 550 551
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 50 with id = 525 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 556 currentId 525
Added AND Nodes: 555 556
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 226 with id = 441 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 561 currentId 441
Added AND Nodes: 560 561
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 201 with id = 501 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 566 currentId 501
Added AND Nodes: 565 566
3 => callsites count before spliiting 51 with id = 535 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 571 currentId 535
Added AND Nodes: 570 571
1 => callsites count before spliiting 55 with id = 556 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 576 currentId 556
Added AND Nodes: 575 576
0 => callsites count before spliiting 51 with id = 540 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 581 currentId 540
Added AND Nodes: 580 581
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 551 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 586 currentId 551
Added AND Nodes: 585 586
11 => callsites count before spliiting 243 with id = 565 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 591 currentId 565
Added AND Nodes: 590 591
8 => callsites count before spliiting 202 with id = 496 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 596 currentId 496
Added AND Nodes: 595 596
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 55 with id = 581 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 601 currentId 581
Added AND Nodes: 600 601
11 => callsites count before spliiting 262 with id = 590 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 606 currentId 590
Added AND Nodes: 605 606
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 61 with id = 570 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 611 currentId 570
Added AND Nodes: 610 611
3 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 50 with id = 585 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 616 currentId 585
Added AND Nodes: 615 616
9 => callsites count before spliiting 205 with id = 521 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 621 currentId 521
Added AND Nodes: 620 621
5 => callsites count before spliiting 261 with id = 531 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 626 currentId 531
Added AND Nodes: 625 626
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 326 with id = 451 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 631 currentId 451
Added AND Nodes: 630 631
1 => callsites count before spliiting 53 with id = 575 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 636 currentId 575
Added AND Nodes: 635 636
3 => callsites count before spliiting 51 with id = 611 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 641 currentId 611
Added AND Nodes: 640 641
6 => callsites count before spliiting 244 with id = 381 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 646 currentId 381
Added AND Nodes: 645 646
9 => callsites count before spliiting 236 with id = 620 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 651 currentId 620
Added AND Nodes: 650 651
0 => callsites count before spliiting 53 with id = 600 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 656 currentId 600
Added AND Nodes: 655 656
4 => callsites count before spliiting 216 with id = 630 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 661 currentId 630
Added AND Nodes: 660 661
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 244 with id = 650 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 666 currentId 650
Added AND Nodes: 665 666
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 242 with id = 606 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 671 currentId 606
Added AND Nodes: 670 671
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 55 with id = 615 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 676 currentId 615
Added AND Nodes: 675 676
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 70 with id = 635 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 681 currentId 635
Added AND Nodes: 680 681
1 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 249 with id = 661 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 686 currentId 661
Added AND Nodes: 685 686
0 => callsites count before spliiting 70 with id = 655 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 691 currentId 655
Added AND Nodes: 690 691
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 208 with id = 596 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 696 currentId 596
Added AND Nodes: 695 696
6 => callsites count before spliiting 209 with id = 645 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 701 currentId 645
Added AND Nodes: 700 701
10 => callsites count before spliiting 211 with id = 561 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 706 currentId 561
Added AND Nodes: 705 706
3 => callsites count before spliiting 56 with id = 640 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 711 currentId 640
Added AND Nodes: 710 711
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 60 with id = 676 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 716 currentId 676
Added AND Nodes: 715 716
8 => callsites count before spliiting 222 with id = 695 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 721 currentId 695
Added AND Nodes: 720 721
10 => callsites count before spliiting 231 with id = 705 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 726 currentId 705
Added AND Nodes: 725 726
4 => callsites count before spliiting 341 with id = 685 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 731 currentId 685
Added AND Nodes: 730 731
1 => callsites count before spliiting 51 with id = 681 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 736 currentId 681
Added AND Nodes: 735 736
10 => callsites count before spliiting 241 with id = 725 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 741 currentId 725
Added AND Nodes: 740 741
8 => callsites count before spliiting 239 with id = 720 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 746 currentId 720
Added AND Nodes: 745 746
3 => callsites count before spliiting 59 with id = 710 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 751 currentId 710
Added AND Nodes: 750 751
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 51 with id = 691 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 756 currentId 691
Added AND Nodes: 755 756
2 => callsites count before spliiting 51 with id = 715 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 761 currentId 715
Added AND Nodes: 760 761
10 => callsites count before spliiting 259 with id = 740 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 766 currentId 740
Added AND Nodes: 765 766
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 261 with id = 745 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 771 currentId 745
Added AND Nodes: 770 771
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => callsites count before spliiting 274 with id = 671 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 776 currentId 671
Added AND Nodes: 775 776
4 => callsites count before spliiting 321 with id = 730 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 781 currentId 730
Added AND Nodes: 780 781
9 => callsites count before spliiting 203 with id = 666 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 786 currentId 666
Added AND Nodes: 785 786
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 300 with id = 775 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 791 currentId 775
Added AND Nodes: 790 791
1 => callsites count before spliiting 64 with id = 735 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 796 currentId 735
Added AND Nodes: 795 796
4 => callsites count before spliiting 311 with id = 780 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 801 currentId 780
Added AND Nodes: 800 801
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 339 with id = 790 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 806 currentId 790
Added AND Nodes: 805 806
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => callsites count before spliiting 226 with id = 766 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 811 currentId 766
Added AND Nodes: 810 811
2 => callsites count before spliiting 56 with id = 760 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 816 currentId 760
Added AND Nodes: 815 816
10 => callsites count before spliiting 242 with id = 810 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 821 currentId 810
Added AND Nodes: 820 821
3 => callsites count before spliiting 60 with id = 751 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 826 currentId 751
Added AND Nodes: 825 826
1 => callsites count before spliiting 50 with id = 795 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 831 currentId 795
Added AND Nodes: 830 831
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 244 with id = 771 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 836 currentId 771
Added AND Nodes: 835 836
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => callsites count before spliiting 64 with id = 755 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 841 currentId 755
Added AND Nodes: 840 841
4 => callsites count before spliiting 238 with id = 801 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 846 currentId 801
Added AND Nodes: 845 846
9 => callsites count before spliiting 272 with id = 786 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 851 currentId 786
Added AND Nodes: 850 851
2 => callsites count before spliiting 66 with id = 815 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 856 currentId 815
Added AND Nodes: 855 856
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 238 with id = 701 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 861 currentId 701
Added AND Nodes: 860 861
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 206 with id = 806 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 866 currentId 806
Added AND Nodes: 865 866
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 295 with id = 850 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 871 currentId 850
Added AND Nodes: 870 871
1 => callsites count before spliiting 51 with id = 830 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 876 currentId 830
Added AND Nodes: 875 876
9 => callsites count before spliiting 320 with id = 870 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 881 currentId 870
Added AND Nodes: 880 881
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
4 => callsites count before spliiting 210 with id = 845 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 886 currentId 845
Added AND Nodes: 885 886
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 50 with id = 840 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 891 currentId 840
Added AND Nodes: 890 891
1 => callsites count before spliiting 61 with id = 875 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 896 currentId 875
Added AND Nodes: 895 896
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 51 with id = 856 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 901 currentId 856
Added AND Nodes: 900 901
5 => callsites count before spliiting 337 with id = 626 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 906 currentId 626
Added AND Nodes: 905 906
5 => callsites count before spliiting 244 with id = 905 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 911 currentId 905
Added AND Nodes: 910 911
0 => callsites count before spliiting 51 with id = 890 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 916 currentId 890
Added AND Nodes: 915 916
3 => callsites count before spliiting 54 with id = 825 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 921 currentId 825
Added AND Nodes: 920 921
11 => callsites count before spliiting 239 with id = 866 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 926 currentId 866
Added AND Nodes: 925 926
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 64 with id = 900 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 931 currentId 900
Added AND Nodes: 930 931
1 => callsites count before spliiting 53 with id = 896 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 936 currentId 896
Added AND Nodes: 935 936
7 => callsites count before spliiting 437 with id = 546 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 941 currentId 546
Added AND Nodes: 940 941
0 => callsites count before spliiting 61 with id = 915 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 946 currentId 915
Added AND Nodes: 945 946
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 227 with id = 811 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 951 currentId 811
Added AND Nodes: 950 951
9 => callsites count before spliiting 216 with id = 881 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 956 currentId 881
Added AND Nodes: 955 956
7 => callsites count before spliiting 324 with id = 940 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 961 currentId 940
Added AND Nodes: 960 961
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => callsites count before spliiting 240 with id = 955 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 966 currentId 955
Added AND Nodes: 965 966
10 => callsites count before spliiting 243 with id = 950 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 971 currentId 950
Added AND Nodes: 970 971
4 => callsites count before spliiting 333 with id = 886 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 976 currentId 886
Added AND Nodes: 975 976
3 => callsites count before spliiting 59 with id = 920 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 981 currentId 920
Added AND Nodes: 980 981
2 => callsites count before spliiting 50 with id = 930 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 986 currentId 930
Added AND Nodes: 985 986
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => callsites count before spliiting 274 with id = 836 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 991 currentId 836
Added AND Nodes: 990 991
10 => callsites count before spliiting 279 with id = 970 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 996 currentId 970
Added AND Nodes: 995 996
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 286 with id = 990 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1001 currentId 990
Added AND Nodes: 1000 1001
6 => callsites count before spliiting 296 with id = 861 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1006 currentId 861
Added AND Nodes: 1005 1006
8 => callsites count before spliiting 306 with id = 1000 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1011 currentId 1000
Added AND Nodes: 1010 1011
3 => callsites count before spliiting 52 with id = 980 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1016 currentId 980
Added AND Nodes: 1015 1016
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => callsites count before spliiting 207 with id = 926 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1021 currentId 926
Added AND Nodes: 1020 1021
9 => callsites count before spliiting 296 with id = 965 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1026 currentId 965
Added AND Nodes: 1025 1026
2 => callsites count before spliiting 51 with id = 985 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1031 currentId 985
Added AND Nodes: 1030 1031
11 => callsites count before spliiting 221 with id = 1020 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1036 currentId 1020
Added AND Nodes: 1035 1036
0 => callsites count before spliiting 53 with id = 946 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1041 currentId 946
Added AND Nodes: 1040 1041
5 => callsites count before spliiting 241 with id = 910 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1046 currentId 910
Added AND Nodes: 1045 1046
11 => callsites count before spliiting 232 with id = 1035 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1051 currentId 1035
Added AND Nodes: 1050 1051
2 => callsites count before spliiting 61 with id = 1030 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1056 currentId 1030
Added AND Nodes: 1055 1056
2 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 246 with id = 1050 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1061 currentId 1050
Added AND Nodes: 1060 1061
1 => callsites count before spliiting 57 with id = 935 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1066 currentId 935
Added AND Nodes: 1065 1066
5 => callsites count before spliiting 206 with id = 1045 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1071 currentId 1045
Added AND Nodes: 1070 1071
3 => callsites count before spliiting 53 with id = 1015 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1076 currentId 1015
Added AND Nodes: 1075 1076
3 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 291 with id = 1060 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1081 currentId 1060
Added AND Nodes: 1080 1081
10 => callsites count before spliiting 229 with id = 996 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1086 currentId 996
Added AND Nodes: 1085 1086
11 => callsites count before spliiting 381 with id = 1080 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1091 currentId 1080
Added AND Nodes: 1090 1091
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 271 with id = 1085 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1096 currentId 1085
Added AND Nodes: 1095 1096
9 => callsites count before spliiting 328 with id = 1025 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1101 currentId 1025
Added AND Nodes: 1100 1101
4 => callsites count before spliiting 289 with id = 976 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1106 currentId 976
Added AND Nodes: 1105 1106
11 => callsites count before spliiting 466 with id = 1090 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1111 currentId 1090
Added AND Nodes: 1110 1111
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 431 with id = 1100 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1116 currentId 1100
Added AND Nodes: 1115 1116
7 => callsites count before spliiting 246 with id = 961 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1121 currentId 961
Added AND Nodes: 1120 1121
6 => callsites count before spliiting 313 with id = 1005 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1126 currentId 1005
Added AND Nodes: 1125 1126
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => callsites count before spliiting 443 with id = 1115 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1131 currentId 1115
Added AND Nodes: 1130 1131
8 => callsites count before spliiting 212 with id = 1011 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1136 currentId 1011
Added AND Nodes: 1135 1136
11 => callsites count before spliiting 472 with id = 1110 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1141 currentId 1110
Added AND Nodes: 1140 1141
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 456 with id = 1130 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1146 currentId 1130
Added AND Nodes: 1145 1146
8 => callsites count before spliiting 241 with id = 1135 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1151 currentId 1135
Added AND Nodes: 1150 1151
2 => callsites count before spliiting 54 with id = 1056 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1156 currentId 1056
Added AND Nodes: 1155 1156
1 => callsites count before spliiting 55 with id = 1065 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1161 currentId 1065
Added AND Nodes: 1160 1161
9 => callsites count before spliiting 495 with id = 1145 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1166 currentId 1145
Added AND Nodes: 1165 1166
0 => callsites count before spliiting 57 with id = 1040 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1171 currentId 1040
Added AND Nodes: 1170 1171
9 => callsites count before spliiting 517 with id = 1165 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1176 currentId 1165
Added AND Nodes: 1175 1176
10 => callsites count before spliiting 303 with id = 1095 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1181 currentId 1095
Added AND Nodes: 1180 1181
1 => callsites count before spliiting 72 with id = 1160 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1186 currentId 1160
Added AND Nodes: 1185 1186
9 => callsites count before spliiting 541 with id = 1175 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1191 currentId 1175
Added AND Nodes: 1190 1191
8 => callsites count before spliiting 270 with id = 1150 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1196 currentId 1150
Added AND Nodes: 1195 1196
3 => callsites count before spliiting 63 with id = 1076 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1201 currentId 1076
Added AND Nodes: 1200 1201
9 => callsites count before spliiting 591 with id = 1190 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1206 currentId 1190
Added AND Nodes: 1205 1206
1 => callsites count before spliiting 54 with id = 1185 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1211 currentId 1185
Added AND Nodes: 1210 1211
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 1155 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1216 currentId 1155
Added AND Nodes: 1215 1216
0 => callsites count before spliiting 55 with id = 1170 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1221 currentId 1170
Added AND Nodes: 1220 1221
9 => callsites count before spliiting 619 with id = 1205 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1226 currentId 1205
Added AND Nodes: 1225 1226
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => callsites count before spliiting 250 with id = 1046 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1231 currentId 1046
Added AND Nodes: 1230 1231
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 319 with id = 1180 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1236 currentId 1180
Added AND Nodes: 1235 1236
3 => callsites count before spliiting 51 with id = 1200 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1241 currentId 1200
Added AND Nodes: 1240 1241
0 => callsites count before spliiting 72 with id = 1220 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1246 currentId 1220
Added AND Nodes: 1245 1246
8 => callsites count before spliiting 382 with id = 1195 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1251 currentId 1195
Added AND Nodes: 1250 1251
2 => callsites count before spliiting 55 with id = 1215 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1256 currentId 1215
Added AND Nodes: 1255 1256
0 => callsites count before spliiting 54 with id = 1245 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1261 currentId 1245
Added AND Nodes: 1260 1261
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 335 with id = 1235 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1266 currentId 1235
Added AND Nodes: 1265 1266
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => callsites count before spliiting 346 with id = 1126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1271 currentId 1126
Added AND Nodes: 1270 1271
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 53 with id = 1211 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1276 currentId 1211
Added AND Nodes: 1275 1276
7 => callsites count before spliiting 299 with id = 1121 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1281 currentId 1121
Added AND Nodes: 1280 1281
3 => callsites count before spliiting 61 with id = 1240 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1286 currentId 1240
Added AND Nodes: 1285 1286
7 => callsites count before spliiting 203 with id = 1280 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1291 currentId 1280
Added AND Nodes: 1290 1291
2 => callsites count before spliiting 72 with id = 1255 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1296 currentId 1255
Added AND Nodes: 1295 1296
4 => callsites count before spliiting 380 with id = 1106 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1301 currentId 1106
Added AND Nodes: 1300 1301
2 => callsites count before spliiting 54 with id = 1295 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1306 currentId 1295
Added AND Nodes: 1305 1306
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 52 with id = 1285 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1311 currentId 1285
Added AND Nodes: 1310 1311
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 53 with id = 1261 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1316 currentId 1261
Added AND Nodes: 1315 1316
7 => callsites count before spliiting 241 with id = 1290 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1321 currentId 1290
Added AND Nodes: 1320 1321
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 402 with id = 1250 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1326 currentId 1250
Added AND Nodes: 1325 1326
2 => callsites count before spliiting 53 with id = 1306 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1331 currentId 1306
Added AND Nodes: 1330 1331
1 => callsites count before spliiting 57 with id = 1275 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1336 currentId 1275
Added AND Nodes: 1335 1336
2 => callsites count before spliiting 57 with id = 1330 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1341 currentId 1330
Added AND Nodes: 1340 1341
0 => callsites count before spliiting 57 with id = 1315 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1346 currentId 1315
Added AND Nodes: 1345 1346
3 => callsites count before spliiting 54 with id = 1311 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1351 currentId 1311
Added AND Nodes: 1350 1351
8 => callsites count before spliiting 421 with id = 1325 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1356 currentId 1325
Added AND Nodes: 1355 1356
1 => callsites count before spliiting 55 with id = 1335 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1361 currentId 1335
Added AND Nodes: 1360 1361
2 => callsites count before spliiting 55 with id = 1340 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1366 currentId 1340
Added AND Nodes: 1365 1366
4 => callsites count before spliiting 470 with id = 1300 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1371 currentId 1300
Added AND Nodes: 1370 1371
0 => callsites count before spliiting 55 with id = 1345 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1376 currentId 1345
Added AND Nodes: 1375 1376
6 => callsites count before spliiting 408 with id = 1271 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1381 currentId 1271
Added AND Nodes: 1380 1381
3 => callsites count before spliiting 59 with id = 1350 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1386 currentId 1350
Added AND Nodes: 1385 1386
1 => callsites count before spliiting 72 with id = 1360 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1391 currentId 1360
Added AND Nodes: 1390 1391
1 => callsites count before spliiting 54 with id = 1390 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1396 currentId 1390
Added AND Nodes: 1395 1396
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 442 with id = 1355 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1401 currentId 1355
Added AND Nodes: 1400 1401
3 => callsites count before spliiting 52 with id = 1385 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1406 currentId 1385
Added AND Nodes: 1405 1406
2 => callsites count before spliiting 72 with id = 1365 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1411 currentId 1365
Added AND Nodes: 1410 1411
8 => callsites count before spliiting 452 with id = 1400 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1416 currentId 1400
Added AND Nodes: 1415 1416
0 => callsites count before spliiting 72 with id = 1375 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1421 currentId 1375
Added AND Nodes: 1420 1421
8 => callsites count before spliiting 466 with id = 1415 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1426 currentId 1415
Added AND Nodes: 1425 1426
2 => callsites count before spliiting 54 with id = 1410 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1431 currentId 1410
Added AND Nodes: 1430 1431
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 400 with id = 1370 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1436 currentId 1370
Added AND Nodes: 1435 1436
6 => callsites count before spliiting 327 with id = 1380 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1441 currentId 1380
Added AND Nodes: 1440 1441
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 54 with id = 1420 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1446 currentId 1420
Added AND Nodes: 1445 1446
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 53 with id = 1405 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1451 currentId 1405
Added AND Nodes: 1450 1451
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 481 with id = 1425 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1456 currentId 1425
Added AND Nodes: 1455 1456
11 => callsites count before spliiting 218 with id = 1141 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1461 currentId 1141
Added AND Nodes: 1460 1461
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
8 => callsites count before spliiting 495 with id = 1455 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1466 currentId 1455
Added AND Nodes: 1465 1466
8 => callsites count before spliiting 531 with id = 1465 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1471 currentId 1465
Added AND Nodes: 1470 1471
8 => callsites count before spliiting 569 with id = 1470 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1476 currentId 1470
Added AND Nodes: 1475 1476
1 => callsites count before spliiting 53 with id = 1396 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1481 currentId 1396
Added AND Nodes: 1480 1481
3 => callsites count before spliiting 63 with id = 1451 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1486 currentId 1451
Added AND Nodes: 1485 1486
5 => callsites count before spliiting 287 with id = 1231 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1491 currentId 1231
Added AND Nodes: 1490 1491
8 => callsites count before spliiting 608 with id = 1475 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1496 currentId 1475
Added AND Nodes: 1495 1496
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 219 with id = 1490 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1501 currentId 1490
Added AND Nodes: 1500 1501
2 => callsites count before spliiting 54 with id = 1431 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1506 currentId 1431
Added AND Nodes: 1505 1506
0 => callsites count before spliiting 53 with id = 1446 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1511 currentId 1446
Added AND Nodes: 1510 1511
3 => callsites count before spliiting 51 with id = 1485 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1516 currentId 1485
Added AND Nodes: 1515 1516
5 => callsites count before spliiting 230 with id = 1500 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1521 currentId 1500
Added AND Nodes: 1520 1521
1 => callsites count before spliiting 57 with id = 1480 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1526 currentId 1480
Added AND Nodes: 1525 1526
5 => callsites count before spliiting 225 with id = 1520 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1531 currentId 1520
Added AND Nodes: 1530 1531
3 => callsites count before spliiting 61 with id = 1515 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1536 currentId 1515
Added AND Nodes: 1535 1536
6 => callsites count before spliiting 293 with id = 1441 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1541 currentId 1441
Added AND Nodes: 1540 1541
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 55 with id = 1525 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1546 currentId 1525
Added AND Nodes: 1545 1546
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 57 with id = 1505 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1551 currentId 1505
Added AND Nodes: 1550 1551
7 => callsites count before spliiting 343 with id = 1321 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1556 currentId 1321
Added AND Nodes: 1555 1556
3 => callsites count before spliiting 52 with id = 1535 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1561 currentId 1535
Added AND Nodes: 1560 1561
0 => callsites count before spliiting 57 with id = 1510 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1566 currentId 1510
Added AND Nodes: 1565 1566
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 215 with id = 1555 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1571 currentId 1555
Added AND Nodes: 1570 1571
1 => callsites count before spliiting 72 with id = 1545 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1576 currentId 1545
Added AND Nodes: 1575 1576
2 => callsites count before spliiting 55 with id = 1550 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1581 currentId 1550
Added AND Nodes: 1580 1581
1 => callsites count before spliiting 54 with id = 1575 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1586 currentId 1575
Added AND Nodes: 1585 1586
1 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 223 with id = 1570 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1591 currentId 1570
Added AND Nodes: 1590 1591
0 => callsites count before spliiting 55 with id = 1565 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1596 currentId 1565
Added AND Nodes: 1595 1596
2 => callsites count before spliiting 72 with id = 1580 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1601 currentId 1580
Added AND Nodes: 1600 1601
9 => callsites count before spliiting 229 with id = 1226 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1606 currentId 1226
Added AND Nodes: 1605 1606
3 => callsites count before spliiting 56 with id = 1560 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1611 currentId 1560
Added AND Nodes: 1610 1611
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 54 with id = 1600 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1616 currentId 1600
Added AND Nodes: 1615 1616
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 72 with id = 1595 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1621 currentId 1595
Added AND Nodes: 1620 1621
5 => callsites count before spliiting 200 with id = 1521 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1626 currentId 1521
Added AND Nodes: 1625 1626
9 => callsites count before spliiting 327 with id = 1605 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1631 currentId 1605
Added AND Nodes: 1630 1631
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
0 => callsites count before spliiting 54 with id = 1620 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1636 currentId 1620
Added AND Nodes: 1635 1636
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 53 with id = 1586 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1641 currentId 1586
Added AND Nodes: 1640 1641
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 54 with id = 1616 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1646 currentId 1616
Added AND Nodes: 1645 1646
5 => callsites count before spliiting 211 with id = 1501 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1651 currentId 1501
Added AND Nodes: 1650 1651
0 => callsites count before spliiting 53 with id = 1636 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1656 currentId 1636
Added AND Nodes: 1655 1656
2 => callsites count before spliiting 57 with id = 1645 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1661 currentId 1645
Added AND Nodes: 1660 1661
1 => callsites count before spliiting 57 with id = 1640 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1666 currentId 1640
Added AND Nodes: 1665 1666
3 => callsites count before spliiting 63 with id = 1611 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1671 currentId 1611
Added AND Nodes: 1670 1671
0 => callsites count before spliiting 57 with id = 1655 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1676 currentId 1655
Added AND Nodes: 1675 1676
5 => callsites count before spliiting 202 with id = 1650 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1681 currentId 1650
Added AND Nodes: 1680 1681
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 55 with id = 1660 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1686 currentId 1660
Added AND Nodes: 1685 1686
5 => callsites count before spliiting 222 with id = 1651 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1691 currentId 1651
Added AND Nodes: 1690 1691
3 => callsites count before spliiting 51 with id = 1670 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1696 currentId 1670
Added AND Nodes: 1695 1696
1 => callsites count before spliiting 55 with id = 1665 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1701 currentId 1665
Added AND Nodes: 1700 1701
0 => callsites count before spliiting 55 with id = 1675 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1706 currentId 1675
Added AND Nodes: 1705 1706
6 => callsites count before spliiting 345 with id = 1541 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1711 currentId 1541
Added AND Nodes: 1710 1711
6 => callsites count before spliiting 200 with id = 1710 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1716 currentId 1710
Added AND Nodes: 1715 1716
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 72 with id = 1685 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1721 currentId 1685
Added AND Nodes: 1720 1721
7 => callsites count before spliiting 219 with id = 1556 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1726 currentId 1556
Added AND Nodes: 1725 1726
3 => callsites count before spliiting 61 with id = 1695 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1731 currentId 1695
Added AND Nodes: 1730 1731
11 => callsites count before spliiting 214 with id = 1461 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1736 currentId 1461
Added AND Nodes: 1735 1736
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 72 with id = 1700 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1741 currentId 1700
Added AND Nodes: 1740 1741
0 => callsites count before spliiting 72 with id = 1705 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1746 currentId 1705
Added AND Nodes: 1745 1746
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 54 with id = 1720 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1751 currentId 1720
Added AND Nodes: 1750 1751
6 => callsites count before spliiting 213 with id = 1715 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1756 currentId 1715
2 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 1755 1756
1 => callsites count before spliiting 54 with id = 1740 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1761 currentId 1740
Added AND Nodes: 1760 1761
0 => callsites count before spliiting 54 with id = 1745 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1766 currentId 1745
Added AND Nodes: 1765 1766
1 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 52 with id = 1730 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1771 currentId 1730
Added AND Nodes: 1770 1771
7 => callsites count before spliiting 221 with id = 1725 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1776 currentId 1725
Added AND Nodes: 1775 1776
2 => callsites count before spliiting 53 with id = 1751 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1781 currentId 1751
Added AND Nodes: 1780 1781
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 53 with id = 1761 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1786 currentId 1761
Added AND Nodes: 1785 1786
7 => callsites count before spliiting 204 with id = 1775 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1791 currentId 1775
Added AND Nodes: 1790 1791
0 => callsites count before spliiting 53 with id = 1766 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1796 currentId 1766
Added AND Nodes: 1795 1796
3 => callsites count before spliiting 56 with id = 1770 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1801 currentId 1770
Added AND Nodes: 1800 1801
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 57 with id = 1785 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1806 currentId 1785
Added AND Nodes: 1805 1806
7 => callsites count before spliiting 225 with id = 1790 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1811 currentId 1790
Added AND Nodes: 1810 1811
5 => callsites count before spliiting 236 with id = 1491 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1816 currentId 1491
Added AND Nodes: 1815 1816
3 => callsites count before spliiting 63 with id = 1801 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1821 currentId 1801
Added AND Nodes: 1820 1821
1 => callsites count before spliiting 55 with id = 1805 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1826 currentId 1805
Added AND Nodes: 1825 1826
2 => callsites count before spliiting 57 with id = 1780 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1831 currentId 1780
Added AND Nodes: 1830 1831
3 => callsites count before spliiting 51 with id = 1820 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1836 currentId 1820
Added AND Nodes: 1835 1836
1 => callsites count before spliiting 72 with id = 1825 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1841 currentId 1825
Added AND Nodes: 1840 1841
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => callsites count before spliiting 57 with id = 1795 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1846 currentId 1795
Added AND Nodes: 1845 1846
1 => callsites count before spliiting 54 with id = 1840 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1851 currentId 1840
Added AND Nodes: 1850 1851
6 => callsites count before spliiting 246 with id = 1711 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1856 currentId 1711
Added AND Nodes: 1855 1856
3 => callsites count before spliiting 61 with id = 1835 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1861 currentId 1835
Added AND Nodes: 1860 1861
2 => callsites count before spliiting 55 with id = 1830 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1866 currentId 1830
Added AND Nodes: 1865 1866
10 => callsites count before spliiting 234 with id = 1266 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1871 currentId 1266
Added AND Nodes: 1870 1871
6 => callsites count before spliiting 229 with id = 1855 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1876 currentId 1855
Added AND Nodes: 1875 1876
2 => callsites count before spliiting 72 with id = 1865 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1881 currentId 1865
Added AND Nodes: 1880 1881
0 => callsites count before spliiting 55 with id = 1845 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1886 currentId 1845
Added AND Nodes: 1885 1886
3 => callsites count before spliiting 52 with id = 1860 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1891 currentId 1860
Added AND Nodes: 1890 1891
10 => callsites count before spliiting 253 with id = 1870 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1896 currentId 1870
Added AND Nodes: 1895 1896
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => callsites count before spliiting 223 with id = 1896 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1901 currentId 1896
Added AND Nodes: 1900 1901
1 => callsites count before spliiting 57 with id = 1850 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1906 currentId 1850
Added AND Nodes: 1905 1906
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 54 with id = 1880 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1911 currentId 1880
Added AND Nodes: 1910 1911
6 => callsites count before spliiting 222 with id = 1875 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1916 currentId 1875
Added AND Nodes: 1915 1916
0 => callsites count before spliiting 72 with id = 1885 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1921 currentId 1885
Added AND Nodes: 1920 1921
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => callsites count before spliiting 238 with id = 1900 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1926 currentId 1900
Added AND Nodes: 1925 1926
0 => callsites count before spliiting 54 with id = 1920 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1931 currentId 1920
Added AND Nodes: 1930 1931
1 => callsites count before spliiting 54 with id = 1906 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1936 currentId 1906
Added AND Nodes: 1935 1936
10 => callsites count before spliiting 378 with id = 1925 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1941 currentId 1925
Added AND Nodes: 1940 1941
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => callsites count before spliiting 224 with id = 1915 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1946 currentId 1915
Added AND Nodes: 1945 1946
3 => callsites count before spliiting 56 with id = 1890 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1951 currentId 1890
Added AND Nodes: 1950 1951
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 281 with id = 1815 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1956 currentId 1815
Added AND Nodes: 1955 1956
7 => callsites count before spliiting 231 with id = 1791 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1961 currentId 1791
Added AND Nodes: 1960 1961
0 => callsites count before spliiting 57 with id = 1930 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1966 currentId 1930
Added AND Nodes: 1965 1966
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 58 with id = 1910 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1971 currentId 1910
Added AND Nodes: 1970 1971
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 246 with id = 1955 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1976 currentId 1955
Added AND Nodes: 1975 1976
0 => callsites count before spliiting 54 with id = 1966 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1981 currentId 1966
Added AND Nodes: 1980 1981
5 => callsites count before spliiting 286 with id = 1975 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1986 currentId 1975
Added AND Nodes: 1985 1986
5 => callsites count before spliiting 203 with id = 1985 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1991 currentId 1985
Added AND Nodes: 1990 1991
1 => callsites count before spliiting 56 with id = 1935 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1996 currentId 1935
Added AND Nodes: 1995 1996
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 53 with id = 1971 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2001 currentId 1971
Added AND Nodes: 2000 2001
3 => callsites count before spliiting 63 with id = 1951 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2006 currentId 1951
Added AND Nodes: 2005 2006
1 => callsites count before spliiting 54 with id = 1995 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2011 currentId 1995
Added AND Nodes: 2010 2011
3 => callsites count before spliiting 51 with id = 2005 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2016 currentId 2005
Added AND Nodes: 2015 2016
1 => callsites count before spliiting 71 with id = 2010 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2021 currentId 2010
Added AND Nodes: 2020 2021
2 => callsites count before spliiting 51 with id = 2000 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2026 currentId 2000
Added AND Nodes: 2025 2026
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 53 with id = 2020 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2031 currentId 2020
Added AND Nodes: 2030 2031
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 61 with id = 2015 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2036 currentId 2015
Added AND Nodes: 2035 2036
0 => callsites count before spliiting 56 with id = 1980 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2041 currentId 1980
Added AND Nodes: 2040 2041
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 68 with id = 2025 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2046 currentId 2025
Added AND Nodes: 2045 2046
2 => callsites count before spliiting 50 with id = 2045 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2051 currentId 2045
Added AND Nodes: 2050 2051
6 => callsites count before spliiting 202 with id = 1916 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2056 currentId 1916
Added AND Nodes: 2055 2056
3 => callsites count before spliiting 52 with id = 2035 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2061 currentId 2035
Added AND Nodes: 2060 2061
0 => callsites count before spliiting 54 with id = 2040 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2066 currentId 2040
Added AND Nodes: 2065 2066
1 => callsites count before spliiting 56 with id = 2030 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2071 currentId 2030
Added AND Nodes: 2070 2071
1 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 71 with id = 2065 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2076 currentId 2065
Added AND Nodes: 2075 2076
1 => callsites count before spliiting 54 with id = 2071 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2081 currentId 2071
Added AND Nodes: 2080 2081
0 => callsites count before spliiting 53 with id = 2075 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2086 currentId 2075
Added AND Nodes: 2085 2086
2 => callsites count before spliiting 54 with id = 2050 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2091 currentId 2050
Added AND Nodes: 2090 2091
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 56 with id = 2060 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2096 currentId 2060
Added AND Nodes: 2095 2096
3 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 204 with id = 1726 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2101 currentId 1726
Added AND Nodes: 2100 2101
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => callsites count before spliiting 56 with id = 2080 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2106 currentId 2080
Added AND Nodes: 2105 2106
6 => callsites count before spliiting 206 with id = 2056 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2111 currentId 2056
Added AND Nodes: 2110 2111
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 56 with id = 2085 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2116 currentId 2085
Added AND Nodes: 2115 2116
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 54 with id = 2105 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2121 currentId 2105
Added AND Nodes: 2120 2121
2 => callsites count before spliiting 53 with id = 2091 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2126 currentId 2091
Added AND Nodes: 2125 2126
5 => callsites count before spliiting 201 with id = 1986 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2131 currentId 1986
Added AND Nodes: 2130 2131
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 63 with id = 2096 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2136 currentId 2096
Added AND Nodes: 2135 2136
0 => callsites count before spliiting 54 with id = 2116 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2141 currentId 2116
Added AND Nodes: 2140 2141
1 => callsites count before spliiting 71 with id = 2120 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2146 currentId 2120
Added AND Nodes: 2145 2146
2 => callsites count before spliiting 55 with id = 2125 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2151 currentId 2125
Added AND Nodes: 2150 2151
6 => callsites count before spliiting 251 with id = 1876 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2156 currentId 1876
Added AND Nodes: 2155 2156
1 => callsites count before spliiting 53 with id = 2145 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2161 currentId 2145
Added AND Nodes: 2160 2161
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 51 with id = 2135 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2166 currentId 2135
Added AND Nodes: 2165 2166
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--scsi--aic7xxx_old.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Verifying 76 impls
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
Verifying 76 impls
Verifying 76 impls
0 => outcome: Errors
Outcome NOK bestAlgo updated to 0
Verification Outcome : NOK
Time Taken : 10.036329
bestAlgo: 0
Verifying 76 impls
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--staging--bcm--bcm_wimax.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 21 currentId 6
Added AND Nodes: 20 21
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 21 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
1 => LOOP outcome: Correct & reachbound = False

LOCATION - 0: 6
removing 11
removing 16
Reached root of partition tree. Verfification Finished.
Reached root bestAlgo updated to 0
Verification Outcome : OK
Time Taken : 8.781218
bestAlgo: 0
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-fs--ceph--ceph.ko-ldv_main7_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => Spliiting due to client waiting
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 6 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 7 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 31 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 36 currentId 31
Added AND Nodes: 35 36
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 36 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 36
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 46 currentId 16
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 5 with id = 40 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 51 currentId 40
Added AND Nodes: 50 51
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 51 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 45 46
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 46 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
for clientid : 11 algo id is 2
1 => Spliiting due to client waiting
7 => Spliiting due to client waiting
1 => callsites count before spliiting 9 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 56 currentId 26
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 61 currentId 41
Added AND Nodes: 55 56
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 56 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 8 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 51
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 4
4 => after replyFromServer: 0
Added AND Nodes: 60 61
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 61 from client 7 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 61 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 8 with id = 66 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 76 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 71 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 81 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 81 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 9 with id = 46 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 91 currentId 46
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
Added AND Nodes: 90 91
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 91 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 86 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 96 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 101 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 15 with id = 100 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 100
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 4 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 101
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 4
4 => after replyFromServer: 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 13 with id = 91 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 116 currentId 91
Added AND Nodes: 115 116
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 116 from client 10 to 8
8 => after replyFromServer: 50
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 10 with id = 106 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 106
Added AND Nodes: 120 121
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 121 from client 7 to 5
5 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 12 with id = 116 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 126 currentId 116
Added AND Nodes: 125 126
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 126 from client 8 to 11
11 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 126 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 131 from client 11 to 9
9 => after replyFromServer: 50
4 => callsites count before spliiting 203 with id = 111 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 136 currentId 111
Added AND Nodes: 135 136
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 201 with id = 110 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 141 currentId 110
Added AND Nodes: 140 141
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 276 with id = 141 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 211 with id = 120 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 120
Added AND Nodes: 150 151
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 213 with id = 146 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 156 currentId 146
Added AND Nodes: 155 156
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => Spliiting due to client waiting
2 => callsites count before spliiting 1 with id = 56 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 161 currentId 56
Added AND Nodes: 160 161
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 161 from client 2 to 3
3 => after replyFromServer: 100
4 => callsites count before spliiting 202 with id = 136 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 166 currentId 136
Added AND Nodes: 165 166
5 => callsites count before spliiting 214 with id = 121 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 171 currentId 121
Added AND Nodes: 170 171
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 225 with id = 156 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 176 currentId 156
Added AND Nodes: 175 176
2 => Spliiting due to client waiting
2 => callsites count before spliiting 8 with id = 160 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 181 currentId 160
Added AND Nodes: 180 181
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 181 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 161 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 186 currentId 161
Added AND Nodes: 185 186
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 186 from client 3 to 1
1 => after replyFromServer: 100
4 => callsites count before spliiting 201 with id = 165 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 165
Added AND Nodes: 190 191
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 200 with id = 151 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 196 currentId 151
Added AND Nodes: 195 196
0 => Spliiting due to client waiting
0 => callsites count before spliiting 3 with id = 181 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 201 currentId 181
Added AND Nodes: 200 201
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 201 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 13 with id = 186 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 206 currentId 186
Added AND Nodes: 205 206
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 206 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 13 with id = 185 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 211 currentId 185
Added AND Nodes: 210 211
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 211 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 220 with id = 171 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 216 currentId 171
Added AND Nodes: 215 216
2 => Spliiting due to client waiting
2 => callsites count before spliiting 2 with id = 201 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 221 currentId 201
Added AND Nodes: 220 221
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 221 from client 2 to 3
3 => after replyFromServer: 100
6 => callsites count before spliiting 215 with id = 176 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 226 currentId 176
Added AND Nodes: 225 226
9 => callsites count before spliiting 226 with id = 131 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 231 currentId 131
Added AND Nodes: 230 231
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => callsites count before spliiting 200 with id = 195 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 236 currentId 195
Added AND Nodes: 235 236
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 209 with id = 125 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 241 currentId 125
Added AND Nodes: 240 241
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 202 with id = 225 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 246 currentId 225
Added AND Nodes: 245 246
0 => callsites count before spliiting 61 with id = 206 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 251 currentId 206
Added AND Nodes: 250 251
4 => callsites count before spliiting 224 with id = 166 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 256 currentId 166
Added AND Nodes: 255 256
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 61 with id = 221 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 261 currentId 221
Added AND Nodes: 260 261
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 64 with id = 220 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 266 currentId 220
Added AND Nodes: 265 266
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 98 with id = 261 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 271 currentId 261
Added AND Nodes: 270 271
2 => callsites count before spliiting 98 with id = 266 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 276 currentId 266
Added AND Nodes: 275 276
8 => callsites count before spliiting 218 with id = 241 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 281 currentId 241
Added AND Nodes: 280 281
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 212 with id = 216 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 286 currentId 216
Added AND Nodes: 285 286
3 => callsites count before spliiting 53 with id = 270 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 291 currentId 270
Added AND Nodes: 290 291
2 => callsites count before spliiting 53 with id = 275 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 296 currentId 275
Added AND Nodes: 295 296
6 => callsites count before spliiting 203 with id = 226 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 301 currentId 226
Added AND Nodes: 300 301
11 => callsites count before spliiting 207 with id = 130 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 306 currentId 130
Added AND Nodes: 305 306
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => callsites count before spliiting 219 with id = 196 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 311 currentId 196
Added AND Nodes: 310 311
9 => callsites count before spliiting 230 with id = 231 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 316 currentId 231
Added AND Nodes: 315 316
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => callsites count before spliiting 230 with id = 115 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 321 currentId 115
Added AND Nodes: 320 321
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 224 with id = 281 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 326 currentId 281
Added AND Nodes: 325 326
3 => callsites count before spliiting 65 with id = 290 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 331 currentId 290
Added AND Nodes: 330 331
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 65 with id = 295 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 336 currentId 295
Added AND Nodes: 335 336
2 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 271 with id = 325 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 341 currentId 325
Added AND Nodes: 340 341
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 50 with id = 250 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 346 currentId 250
Added AND Nodes: 345 346
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 98 with id = 331 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 351 currentId 331
Added AND Nodes: 350 351
2 => callsites count before spliiting 98 with id = 336 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 356 currentId 336
Added AND Nodes: 355 356
3 => callsites count before spliiting 53 with id = 350 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 361 currentId 350
Added AND Nodes: 360 361
2 => callsites count before spliiting 53 with id = 355 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 366 currentId 355
Added AND Nodes: 365 366
1 => callsites count before spliiting 50 with id = 211 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 371 currentId 211
Added AND Nodes: 370 371
1 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 216 with id = 255 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 376 currentId 255
Added AND Nodes: 375 376
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => callsites count before spliiting 233 with id = 321 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 381 currentId 321
Added AND Nodes: 380 381
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => callsites count before spliiting 217 with id = 300 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 386 currentId 300
Added AND Nodes: 385 386
6 => callsites count before spliiting 203 with id = 385 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 391 currentId 385
Added AND Nodes: 390 391
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 230 with id = 316 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 396 currentId 316
Added AND Nodes: 395 396
3 => callsites count before spliiting 65 with id = 360 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 401 currentId 360
Added AND Nodes: 400 401
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 65 with id = 365 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 406 currentId 365
Added AND Nodes: 405 406
2 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 242 with id = 395 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 411 currentId 395
Added AND Nodes: 410 411
10 => callsites count before spliiting 212 with id = 381 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 416 currentId 381
Added AND Nodes: 415 416
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 279 with id = 410 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 421 currentId 410
Added AND Nodes: 420 421
3 => callsites count before spliiting 98 with id = 401 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 426 currentId 401
Added AND Nodes: 425 426
2 => callsites count before spliiting 98 with id = 406 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 431 currentId 406
Added AND Nodes: 430 431
7 => callsites count before spliiting 216 with id = 310 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 436 currentId 310
Added AND Nodes: 435 436
11 => callsites count before spliiting 212 with id = 306 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 441 currentId 306
Added AND Nodes: 440 441
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 53 with id = 425 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 446 currentId 425
Added AND Nodes: 445 446
9 => callsites count before spliiting 328 with id = 420 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 451 currentId 420
Added AND Nodes: 450 451
2 => callsites count before spliiting 53 with id = 430 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 456 currentId 430
Added AND Nodes: 455 456
10 => callsites count before spliiting 234 with id = 416 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 461 currentId 416
Added AND Nodes: 460 461
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 375 with id = 450 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 466 currentId 450
Added AND Nodes: 465 466
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => callsites count before spliiting 219 with id = 461 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 471 currentId 461
Added AND Nodes: 470 471
10 => callsites count before spliiting 300 with id = 470 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 476 currentId 470
Added AND Nodes: 475 476
7 => callsites count before spliiting 201 with id = 435 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 481 currentId 435
Added AND Nodes: 480 481
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 65 with id = 445 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 486 currentId 445
Added AND Nodes: 485 486
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 214 with id = 285 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 491 currentId 285
Added AND Nodes: 490 491
10 => callsites count before spliiting 303 with id = 475 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 496 currentId 475
Added AND Nodes: 495 496
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 65 with id = 455 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 501 currentId 455
Added AND Nodes: 500 501
2 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 98 with id = 486 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 506 currentId 486
Added AND Nodes: 505 506
2 => callsites count before spliiting 98 with id = 501 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 511 currentId 501
Added AND Nodes: 510 511
3 => callsites count before spliiting 53 with id = 505 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 516 currentId 505
Added AND Nodes: 515 516
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 202 with id = 341 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 521 currentId 341
Added AND Nodes: 520 521
2 => callsites count before spliiting 53 with id = 510 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 526 currentId 510
Added AND Nodes: 525 526
8 => callsites count before spliiting 211 with id = 520 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 531 currentId 520
Added AND Nodes: 530 531
5 => callsites count before spliiting 201 with id = 490 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 536 currentId 490
Added AND Nodes: 535 536
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 54 with id = 346 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 541 currentId 346
Added AND Nodes: 540 541
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 254 with id = 530 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 546 currentId 530
Added AND Nodes: 545 546
10 => callsites count before spliiting 226 with id = 496 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 551 currentId 496
Added AND Nodes: 550 551
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 298 with id = 545 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 556 currentId 545
Added AND Nodes: 555 556
3 => callsites count before spliiting 62 with id = 516 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 561 currentId 516
Added AND Nodes: 560 561
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 345 with id = 555 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 566 currentId 555
Added AND Nodes: 565 566
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 54 with id = 371 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 571 currentId 371
Added AND Nodes: 570 571
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 65 with id = 525 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 576 currentId 525
Added AND Nodes: 575 576
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 62 with id = 575 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 581 currentId 575
Added AND Nodes: 580 581
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 98 with id = 561 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 586 currentId 561
Added AND Nodes: 585 586
3 => callsites count before spliiting 53 with id = 585 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 591 currentId 585
Added AND Nodes: 590 591
2 => callsites count before spliiting 51 with id = 581 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 596 currentId 581
Added AND Nodes: 595 596
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 65 with id = 590 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 601 currentId 590
Added AND Nodes: 600 601
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 67 with id = 596 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 606 currentId 596
Added AND Nodes: 605 606
3 => callsites count before spliiting 98 with id = 601 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 611 currentId 601
Added AND Nodes: 610 611
10 => callsites count before spliiting 207 with id = 551 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 616 currentId 551
Added AND Nodes: 615 616
2 => callsites count before spliiting 64 with id = 605 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 621 currentId 605
Added AND Nodes: 620 621
3 => callsites count before spliiting 53 with id = 610 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 626 currentId 610
Added AND Nodes: 625 626
10 => callsites count before spliiting 214 with id = 615 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 631 currentId 615
Added AND Nodes: 630 631
2 => callsites count before spliiting 65 with id = 620 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 636 currentId 620
Added AND Nodes: 635 636
10 => callsites count before spliiting 243 with id = 630 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 641 currentId 630
Added AND Nodes: 640 641
6 => callsites count before spliiting 203 with id = 386 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 646 currentId 386
Added AND Nodes: 645 646
10 => callsites count before spliiting 279 with id = 640 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 651 currentId 640
Added AND Nodes: 650 651
10 => callsites count before spliiting 350 with id = 650 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 656 currentId 650
Added AND Nodes: 655 656
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => callsites count before spliiting 65 with id = 625 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 661 currentId 625
Added AND Nodes: 660 661
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 50 with id = 541 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 666 currentId 541
Added AND Nodes: 665 666
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 203 with id = 521 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 671 currentId 521
Added AND Nodes: 670 671
2 => callsites count before spliiting 82 with id = 635 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 676 currentId 635
Added AND Nodes: 675 676
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 98 with id = 661 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 681 currentId 661
Added AND Nodes: 680 681
8 => callsites count before spliiting 223 with id = 670 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 686 currentId 670
Added AND Nodes: 685 686
3 => callsites count before spliiting 53 with id = 680 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 691 currentId 680
Added AND Nodes: 690 691
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 98 with id = 676 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 696 currentId 676
Added AND Nodes: 695 696
8 => callsites count before spliiting 271 with id = 685 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 701 currentId 685
Added AND Nodes: 700 701
2 => callsites count before spliiting 53 with id = 695 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 706 currentId 695
Added AND Nodes: 705 706
8 => callsites count before spliiting 328 with id = 700 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 711 currentId 700
Added AND Nodes: 710 711
8 => callsites count before spliiting 374 with id = 710 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 716 currentId 710
Added AND Nodes: 715 716
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => callsites count before spliiting 65 with id = 690 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 721 currentId 690
Added AND Nodes: 720 721
3 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 209 with id = 436 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 726 currentId 436
Added AND Nodes: 725 726
2 => callsites count before spliiting 65 with id = 705 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 731 currentId 705
Added AND Nodes: 730 731
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 98 with id = 721 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 736 currentId 721
Added AND Nodes: 735 736
3 => callsites count before spliiting 53 with id = 735 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 741 currentId 735
Added AND Nodes: 740 741
2 => callsites count before spliiting 98 with id = 731 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 746 currentId 731
Added AND Nodes: 745 746
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 53 with id = 745 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 751 currentId 745
Added AND Nodes: 750 751
3 => callsites count before spliiting 65 with id = 740 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 756 currentId 740
Added AND Nodes: 755 756
3 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 203 with id = 725 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 761 currentId 725
Added AND Nodes: 760 761
2 => callsites count before spliiting 65 with id = 750 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 766 currentId 750
Added AND Nodes: 765 766
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 98 with id = 756 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 771 currentId 756
Added AND Nodes: 770 771
3 => callsites count before spliiting 53 with id = 770 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 776 currentId 770
Added AND Nodes: 775 776
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-kernel--rcutorture.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
for clientid : 11 algo id is 2
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
5 => Spliiting due to client waiting
0 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
0 => callsites count before spliiting 5 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 5 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 4 with id = 31 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 51 currentId 31
Added AND Nodes: 50 51
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 51 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 4 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 56 currentId 36
Added AND Nodes: 55 56
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 56 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 46
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 7
7 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 6 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 18 with id = 95 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 95
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 30 with id = 100 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 106 currentId 100
Added AND Nodes: 105 106
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 106 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 96
Added AND Nodes: 110 111
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 111 from client 4 to 7
7 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 78 with id = 110 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 110
Added AND Nodes: 115 116
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 116 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 116 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 121 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 121 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 126 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 126 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 131 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 131 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 136 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 136 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 141 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 141 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 146 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 146 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 151 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 151 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 156 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 156 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 161 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 161 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 166 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 166 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 171 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 171 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 176 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 176 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 181 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 181 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 186 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 186 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 191 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 191 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 196 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 196 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 201 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 201 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 206 currentId 201
Added AND Nodes: 205 206
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 206 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 206 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 211 currentId 206
Added AND Nodes: 210 211
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 211 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 211 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 216 currentId 211
Added AND Nodes: 215 216
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 216 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 216 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 221 currentId 216
Added AND Nodes: 220 221
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 221 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 221 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 226 currentId 221
Added AND Nodes: 225 226
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 226 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 226 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 231 currentId 226
Added AND Nodes: 230 231
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 231 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 231 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 236 currentId 231
Added AND Nodes: 235 236
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 236 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 236 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 241 currentId 236
Added AND Nodes: 240 241
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 241 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 241 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 246 currentId 241
Added AND Nodes: 245 246
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 246 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 246 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 251 currentId 246
Added AND Nodes: 250 251
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 251 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 251 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 256 currentId 251
Added AND Nodes: 255 256
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 256 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 256 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 261 currentId 256
Added AND Nodes: 260 261
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 261 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 261 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 266 currentId 261
Added AND Nodes: 265 266
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 266 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 266 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 271 currentId 266
Added AND Nodes: 270 271
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 271 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 271 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 276 currentId 271
Added AND Nodes: 275 276
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 276 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 276 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 281 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 281 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 286 currentId 281
Added AND Nodes: 285 286
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 286 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 286 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 291 currentId 286
Added AND Nodes: 290 291
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 291 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 291 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 296 currentId 291
Added AND Nodes: 295 296
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 296 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 296 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 301 currentId 296
Added AND Nodes: 300 301
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 301 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 301 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 306 currentId 301
Added AND Nodes: 305 306
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 306 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 306 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 311 currentId 306
Added AND Nodes: 310 311
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 311 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 311 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 316 currentId 311
Added AND Nodes: 315 316
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 316 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 316 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 321 currentId 316
Added AND Nodes: 320 321
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 321 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 3 with id = 321 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 326 currentId 321
Added AND Nodes: 325 326
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 326 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 326 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 331 currentId 326
Added AND Nodes: 330 331
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 331 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 331 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 336 currentId 331
Added AND Nodes: 335 336
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 336 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 2 with id = 51 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 341 currentId 51
Added AND Nodes: 340 341
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 341 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 56 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 346 currentId 56
Added AND Nodes: 345 346
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 346 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 346 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 351 currentId 346
Added AND Nodes: 350 351
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 351 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 74 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 356 currentId 101
Added AND Nodes: 355 356
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 356 from client 5 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 77 with id = 355 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 361 currentId 355
Added AND Nodes: 360 361
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 361 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 24 with id = 361 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 366 currentId 361
Added AND Nodes: 365 366
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 366 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 132 with id = 356 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 371 currentId 356
Added AND Nodes: 370 371
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 371 from client 4 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 163 with id = 370 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 376 currentId 370
Added AND Nodes: 375 376
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 376 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 371 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 371
Added AND Nodes: 380 381
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 381 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 193 with id = 106 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 386 currentId 106
Added AND Nodes: 385 386
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 386 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 376 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 391 currentId 376
Added AND Nodes: 390 391
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 391 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 386 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 396 currentId 386
Added AND Nodes: 395 396
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 396 from client 7 to 6
6 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 12 with id = 395 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 401 currentId 395
Added AND Nodes: 400 401
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 401 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 396 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 406 currentId 396
Added AND Nodes: 405 406
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 406 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 401 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 411 currentId 401
Added AND Nodes: 410 411
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 411 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 406 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 416 currentId 406
Added AND Nodes: 415 416
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 416 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 411 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 421 currentId 411
Added AND Nodes: 420 421
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 421 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 416 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 426 currentId 416
Added AND Nodes: 425 426
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 426 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 421 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 431 currentId 421
Added AND Nodes: 430 431
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 431 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 426 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 436 currentId 426
Added AND Nodes: 435 436
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 436 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 431 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 441 currentId 431
Added AND Nodes: 440 441
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 441 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 436 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 446 currentId 436
Added AND Nodes: 445 446
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 446 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 441 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 451 currentId 441
Added AND Nodes: 450 451
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 451 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 446 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 456 currentId 446
Added AND Nodes: 455 456
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 456 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 451 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 461 currentId 451
Added AND Nodes: 460 461
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 461 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 456 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 466 currentId 456
Added AND Nodes: 465 466
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 466 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 461 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 471 currentId 461
Added AND Nodes: 470 471
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 471 from client 5 to 4
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 466 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 476 currentId 466
Added AND Nodes: 475 476
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 476 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 471 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 481 currentId 471
Added AND Nodes: 480 481
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 481 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 476 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 486 currentId 476
Added AND Nodes: 485 486
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 486 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 481 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 491 currentId 481
Added AND Nodes: 490 491
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 491 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 486 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 496 currentId 486
Added AND Nodes: 495 496
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 496 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 491 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 501 currentId 491
Added AND Nodes: 500 501
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 501 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 496 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 506 currentId 496
Added AND Nodes: 505 506
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 506 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 506 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 511 currentId 506
Added AND Nodes: 510 511
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 511 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => callsites count before spliiting 1 with id = 501 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 516 currentId 501
Added AND Nodes: 515 516
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 516 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 511 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 521 currentId 511
Added AND Nodes: 520 521
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 521 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 516 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 526 currentId 516
Added AND Nodes: 525 526
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 526 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 521 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 531 currentId 521
Added AND Nodes: 530 531
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 531 from client 7 to 4
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 531 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 536 currentId 531
Added AND Nodes: 535 536
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 536 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 526 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 541 currentId 526
Added AND Nodes: 540 541
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 541 from client 5 to 7
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
7 => after replyFromServer: 0
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 541 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 546 currentId 541
Added AND Nodes: 545 546
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 546 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 536 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 551 currentId 536
Added AND Nodes: 550 551
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 551 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 546 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 556 currentId 546
Added AND Nodes: 555 556
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 556 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 551 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 561 currentId 551
Added AND Nodes: 560 561
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 561 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 556 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 566 currentId 556
Added AND Nodes: 565 566
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 566 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 566 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 571 currentId 566
Added AND Nodes: 570 571
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 571 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 561 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 576 currentId 561
Added AND Nodes: 575 576
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 576 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 576 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 581 currentId 576
Added AND Nodes: 580 581
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 581 from client 7 to 4
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 571 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 586 currentId 571
Added AND Nodes: 585 586
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 586 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 581 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 591 currentId 581
Added AND Nodes: 590 591
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 591 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 586 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 596 currentId 586
Added AND Nodes: 595 596
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 596 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 591 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 601 currentId 591
Added AND Nodes: 600 601
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 601 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 601 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 606 currentId 601
Added AND Nodes: 605 606
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 606 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 596 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 611 currentId 596
Added AND Nodes: 610 611
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 611 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 606 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 616 currentId 606
Added AND Nodes: 615 616
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 616 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 611 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 621 currentId 611
Added AND Nodes: 620 621
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 621 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 616 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 626 currentId 616
Added AND Nodes: 625 626
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 626 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 621 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 631 currentId 621
Added AND Nodes: 630 631
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 631 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 626 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 636 currentId 626
Added AND Nodes: 635 636
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 636 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 631 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 641 currentId 631
Added AND Nodes: 640 641
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 641 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 636 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 646 currentId 636
Added AND Nodes: 645 646
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 646 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 641 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 651 currentId 641
Added AND Nodes: 650 651
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 651 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 646 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 656 currentId 646
Added AND Nodes: 655 656
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 656 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 656 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 661 currentId 656
Added AND Nodes: 660 661
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 661 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 651 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 666 currentId 651
Added AND Nodes: 665 666
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 666 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 666 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 671 currentId 666
Added AND Nodes: 670 671
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 671 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 661 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 676 currentId 661
Added AND Nodes: 675 676
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 676 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 671 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 681 currentId 671
Added AND Nodes: 680 681
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 681 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 676 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 686 currentId 676
Added AND Nodes: 685 686
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 686 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 681 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 691 currentId 681
Added AND Nodes: 690 691
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 691 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 686 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 696 currentId 686
Added AND Nodes: 695 696
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 696 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 691 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 701 currentId 691
Added AND Nodes: 700 701
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 701 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 696 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 706 currentId 696
Added AND Nodes: 705 706
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 706 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 701 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 711 currentId 701
Added AND Nodes: 710 711
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 711 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 711 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 716 currentId 711
Added AND Nodes: 715 716
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 716 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 706 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 721 currentId 706
Added AND Nodes: 720 721
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 721 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 5 with id = 716 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 726 currentId 716
Added AND Nodes: 725 726
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 726 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 21 with id = 725 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 731 currentId 725
Added AND Nodes: 730 731
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 731 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 721 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 736 currentId 721
Added AND Nodes: 735 736
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 736 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 736 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 741 currentId 736
Added AND Nodes: 740 741
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 741 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 741 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 746 currentId 741
Added AND Nodes: 745 746
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 746 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 7 with id = 731 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 751 currentId 731
Added AND Nodes: 750 751
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 751 from client 5 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 3 with id = 751 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 756 currentId 751
Added AND Nodes: 755 756
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 756 from client 6 to 7
7 => after replyFromServer: 0
5 => callsites count before spliiting 53 with id = 750 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 761 currentId 750
Added AND Nodes: 760 761
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 761 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 37 with id = 756 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 766 currentId 756
Added AND Nodes: 765 766
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 766 from client 7 to 5
5 => after replyFromServer: 0
6 => callsites count before spliiting 201 with id = 761 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 771 currentId 761
Added AND Nodes: 770 771
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 4 with id = 766 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 776 currentId 766
Added AND Nodes: 775 776
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 776 from client 5 to 7
7 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 7 with id = 775 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 781 currentId 775
Added AND Nodes: 780 781
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 781 from client 5 to 6
6 => after replyFromServer: 0
7 => callsites count before spliiting 205 with id = 776 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 786 currentId 776
Added AND Nodes: 785 786
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 205 with id = 780 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 791 currentId 780
Added AND Nodes: 790 791
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 791 from client 5 to 7
7 => after replyFromServer: 0
6 => callsites count before spliiting 200 with id = 781 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 796 currentId 781
Added AND Nodes: 795 796
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 796 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 6 with id = 791 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 801 currentId 791
Added AND Nodes: 800 801
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 801 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 6 with id = 801 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 806 currentId 801
Added AND Nodes: 805 806
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 806 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 37 with id = 796 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 811 currentId 796
Added AND Nodes: 810 811
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 811 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 6 with id = 806 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 816 currentId 806
Added AND Nodes: 815 816
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 816 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 15 with id = 811 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 821 currentId 811
Added AND Nodes: 820 821
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 821 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 8 with id = 821 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 826 currentId 821
Added AND Nodes: 825 826
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 826 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 27 with id = 816 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 831 currentId 816
Added AND Nodes: 830 831
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 831 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 10 with id = 826 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 836 currentId 826
Added AND Nodes: 835 836
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 836 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 10 with id = 831 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 841 currentId 831
Added AND Nodes: 840 841
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 841 from client 7 to 6
6 => after replyFromServer: 0
7 => callsites count before spliiting 237 with id = 840 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 846 currentId 840
Added AND Nodes: 845 846
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 11 with id = 841 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 851 currentId 841
Added AND Nodes: 850 851
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 851 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 9 with id = 836 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 856 currentId 836
Added AND Nodes: 855 856
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 856 from client 5 to 6
6 => after replyFromServer: 0
5 => callsites count before spliiting 231 with id = 855 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 861 currentId 855
Added AND Nodes: 860 861
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => callsites count before spliiting 149 with id = 341 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 866 currentId 341
Added AND Nodes: 865 866
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 866 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 148 with id = 351 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 871 currentId 351
Added AND Nodes: 870 871
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 871 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--cciss.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
for clientid : 10 algo id is 2
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 36 currentId 31
Added AND Nodes: 35 36
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 36 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 26
for clientid : 11 algo id is 2
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 41 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 46 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 6 with id = 36 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 51 currentId 36
Added AND Nodes: 50 51
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 51 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 14 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 61 currentId 6
Added AND Nodes: 60 61
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 61 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 56 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 9 with id = 71 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 76 from client 4 to 7
7 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 22 with id = 75 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 75
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 38 with id = 80 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 86 currentId 80
Added AND Nodes: 85 86
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 86 from client 4 to 6
6 => after replyFromServer: 0
Prover error: line 50530 column 10: model is not available
Corral encountered a prover error. Giving up.
Prover error: line 64542 column 10: model is not available
Corral encountered a prover error. Giving up.
6 => callsites count before spliiting 206 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
Prover error: line 274454 column 10: model is not available
Corral encountered a prover error. Giving up.
4 => callsites count before spliiting 234 with id = 85 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 96 currentId 85
Added AND Nodes: 95 96
4 => callsites count before spliiting 220 with id = 95 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 95
Added AND Nodes: 100 101
5 => callsites count before spliiting 212 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 81
Added AND Nodes: 105 106
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--paride--pf.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 1 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 21 currentId 6
Added AND Nodes: 20 21
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 21 from client 0 to 1
1 => after replyFromServer: 100
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 26 currentId 11
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
Added AND Nodes: 25 26
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 26 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 11 algo id is 2
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 26 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 26
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 8 with id = 21 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 41 currentId 21
Added AND Nodes: 40 41
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 41 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 31
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 36
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 6 with id = 60 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 60
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 86 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 91 currentId 81
Added AND Nodes: 90 91
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 91 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 21 with id = 95 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 101 currentId 95
Added AND Nodes: 100 101
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 101 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 106 currentId 96
Added AND Nodes: 105 106
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 106 from client 4 to 6
6 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 30 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 111 currentId 91
Added AND Nodes: 110 111
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 111 from client 7 to 6
6 => after replyFromServer: 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 6 with id = 41 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 116 currentId 41
Added AND Nodes: 115 116
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 116 from client 2 to 3
3 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 6 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 121 currentId 51
Added AND Nodes: 120 121
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 121 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => callsites count before spliiting 202 with id = 110 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 126 currentId 110
Added AND Nodes: 125 126
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => Spliiting due to client waiting
2 => callsites count before spliiting 13 with id = 115 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 131 currentId 115
Added AND Nodes: 130 131
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 131 from client 2 to 0
0 => after replyFromServer: 100
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 116 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 136 currentId 116
Added AND Nodes: 135 136
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 136 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 6 with id = 121 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 141 currentId 121
Added AND Nodes: 140 141
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 141 from client 11 to 8
8 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 3 with id = 141 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 146 from client 8 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => callsites count before spliiting 219 with id = 105 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 151 currentId 105
Added AND Nodes: 150 151
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => Spliiting due to client waiting
2 => callsites count before spliiting 17 with id = 130 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 156 currentId 130
Added AND Nodes: 155 156
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 156 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 5 with id = 131 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 161 currentId 131
Added AND Nodes: 160 161
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 161 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 16 with id = 136 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 166 currentId 136
Added AND Nodes: 165 166
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 166 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 21 with id = 145 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 171 currentId 145
Added AND Nodes: 170 171
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 171 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
11 => Spliiting due to client waiting
for clientid : 8 algo id is 2
11 => callsites count before spliiting 13 with id = 140 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 176 currentId 140
Added AND Nodes: 175 176
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 176 from client 11 to 9
9 => after replyFromServer: 50
11 => Spliiting due to client waiting
5 => callsites count before spliiting 203 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 181 currentId 101
Added AND Nodes: 180 181
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => Spliiting due to client waiting
3 => callsites count before spliiting 8 with id = 156 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 186 currentId 156
Added AND Nodes: 185 186
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 186 from client 3 to 1
1 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 17 with id = 175 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 191 currentId 175
Added AND Nodes: 190 191
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 191 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 176 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 196 currentId 176
Added AND Nodes: 195 196
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 196 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 4 with id = 191 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 201 currentId 191
Added AND Nodes: 200 201
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 201 from client 8 to 9
9 => after replyFromServer: 50
6 => callsites count before spliiting 222 with id = 111 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 206 currentId 111
Added AND Nodes: 205 206
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 143 with id = 185 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 211 currentId 185
Added AND Nodes: 210 211
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 126 with id = 186 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 216 currentId 186
Added AND Nodes: 215 216
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 53 with id = 161 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 221 currentId 161
Added AND Nodes: 220 221
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 67 with id = 211 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 226 currentId 211
Added AND Nodes: 225 226
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 202 with id = 200 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 231 currentId 200
Added AND Nodes: 230 231
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 53 with id = 216 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 236 currentId 216
Added AND Nodes: 235 236
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 51 with id = 221 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 241 currentId 221
Added AND Nodes: 240 241
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 104 with id = 226 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 246 currentId 226
Added AND Nodes: 245 246
3 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 214 with id = 201 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 251 currentId 201
Added AND Nodes: 250 251
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 51 with id = 236 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 256 currentId 236
Added AND Nodes: 255 256
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 51 with id = 241 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 261 currentId 241
Added AND Nodes: 260 261
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 60 with id = 246 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 266 currentId 246
Added AND Nodes: 265 266
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 51 with id = 256 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 271 currentId 256
Added AND Nodes: 270 271
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 51 with id = 261 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 276 currentId 261
Added AND Nodes: 275 276
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 61 with id = 266 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 281 currentId 266
Added AND Nodes: 280 281
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 51 with id = 271 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 286 currentId 271
Added AND Nodes: 285 286
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 51 with id = 276 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 291 currentId 276
Added AND Nodes: 290 291
7 => callsites count before spliiting 239 with id = 126 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 296 currentId 126
Added AND Nodes: 295 296
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 105 with id = 290 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 301 currentId 290
Added AND Nodes: 300 301
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 59 with id = 281 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 306 currentId 281
Added AND Nodes: 305 306
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 51 with id = 286 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 311 currentId 286
Added AND Nodes: 310 311
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 51 with id = 291 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 316 currentId 291
Added AND Nodes: 315 316
0 => callsites count before spliiting 56 with id = 166 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 321 currentId 166
Added AND Nodes: 320 321
0 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 219 with id = 151 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 326 currentId 151
Added AND Nodes: 325 326
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => callsites count before spliiting 51 with id = 311 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 331 currentId 311
Added AND Nodes: 330 331
1 => callsites count before spliiting 105 with id = 330 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 336 currentId 330
Added AND Nodes: 335 336
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 61 with id = 306 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 341 currentId 306
Added AND Nodes: 340 341
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 52 with id = 315 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 346 currentId 315
Added AND Nodes: 345 346
2 => callsites count before spliiting 106 with id = 345 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 351 currentId 345
Added AND Nodes: 350 351
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 105 with id = 351 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 356 currentId 351
Added AND Nodes: 355 356
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 234 with id = 206 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 361 currentId 206
Added AND Nodes: 360 361
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 51 with id = 331 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 366 currentId 331
Added AND Nodes: 365 366
9 => callsites count before spliiting 205 with id = 251 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 371 currentId 251
Added AND Nodes: 370 371
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => callsites count before spliiting 227 with id = 171 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 376 currentId 171
Added AND Nodes: 375 376
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => callsites count before spliiting 231 with id = 196 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 381 currentId 196
Added AND Nodes: 380 381
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
5 => callsites count before spliiting 226 with id = 181 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 386 currentId 181
Added AND Nodes: 385 386
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 51 with id = 346 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 391 currentId 346
Added AND Nodes: 390 391
2 => callsites count before spliiting 105 with id = 390 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 396 currentId 390
Added AND Nodes: 395 396
2 => callsites count before spliiting 160 with id = 395 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 401 currentId 395
Added AND Nodes: 400 401
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 115 with id = 401 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 406 currentId 401
Added AND Nodes: 405 406
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 105 with id = 396 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 411 currentId 396
Added AND Nodes: 410 411
2 => callsites count before spliiting 162 with id = 410 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 416 currentId 410
Added AND Nodes: 415 416
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 117 with id = 411 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 421 currentId 411
Added AND Nodes: 420 421
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 59 with id = 341 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 426 currentId 341
Added AND Nodes: 425 426
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 236 with id = 231 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 431 currentId 231
Added AND Nodes: 430 431
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--paride--pg.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 4 algo id is 1
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
for clientid : 7 algo id is 1
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 3 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
for clientid : 10 algo id is 2
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
for clientid : 11 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 8 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 41 currentId 26
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 31
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 7
7 => after replyFromServer: 0
Added AND Nodes: 40 41
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 41 from client 1 to 2
2 => after replyFromServer: 100
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
1 => LOOP outcome: Correct & reachbound = False
for clientid : 6 algo id is 1
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 6 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 36
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 6 with id = 60 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 60
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 86 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 3 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 91 currentId 81
Added AND Nodes: 90 91
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 91 from client 5 to 7
7 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 106 currentId 96
Added AND Nodes: 105 106
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 106 from client 4 to 7
7 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 19 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 111 currentId 101
Added AND Nodes: 110 111
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 111 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 34 with id = 105 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 105
Added AND Nodes: 115 116
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 116 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 5 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 111
Added AND Nodes: 120 121
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 121 from client 7 to 4
4 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => callsites count before spliiting 40 with id = 120 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 126 currentId 120
Added AND Nodes: 125 126
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 126 from client 7 to 4
4 => after replyFromServer: 0
5 => callsites count before spliiting 42 with id = 116 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 131 currentId 116
Added AND Nodes: 130 131
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 131 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 11 with id = 126 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 136 currentId 126
Added AND Nodes: 135 136
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 136 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 35 with id = 131 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 141 currentId 131
Added AND Nodes: 140 141
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 141 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 13 with id = 141 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 146 from client 4 to 7
7 => after replyFromServer: 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 6 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 151 currentId 51
Added AND Nodes: 150 151
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 151 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 6 with id = 41 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 156 currentId 41
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 151 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 161 currentId 151
Added AND Nodes: 160 161
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 161 from client 8 to 11
11 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
Added AND Nodes: 155 156
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 156 from client 2 to 3
3 => after replyFromServer: 100
8 => Spliiting due to client waiting
2 => Spliiting due to client waiting
2 => callsites count before spliiting 11 with id = 155 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 166 currentId 155
Added AND Nodes: 165 166
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 166 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 5 with id = 161 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 171 currentId 161
Added AND Nodes: 170 171
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 171 from client 11 to 9
9 => after replyFromServer: 50
11 => Spliiting due to client waiting
3 => Spliiting due to client waiting
3 => callsites count before spliiting 7 with id = 156 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 176 currentId 156
Added AND Nodes: 175 176
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 176 from client 3 to 1
1 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 9 with id = 160 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 181 currentId 160
Added AND Nodes: 180 181
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 181 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 181 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 186 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => callsites count before spliiting 200 with id = 95 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 191 currentId 95
Added AND Nodes: 190 191
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 10 with id = 166 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 196 currentId 166
Added AND Nodes: 195 196
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 196 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 171 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 201 currentId 171
Added AND Nodes: 200 201
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 201 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 19 with id = 175 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 206 currentId 175
Added AND Nodes: 205 206
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 206 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 20 with id = 170 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 211 currentId 170
Added AND Nodes: 210 211
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 211 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 3 with id = 186 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 216 currentId 186
Added AND Nodes: 215 216
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 216 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
1 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => callsites count before spliiting 5 with id = 216 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 221 currentId 216
Added AND Nodes: 220 221
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 221 from client 11 to 8
8 => after replyFromServer: 50
1 => callsites count before spliiting 13 with id = 176 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 226 currentId 176
Added AND Nodes: 225 226
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 226 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 6 with id = 211 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 231 currentId 211
Added AND Nodes: 230 231
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 231 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 231 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 236 currentId 231
Added AND Nodes: 235 236
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 236 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 3 with id = 236 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 241 currentId 236
Added AND Nodes: 240 241
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 241 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 10 with id = 241 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 246 currentId 241
Added AND Nodes: 245 246
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 246 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 15 with id = 206 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 251 currentId 206
Added AND Nodes: 250 251
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 251 from client 0 to 1
1 => after replyFromServer: 100
10 => Spliiting due to client waiting
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 13 with id = 201 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 256 currentId 201
0 => outcome: Correct
Added AND Nodes: 255 256
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 256 from client 10 to 8
8 => after replyFromServer: 50
for clientid : 0 algo id is 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => Spliiting due to client waiting
3 => Spliiting due to client waiting
3 => callsites count before spliiting 10 with id = 226 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 261 currentId 226
Added AND Nodes: 260 261
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 261 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 10 with id = 220 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 266 currentId 220
Added AND Nodes: 265 266
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 266 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 7 with id = 266 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 271 currentId 266
Added AND Nodes: 270 271
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 271 from client 10 to 11
11 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 6 with id = 261 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 276 currentId 261
Added AND Nodes: 275 276
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 276 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 3 with id = 276 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 281 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 29 with id = 196 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 286 currentId 196
Added AND Nodes: 285 286
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 286 from client 2 to 3
3 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 41 with id = 285 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 291 currentId 285
Added AND Nodes: 290 291
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 291 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 84 with id = 271 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 296 currentId 271
Added AND Nodes: 295 296
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 296 from client 11 to 10
10 => after replyFromServer: 50
1 => Spliiting due to client waiting
1 => callsites count before spliiting 46 with id = 251 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 301 currentId 251
Added AND Nodes: 300 301
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 301 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 13 with id = 291 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 306 currentId 291
Added AND Nodes: 305 306
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 306 from client 3 to 1
1 => after replyFromServer: 100
5 => callsites count before spliiting 202 with id = 136 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 311 currentId 136
Added AND Nodes: 310 311
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 12 with id = 281 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 316 currentId 281
Added AND Nodes: 315 316
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 316 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 23 with id = 301 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 321 currentId 301
Added AND Nodes: 320 321
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 321 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 17 with id = 306 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 326 currentId 306
Added AND Nodes: 325 326
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 326 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 3 with id = 326 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 331 currentId 326
Added AND Nodes: 330 331
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 331 from client 2 to 1
1 => after replyFromServer: 100
2 => callsites count before spliiting 57 with id = 330 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 336 currentId 330
Added AND Nodes: 335 336
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 50 with id = 321 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 341 currentId 321
Added AND Nodes: 340 341
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 54 with id = 336 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 346 currentId 336
Added AND Nodes: 345 346
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 217 with id = 146 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 351 currentId 146
Added AND Nodes: 350 351
9 => callsites count before spliiting 211 with id = 246 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 356 currentId 246
Added AND Nodes: 355 356
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
0 => callsites count before spliiting 56 with id = 341 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 361 currentId 341
Added AND Nodes: 360 361
0 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 203 with id = 145 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 366 currentId 145
Added AND Nodes: 365 366
0 => callsites count before spliiting 66 with id = 361 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 371 currentId 361
Added AND Nodes: 370 371
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 346 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 376 currentId 346
Added AND Nodes: 375 376
2 => LOOP outcome: Correct & reachbound = False
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 311 from client 5 to 4
4 => after replyFromServer: 0
5 => callsites count before spliiting 201 with id = 310 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 381 currentId 310
Added AND Nodes: 380 381
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 351 from client 7 to 5
5 => after replyFromServer: 0
7 => callsites count before spliiting 201 with id = 350 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 386 currentId 350
Added AND Nodes: 385 386
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 203 with id = 386 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 391 currentId 386
Added AND Nodes: 390 391
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 47 with id = 351 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 396 currentId 351
Added AND Nodes: 395 396
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 396 from client 5 to 7
7 => after replyFromServer: 0
2 => callsites count before spliiting 54 with id = 376 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 401 currentId 376
Added AND Nodes: 400 401
0 => callsites count before spliiting 50 with id = 371 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 406 currentId 371
Added AND Nodes: 405 406
0 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 209 with id = 395 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 411 currentId 395
Added AND Nodes: 410 411
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 201 with id = 410 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 416 currentId 410
Added AND Nodes: 415 416
5 => callsites count before spliiting 201 with id = 415 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 421 currentId 415
Added AND Nodes: 420 421
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 5155 with id = 295 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 426 currentId 295
Added AND Nodes: 425 426
6 => callsites count before spliiting 218 with id = 191 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 431 currentId 191
Added AND Nodes: 430 431
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
1 => callsites count before spliiting 5033 with id = 331 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 436 currentId 331
Added AND Nodes: 435 436
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 50 with id = 316 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 441 currentId 316
Added AND Nodes: 440 441
3 => LOOP outcome: Correct & reachbound = True
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => Spliiting due to client waiting
10 => callsites count before spliiting 192 with id = 296 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 446 currentId 296
Added AND Nodes: 445 446
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 446 from client 10 to 11
11 => after replyFromServer: 50
10 => callsites count before spliiting 202 with id = 445 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 451 currentId 445
Added AND Nodes: 450 451
5 => callsites count before spliiting 200 with id = 411 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 456 currentId 411
Added AND Nodes: 455 456
0 => callsites count before spliiting 56 with id = 406 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 461 currentId 406
Added AND Nodes: 460 461
0 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 202 with id = 455 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 466 currentId 455
Added AND Nodes: 465 466
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => callsites count before spliiting 73 with id = 436 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 471 currentId 436
Added AND Nodes: 470 471
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 5234 with id = 450 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 476 currentId 450
Added AND Nodes: 475 476
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--hwmon--w83781d.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
for clientid : 1 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 7 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 36 currentId 6
Added AND Nodes: 35 36
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 36 from client 0 to 2
2 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 7 with id = 36 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 46 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 46 from client 2 to 1
1 => after replyFromServer: 100
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 31
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
10 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 41
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 3 with id = 46 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 76 currentId 46
Added AND Nodes: 75 76
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 76 from client 1 to 3
3 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 3 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 81 currentId 51
Added AND Nodes: 80 81
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 81 from client 10 to 11
11 => after replyFromServer: 50
10 => Spliiting due to client waiting
10 => callsites count before spliiting 75 with id = 80 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 86 currentId 80
Added AND Nodes: 85 86
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 86 from client 10 to 8
8 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 89 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 91 currentId 71
Added AND Nodes: 90 91
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 91 from client 7 to 4
4 => after replyFromServer: 0
7 => callsites count before spliiting 235 with id = 90 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 90
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 123 with id = 95 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 95
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 6
6 => after replyFromServer: 0
7 => callsites count before spliiting 266 with id = 100 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 106 currentId 100
Added AND Nodes: 105 106
7 => callsites count before spliiting 352 with id = 105 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 111 currentId 105
Added AND Nodes: 110 111
8 => Spliiting due to client waiting
8 => callsites count before spliiting 144 with id = 86 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 116 currentId 86
Added AND Nodes: 115 116
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 116 from client 8 to 9
9 => after replyFromServer: 50
4 => callsites count before spliiting 237 with id = 91 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 91
Added AND Nodes: 120 121
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 90 with id = 81 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 126 currentId 81
Added AND Nodes: 125 126
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 126 from client 11 to 8
8 => after replyFromServer: 50
11 => callsites count before spliiting 236 with id = 125 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 131 currentId 125
Added AND Nodes: 130 131
7 => callsites count before spliiting 668 with id = 110 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 136 currentId 110
Added AND Nodes: 135 136
5 => callsites count before spliiting 234 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 141 currentId 96
Added AND Nodes: 140 141
1 => Spliiting due to client waiting
1 => callsites count before spliiting 8 with id = 75 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 146 currentId 75
Added AND Nodes: 145 146
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 146 from client 1 to 0
0 => after replyFromServer: 100
4 => callsites count before spliiting 252 with id = 120 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 151 currentId 120
Added AND Nodes: 150 151
6 => callsites count before spliiting 213 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 156 currentId 101
Added AND Nodes: 155 156
5 => callsites count before spliiting 310 with id = 140 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 161 currentId 140
Added AND Nodes: 160 161
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 613 with id = 135 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 166 currentId 135
Added AND Nodes: 165 166
6 => callsites count before spliiting 421 with id = 155 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 171 currentId 155
Added AND Nodes: 170 171
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
4 => callsites count before spliiting 217 with id = 121 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 121
Added AND Nodes: 175 176
7 => callsites count before spliiting 869 with id = 165 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 181 currentId 165
Added AND Nodes: 180 181
4 => callsites count before spliiting 367 with id = 175 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 186 currentId 175
Added AND Nodes: 185 186
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 131 from client 11 to 8
8 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 76 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 191 currentId 76
Added AND Nodes: 190 191
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 191 from client 3 to 2
2 => after replyFromServer: 100
4 => callsites count before spliiting 339 with id = 185 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 196 currentId 185
Added AND Nodes: 195 196
6 => callsites count before spliiting 414 with id = 170 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 201 currentId 170
Added AND Nodes: 200 201
11 => callsites count before spliiting 242 with id = 130 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 206 currentId 130
Added AND Nodes: 205 206
7 => callsites count before spliiting 1119 with id = 180 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 211 currentId 180
Added AND Nodes: 210 211
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
6 => callsites count before spliiting 367 with id = 200 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 216 currentId 200
Added AND Nodes: 215 216
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 233 with id = 195 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 221 currentId 195
Added AND Nodes: 220 221
11 => callsites count before spliiting 334 with id = 205 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 226 currentId 205
Added AND Nodes: 225 226
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => callsites count before spliiting 244 with id = 216 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 231 currentId 216
Added AND Nodes: 230 231
10 => callsites count before spliiting 227 with id = 85 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 236 currentId 85
Added AND Nodes: 235 236
4 => callsites count before spliiting 429 with id = 220 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 241 currentId 220
Added AND Nodes: 240 241
5 => callsites count before spliiting 252 with id = 160 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 246 currentId 160
Added AND Nodes: 245 246
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 309 with id = 245 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 251 currentId 245
Added AND Nodes: 250 251
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 353 with id = 250 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 256 currentId 250
Added AND Nodes: 255 256
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 4 with id = 146 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 261 currentId 146
Added AND Nodes: 260 261
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 261 from client 0 to 1
1 => after replyFromServer: 100
10 => callsites count before spliiting 319 with id = 235 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 266 currentId 235
Added AND Nodes: 265 266
2 => Spliiting due to client waiting
2 => callsites count before spliiting 6 with id = 191 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 271 currentId 191
Added AND Nodes: 270 271
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 271 from client 2 to 3
3 => after replyFromServer: 100
10 => callsites count before spliiting 323 with id = 265 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 276 currentId 265
Added AND Nodes: 275 276
10 => callsites count before spliiting 327 with id = 275 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 281 currentId 275
Added AND Nodes: 280 281
5 => callsites count before spliiting 242 with id = 256 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 286 currentId 256
Added AND Nodes: 285 286
8 => callsites count before spliiting 251 with id = 131 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 291 currentId 131
Added AND Nodes: 290 291
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 242 with id = 231 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 296 currentId 231
Added AND Nodes: 295 296
4 => callsites count before spliiting 243 with id = 241 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 301 currentId 241
Added AND Nodes: 300 301
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => callsites count before spliiting 332 with id = 280 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 306 currentId 280
Added AND Nodes: 305 306
10 => callsites count before spliiting 471 with id = 305 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 311 currentId 305
Added AND Nodes: 310 311
10 => callsites count before spliiting 612 with id = 310 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 316 currentId 310
Added AND Nodes: 315 316
10 => callsites count before spliiting 888 with id = 315 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 321 currentId 315
Added AND Nodes: 320 321
7 => callsites count before spliiting 1456 with id = 210 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 326 currentId 210
Added AND Nodes: 325 326
10 => callsites count before spliiting 891 with id = 320 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 331 currentId 320
Added AND Nodes: 330 331
10 => callsites count before spliiting 1434 with id = 330 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 336 currentId 330
Added AND Nodes: 335 336
7 => callsites count before spliiting 1259 with id = 325 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 341 currentId 325
Added AND Nodes: 340 341
7 => callsites count before spliiting 1074 with id = 340 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 346 currentId 340
Added AND Nodes: 345 346
7 => callsites count before spliiting 882 with id = 345 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 351 currentId 345
Added AND Nodes: 350 351
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => callsites count before spliiting 1439 with id = 335 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 356 currentId 335
Added AND Nodes: 355 356
10 => callsites count before spliiting 1640 with id = 355 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 361 currentId 355
Added AND Nodes: 360 361
10 => callsites count before spliiting 1644 with id = 360 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 366 currentId 360
Added AND Nodes: 365 366
10 => callsites count before spliiting 1915 with id = 365 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 371 currentId 365
Added AND Nodes: 370 371
11 => callsites count before spliiting 200 with id = 226 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 376 currentId 226
Added AND Nodes: 375 376
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 50 with id = 261 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 381 currentId 261
Added AND Nodes: 380 381
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 2195 with id = 370 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 386 currentId 370
Added AND Nodes: 385 386
0 => callsites count before spliiting 51 with id = 260 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 391 currentId 260
Added AND Nodes: 390 391
9 => callsites count before spliiting 461 with id = 116 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 396 currentId 116
Added AND Nodes: 395 396
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 50 with id = 271 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 401 currentId 271
Added AND Nodes: 400 401
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 54 with id = 381 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 406 currentId 381
Added AND Nodes: 405 406
1 => LOOP outcome: Correct & reachbound = False
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--hwmon--w83791d.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Added OR Node: 6
for clientid : 5 algo id is 1
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
0 => sending calltree : val 50 ORid 16 parentId 6
4 => after replyFromServer: 0
Added OR Node: 16
OR Q: , 50
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
8 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 1
1 => after replyFromServer: 100
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
8 => Spliiting due to client waiting
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
for clientid : 5 algo id is 1
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 8 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 46 currentId 36
1 => Spliiting due to client waiting
7 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 31 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 51 currentId 31
Added AND Nodes: 45 46
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 46 from client 9 to 10
10 => after replyFromServer: 50
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 41
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
Added AND Nodes: 50 51
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 51 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 46 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 66 currentId 46
Added AND Nodes: 65 66
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 66 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 3 with id = 66 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 76 from client 11 to 8
8 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => callsites count before spliiting 7 with id = 75 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 81 currentId 75
Added AND Nodes: 80 81
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 81 from client 11 to 9
9 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 3 with id = 71 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 71
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 7
7 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 8 with id = 85 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 85
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 13 with id = 90 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 90
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 4 with id = 86 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 86
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 8 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 106 from client 6 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 34 with id = 91 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 91
Added AND Nodes: 110 111
4 => callsites count before spliiting 221 with id = 110 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 110
Added AND Nodes: 115 116
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 200 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 121 currentId 96
Added AND Nodes: 120 121
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 208 with id = 105 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 126 currentId 105
Added AND Nodes: 125 126
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 202 with id = 106 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 131 currentId 106
Added AND Nodes: 130 131
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => Spliiting due to client waiting
2 => callsites count before spliiting 5 with id = 51 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 136 currentId 51
Added AND Nodes: 135 136
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 136 from client 2 to 3
3 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 14 with id = 80 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 141 currentId 80
Added AND Nodes: 140 141
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 141 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 4 with id = 76 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 146 currentId 76
Added AND Nodes: 145 146
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 146 from client 8 to 11
11 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 9 with id = 135 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 151 currentId 135
Added AND Nodes: 150 151
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 151 from client 2 to 0
0 => after replyFromServer: 100
3 => Spliiting due to client waiting
3 => callsites count before spliiting 4 with id = 136 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 156 currentId 136
Added AND Nodes: 155 156
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 156 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 6 with id = 156 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 161 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 6 with id = 151 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 166 currentId 151
Added AND Nodes: 165 166
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 166 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 15 with id = 150 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 171 currentId 150
Added AND Nodes: 170 171
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 171 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 5 with id = 161 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 176 currentId 161
Added AND Nodes: 175 176
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 176 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 5 with id = 171 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 181 currentId 171
Added AND Nodes: 180 181
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 181 from client 0 to 3
3 => after replyFromServer: 100
2 => callsites count before spliiting 85 with id = 176 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 186 currentId 176
Added AND Nodes: 185 186
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 90 with id = 166 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 191 currentId 166
Added AND Nodes: 190 191
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 307 with id = 145 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 196 currentId 145
Added AND Nodes: 195 196
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 107 with id = 180 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 201 currentId 180
Added AND Nodes: 200 201
0 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 160 with id = 201 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 206 currentId 201
Added AND Nodes: 205 206
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 223 with id = 141 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 211 currentId 141
Added AND Nodes: 210 211
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 302 with id = 196 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 216 currentId 196
Added AND Nodes: 215 216
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 89 with id = 206 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 221 currentId 206
Added AND Nodes: 220 221
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 111 with id = 191 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 226 currentId 191
Added AND Nodes: 225 226
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 111 with id = 186 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 231 currentId 186
Added AND Nodes: 230 231
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 159 with id = 221 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 236 currentId 221
Added AND Nodes: 235 236
1 => callsites count before spliiting 160 with id = 226 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 241 currentId 226
Added AND Nodes: 240 241
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 261 with id = 211 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 246 currentId 211
Added AND Nodes: 245 246
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 160 with id = 231 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 251 currentId 231
Added AND Nodes: 250 251
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 112 with id = 235 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 256 currentId 235
Added AND Nodes: 255 256
1 => callsites count before spliiting 89 with id = 241 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 261 currentId 241
Added AND Nodes: 260 261
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 66 with id = 255 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 266 currentId 255
Added AND Nodes: 265 266
2 => callsites count before spliiting 89 with id = 251 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 271 currentId 251
Added AND Nodes: 270 271
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 214 with id = 246 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 276 currentId 246
Added AND Nodes: 275 276
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 159 with id = 261 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 281 currentId 261
Added AND Nodes: 280 281
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 159 with id = 271 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 286 currentId 271
Added AND Nodes: 285 286
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 111 with id = 265 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 291 currentId 265
Added AND Nodes: 290 291
0 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 160 with id = 291 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 296 currentId 291
Added AND Nodes: 295 296
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 104 with id = 281 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 301 currentId 281
Added AND Nodes: 300 301
2 => callsites count before spliiting 104 with id = 286 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 306 currentId 286
Added AND Nodes: 305 306
1 => callsites count before spliiting 214 with id = 300 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 311 currentId 300
Added AND Nodes: 310 311
0 => callsites count before spliiting 89 with id = 296 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 316 currentId 296
Added AND Nodes: 315 316
2 => callsites count before spliiting 214 with id = 305 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 321 currentId 305
Added AND Nodes: 320 321
0 => callsites count before spliiting 198 with id = 315 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 326 currentId 315
Added AND Nodes: 325 326
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 253 with id = 310 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 331 currentId 310
Added AND Nodes: 330 331
2 => callsites count before spliiting 253 with id = 320 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 336 currentId 320
Added AND Nodes: 335 336
4 => callsites count before spliiting 211 with id = 116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 341 currentId 116
Added AND Nodes: 340 341
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => callsites count before spliiting 207 with id = 330 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 346 currentId 330
Added AND Nodes: 345 346
2 => callsites count before spliiting 207 with id = 335 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 351 currentId 335
Added AND Nodes: 350 351
1 => callsites count before spliiting 160 with id = 345 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 356 currentId 345
Added AND Nodes: 355 356
2 => callsites count before spliiting 160 with id = 350 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 361 currentId 350
Added AND Nodes: 360 361
1 => callsites count before spliiting 198 with id = 355 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 366 currentId 355
Added AND Nodes: 365 366
2 => callsites count before spliiting 198 with id = 360 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 371 currentId 360
Added AND Nodes: 370 371
0 => callsites count before spliiting 101 with id = 256 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 376 currentId 256
Added AND Nodes: 375 376
1 => callsites count before spliiting 308 with id = 365 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 381 currentId 365
Added AND Nodes: 380 381
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 308 with id = 370 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 386 currentId 370
Added AND Nodes: 385 386
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 211 with id = 375 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 391 currentId 375
Added AND Nodes: 390 391
1 => callsites count before spliiting 89 with id = 381 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 396 currentId 381
Added AND Nodes: 395 396
2 => callsites count before spliiting 89 with id = 386 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 401 currentId 386
Added AND Nodes: 400 401
11 => callsites count before spliiting 240 with id = 146 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 406 currentId 146
Added AND Nodes: 405 406
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 198 with id = 395 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 411 currentId 395
Added AND Nodes: 410 411
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 198 with id = 400 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 416 currentId 400
Added AND Nodes: 415 416
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 250 with id = 390 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 421 currentId 390
Added AND Nodes: 420 421
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 159 with id = 331 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 426 currentId 331
Added AND Nodes: 425 426
2 => callsites count before spliiting 159 with id = 336 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 431 currentId 336
Added AND Nodes: 430 431
1 => callsites count before spliiting 112 with id = 425 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 436 currentId 425
Added AND Nodes: 435 436
0 => callsites count before spliiting 159 with id = 421 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 441 currentId 421
Added AND Nodes: 440 441
2 => callsites count before spliiting 112 with id = 430 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 446 currentId 430
Added AND Nodes: 445 446
1 => callsites count before spliiting 66 with id = 435 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 451 currentId 435
Added AND Nodes: 450 451
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--isdn--mISDN--l1oip.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Verifying 11 impls
Verifying 11 impls
Verifying 11 impls
Verifying 11 impls
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 1 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
Verifying 11 impls
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
Verifying 11 impls
Verifying 11 impls
0 => outcome: Errors
Outcome NOK bestAlgo updated to 0
Verification Outcome : NOK
Time Taken : 11.902603
bestAlgo: 0
Verifying 11 impls
Verifying 11 impls
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--media--firewire--firedtv.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 21 currentId 6
Added AND Nodes: 20 21
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 21 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => Spliiting due to client waiting
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 26 currentId 11
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 7 algo id is 1
Added AND Nodes: 25 26
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 26 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 26 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 26
for clientid : 11 algo id is 2
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 8 with id = 21 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 36 currentId 21
Added AND Nodes: 35 36
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 36 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 7 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 41 currentId 16
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 41 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 56 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 8 with id = 41 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 61 currentId 41
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 56 and splitMode 0
Added AND Nodes: 60 61
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 61 from client 9 to 10
5 => sending calltree : splitMode 0 mustReachId 66 currentId 56
10 => after replyFromServer: 50
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
2 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 3 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
2 => callsites count before spliiting 4 with id = 36 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 76 currentId 36
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
Added AND Nodes: 75 76
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 76 from client 2 to 3
3 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
6 => Spliiting due to client waiting
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => callsites count before spliiting 21 with id = 70 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 70
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 5
5 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 40 with id = 85 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 85
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 7
7 => after replyFromServer: 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 10 with id = 75 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 96 currentId 75
Added AND Nodes: 95 96
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 96 from client 2 to 0
0 => after replyFromServer: 100
3 => Spliiting due to client waiting
3 => callsites count before spliiting 4 with id = 76 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 101 currentId 76
Added AND Nodes: 100 101
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 101 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 4 with id = 61 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 106 currentId 61
Added AND Nodes: 105 106
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 106 from client 10 to 11
11 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 15 with id = 95 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 111 currentId 95
Added AND Nodes: 110 111
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 111 from client 2 to 3
3 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 10 with id = 105 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 116 currentId 105
Added AND Nodes: 115 116
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 116 from client 10 to 8
8 => after replyFromServer: 50
10 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 3 with id = 116 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 121 from client 8 to 9
9 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 22 with id = 115 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 126 currentId 115
Added AND Nodes: 125 126
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 126 from client 10 to 9
9 => after replyFromServer: 50
2 => callsites count before spliiting 51 with id = 110 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 131 currentId 110
Added AND Nodes: 130 131
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 68 with id = 96 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 136 currentId 96
Added AND Nodes: 135 136
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 205 with id = 125 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 141 currentId 125
Added AND Nodes: 140 141
2 => callsites count before spliiting 120 with id = 131 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 146 currentId 131
Added AND Nodes: 145 146
4 => callsites count before spliiting 214 with id = 81 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 151 currentId 81
Added AND Nodes: 150 151
6 => callsites count before spliiting 213 with id = 90 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 156 currentId 90
4 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 155 156
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 54 with id = 101 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 161 currentId 101
Added AND Nodes: 160 161
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 65 with id = 136 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 166 currentId 136
Added AND Nodes: 165 166
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 157 with id = 145 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 171 currentId 145
Added AND Nodes: 170 171
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 300 with id = 140 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 176 currentId 140
Added AND Nodes: 175 176
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 95 with id = 161 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 181 currentId 161
Added AND Nodes: 180 181
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 102 with id = 166 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 186 currentId 166
Added AND Nodes: 185 186
2 => callsites count before spliiting 74 with id = 171 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 191 currentId 171
Added AND Nodes: 190 191
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 67 with id = 185 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 196 currentId 185
Added AND Nodes: 195 196
0 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 207 with id = 106 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 201 currentId 106
Added AND Nodes: 200 201
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 64 with id = 181 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 206 currentId 181
Added AND Nodes: 205 206
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 71 with id = 191 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 211 currentId 191
Added AND Nodes: 210 211
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 52 with id = 196 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 216 currentId 196
Added AND Nodes: 215 216
1 => callsites count before spliiting 52 with id = 206 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 221 currentId 206
Added AND Nodes: 220 221
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 202 with id = 120 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 226 currentId 120
Added AND Nodes: 225 226
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 54 with id = 211 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 231 currentId 211
Added AND Nodes: 230 231
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 52 with id = 215 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 236 currentId 215
Added AND Nodes: 235 236
10 => callsites count before spliiting 205 with id = 176 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 241 currentId 176
Added AND Nodes: 240 241
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 87 with id = 231 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 246 currentId 231
Added AND Nodes: 245 246
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 205 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 251 currentId 91
Added AND Nodes: 250 251
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 60 with id = 246 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 256 currentId 246
Added AND Nodes: 255 256
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 202 with id = 86 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 261 currentId 86
Added AND Nodes: 260 261
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 87 with id = 256 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 266 currentId 256
Added AND Nodes: 265 266
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 214 with id = 241 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 271 currentId 241
Added AND Nodes: 270 271
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 64 with id = 221 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 276 currentId 221
Added AND Nodes: 275 276
1 => callsites count before spliiting 66 with id = 275 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 281 currentId 275
Added AND Nodes: 280 281
2 => callsites count before spliiting 60 with id = 266 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 286 currentId 266
Added AND Nodes: 285 286
2 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 61 with id = 286 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 291 currentId 286
Added AND Nodes: 290 291
2 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 53 with id = 291 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 296 currentId 291
Added AND Nodes: 295 296
0 => callsites count before spliiting 69 with id = 235 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 301 currentId 235
Added AND Nodes: 300 301
2 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 52 with id = 276 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 306 currentId 276
Added AND Nodes: 305 306
2 => callsites count before spliiting 64 with id = 296 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 311 currentId 296
Added AND Nodes: 310 311
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 213 with id = 156 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 316 currentId 156
Added AND Nodes: 315 316
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 50 with id = 301 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 321 currentId 301
Added AND Nodes: 320 321
4 => callsites count before spliiting 217 with id = 151 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 326 currentId 151
Added AND Nodes: 325 326
4 => callsites count before spliiting 212 with id = 325 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 331 currentId 325
Added AND Nodes: 330 331
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 51 with id = 311 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 336 currentId 311
Added AND Nodes: 335 336
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 200 with id = 331 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 341 currentId 331
Added AND Nodes: 340 341
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => callsites count before spliiting 66 with id = 305 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 346 currentId 305
Added AND Nodes: 345 346
1 => callsites count before spliiting 68 with id = 345 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 351 currentId 345
Added AND Nodes: 350 351
1 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 52 with id = 351 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 356 currentId 351
Added AND Nodes: 355 356
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 230 with id = 201 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 361 currentId 201
Added AND Nodes: 360 361
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 67 with id = 320 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 366 currentId 320
Added AND Nodes: 365 366
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 52 with id = 346 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 371 currentId 346
Added AND Nodes: 370 371
10 => callsites count before spliiting 236 with id = 271 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 376 currentId 271
Added AND Nodes: 375 376
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => callsites count before spliiting 50 with id = 366 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 381 currentId 366
Added AND Nodes: 380 381
8 => callsites count before spliiting 220 with id = 226 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 386 currentId 226
Added AND Nodes: 385 386
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 252 with id = 316 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 391 currentId 316
Added AND Nodes: 390 391
6 => callsites count before spliiting 200 with id = 390 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 396 currentId 390
Added AND Nodes: 395 396
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 55 with id = 111 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 401 currentId 111
Added AND Nodes: 400 401
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 223 with id = 261 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 406 currentId 261
Added AND Nodes: 405 406
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 221 with id = 251 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 411 currentId 251
Added AND Nodes: 410 411
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 66 with id = 370 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 416 currentId 370
Added AND Nodes: 415 416
1 => callsites count before spliiting 68 with id = 415 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 421 currentId 415
Added AND Nodes: 420 421
1 => callsites count before spliiting 71 with id = 420 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 426 currentId 420
Added AND Nodes: 425 426
1 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 57 with id = 426 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 431 currentId 426
Added AND Nodes: 430 431
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--misc--phantom.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 4 algo id is 1
for clientid : 3 algo id is 0
for clientid : 5 algo id is 1
for clientid : 7 algo id is 1
for clientid : 6 algo id is 1
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 8 algo id is 2
for clientid : 9 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 21 currentId 16
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 26 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 21 from client 8 to 9
Added AND Nodes: 25 26
9 => after replyFromServer: 50
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 26 from client 4 to 5
5 => after replyFromServer: 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 26 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 26
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 8 with id = 21 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 41 currentId 21
Added AND Nodes: 40 41
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 41 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 36 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 8 with id = 31 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 51 currentId 31
Added AND Nodes: 50 51
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 51 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 46 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 56 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 6 with id = 41 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 61 currentId 41
Added AND Nodes: 60 61
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 61 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
4 => Spliiting due to client waiting
for clientid : 10 algo id is 2
4 => callsites count before spliiting 2 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 66 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 66
4 => callsites count before spliiting 19 with id = 65 and splitMode 0
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 7
4 => sending calltree : splitMode 0 mustReachId 76 currentId 65
7 => after replyFromServer: 0
Added AND Nodes: 75 76
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 76 from client 4 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => Spliiting due to client waiting
2 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 61 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 86 currentId 61
2 => callsites count before spliiting 6 with id = 51 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 91 currentId 51
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 4 with id = 76 and splitMode 0
Added AND Nodes: 85 86
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 86 from client 11 to 8
8 => after replyFromServer: 50
6 => sending calltree : splitMode 0 mustReachId 96 currentId 76
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 7
7 => after replyFromServer: 0
Added AND Nodes: 90 91
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 91 from client 2 to 3
3 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => Spliiting due to client waiting
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 13 with id = 90 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 101 currentId 90
Added AND Nodes: 100 101
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 101 from client 2 to 0
0 => after replyFromServer: 100
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
5 => callsites count before spliiting 25 with id = 81 and splitMode 0
6 => callsites count before spliiting 48 with id = 95 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 95
4 => callsites count before spliiting 85 with id = 75 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 111 currentId 81
Added AND Nodes: 105 106
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 106 from client 6 to 7
Added AND Nodes: 110 111
4 => sending calltree : splitMode 0 mustReachId 116 currentId 75
Added AND Nodes: 115 116
7 => after replyFromServer: 0
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 111 from client 5 to 6
6 => after replyFromServer: 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 21 with id = 85 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 121 currentId 85
Added AND Nodes: 120 121
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 121 from client 11 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 5 with id = 86 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 126 currentId 86
Added AND Nodes: 125 126
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 126 from client 8 to 10
10 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 5 with id = 91 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 131 currentId 91
Added AND Nodes: 130 131
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 131 from client 3 to 1
1 => after replyFromServer: 100
0 => Spliiting due to client waiting
0 => callsites count before spliiting 11 with id = 101 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 136 currentId 101
Added AND Nodes: 135 136
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 136 from client 0 to 2
2 => after replyFromServer: 100
3 => callsites count before spliiting 52 with id = 130 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 141 currentId 130
Added AND Nodes: 140 141
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 53 with id = 131 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 146 currentId 131
Added AND Nodes: 145 146
1 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 203 with id = 111 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 151 currentId 111
Added AND Nodes: 150 151
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 51 with id = 136 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 156 currentId 136
Added AND Nodes: 155 156
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 52 with id = 135 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 161 currentId 135
Added AND Nodes: 160 161
0 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 229 with id = 106 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 166 currentId 106
Added AND Nodes: 165 166
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 212 with id = 116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 171 currentId 116
Added AND Nodes: 170 171
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 202 with id = 110 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 176 currentId 110
Added AND Nodes: 175 176
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 213 with id = 120 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 181 currentId 120
Added AND Nodes: 180 181
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => callsites count before spliiting 238 with id = 151 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 186 currentId 151
Added AND Nodes: 185 186
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 205 with id = 121 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 191 currentId 121
Added AND Nodes: 190 191
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 207 with id = 125 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 196 currentId 125
Added AND Nodes: 195 196
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 69 with id = 161 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 201 currentId 161
Added AND Nodes: 200 201
0 => LOOP outcome: Correct & reachbound = True
7 => callsites count before spliiting 217 with id = 166 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 206 currentId 166
Added AND Nodes: 205 206
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 224 with id = 176 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 211 currentId 176
Added AND Nodes: 210 211
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 232 with id = 171 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 216 currentId 171
Added AND Nodes: 215 216
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 50 with id = 201 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 221 currentId 201
Added AND Nodes: 220 221
0 => LOOP outcome: Correct & reachbound = True
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--net--ethernet--3com--3c59x.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => Spliiting due to client waiting
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 25 26
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 26 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 26 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 36 currentId 26
Added AND Nodes: 35 36
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 36 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
0 => LOOP outcome: Correct & reachbound = False

LOCATION - 0: 6
removing 11
removing 21
removing 31
removing 16
removing 26
removing 36
Reached root of partition tree. Verfification Finished.
Reached root bestAlgo updated to 0
Verification Outcome : OK
Time Taken : 12.802232
bestAlgo: 0
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7_cpp_false-unreach-call_single_drivers-net-wireless-mwl8k.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 31 currentId 26
Added AND Nodes: 30 31
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 31 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
4 => callsites count before spliiting 2 with id = 31 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 41 from client 4 to 7
7 => after replyFromServer: 0
4 => Spliiting due to client waiting
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 5 with id = 40 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 46 currentId 40
Added AND Nodes: 45 46
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 46 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 11 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 41
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 46 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 56 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 61 currentId 36
Added AND Nodes: 60 61
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 61 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 51
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 56 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 56
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 66 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 76 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 86 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 81 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 81
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 86 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 96 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 106 currentId 96
Added AND Nodes: 105 106
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 106 from client 4 to 5
5 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 101
4 => Spliiting due to client waiting
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 3 with id = 106 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 116 from client 5 to 6
6 => after replyFromServer: 0
4 => callsites count before spliiting 234 with id = 105 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 105
Added AND Nodes: 120 121
7 => callsites count before spliiting 216 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 126 currentId 111
Added AND Nodes: 125 126
6 => callsites count before spliiting 230 with id = 116 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 131 currentId 116
Added AND Nodes: 130 131
5 => callsites count before spliiting 210 with id = 115 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 136 currentId 115
Added AND Nodes: 135 136
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 131 from client 6 to 4
4 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 126 from client 7 to 4
4 => after replyFromServer: 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 20 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 141 currentId 6
Added AND Nodes: 140 141
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 141 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 5 with id = 61 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 146 currentId 61
Added AND Nodes: 145 146
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 146 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => callsites count before spliiting 283 with id = 136 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 151 currentId 136
Added AND Nodes: 150 151
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => outcome: Errors
Outcome NOK bestAlgo updated to 1
Verification Outcome : NOK
Time Taken : 31.15915
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--vfio--pci--vfio-pci.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
for clientid : 2 algo id is 0
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
0 => Spliiting due to client waiting
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
for clientid : 10 algo id is 2
0 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => callsites count before spliiting 8 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
8 => Spliiting due to client waiting
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 46 currentId 26
9 => Spliiting due to client waiting
Added AND Nodes: 45 46
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 46 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => callsites count before spliiting 1 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 36
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 41
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
10 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 66 currentId 51
Added AND Nodes: 65 66
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 66 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 6 with id = 60 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 71 currentId 60
Added AND Nodes: 70 71
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 71 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 76 currentId 61
Added AND Nodes: 75 76
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 76 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 76 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 71 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 71
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 4 with id = 81 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 81
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 7
7 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 86 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 96 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 96 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 96
Added AND Nodes: 105 106
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 106 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 6 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 111 currentId 101
Added AND Nodes: 110 111
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 111 from client 5 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => callsites count before spliiting 24 with id = 106 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 116 from client 4 to 6
6 => after replyFromServer: 0
7 => callsites count before spliiting 4 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 111
Added AND Nodes: 120 121
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 121 from client 7 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
5 => callsites count before spliiting 79 with id = 110 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 126 currentId 110
Added AND Nodes: 125 126
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 126 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
7 => Spliiting due to client waiting
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
2 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
2 => callsites count before spliiting 5 with id = 46 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 131 currentId 46
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
Added AND Nodes: 130 131
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 131 from client 2 to 3
3 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 12 with id = 126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 136 currentId 126
Added AND Nodes: 135 136
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 136 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 5 with id = 66 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 141 currentId 66
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
Added AND Nodes: 140 141
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 141 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 13 with id = 136 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 146 currentId 136
Added AND Nodes: 145 146
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 146 from client 5 to 4
4 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 3 with id = 141 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 151 from client 8 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 25 with id = 145 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 156 currentId 145
Added AND Nodes: 155 156
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 156 from client 5 to 6
6 => after replyFromServer: 0
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 11 with id = 130 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 161 currentId 130
Added AND Nodes: 160 161
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 161 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 78 with id = 155 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 166 currentId 155
Added AND Nodes: 165 166
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 166 from client 5 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 89 with id = 165 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 171 currentId 165
Added AND Nodes: 170 171
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 171 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 11 with id = 150 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 176 currentId 150
Added AND Nodes: 175 176
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 176 from client 8 to 10
10 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
6 => callsites count before spliiting 3 with id = 171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 181 currentId 171
Added AND Nodes: 180 181
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 181 from client 6 to 5
5 => after replyFromServer: 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 3 with id = 176 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 186 currentId 176
Added AND Nodes: 185 186
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 186 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 3 with id = 186 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 191 from client 11 to 9
9 => after replyFromServer: 50
11 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 23 with id = 166 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 196 currentId 166
Added AND Nodes: 195 196
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 196 from client 4 to 6
6 => after replyFromServer: 0
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 5 with id = 161 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 201 currentId 161
Added AND Nodes: 200 201
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 201 from client 0 to 1
1 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 45 with id = 195 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 206 currentId 195
Added AND Nodes: 205 206
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 206 from client 4 to 5
5 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 17 with id = 175 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 211 currentId 175
Added AND Nodes: 210 211
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 211 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 17 with id = 190 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 216 currentId 190
Added AND Nodes: 215 216
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 216 from client 11 to 9
9 => after replyFromServer: 50
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 211 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 221 currentId 211
Added AND Nodes: 220 221
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 221 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => Spliiting due to client waiting
7 => callsites count before spliiting 341 with id = 120 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 226 currentId 120
Added AND Nodes: 225 226
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 17 with id = 196 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 231 currentId 196
Added AND Nodes: 230 231
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 231 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 12 with id = 200 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 236 currentId 200
Added AND Nodes: 235 236
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 236 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 231 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 241 currentId 231
Added AND Nodes: 240 241
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 241 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => Spliiting due to client waiting
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => callsites count before spliiting 38 with id = 215 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 246 currentId 215
Added AND Nodes: 245 246
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 246 from client 11 to 10
10 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 11 with id = 221 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 251 currentId 221
Added AND Nodes: 250 251
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 251 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 11 with id = 201 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 256 currentId 201
Added AND Nodes: 255 256
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 256 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 251 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 261 currentId 251
Added AND Nodes: 260 261
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 261 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 241 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 266 currentId 241
Added AND Nodes: 265 266
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 266 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
3 => Spliiting due to client waiting
3 => callsites count before spliiting 12 with id = 236 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 271 currentId 236
Added AND Nodes: 270 271
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 271 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 266 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 276 currentId 266
Added AND Nodes: 275 276
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 276 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 93 with id = 205 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 281 currentId 205
Added AND Nodes: 280 281
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 281 from client 4 to 5
5 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 17 with id = 261 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 286 currentId 261
Added AND Nodes: 285 286
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 286 from client 8 to 11
11 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 53 with id = 246 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 291 currentId 246
Added AND Nodes: 290 291
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 291 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 291 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 296 currentId 291
Added AND Nodes: 295 296
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 296 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 12 with id = 256 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 301 currentId 256
Added AND Nodes: 300 301
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 301 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 14 with id = 276 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 306 currentId 276
Added AND Nodes: 305 306
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 306 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 17 with id = 271 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 311 currentId 271
Added AND Nodes: 310 311
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 311 from client 0 to 3
3 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 306 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 316 currentId 306
Added AND Nodes: 315 316
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 316 from client 4 to 6
6 => after replyFromServer: 0
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 17 with id = 286 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 321 currentId 286
Added AND Nodes: 320 321
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 321 from client 11 to 10
10 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 13 with id = 321 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 326 currentId 321
Added AND Nodes: 325 326
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 326 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 44 with id = 296 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 331 currentId 296
Added AND Nodes: 330 331
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 331 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 18 with id = 311 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 336 currentId 311
Added AND Nodes: 335 336
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 336 from client 3 to 2
2 => after replyFromServer: 100
7 => Spliiting due to client waiting
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
7 => callsites count before spliiting 162 with id = 226 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 341 currentId 226
Added AND Nodes: 340 341
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 341 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 26 with id = 316 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 346 currentId 316
Added AND Nodes: 345 346
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 346 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 326 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 351 currentId 326
Added AND Nodes: 350 351
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 351 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 27 with id = 281 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 356 currentId 281
Added AND Nodes: 355 356
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 356 from client 5 to 6
6 => after replyFromServer: 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 3 with id = 336 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 361 currentId 336
Added AND Nodes: 360 361
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 361 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 3 with id = 351 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 366 currentId 351
Added AND Nodes: 365 366
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 366 from client 10 to 8
8 => after replyFromServer: 50
10 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 33 with id = 301 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 371 currentId 301
Added AND Nodes: 370 371
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 371 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 4 with id = 361 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 376 currentId 361
Added AND Nodes: 375 376
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 376 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 4 with id = 366 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 381 currentId 366
Added AND Nodes: 380 381
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 381 from client 8 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 33 with id = 381 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 386 currentId 381
Added AND Nodes: 385 386
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 386 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 63 with id = 385 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 391 currentId 385
Added AND Nodes: 390 391
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 391 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 32 with id = 331 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 396 currentId 331
Added AND Nodes: 395 396
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 396 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 3 with id = 376 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 401 currentId 376
Added AND Nodes: 400 401
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 401 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 4 with id = 401 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 406 currentId 401
Added AND Nodes: 405 406
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 406 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => callsites count before spliiting 215 with id = 346 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 411 currentId 346
Added AND Nodes: 410 411
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 3 with id = 406 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 416 currentId 406
Added AND Nodes: 415 416
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 416 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 386 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 421 currentId 386
Added AND Nodes: 420 421
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 421 from client 10 to 11
11 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 4 with id = 416 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 426 currentId 416
Added AND Nodes: 425 426
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 426 from client 2 to 1
1 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 5 with id = 420 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 431 currentId 420
Added AND Nodes: 430 431
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 431 from client 10 to 8
8 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 3 with id = 426 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 436 currentId 426
Added AND Nodes: 435 436
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 436 from client 1 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 3 with id = 421 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 441 currentId 421
Added AND Nodes: 440 441
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 441 from client 11 to 8
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 4 with id = 436 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 446 currentId 436
Added AND Nodes: 445 446
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 446 from client 0 to 2
2 => after replyFromServer: 100
3 => callsites count before spliiting 68 with id = 371 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 451 currentId 371
Added AND Nodes: 450 451
3 => LOOP outcome: Correct & reachbound = False
11 => Spliiting due to client waiting
11 => callsites count before spliiting 6 with id = 440 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 456 currentId 440
Added AND Nodes: 455 456
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 456 from client 11 to 10
10 => after replyFromServer: 50
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 127 with id = 411 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 461 currentId 411
Added AND Nodes: 460 461
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 461 from client 7 to 5
5 => after replyFromServer: 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 24 with id = 446 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 466 currentId 446
Added AND Nodes: 465 466
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 466 from client 2 to 1
1 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 82 with id = 356 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 471 currentId 356
Added AND Nodes: 470 471
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 471 from client 6 to 7
7 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 86 with id = 341 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 476 currentId 341
Added AND Nodes: 475 476
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 476 from client 4 to 7
7 => after replyFromServer: 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 20 with id = 455 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 481 currentId 455
Added AND Nodes: 480 481
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 481 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 29 with id = 476 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 486 currentId 476
Added AND Nodes: 485 486
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 486 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 90 with id = 396 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 491 currentId 396
Added AND Nodes: 490 491
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 491 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 491 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 496 currentId 491
Added AND Nodes: 495 496
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 496 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
1 => callsites count before spliiting 51 with id = 466 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 501 currentId 466
Added AND Nodes: 500 501
6 => Spliiting due to client waiting
6 => callsites count before spliiting 107 with id = 470 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 506 currentId 470
Added AND Nodes: 505 506
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 506 from client 6 to 7
7 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 54 with id = 441 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 511 currentId 441
Added AND Nodes: 510 511
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 511 from client 8 to 9
9 => after replyFromServer: 50
3 => callsites count before spliiting 65 with id = 451 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 516 currentId 451
Added AND Nodes: 515 516
3 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 501 from client 1 to 0
0 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 57 with id = 510 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 521 currentId 510
Added AND Nodes: 520 521
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 521 from client 8 to 11
11 => after replyFromServer: 50
3 => callsites count before spliiting 67 with id = 516 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 526 currentId 516
Added AND Nodes: 525 526
3 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 203 with id = 505 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 531 currentId 505
Added AND Nodes: 530 531
5 => callsites count before spliiting 215 with id = 461 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 536 currentId 461
Added AND Nodes: 535 536
5 => callsites count before spliiting 201 with id = 535 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 541 currentId 535
Added AND Nodes: 540 541
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
2 => callsites count before spliiting 53 with id = 465 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 546 currentId 465
Added AND Nodes: 545 546
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 511 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 551 currentId 511
Added AND Nodes: 550 551
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 551 from client 9 to 11
11 => after replyFromServer: 50
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 224 with id = 531 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 556 currentId 531
Added AND Nodes: 555 556
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 220 with id = 556 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 561 currentId 556
Added AND Nodes: 560 561
3 => callsites count before spliiting 51 with id = 526 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 566 currentId 526
Added AND Nodes: 565 566
3 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 220 with id = 536 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 571 currentId 536
Added AND Nodes: 570 571
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 571 from client 5 to 6
6 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 89 with id = 570 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 576 currentId 570
Added AND Nodes: 575 576
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 576 from client 5 to 6
6 => after replyFromServer: 0
5 => callsites count before spliiting 210 with id = 575 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 581 currentId 575
Added AND Nodes: 580 581
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 86 with id = 576 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 586 currentId 576
Added AND Nodes: 585 586
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 586 from client 6 to 5
5 => after replyFromServer: 0
6 => callsites count before spliiting 245 with id = 585 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 591 currentId 585
Added AND Nodes: 590 591
9 => Spliiting due to client waiting
9 => callsites count before spliiting 125 with id = 550 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 596 currentId 550
Added AND Nodes: 595 596
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 596 from client 9 to 8
8 => after replyFromServer: 50
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 142 with id = 486 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 601 currentId 486
Added AND Nodes: 600 601
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 601 from client 4 to 6
6 => after replyFromServer: 0
4 => callsites count before spliiting 202 with id = 600 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 606 currentId 600
Added AND Nodes: 605 606
4 => callsites count before spliiting 203 with id = 605 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 611 currentId 605
Added AND Nodes: 610 611
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7a_newdeg_true-unreach-call_linux-3.8-rc1-drivers--media--usb--dvb-usb-v2--dvb-usb-mxl111sf.ko-main.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 7 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 36 currentId 26
Added AND Nodes: 35 36
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 36 from client 6 to 7
7 => after replyFromServer: 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 8 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 41 from client 9 to 10
10 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 36 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 51 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 6 with id = 50 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 56 currentId 50
Added AND Nodes: 55 56
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 56 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => callsites count before spliiting 21 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 61 currentId 6
Added AND Nodes: 60 61
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 61 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 56 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 66 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 51
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 66 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 71 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 76 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 7
7 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 18 with id = 85 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 85
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 4
4 => after replyFromServer: 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 6 with id = 41 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 96 currentId 41
Added AND Nodes: 95 96
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 96 from client 10 to 11
11 => after replyFromServer: 50
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 10 with id = 86 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 86
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 39 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 81
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 7
7 => after replyFromServer: 0
10 => Spliiting due to client waiting
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 5 with id = 91 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 91
Added AND Nodes: 110 111
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 111 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 5 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 116 currentId 101
Added AND Nodes: 115 116
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 116 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 5 with id = 61 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 121 currentId 61
Added AND Nodes: 120 121
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 121 from client 1 to 2
2 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 116
Added AND Nodes: 125 126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 126 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 12 with id = 95 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 131 currentId 95
Added AND Nodes: 130 131
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 131 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 14 with id = 106 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 136 currentId 106
Added AND Nodes: 135 136
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 136 from client 7 to 4
4 => after replyFromServer: 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 3 with id = 96 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 141 currentId 96
Added AND Nodes: 140 141
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 141 from client 11 to 9
9 => after replyFromServer: 50
7 => callsites count before spliiting 243 with id = 135 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 146 currentId 135
Added AND Nodes: 145 146
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 269 with id = 111 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 151 currentId 111
Added AND Nodes: 150 151
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 131 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 156 currentId 131
Added AND Nodes: 155 156
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 156 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 8 with id = 140 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 161 currentId 140
Added AND Nodes: 160 161
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 161 from client 11 to 8
8 => after replyFromServer: 50
6 => callsites count before spliiting 277 with id = 126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 166 currentId 126
Added AND Nodes: 165 166
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => Spliiting due to client waiting
1 => callsites count before spliiting 10 with id = 120 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 171 currentId 120
Added AND Nodes: 170 171
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 171 from client 1 to 3
3 => after replyFromServer: 100
4 => callsites count before spliiting 261 with id = 136 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 136
Added AND Nodes: 175 176
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 156 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 181 currentId 156
Added AND Nodes: 180 181
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 181 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 15 with id = 170 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 186 currentId 170
Added AND Nodes: 185 186
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 186 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 16 with id = 141 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 191 currentId 141
Added AND Nodes: 190 191
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 191 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 4 with id = 121 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 196 currentId 121
Added AND Nodes: 195 196
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 196 from client 2 to 1
1 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 28 with id = 161 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 201 currentId 161
Added AND Nodes: 200 201
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 201 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 6 with id = 181 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 206 currentId 181
Added AND Nodes: 205 206
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 206 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 171 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 211 currentId 171
Added AND Nodes: 210 211
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 211 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 117 with id = 146 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 216 currentId 146
Added AND Nodes: 215 216
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 216 from client 7 to 4
4 => after replyFromServer: 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 39 with id = 201 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 221 currentId 201
Added AND Nodes: 220 221
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 221 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 206 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 226 currentId 206
Added AND Nodes: 225 226
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 226 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 4 with id = 186 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 231 currentId 186
Added AND Nodes: 230 231
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 231 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 3 with id = 191 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 236 currentId 191
Added AND Nodes: 235 236
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 236 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 226 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 241 currentId 226
Added AND Nodes: 240 241
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 241 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 128 with id = 166 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 246 currentId 166
Added AND Nodes: 245 246
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 246 from client 6 to 4
4 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 39 with id = 236 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 251 currentId 236
Added AND Nodes: 250 251
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 251 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 3 with id = 241 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 256 currentId 241
Added AND Nodes: 255 256
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 256 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 5 with id = 231 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 261 currentId 231
Added AND Nodes: 260 261
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 261 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 4 with id = 256 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 266 currentId 256
Added AND Nodes: 265 266
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 266 from client 8 to 10
10 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 4 with id = 211 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 271 currentId 211
Added AND Nodes: 270 271
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 271 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => callsites count before spliiting 255 with id = 221 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 276 currentId 221
Added AND Nodes: 275 276
0 => Spliiting due to client waiting
0 => callsites count before spliiting 5 with id = 261 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 281 currentId 261
Added AND Nodes: 280 281
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 281 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 4 with id = 196 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 286 currentId 196
Added AND Nodes: 285 286
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 286 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 5 with id = 271 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 291 currentId 271
Added AND Nodes: 290 291
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 291 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 4 with id = 281 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 296 currentId 281
Added AND Nodes: 295 296
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 296 from client 2 to 3
3 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 12 with id = 295 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 301 currentId 295
Added AND Nodes: 300 301
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 301 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 6 with id = 291 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 306 currentId 291
Added AND Nodes: 305 306
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 306 from client 1 to 2
2 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 47 with id = 265 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 311 currentId 265
Added AND Nodes: 310 311
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 311 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 311 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 316 currentId 311
Added AND Nodes: 315 316
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 316 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 154 with id = 316 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 321 currentId 316
Added AND Nodes: 320 321
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 321 from client 8 to 10
10 => after replyFromServer: 50
8 => callsites count before spliiting 284 with id = 320 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 326 currentId 320
Added AND Nodes: 325 326
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 176 with id = 251 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 331 currentId 251
Added AND Nodes: 330 331
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 331 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => callsites count before spliiting 341 with id = 151 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 336 currentId 151
Added AND Nodes: 335 336
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 336 from client 5 to 4
4 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => callsites count before spliiting 54 with id = 306 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 341 currentId 306
Added AND Nodes: 340 341
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 339 with id = 245 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 346 currentId 245
Added AND Nodes: 345 346
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 346 from client 6 to 4
4 => after replyFromServer: 0
7 => callsites count before spliiting 318 with id = 215 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 351 currentId 215
Added AND Nodes: 350 351
8 => callsites count before spliiting 496 with id = 331 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 356 currentId 331
Added AND Nodes: 355 356
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 356 from client 8 to 9
9 => after replyFromServer: 50
1 => callsites count before spliiting 54 with id = 305 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 361 currentId 305
Added AND Nodes: 360 361
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 53 with id = 301 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 366 currentId 301
Added AND Nodes: 365 366
3 => LOOP outcome: Correct & reachbound = False
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => callsites count before spliiting 306 with id = 350 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 371 currentId 350
Added AND Nodes: 370 371
7 => callsites count before spliiting 453 with id = 370 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 376 currentId 370
Added AND Nodes: 375 376
7 => callsites count before spliiting 630 with id = 375 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 375
Added AND Nodes: 380 381
7 => callsites count before spliiting 649 with id = 380 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 386 currentId 380
Added AND Nodes: 385 386
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 206 with id = 381 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 391 currentId 381
Added AND Nodes: 390 391
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 305 with id = 376 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 396 currentId 376
Added AND Nodes: 395 396
7 => callsites count before spliiting 388 with id = 395 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 401 currentId 395
Added AND Nodes: 400 401
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 203 with id = 401 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 406 currentId 401
Added AND Nodes: 405 406
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 251 with id = 396 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 411 currentId 396
Added AND Nodes: 410 411
7 => callsites count before spliiting 281 with id = 410 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 416 currentId 410
Added AND Nodes: 415 416
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 200 with id = 346 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 421 currentId 346
Added AND Nodes: 420 421
4 => callsites count before spliiting 343 with id = 420 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 426 currentId 420
Added AND Nodes: 425 426
4 => callsites count before spliiting 593 with id = 425 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 431 currentId 425
Added AND Nodes: 430 431
4 => callsites count before spliiting 663 with id = 430 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 436 currentId 430
Added AND Nodes: 435 436
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 200 with id = 436 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 441 currentId 436
Added AND Nodes: 440 441
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 222 with id = 431 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 446 currentId 431
Added AND Nodes: 445 446
4 => callsites count before spliiting 261 with id = 445 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 451 currentId 445
Added AND Nodes: 450 451
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 224 with id = 446 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 456 currentId 446
Added AND Nodes: 455 456
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 338 with id = 345 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 461 currentId 345
Added AND Nodes: 460 461
6 => callsites count before spliiting 474 with id = 460 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 466 currentId 460
Added AND Nodes: 465 466
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 51 with id = 341 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 471 currentId 341
Added AND Nodes: 470 471
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 272 with id = 321 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 476 currentId 321
Added AND Nodes: 475 476
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 476 from client 10 to 8
8 => after replyFromServer: 50
4 => callsites count before spliiting 214 with id = 421 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 481 currentId 421
Added AND Nodes: 480 481
10 => callsites count before spliiting 275 with id = 475 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 486 currentId 475
Added AND Nodes: 485 486
10 => callsites count before spliiting 374 with id = 485 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 491 currentId 485
Added AND Nodes: 490 491
10 => callsites count before spliiting 379 with id = 490 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 496 currentId 490
Added AND Nodes: 495 496
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => callsites count before spliiting 213 with id = 461 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 501 currentId 461
Added AND Nodes: 500 501
5 => callsites count before spliiting 341 with id = 335 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 506 currentId 335
Added AND Nodes: 505 506
5 => callsites count before spliiting 544 with id = 505 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 511 currentId 505
Added AND Nodes: 510 511
5 => callsites count before spliiting 769 with id = 510 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 516 currentId 510
Added AND Nodes: 515 516
5 => callsites count before spliiting 786 with id = 515 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 521 currentId 515
Added AND Nodes: 520 521
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 225 with id = 516 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 526 currentId 516
Added AND Nodes: 525 526
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 345 with id = 511 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 531 currentId 511
Added AND Nodes: 530 531
5 => callsites count before spliiting 455 with id = 530 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 536 currentId 530
Added AND Nodes: 535 536
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 202 with id = 536 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 541 currentId 536
Added AND Nodes: 540 541
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 51 with id = 471 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 546 currentId 471
Added AND Nodes: 545 546
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 54 with id = 361 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 551 currentId 361
Added AND Nodes: 550 551
1 => LOOP outcome: Correct & reachbound = False
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7_cilled_false-unreach-call_const_ok_linux-32_1-drivers--isdn--capi--kernelcapi.ko-ldv_main3_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
for clientid : 3 algo id is 0
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
0 => Spliiting due to client waiting
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
5 => Spliiting due to client waiting
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 36
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 31
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 8 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 56 currentId 26
Added AND Nodes: 55 56
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 56 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 46
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 66 currentId 51
Added AND Nodes: 65 66
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 66 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 71 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 76 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 40 with id = 80 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 86 currentId 80
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 81 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 81
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 35 with id = 91 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 5
5 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 8 with id = 56 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 101 currentId 56
Added AND Nodes: 100 101
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 101 from client 2 to 3
3 => after replyFromServer: 100
7 => outcome: Errors
Outcome NOK bestAlgo updated to 1
Verification Outcome : NOK
Time Taken : 809.734178
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7_cilled_false-unreach-call_const_ok_linux-32_1-drivers--staging--keucr--keucr.ko-ldv_main1_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 2 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => Spliiting due to client waiting
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 21 currentId 6
Added AND Nodes: 20 21
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 21 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 25 26
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 26 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 26 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 31 currentId 26
Added AND Nodes: 30 31
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 31 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
for clientid : 11 algo id is 2
10 => callsites count before spliiting 1 with id = 31 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 36 currentId 31
Added AND Nodes: 35 36
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 36 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 36 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 41 currentId 36
Added AND Nodes: 40 41
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 41 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 8 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 46 currentId 11
Added AND Nodes: 45 46
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 46 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 8 with id = 21 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 51 currentId 21
Added AND Nodes: 50 51
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 51 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 9 with id = 41 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 56 currentId 41
Added AND Nodes: 55 56
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 56 from client 9 to 11
11 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 46 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 61 currentId 46
Added AND Nodes: 60 61
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 61 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 56 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 66 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 61 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 66 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 76 from client 10 to 8
8 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 3 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 11 with id = 80 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 86 currentId 80
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 25 with id = 85 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 91 currentId 85
Added AND Nodes: 90 91
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 91 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 81 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 96 currentId 81
Added AND Nodes: 95 96
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 96 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 3 with id = 96 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 4
4 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 62 with id = 100 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 106 currentId 100
Added AND Nodes: 105 106
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 106 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 25 with id = 106 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 111 from client 4 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 226 with id = 110 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 110
Added AND Nodes: 115 116
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 251 with id = 116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 206 with id = 121 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 206 with id = 126 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 206 with id = 131 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
Prover error: line 54866 column 10: model is not available
Corral encountered a prover error. Giving up.
Prover error: line 72622 column 10: model is not available
Corral encountered a prover error. Giving up.
Prover error: line 124152 column 10: model is not available
Corral encountered a prover error. Giving up.
Prover error: line 480707 column 10: model is not available
Corral encountered a prover error. Giving up.
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 32_7_cilled_false-unreach-call_const_ok_linux-32_1-drivers--video--aty--atyfb.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Verifying 31 impls
Verifying 31 impls
Verifying 31 impls
Verifying 31 impls
Verifying 31 impls
Verifying 31 impls
Verifying 31 impls
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Verifying 31 impls
for clientid : 2 algo id is 0
Verifying 31 impls
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
Verifying 31 impls
0 => Spliiting due to client waiting
Verifying 31 impls
0 => outcome: Errors
Outcome NOK bestAlgo updated to 0
Verification Outcome : NOK
Time Taken : 2.514695
bestAlgo: 0
Verifying 31 impls
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_1a_cilled_false-unreach-call_ok_linux-43_1a-drivers--usb--gadget--pch_udc.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 21 currentId 6
Added AND Nodes: 20 21
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 21 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
for clientid : 6 algo id is 1
Assign partition 11 from OR Queue to 6
Algo : 1 started with splitmode 0
6 => after replyFromServer: 0
0 => outcome: Correct
for clientid : 0 algo id is 0
for clientid : 4 algo id is 1
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 11 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 26 currentId 11
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
Added AND Nodes: 25 26
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 26 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
for clientid : 9 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 10 with id = 21 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 31 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
4 => callsites count before spliiting 1 with id = 26 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 41 currentId 26
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
Added AND Nodes: 40 41
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 41 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 36 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 46 currentId 36
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 41 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 51 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 46 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
Added AND Nodes: 50 51
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 51 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
2 => Spliiting due to client waiting
11 => Spliiting due to client waiting
2 => callsites count before spliiting 2 with id = 31 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 56 currentId 31
11 => callsites count before spliiting 1 with id = 46 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 61 currentId 46
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 51 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 66 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 56 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
Added AND Nodes: 60 61
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 61 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
Added AND Nodes: 65 66
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 66 from client 7 to 6
6 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 15 with id = 65 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 71 currentId 65
Added AND Nodes: 70 71
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 71 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 61 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 76 currentId 61
Added AND Nodes: 75 76
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 76 from client 9 to 8
8 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 4 with id = 71 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 25 with id = 80 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 86 currentId 80
Added AND Nodes: 85 86
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 86 from client 4 to 6
6 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 91 currentId 81
Added AND Nodes: 90 91
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 91 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 55 with id = 85 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 96 currentId 85
Added AND Nodes: 95 96
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 96 from client 4 to 5
5 => after replyFromServer: 0
8 => callsites count before spliiting 8 with id = 76 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 101 currentId 76
Added AND Nodes: 100 101
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 101 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 2 with id = 56 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 106 currentId 56
Added AND Nodes: 105 106
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 106 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 101 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 111 currentId 101
Added AND Nodes: 110 111
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 111 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 106 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 116 from client 0 to 1
1 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 6 with id = 111 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 121 currentId 111
Added AND Nodes: 120 121
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 121 from client 11 to 9
9 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => callsites count before spliiting 18 with id = 120 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 126 currentId 120
Added AND Nodes: 125 126
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 126 from client 11 to 8
8 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 121 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 131 currentId 121
Added AND Nodes: 130 131
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 131 from client 9 to 10
10 => after replyFromServer: 50
7 => callsites count before spliiting 204 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 136 currentId 91
Added AND Nodes: 135 136
5 => callsites count before spliiting 204 with id = 96 and splitMode 0
0 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
5 => sending calltree : splitMode 0 mustReachId 141 currentId 96
10 => outcome: Correct
for clientid : 10 algo id is 2
Added AND Nodes: 140 141
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 201 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 146 currentId 86
Added AND Nodes: 145 146
4 => callsites count before spliiting 200 with id = 95 and splitMode 0
6 => LOOP outcome: Correct & reachbound = False
4 => sending calltree : splitMode 0 mustReachId 151 currentId 95
Added New : 
6 : 
Added AND Nodes: 150 151
11 => Spliiting due to client waiting
11 => callsites count before spliiting 28 with id = 125 and splitMode 50
5 => LOOP outcome: Correct & reachbound = False
11 => sending calltree : splitMode 50 mustReachId 156 currentId 125
Added New : 
5 : 
Added AND Nodes: 155 156
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 156 from client 11 to 10
10 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => Spliiting due to client waiting
1 => callsites count before spliiting 10 with id = 116 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 161 currentId 116
Added AND Nodes: 160 161
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 161 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 12 with id = 115 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 166 currentId 115
Added AND Nodes: 165 166
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 166 from client 0 to 3
3 => after replyFromServer: 100
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 16 with id = 165 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 171 currentId 165
Added AND Nodes: 170 171
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 171 from client 0 to 1
1 => after replyFromServer: 100
5 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 17 with id = 126 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 176 currentId 126
Added AND Nodes: 175 176
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 176 from client 8 to 11
11 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 47 with id = 175 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 181 currentId 175
Added AND Nodes: 180 181
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 181 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => callsites count before spliiting 82 with id = 156 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 186 currentId 156
Added AND Nodes: 185 186
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 186 from client 10 to 8
8 => after replyFromServer: 50
2 => callsites count before spliiting 61 with id = 161 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 191 currentId 161
Added AND Nodes: 190 191
2 => LOOP outcome: Correct & reachbound = False
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 35 with id = 170 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 196 currentId 170
Added AND Nodes: 195 196
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 196 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
1 => Spliiting due to client waiting
4 => Spliiting due to client waiting
1 => callsites count before spliiting 1 with id = 196 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 201 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => outcome: Errors
Outcome NOK bestAlgo updated to 1
Verification Outcome : NOK
Time Taken : 18.52442
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--hwmon--asus_atk0110.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 3 algo id is 0
Added OR Node: 6
for clientid : 4 algo id is 1
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
for clientid : 7 algo id is 1
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
0 => Spliiting due to client waiting
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 9 algo id is 2
0 => callsites count before spliiting 8 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
for clientid : 10 algo id is 2
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
8 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 41 currentId 36
6 => Spliiting due to client waiting
Added AND Nodes: 40 41
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 41 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 31
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 41 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 51 currentId 41
1 => callsites count before spliiting 12 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 56 currentId 26
Added AND Nodes: 50 51
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 51 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
Added AND Nodes: 55 56
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 56 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 61 currentId 46
Added AND Nodes: 60 61
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 61 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 51 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 66 currentId 51
7 => Spliiting due to client waiting
7 => callsites count before spliiting 5 with id = 60 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 71 currentId 60
Added AND Nodes: 70 71
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 71 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 61 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 76 currentId 61
Added AND Nodes: 75 76
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 76 from client 4 to 6
6 => after replyFromServer: 0
Added AND Nodes: 65 66
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 66 from client 11 to 8
8 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 71 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 81 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 76 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 66 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 91 currentId 66
Added AND Nodes: 90 91
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 91 from client 8 to 9
9 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => callsites count before spliiting 14 with id = 65 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 96 currentId 65
Added AND Nodes: 95 96
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 96 from client 11 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 81 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 81
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => callsites count before spliiting 3 with id = 86 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 86
Added AND Nodes: 110 111
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 111 from client 4 to 5
5 => after replyFromServer: 0
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 32 with id = 100 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 116 currentId 100
Added AND Nodes: 115 116
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 116 from client 7 to 5
5 => after replyFromServer: 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 96 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 121 currentId 96
Added AND Nodes: 120 121
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 121 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 36 with id = 110 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 110
Added AND Nodes: 125 126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 126 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => callsites count before spliiting 6 with id = 126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 131 from client 6 to 4
4 => after replyFromServer: 0
5 => callsites count before spliiting 28 with id = 116 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 136 currentId 116
Added AND Nodes: 135 136
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 131 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 131
Added AND Nodes: 140 141
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 141 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 38 with id = 130 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 146 currentId 130
Added AND Nodes: 145 146
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 146 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 7 with id = 56 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 151 currentId 56
Added AND Nodes: 150 151
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 151 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 6 with id = 121 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 156 currentId 121
Added AND Nodes: 155 156
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 156 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 156 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 161 from client 11 to 9
9 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 161 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 166 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 166 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 171 from client 10 to 8
8 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 171 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 176 from client 8 to 11
11 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 76 with id = 115 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 181 currentId 115
Added AND Nodes: 180 181
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 181 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 3 with id = 181 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 186 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 186 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 191 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 191 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 196 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 196 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 201 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 3 with id = 201 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 206 currentId 201
Added AND Nodes: 205 206
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 206 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 17 with id = 205 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 211 currentId 205
Added AND Nodes: 210 211
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 211 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 4 with id = 206 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 216 currentId 206
Added AND Nodes: 215 216
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 216 from client 6 to 7
7 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 211 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 221 currentId 211
Added AND Nodes: 220 221
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 221 from client 4 to 5
5 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 153 with id = 216 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 226 currentId 216
Added AND Nodes: 225 226
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 226 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 8 with id = 226 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 231 currentId 226
Added AND Nodes: 230 231
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 231 from client 5 to 7
7 => after replyFromServer: 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 12 with id = 151 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 236 currentId 151
Added AND Nodes: 235 236
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 236 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 10 with id = 170 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 241 currentId 170
Added AND Nodes: 240 241
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 241 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 11 with id = 175 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 246 currentId 175
Added AND Nodes: 245 246
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 246 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => callsites count before spliiting 207 with id = 230 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 251 currentId 230
Added AND Nodes: 250 251
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 246 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 256 currentId 246
Added AND Nodes: 255 256
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 256 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 256 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 261 currentId 256
Added AND Nodes: 260 261
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 261 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 261 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 266 currentId 261
Added AND Nodes: 265 266
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 266 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 266 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 271 currentId 266
Added AND Nodes: 270 271
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 271 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 271 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 276 currentId 271
Added AND Nodes: 275 276
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 276 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => callsites count before spliiting 201 with id = 231 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 281 currentId 231
Added AND Nodes: 280 281
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 236 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 286 currentId 236
Added AND Nodes: 285 286
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 286 from client 0 to 1
1 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
4 => callsites count before spliiting 200 with id = 220 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 291 currentId 220
Added AND Nodes: 290 291
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => Spliiting due to client waiting
8 => callsites count before spliiting 6 with id = 276 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 296 currentId 276
Added AND Nodes: 295 296
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 296 from client 8 to 11
11 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 3 with id = 296 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 301 currentId 296
Added AND Nodes: 300 301
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 301 from client 11 to 10
11 => LOOP outcome: Correct & reachbound = False
10 => after replyFromServer: 50
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 6 with id = 241 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 306 currentId 241
Added AND Nodes: 305 306
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 306 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 3 with id = 301 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 311 currentId 301
Added AND Nodes: 310 311
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 311 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 15 with id = 285 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 316 currentId 285
Added AND Nodes: 315 316
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 316 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 7 with id = 306 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 321 currentId 306
Added AND Nodes: 320 321
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 321 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 185 with id = 215 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 326 currentId 215
Added AND Nodes: 325 326
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 326 from client 6 to 4
4 => after replyFromServer: 0
6 => callsites count before spliiting 200 with id = 325 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 331 currentId 325
Added AND Nodes: 330 331
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 139 with id = 251 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 336 currentId 251
Added AND Nodes: 335 336
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 336 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 33 with id = 326 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 341 currentId 326
7 => Spliiting due to client waiting
Added AND Nodes: 340 341
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 341 from client 4 to 5
5 => after replyFromServer: 0
7 => callsites count before spliiting 177 with id = 281 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 346 currentId 281
Added AND Nodes: 345 346
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 346 from client 7 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 22 with id = 341 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 351 currentId 341
Added AND Nodes: 350 351
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 351 from client 5 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 346 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 356 currentId 346
5 => callsites count before spliiting 33 with id = 350 and splitMode 0
Added AND Nodes: 355 356
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 356 from client 4 to 7
5 => sending calltree : splitMode 0 mustReachId 361 currentId 350
7 => after replyFromServer: 0
Added AND Nodes: 360 361
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
2 => Spliiting due to client waiting
2 => callsites count before spliiting 7 with id = 316 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 366 currentId 316
Added AND Nodes: 365 366
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 366 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 21 with id = 351 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 371 currentId 351
Added AND Nodes: 370 371
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 371 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 3 with id = 356 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 376 currentId 356
Added AND Nodes: 375 376
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 376 from client 7 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 17 with id = 321 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 381 currentId 321
Added AND Nodes: 380 381
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 381 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 376 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 386 currentId 376
Added AND Nodes: 385 386
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 386 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 386 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 391 currentId 386
Added AND Nodes: 390 391
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 391 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 17 with id = 366 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 396 currentId 366
Added AND Nodes: 395 396
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 396 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 391 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 401 currentId 391
Added AND Nodes: 400 401
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 401 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 25 with id = 381 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 406 currentId 381
Added AND Nodes: 405 406
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 406 from client 10 to 11
11 => after replyFromServer: 50
10 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => LOOP outcome: Correct & reachbound = False

LOCATION - 0: 11
removing 6
removing 26
removing 56
removing 151
removing 236
removing 285
removing 316
removing 366
removing 396
removing 16
removing 36
removing 41
removing 51
removing 65
removing 96
removing 121
removing 156
removing 161
removing 166
removing 170
removing 241
removing 306
removing 321
removing 381
removing 406
Added New : 
7 : 1
Reached root of partition tree. Verfification Finished.
Reached root bestAlgo updated to 1
Verification Outcome : OK
Time Taken : 86.395459
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--dvb--dvb-usb--dvb-usb-dtt200u.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 1 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
for clientid : 2 algo id is 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
for clientid : 9 algo id is 2
0 => Spliiting due to client waiting
for clientid : 10 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
5 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 6
9 => after replyFromServer: 50
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
8 => LOOP outcome: Correct & reachbound = False
5 => outcome: Correct
Added New : 
8 : 
for clientid : 5 algo id is 1
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 36
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
1 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 41
1 => callsites count before spliiting 9 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 51 currentId 26
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
Added AND Nodes: 50 51
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 51 from client 1 to 2
4 => after replyFromServer: 0
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 56 currentId 31
Added AND Nodes: 55 56
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 56 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 46
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 5 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 36 with id = 85 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 91 currentId 85
Added AND Nodes: 90 91
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 91 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 5 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => LOOP outcome: Correct & reachbound = False

LOCATION - 0: 11
removing 6
removing 26
removing 51
removing 16
removing 31
removing 56
Added New : 
4 : 2
Reached root of partition tree. Verfification Finished.
Reached root bestAlgo updated to 1
Verification Outcome : OK
Time Taken : 8.227167
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--tty--serial--mfd.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 4 algo id is 1
for clientid : 5 algo id is 1
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
0 => Spliiting due to client waiting
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 4 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 21 currentId 6
Added AND Nodes: 20 21
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 21 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 26 currentId 11
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
Added AND Nodes: 25 26
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 26 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 26 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 26
1 => Spliiting due to client waiting
1 => callsites count before spliiting 3 with id = 21 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 41 currentId 21
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 40 41
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 41 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 36
9 => Spliiting due to client waiting
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 7
7 => after replyFromServer: 0
9 => callsites count before spliiting 4 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 31
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 46
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 1 with id = 41 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 71 currentId 41
Added AND Nodes: 70 71
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 71 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 81 currentId 51
Added AND Nodes: 80 81
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 81 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 76 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 86 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 91 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 96 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 9 with id = 95 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 101 currentId 95
Added AND Nodes: 100 101
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 101 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 96 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 96
Added AND Nodes: 105 106
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 106 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 71 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 111 currentId 71
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
Added AND Nodes: 110 111
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 111 from client 3 to 0
0 => after replyFromServer: 100
6 => Spliiting due to client waiting
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
6 => Spliiting due to client waiting
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 21 with id = 105 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 116 currentId 105
Added AND Nodes: 115 116
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 116 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 106 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 106
Added AND Nodes: 120 121
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 121 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => callsites count before spliiting 2 with id = 101 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 126 currentId 101
Added AND Nodes: 125 126
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 126 from client 7 to 4
4 => after replyFromServer: 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 81 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 131 currentId 81
Added AND Nodes: 130 131
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 131 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
6 => Spliiting due to client waiting
for clientid : 7 algo id is 1
6 => callsites count before spliiting 18 with id = 121 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 136 currentId 121
Added AND Nodes: 135 136
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 136 from client 6 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 126 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 126
Added AND Nodes: 140 141
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 141 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 141 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 146 from client 7 to 4
4 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 131 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 151 currentId 131
Added AND Nodes: 150 151
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 151 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 111 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 156 currentId 111
Added AND Nodes: 155 156
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 156 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 151 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 161 currentId 151
Added AND Nodes: 160 161
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 161 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => callsites count before spliiting 202 with id = 135 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 166 currentId 135
Added AND Nodes: 165 166
1 => Spliiting due to client waiting
1 => callsites count before spliiting 10 with id = 156 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 171 currentId 156
Added AND Nodes: 170 171
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 171 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => callsites count before spliiting 228 with id = 145 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 176 currentId 145
Added AND Nodes: 175 176
10 => Spliiting due to client waiting
10 => callsites count before spliiting 10 with id = 161 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 181 currentId 161
Added AND Nodes: 180 181
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 181 from client 10 to 11
11 => after replyFromServer: 50
4 => callsites count before spliiting 243 with id = 146 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 186 currentId 146
Added AND Nodes: 185 186
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => callsites count before spliiting 207 with id = 136 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 191 currentId 136
Added AND Nodes: 190 191
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 181 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 196 currentId 181
Added AND Nodes: 195 196
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 196 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 3 with id = 171 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 201 currentId 171
Added AND Nodes: 200 201
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 201 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 196 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 206 currentId 196
Added AND Nodes: 205 206
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 206 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 201 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 211 currentId 201
Added AND Nodes: 210 211
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 211 from client 3 to 0
0 => after replyFromServer: 100
3 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 206 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 216 currentId 206
Added AND Nodes: 215 216
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 216 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 18 with id = 215 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 221 currentId 215
Added AND Nodes: 220 221
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 221 from client 9 to 11
11 => after replyFromServer: 50
9 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 1 with id = 211 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 226 currentId 211
Added AND Nodes: 225 226
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 226 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 216 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 231 currentId 216
Added AND Nodes: 230 231
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 231 from client 10 to 8
8 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 4 with id = 210 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 236 currentId 210
Added AND Nodes: 235 236
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 236 from client 3 to 2
2 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 221 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 241 currentId 221
Added AND Nodes: 240 241
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 241 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
3 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 38 with id = 220 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 246 currentId 220
Added AND Nodes: 245 246
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 246 from client 9 to 8
8 => after replyFromServer: 50
10 => Spliiting due to client waiting
9 => Spliiting due to client waiting
10 => callsites count before spliiting 12 with id = 241 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 251 currentId 241
Added AND Nodes: 250 251
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 251 from client 10 to 11
11 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 8 with id = 235 and splitMode 100
2 => Spliiting due to client waiting
3 => sending calltree : splitMode 100 mustReachId 256 currentId 235
2 => callsites count before spliiting 2 with id = 236 and splitMode 100
Added AND Nodes: 255 256
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 256 from client 3 to 0
0 => after replyFromServer: 100
2 => sending calltree : splitMode 100 mustReachId 261 currentId 236
Added AND Nodes: 260 261
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 261 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 133 with id = 245 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 266 currentId 245
Added AND Nodes: 265 266
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 266 from client 9 to 11
11 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 163 with id = 265 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 271 currentId 265
Added AND Nodes: 270 271
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 271 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 179 with id = 250 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 276 currentId 250
Added AND Nodes: 275 276
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 276 from client 10 to 9
9 => after replyFromServer: 50
3 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 1 with id = 256 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 281 currentId 256
Added AND Nodes: 280 281
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 281 from client 0 to 2
2 => after replyFromServer: 100
6 => callsites count before spliiting 460 with id = 165 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 286 currentId 165
Added AND Nodes: 285 286
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 12 with id = 255 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 291 currentId 255
Added AND Nodes: 290 291
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 291 from client 3 to 1
1 => after replyFromServer: 100
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => callsites count before spliiting 232 with id = 275 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 296 currentId 275
Added AND Nodes: 295 296
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 296 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
0 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => callsites count before spliiting 542 with id = 185 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 301 currentId 185
Added AND Nodes: 300 301
8 => Spliiting due to client waiting
8 => callsites count before spliiting 36 with id = 271 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 306 currentId 271
Added AND Nodes: 305 306
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 306 from client 8 to 10
10 => after replyFromServer: 50
3 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => Spliiting due to client waiting
8 => callsites count before spliiting 62 with id = 305 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 311 currentId 305
Added AND Nodes: 310 311
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 311 from client 8 to 11
11 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 4 with id = 280 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 316 currentId 280
Added AND Nodes: 315 316
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 316 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
7 => callsites count before spliiting 527 with id = 175 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 321 currentId 175
Added AND Nodes: 320 321
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => Spliiting due to client waiting
1 => Spliiting due to client waiting
1 => callsites count before spliiting 3 with id = 291 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 326 currentId 291
Added AND Nodes: 325 326
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 326 from client 1 to 0
0 => after replyFromServer: 100
5 => callsites count before spliiting 462 with id = 190 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 331 currentId 190
Added AND Nodes: 330 331
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
9 => callsites count before spliiting 208 with id = 296 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 336 currentId 296
Added AND Nodes: 335 336
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 30 with id = 290 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 341 currentId 290
Added AND Nodes: 340 341
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 341 from client 3 to 1
1 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 37 with id = 340 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 346 currentId 340
Added AND Nodes: 345 346
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 346 from client 3 to 1
1 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 134 with id = 311 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 351 currentId 311
Added AND Nodes: 350 351
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 351 from client 11 to 10
10 => after replyFromServer: 50
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
2 => Spliiting due to client waiting
2 => callsites count before spliiting 14 with id = 316 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 356 currentId 316
Added AND Nodes: 355 356
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 356 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 4 with id = 346 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 361 currentId 346
Added AND Nodes: 360 361
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 361 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
3 => Spliiting due to client waiting
3 => Spliiting due to client waiting
3 => callsites count before spliiting 41 with id = 345 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 366 currentId 345
Added AND Nodes: 365 366
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 366 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 1 with id = 356 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 371 currentId 356
Added AND Nodes: 370 371
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 371 from client 0 to 3
3 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 2 with id = 366 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 376 currentId 366
Added AND Nodes: 375 376
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 376 from client 1 to 3
3 => after replyFromServer: 100
4 => callsites count before spliiting 222 with id = 301 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 381 currentId 301
Added AND Nodes: 380 381
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 147 with id = 350 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 386 currentId 350
Added AND Nodes: 385 386
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 386 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 19 with id = 351 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 391 currentId 351
Added AND Nodes: 390 391
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 391 from client 10 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => callsites count before spliiting 231 with id = 286 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 396 currentId 286
Added AND Nodes: 395 396
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 15 with id = 376 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 401 currentId 376
Added AND Nodes: 400 401
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 401 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 17 with id = 375 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 406 currentId 375
Added AND Nodes: 405 406
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 406 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 18 with id = 391 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 411 currentId 391
Added AND Nodes: 410 411
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 411 from client 11 to 8
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 12 with id = 370 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 416 currentId 370
Added AND Nodes: 415 416
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 416 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
7 => callsites count before spliiting 300 with id = 321 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 421 currentId 321
Added AND Nodes: 420 421
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 2 with id = 401 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 426 currentId 401
Added AND Nodes: 425 426
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 426 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
9 => callsites count before spliiting 296 with id = 336 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 431 currentId 336
Added AND Nodes: 430 431
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 431 from client 9 to 11
11 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 406 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 436 currentId 406
Added AND Nodes: 435 436
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 436 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 1 with id = 426 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 441 currentId 426
Added AND Nodes: 440 441
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 441 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 1 with id = 436 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 446 currentId 436
Added AND Nodes: 445 446
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 446 from client 2 to 0
0 => after replyFromServer: 100
1 => Spliiting due to client waiting
1 => callsites count before spliiting 14 with id = 416 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 451 currentId 416
Added AND Nodes: 450 451
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 451 from client 1 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 17 with id = 450 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 456 currentId 450
Added AND Nodes: 455 456
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 456 from client 1 to 0
0 => after replyFromServer: 100
9 => callsites count before spliiting 359 with id = 430 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 461 currentId 430
Added AND Nodes: 460 461
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 461 from client 9 to 8
8 => after replyFromServer: 50
4 => callsites count before spliiting 232 with id = 380 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 466 currentId 380
Added AND Nodes: 465 466
9 => callsites count before spliiting 376 with id = 460 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 471 currentId 460
Added AND Nodes: 470 471
5 => callsites count before spliiting 243 with id = 331 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 476 currentId 331
Added AND Nodes: 475 476
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 451 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 481 currentId 451
Added AND Nodes: 480 481
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 481 from client 3 to 0
0 => after replyFromServer: 100
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 471 from client 9 to 11
11 => after replyFromServer: 50
6 => callsites count before spliiting 250 with id = 395 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 486 currentId 395
Added AND Nodes: 485 486
1 => callsites count before spliiting 54 with id = 455 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 491 currentId 455
Added AND Nodes: 490 491
7 => callsites count before spliiting 287 with id = 420 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 496 currentId 420
Added AND Nodes: 495 496
10 => callsites count before spliiting 251 with id = 390 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 501 currentId 390
Added AND Nodes: 500 501
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 501 from client 10 to 11
11 => after replyFromServer: 50
9 => callsites count before spliiting 464 with id = 470 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 506 currentId 470
Added AND Nodes: 505 506
5 => callsites count before spliiting 294 with id = 475 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 511 currentId 475
Added AND Nodes: 510 511
2 => callsites count before spliiting 60 with id = 445 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 516 currentId 445
Added AND Nodes: 515 516
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 70 with id = 490 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 521 currentId 490
Added AND Nodes: 520 521
10 => callsites count before spliiting 314 with id = 500 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 526 currentId 500
Added AND Nodes: 525 526
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 526 from client 10 to 9
9 => after replyFromServer: 50
3 => callsites count before spliiting 52 with id = 480 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 531 currentId 480
Added AND Nodes: 530 531
2 => callsites count before spliiting 75 with id = 515 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 536 currentId 515
Added AND Nodes: 535 536
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 354 with id = 525 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 541 currentId 525
Added AND Nodes: 540 541
1 => callsites count before spliiting 57 with id = 520 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 546 currentId 520
Added AND Nodes: 545 546
0 => callsites count before spliiting 58 with id = 481 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 551 currentId 481
Added AND Nodes: 550 551
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => callsites count before spliiting 225 with id = 501 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 556 currentId 501
Added AND Nodes: 555 556
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 556 from client 11 to 10
10 => after replyFromServer: 50
6 => callsites count before spliiting 246 with id = 396 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 561 currentId 396
Added AND Nodes: 560 561
8 => callsites count before spliiting 255 with id = 461 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 566 currentId 461
Added AND Nodes: 565 566
4 => callsites count before spliiting 253 with id = 381 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 571 currentId 381
Added AND Nodes: 570 571
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 566 from client 8 to 11
11 => after replyFromServer: 50
3 => callsites count before spliiting 82 with id = 530 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 576 currentId 530
Added AND Nodes: 575 576
7 => callsites count before spliiting 259 with id = 421 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 581 currentId 421
Added AND Nodes: 580 581
2 => callsites count before spliiting 59 with id = 535 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 586 currentId 535
Added AND Nodes: 585 586
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 77 with id = 545 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 591 currentId 545
Added AND Nodes: 590 591
0 => callsites count before spliiting 75 with id = 550 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 596 currentId 550
Added AND Nodes: 595 596
8 => callsites count before spliiting 340 with id = 565 and splitMode 50
3 => callsites count before spliiting 52 with id = 575 and splitMode 100
8 => sending calltree : splitMode 50 mustReachId 601 currentId 565
3 => sending calltree : splitMode 100 mustReachId 606 currentId 575
Added AND Nodes: 605 606
Added AND Nodes: 600 601
6 => callsites count before spliiting 238 with id = 560 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 611 currentId 560
Added AND Nodes: 610 611
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 601 from client 8 to 11
11 => after replyFromServer: 50
2 => callsites count before spliiting 74 with id = 586 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 616 currentId 586
Added AND Nodes: 615 616
1 => callsites count before spliiting 53 with id = 590 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 621 currentId 590
Added AND Nodes: 620 621
4 => callsites count before spliiting 238 with id = 570 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 626 currentId 570
Added AND Nodes: 625 626
10 => callsites count before spliiting 249 with id = 556 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 631 currentId 556
Added AND Nodes: 630 631
8 => callsites count before spliiting 382 with id = 600 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 636 currentId 600
Added AND Nodes: 635 636
7 => callsites count before spliiting 251 with id = 580 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 641 currentId 580
Added AND Nodes: 640 641
2 => callsites count before spliiting 53 with id = 615 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 646 currentId 615
Added AND Nodes: 645 646
0 => callsites count before spliiting 50 with id = 595 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 651 currentId 595
Added AND Nodes: 650 651
0 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 272 with id = 476 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 656 currentId 476
Added AND Nodes: 655 656
9 => callsites count before spliiting 203 with id = 526 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 661 currentId 526
Added AND Nodes: 660 661
10 => callsites count before spliiting 328 with id = 630 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 666 currentId 630
Added AND Nodes: 665 666
8 => callsites count before spliiting 417 with id = 635 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 671 currentId 635
Added AND Nodes: 670 671
3 => callsites count before spliiting 55 with id = 605 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 676 currentId 605
Added AND Nodes: 675 676
3 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 242 with id = 610 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 681 currentId 610
Added AND Nodes: 680 681
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 50 with id = 620 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 686 currentId 620
Added AND Nodes: 685 686
0 => callsites count before spliiting 62 with id = 651 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 691 currentId 651
Added AND Nodes: 690 691
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 265 with id = 660 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 696 currentId 660
Added AND Nodes: 695 696
11 => callsites count before spliiting 212 with id = 601 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 701 currentId 601
Added AND Nodes: 700 701
4 => callsites count before spliiting 229 with id = 625 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 706 currentId 625
Added AND Nodes: 705 706
8 => callsites count before spliiting 474 with id = 670 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 711 currentId 670
Added AND Nodes: 710 711
6 => callsites count before spliiting 251 with id = 680 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 716 currentId 680
Added AND Nodes: 715 716
3 => callsites count before spliiting 62 with id = 676 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 721 currentId 676
Added AND Nodes: 720 721
2 => callsites count before spliiting 54 with id = 645 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 726 currentId 645
Added AND Nodes: 725 726
1 => callsites count before spliiting 53 with id = 685 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 731 currentId 685
Added AND Nodes: 730 731
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 57 with id = 690 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 736 currentId 690
Added AND Nodes: 735 736
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 50 with id = 720 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 741 currentId 720
Added AND Nodes: 740 741
2 => callsites count before spliiting 50 with id = 725 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 746 currentId 725
Added AND Nodes: 745 746
11 => callsites count before spliiting 223 with id = 700 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 751 currentId 700
Added AND Nodes: 750 751
10 => callsites count before spliiting 212 with id = 666 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 756 currentId 666
Added AND Nodes: 755 756
9 => callsites count before spliiting 340 with id = 695 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 761 currentId 695
Added AND Nodes: 760 761
5 => callsites count before spliiting 259 with id = 655 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 766 currentId 655
Added AND Nodes: 765 766
0 => callsites count before spliiting 51 with id = 735 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 771 currentId 735
Added AND Nodes: 770 771
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 56 with id = 731 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 776 currentId 731
Added AND Nodes: 775 776
10 => callsites count before spliiting 290 with id = 755 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 781 currentId 755
Added AND Nodes: 780 781
9 => callsites count before spliiting 413 with id = 760 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 786 currentId 760
Added AND Nodes: 785 786
7 => callsites count before spliiting 221 with id = 641 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 791 currentId 641
Added AND Nodes: 790 791
11 => callsites count before spliiting 234 with id = 750 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 796 currentId 750
Added AND Nodes: 795 796
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 50 with id = 746 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 801 currentId 746
Added AND Nodes: 800 801
6 => callsites count before spliiting 215 with id = 716 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 806 currentId 716
Added AND Nodes: 805 806
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
clientID of largest queue : 9
clientCalltreeQueue Count : 4
Assign partition 661 from client 9 to 8
8 => after replyFromServer: 50
9 => callsites count before spliiting 425 with id = 785 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 811 currentId 785
Added AND Nodes: 810 811
10 => callsites count before spliiting 300 with id = 780 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 816 currentId 780
Added AND Nodes: 815 816
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
clientID of largest queue : 9
clientCalltreeQueue Count : 4
Assign partition 696 from client 9 to 8
8 => after replyFromServer: 50
5 => callsites count before spliiting 279 with id = 765 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 821 currentId 765
Added AND Nodes: 820 821
11 => callsites count before spliiting 302 with id = 795 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 826 currentId 795
Added AND Nodes: 825 826
9 => callsites count before spliiting 481 with id = 810 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 831 currentId 810
Added AND Nodes: 830 831
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
4 => callsites count before spliiting 205 with id = 706 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 836 currentId 706
Added AND Nodes: 835 836
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => callsites count before spliiting 53 with id = 740 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 841 currentId 740
Added AND Nodes: 840 841
1 => callsites count before spliiting 61 with id = 775 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 846 currentId 775
Added AND Nodes: 845 846
10 => callsites count before spliiting 310 with id = 815 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 851 currentId 815
Added AND Nodes: 850 851
0 => callsites count before spliiting 52 with id = 770 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 856 currentId 770
Added AND Nodes: 855 856
1 => callsites count before spliiting 78 with id = 845 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 861 currentId 845
Added AND Nodes: 860 861
3 => callsites count before spliiting 52 with id = 840 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 866 currentId 840
Added AND Nodes: 865 866
2 => callsites count before spliiting 50 with id = 800 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 871 currentId 800
Added AND Nodes: 870 871
10 => callsites count before spliiting 380 with id = 850 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 876 currentId 850
Added AND Nodes: 875 876
5 => callsites count before spliiting 299 with id = 820 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 881 currentId 820
Added AND Nodes: 880 881
7 => callsites count before spliiting 207 with id = 790 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 886 currentId 790
Added AND Nodes: 885 886
3 => callsites count before spliiting 71 with id = 865 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 891 currentId 865
Added AND Nodes: 890 891
1 => callsites count before spliiting 113 with id = 860 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 896 currentId 860
Added AND Nodes: 895 896
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 53 with id = 855 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 901 currentId 855
Added AND Nodes: 900 901
2 => callsites count before spliiting 66 with id = 870 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 906 currentId 870
Added AND Nodes: 905 906
11 => callsites count before spliiting 380 with id = 825 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 911 currentId 825
Added AND Nodes: 910 911
10 => callsites count before spliiting 415 with id = 875 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 916 currentId 875
Added AND Nodes: 915 916
5 => callsites count before spliiting 274 with id = 880 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 921 currentId 880
Added AND Nodes: 920 921
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 202 with id = 805 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 926 currentId 805
Added AND Nodes: 925 926
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 220 with id = 696 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 931 currentId 696
Added AND Nodes: 930 931
0 => callsites count before spliiting 72 with id = 900 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 936 currentId 900
Added AND Nodes: 935 936
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 55 with id = 905 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 941 currentId 905
Added AND Nodes: 940 941
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => callsites count before spliiting 56 with id = 866 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 946 currentId 866
Added AND Nodes: 945 946
10 => callsites count before spliiting 463 with id = 915 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 951 currentId 915
Added AND Nodes: 950 951
11 => callsites count before spliiting 461 with id = 910 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 956 currentId 910
Added AND Nodes: 955 956
2 => callsites count before spliiting 90 with id = 940 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 961 currentId 940
Added AND Nodes: 960 961
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => callsites count before spliiting 56 with id = 901 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 966 currentId 901
Added AND Nodes: 965 966
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 204 with id = 921 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 971 currentId 921
Added AND Nodes: 970 971
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => callsites count before spliiting 467 with id = 955 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 976 currentId 955
Added AND Nodes: 975 976
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 53 with id = 861 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 981 currentId 861
Added AND Nodes: 980 981
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 508 with id = 975 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 986 currentId 975
Added AND Nodes: 985 986
10 => callsites count before spliiting 229 with id = 876 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 991 currentId 876
Added AND Nodes: 990 991
3 => callsites count before spliiting 60 with id = 945 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 996 currentId 945
Added AND Nodes: 995 996
1 => callsites count before spliiting 52 with id = 980 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1001 currentId 980
Added AND Nodes: 1000 1001
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 305 with id = 836 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1006 currentId 836
Added AND Nodes: 1005 1006
3 => callsites count before spliiting 57 with id = 995 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1011 currentId 995
Added AND Nodes: 1010 1011
10 => callsites count before spliiting 239 with id = 990 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1016 currentId 990
Added AND Nodes: 1015 1016
2 => callsites count before spliiting 53 with id = 941 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1021 currentId 941
11 => callsites count before spliiting 542 with id = 985 and splitMode 50
Added AND Nodes: 1020 1021
11 => sending calltree : splitMode 50 mustReachId 1026 currentId 985
Added AND Nodes: 1025 1026
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => callsites count before spliiting 58 with id = 1000 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1031 currentId 1000
Added AND Nodes: 1030 1031
2 => callsites count before spliiting 67 with id = 1020 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1036 currentId 1020
Added AND Nodes: 1035 1036
4 => callsites count before spliiting 215 with id = 1005 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1041 currentId 1005
Added AND Nodes: 1040 1041
0 => callsites count before spliiting 62 with id = 965 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1046 currentId 965
Added AND Nodes: 1045 1046
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 200 with id = 885 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1051 currentId 885
Added AND Nodes: 1050 1051
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => callsites count before spliiting 319 with id = 1015 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1056 currentId 1015
Added AND Nodes: 1055 1056
11 => callsites count before spliiting 565 with id = 1025 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1061 currentId 1025
Added AND Nodes: 1060 1061
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 77 with id = 1030 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1066 currentId 1030
Added AND Nodes: 1065 1066
9 => callsites count before spliiting 265 with id = 811 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1071 currentId 811
Added AND Nodes: 1070 1071
0 => callsites count before spliiting 60 with id = 1045 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1076 currentId 1045
Added AND Nodes: 1075 1076
10 => callsites count before spliiting 392 with id = 1055 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1081 currentId 1055
Added AND Nodes: 1080 1081
3 => callsites count before spliiting 50 with id = 1010 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1086 currentId 1010
Added AND Nodes: 1085 1086
1 => callsites count before spliiting 99 with id = 1065 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1091 currentId 1065
Added AND Nodes: 1090 1091
11 => callsites count before spliiting 576 with id = 1060 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1096 currentId 1060
Added AND Nodes: 1095 1096
9 => callsites count before spliiting 348 with id = 1070 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1101 currentId 1070
Added AND Nodes: 1100 1101
8 => callsites count before spliiting 213 with id = 931 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1106 currentId 931
Added AND Nodes: 1105 1106
3 => callsites count before spliiting 53 with id = 1085 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1111 currentId 1085
Added AND Nodes: 1110 1111
1 => callsites count before spliiting 116 with id = 1090 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1116 currentId 1090
Added AND Nodes: 1115 1116
10 => callsites count before spliiting 401 with id = 1080 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1121 currentId 1080
Added AND Nodes: 1120 1121
1 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 209 with id = 681 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1126 currentId 681
Added AND Nodes: 1125 1126
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 608 with id = 1095 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1131 currentId 1095
Added AND Nodes: 1130 1131
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 56 with id = 1035 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1136 currentId 1035
Added AND Nodes: 1135 1136
3 => callsites count before spliiting 57 with id = 1110 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1141 currentId 1110
Added AND Nodes: 1140 1141
0 => callsites count before spliiting 50 with id = 1075 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1146 currentId 1075
Added AND Nodes: 1145 1146
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 204 with id = 881 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1151 currentId 881
Added AND Nodes: 1150 1151
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 619 with id = 1130 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1156 currentId 1130
Added AND Nodes: 1155 1156
9 => callsites count before spliiting 358 with id = 1100 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1161 currentId 1100
Added AND Nodes: 1160 1161
10 => callsites count before spliiting 445 with id = 1120 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1166 currentId 1120
8 => callsites count before spliiting 288 with id = 1105 and splitMode 50
Added AND Nodes: 1165 1166
8 => sending calltree : splitMode 50 mustReachId 1171 currentId 1105
Added AND Nodes: 1170 1171
2 => callsites count before spliiting 64 with id = 1135 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1176 currentId 1135
Added AND Nodes: 1175 1176
0 => callsites count before spliiting 53 with id = 1145 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1181 currentId 1145
Added AND Nodes: 1180 1181
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 207 with id = 1040 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1186 currentId 1040
Added AND Nodes: 1185 1186
10 => callsites count before spliiting 524 with id = 1165 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1191 currentId 1165
Added AND Nodes: 1190 1191
2 => callsites count before spliiting 85 with id = 1175 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1196 currentId 1175
Added AND Nodes: 1195 1196
0 => callsites count before spliiting 57 with id = 1180 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1201 currentId 1180
Added AND Nodes: 1200 1201
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 357 with id = 1170 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1206 currentId 1170
Added AND Nodes: 1205 1206
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 627 with id = 1155 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1211 currentId 1155
Added AND Nodes: 1210 1211
9 => callsites count before spliiting 423 with id = 1160 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1216 currentId 1160
Added AND Nodes: 1215 1216
2 => callsites count before spliiting 95 with id = 1195 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1221 currentId 1195
Added AND Nodes: 1220 1221
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => callsites count before spliiting 549 with id = 1190 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1226 currentId 1190
Added AND Nodes: 1225 1226
1 => callsites count before spliiting 53 with id = 1031 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1231 currentId 1031
Added AND Nodes: 1230 1231
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 431 with id = 1205 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1236 currentId 1205
Added AND Nodes: 1235 1236
2 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 61 with id = 1086 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1241 currentId 1086
Added AND Nodes: 1240 1241
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 67 with id = 1230 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1246 currentId 1230
Added AND Nodes: 1245 1246
4 => callsites count before spliiting 212 with id = 1185 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1251 currentId 1185
Added AND Nodes: 1250 1251
6 => callsites count before spliiting 204 with id = 1126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1256 currentId 1126
Added AND Nodes: 1255 1256
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => callsites count before spliiting 570 with id = 1225 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1261 currentId 1225
Added AND Nodes: 1260 1261
3 => callsites count before spliiting 63 with id = 1240 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1266 currentId 1240
Added AND Nodes: 1265 1266
9 => callsites count before spliiting 493 with id = 1215 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1271 currentId 1215
Added AND Nodes: 1270 1271
2 => callsites count before spliiting 56 with id = 1136 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1276 currentId 1136
Added AND Nodes: 1275 1276
7 => callsites count before spliiting 297 with id = 886 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1281 currentId 886
Added AND Nodes: 1280 1281
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => callsites count before spliiting 628 with id = 1260 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1286 currentId 1260
Added AND Nodes: 1285 1286
5 => callsites count before spliiting 304 with id = 1151 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1291 currentId 1151
Added AND Nodes: 1290 1291
0 => callsites count before spliiting 56 with id = 1146 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1296 currentId 1146
Added AND Nodes: 1295 1296
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 496 with id = 1270 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1301 currentId 1270
Added AND Nodes: 1300 1301
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 58 with id = 1275 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1306 currentId 1275
Added AND Nodes: 1305 1306
8 => callsites count before spliiting 202 with id = 1236 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1311 currentId 1236
Added AND Nodes: 1310 1311
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => callsites count before spliiting 204 with id = 1280 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1316 currentId 1280
Added AND Nodes: 1315 1316
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
5 => callsites count before spliiting 216 with id = 1290 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1321 currentId 1290
Added AND Nodes: 1320 1321
0 => callsites count before spliiting 53 with id = 1295 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1326 currentId 1295
Added AND Nodes: 1325 1326
9 => callsites count before spliiting 527 with id = 1300 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1331 currentId 1300
Added AND Nodes: 1330 1331
1 => callsites count before spliiting 53 with id = 1245 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1336 currentId 1245
Added AND Nodes: 1335 1336
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 284 with id = 1310 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1341 currentId 1310
Added AND Nodes: 1340 1341
1 => callsites count before spliiting 62 with id = 1335 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1346 currentId 1335
Added AND Nodes: 1345 1346
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
6 => callsites count before spliiting 301 with id = 1255 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1351 currentId 1255
Added AND Nodes: 1350 1351
3 => callsites count before spliiting 53 with id = 1265 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1356 currentId 1265
Added AND Nodes: 1355 1356
4 => callsites count before spliiting 214 with id = 1250 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1361 currentId 1250
Added AND Nodes: 1360 1361
1 => callsites count before spliiting 69 with id = 1345 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1366 currentId 1345
Added AND Nodes: 1365 1366
7 => callsites count before spliiting 206 with id = 1315 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1371 currentId 1315
Added AND Nodes: 1370 1371
5 => callsites count before spliiting 205 with id = 1320 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1376 currentId 1320
Added AND Nodes: 1375 1376
8 => callsites count before spliiting 294 with id = 1340 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1381 currentId 1340
Added AND Nodes: 1380 1381
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 61 with id = 1355 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1386 currentId 1355
Added AND Nodes: 1385 1386
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => callsites count before spliiting 50 with id = 1305 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1391 currentId 1305
Added AND Nodes: 1390 1391
6 => callsites count before spliiting 218 with id = 1350 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1396 currentId 1350
Added AND Nodes: 1395 1396
1 => callsites count before spliiting 96 with id = 1365 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1401 currentId 1365
Added AND Nodes: 1400 1401
3 => callsites count before spliiting 60 with id = 1385 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1406 currentId 1385
Added AND Nodes: 1405 1406
2 => callsites count before spliiting 69 with id = 1390 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1411 currentId 1390
Added AND Nodes: 1410 1411
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 304 with id = 1380 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1416 currentId 1380
Added AND Nodes: 1415 1416
1 => callsites count before spliiting 106 with id = 1400 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1421 currentId 1400
Added AND Nodes: 1420 1421
0 => callsites count before spliiting 50 with id = 1325 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1426 currentId 1325
Added AND Nodes: 1425 1426
3 => callsites count before spliiting 54 with id = 1405 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1431 currentId 1405
Added AND Nodes: 1430 1431
2 => callsites count before spliiting 63 with id = 1410 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1436 currentId 1410
Added AND Nodes: 1435 1436
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 212 with id = 1395 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1441 currentId 1395
Added AND Nodes: 1440 1441
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 312 with id = 1415 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1446 currentId 1415
Added AND Nodes: 1445 1446
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 58 with id = 1425 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1451 currentId 1425
Added AND Nodes: 1450 1451
11 => callsites count before spliiting 214 with id = 956 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1456 currentId 956
Added AND Nodes: 1455 1456
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 53 with id = 1435 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1461 currentId 1435
Added AND Nodes: 1460 1461
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 214 with id = 1370 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1466 currentId 1370
Added AND Nodes: 1465 1466
5 => callsites count before spliiting 213 with id = 1375 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1471 currentId 1375
Added AND Nodes: 1470 1471
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => callsites count before spliiting 57 with id = 1450 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1476 currentId 1450
Added AND Nodes: 1475 1476
8 => callsites count before spliiting 390 with id = 1445 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1481 currentId 1445
10 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 1480 1481
Added New : 
10 : 
2 => callsites count before spliiting 57 with id = 1460 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1486 currentId 1460
Added AND Nodes: 1485 1486
1 => callsites count before spliiting 58 with id = 1346 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1491 currentId 1346
Added AND Nodes: 1490 1491
11 => callsites count before spliiting 305 with id = 1455 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1496 currentId 1455
Added AND Nodes: 1495 1496
0 => callsites count before spliiting 65 with id = 1475 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1501 currentId 1475
Added AND Nodes: 1500 1501
2 => callsites count before spliiting 71 with id = 1485 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1506 currentId 1485
Added AND Nodes: 1505 1506
3 => callsites count before spliiting 56 with id = 1356 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1511 currentId 1356
Added AND Nodes: 1510 1511
8 => callsites count before spliiting 406 with id = 1480 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1516 currentId 1480
Added AND Nodes: 1515 1516
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 418 with id = 1515 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1521 currentId 1515
Added AND Nodes: 1520 1521
3 => callsites count before spliiting 58 with id = 1510 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1526 currentId 1510
Added AND Nodes: 1525 1526
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 51 with id = 1336 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1531 currentId 1336
Added AND Nodes: 1530 1531
11 => callsites count before spliiting 315 with id = 1495 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1536 currentId 1495
Added AND Nodes: 1535 1536
8 => callsites count before spliiting 442 with id = 1520 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1541 currentId 1520
Added AND Nodes: 1540 1541
2 => callsites count before spliiting 54 with id = 1411 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1546 currentId 1411
Added AND Nodes: 1545 1546
1 => callsites count before spliiting 53 with id = 1530 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1551 currentId 1530
Added AND Nodes: 1550 1551
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 200 with id = 1465 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1556 currentId 1465
Added AND Nodes: 1555 1556
8 => callsites count before spliiting 460 with id = 1540 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1561 currentId 1540
Added AND Nodes: 1560 1561
9 => callsites count before spliiting 268 with id = 1301 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1566 currentId 1301
Added AND Nodes: 1565 1566
11 => callsites count before spliiting 405 with id = 1535 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1571 currentId 1535
Added AND Nodes: 1570 1571
5 => callsites count before spliiting 201 with id = 1470 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1576 currentId 1470
Added AND Nodes: 1575 1576
0 => callsites count before spliiting 59 with id = 1426 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1581 currentId 1426
Added AND Nodes: 1580 1581
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 57 with id = 1391 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1586 currentId 1391
Added AND Nodes: 1585 1586
0 => callsites count before spliiting 61 with id = 1580 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1591 currentId 1580
Added AND Nodes: 1590 1591
11 => callsites count before spliiting 484 with id = 1570 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1596 currentId 1570
Added AND Nodes: 1595 1596
2 => callsites count before spliiting 53 with id = 1585 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1601 currentId 1585
Added AND Nodes: 1600 1601
9 => callsites count before spliiting 339 with id = 1565 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1606 currentId 1565
Added AND Nodes: 1605 1606
11 => callsites count before spliiting 523 with id = 1595 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1611 currentId 1595
Added AND Nodes: 1610 1611
1 => callsites count before spliiting 53 with id = 1550 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1616 currentId 1550
Added AND Nodes: 1615 1616
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 532 with id = 1610 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1621 currentId 1610
Added AND Nodes: 1620 1621
1 => callsites count before spliiting 66 with id = 1615 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1626 currentId 1615
Added AND Nodes: 1625 1626
3 => callsites count before spliiting 56 with id = 1525 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1631 currentId 1525
Added AND Nodes: 1630 1631
10 => callsites count before spliiting 242 with id = 1121 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1636 currentId 1121
Added AND Nodes: 1635 1636
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => callsites count before spliiting 50 with id = 1630 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1641 currentId 1630
Added AND Nodes: 1640 1641
1 => callsites count before spliiting 78 with id = 1625 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1646 currentId 1625
Added AND Nodes: 1645 1646
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 349 with id = 1605 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1651 currentId 1605
Added AND Nodes: 1650 1651
11 => callsites count before spliiting 563 with id = 1620 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1656 currentId 1620
Added AND Nodes: 1655 1656
10 => callsites count before spliiting 331 with id = 1635 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1661 currentId 1635
Added AND Nodes: 1660 1661
2 => callsites count before spliiting 50 with id = 1600 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1666 currentId 1600
Added AND Nodes: 1665 1666
1 => callsites count before spliiting 90 with id = 1645 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1671 currentId 1645
Added AND Nodes: 1670 1671
3 => callsites count before spliiting 56 with id = 1640 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1676 currentId 1640
Added AND Nodes: 1675 1676
6 => callsites count before spliiting 201 with id = 1441 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1681 currentId 1441
Added AND Nodes: 1680 1681
2 => callsites count before spliiting 58 with id = 1665 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1686 currentId 1665
Added AND Nodes: 1685 1686
1 => callsites count before spliiting 83 with id = 1670 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1691 currentId 1670
Added AND Nodes: 1690 1691
11 => callsites count before spliiting 606 with id = 1655 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1696 currentId 1655
Added AND Nodes: 1695 1696
10 => callsites count before spliiting 343 with id = 1660 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1701 currentId 1660
Added AND Nodes: 1700 1701
3 => callsites count before spliiting 57 with id = 1675 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1706 currentId 1675
Added AND Nodes: 1705 1706
4 => callsites count before spliiting 201 with id = 1251 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1711 currentId 1251
Added AND Nodes: 1710 1711
0 => callsites count before spliiting 51 with id = 1590 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1716 currentId 1590
Added AND Nodes: 1715 1716
1 => callsites count before spliiting 82 with id = 1690 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1721 currentId 1690
Added AND Nodes: 1720 1721
2 => callsites count before spliiting 63 with id = 1685 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1726 currentId 1685
Added AND Nodes: 1725 1726
3 => callsites count before spliiting 63 with id = 1705 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1731 currentId 1705
Added AND Nodes: 1730 1731
11 => callsites count before spliiting 638 with id = 1695 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1736 currentId 1695
Added AND Nodes: 1735 1736
1 => callsites count before spliiting 75 with id = 1720 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1741 currentId 1720
Added AND Nodes: 1740 1741
2 => callsites count before spliiting 69 with id = 1725 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1746 currentId 1725
Added AND Nodes: 1745 1746
0 => callsites count before spliiting 59 with id = 1715 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1751 currentId 1715
Added AND Nodes: 1750 1751
3 => callsites count before spliiting 51 with id = 1730 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1756 currentId 1730
Added AND Nodes: 1755 1756
3 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 360 with id = 1650 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1761 currentId 1650
Added AND Nodes: 1760 1761
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 69 with id = 1740 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1766 currentId 1740
Added AND Nodes: 1765 1766
11 => callsites count before spliiting 655 with id = 1735 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1771 currentId 1735
Added AND Nodes: 1770 1771
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 51 with id = 1750 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1776 currentId 1750
Added AND Nodes: 1775 1776
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 58 with id = 1745 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1781 currentId 1745
Added AND Nodes: 1780 1781
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 670 with id = 1770 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1786 currentId 1770
Added AND Nodes: 1785 1786
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 52 with id = 1780 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1791 currentId 1780
Added AND Nodes: 1790 1791
11 => callsites count before spliiting 694 with id = 1785 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1796 currentId 1785
Added AND Nodes: 1795 1796
0 => callsites count before spliiting 52 with id = 1775 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1801 currentId 1775
Added AND Nodes: 1800 1801
3 => callsites count before spliiting 53 with id = 1676 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1806 currentId 1676
Added AND Nodes: 1805 1806
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 355 with id = 1700 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1811 currentId 1700
Added AND Nodes: 1810 1811
6 => callsites count before spliiting 202 with id = 1680 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1816 currentId 1680
Added AND Nodes: 1815 1816
2 => callsites count before spliiting 60 with id = 1790 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1821 currentId 1790
Added AND Nodes: 1820 1821
1 => callsites count before spliiting 62 with id = 1691 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1826 currentId 1691
Added AND Nodes: 1825 1826
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => callsites count before spliiting 58 with id = 1800 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1831 currentId 1800
Added AND Nodes: 1830 1831
11 => callsites count before spliiting 714 with id = 1795 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1836 currentId 1795
Added AND Nodes: 1835 1836
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 50 with id = 1641 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1841 currentId 1641
Added AND Nodes: 1840 1841
9 => callsites count before spliiting 425 with id = 1760 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1846 currentId 1760
Added AND Nodes: 1845 1846
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 57 with id = 1825 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1851 currentId 1825
Added AND Nodes: 1850 1851
2 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 733 with id = 1835 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1856 currentId 1835
Added AND Nodes: 1855 1856
3 => callsites count before spliiting 54 with id = 1840 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1861 currentId 1840
Added AND Nodes: 1860 1861
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 213 with id = 1481 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1866 currentId 1481
Added AND Nodes: 1865 1866
0 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 365 with id = 1810 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1871 currentId 1810
Added AND Nodes: 1870 1871
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 749 with id = 1855 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1876 currentId 1855
Added AND Nodes: 1875 1876
9 => callsites count before spliiting 428 with id = 1845 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1881 currentId 1845
Added AND Nodes: 1880 1881
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 227 with id = 1865 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1886 currentId 1865
Added AND Nodes: 1885 1886
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 379 with id = 1870 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1891 currentId 1870
Added AND Nodes: 1890 1891
2 => callsites count before spliiting 58 with id = 1726 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1896 currentId 1726
Added AND Nodes: 1895 1896
9 => callsites count before spliiting 452 with id = 1880 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1901 currentId 1880
Added AND Nodes: 1900 1901
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 58 with id = 1631 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1906 currentId 1631
Added AND Nodes: 1905 1906
0 => callsites count before spliiting 57 with id = 1751 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1911 currentId 1751
Added AND Nodes: 1910 1911
11 => callsites count before spliiting 755 with id = 1875 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1916 currentId 1875
Added AND Nodes: 1915 1916
2 => callsites count before spliiting 54 with id = 1895 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1921 currentId 1895
Added AND Nodes: 1920 1921
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 237 with id = 1885 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1926 currentId 1885
Added AND Nodes: 1925 1926
9 => callsites count before spliiting 479 with id = 1900 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1931 currentId 1900
Added AND Nodes: 1930 1931
10 => callsites count before spliiting 448 with id = 1890 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1936 currentId 1890
Added AND Nodes: 1935 1936
1 => callsites count before spliiting 63 with id = 1626 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1941 currentId 1626
Added AND Nodes: 1940 1941
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 51 with id = 1905 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1946 currentId 1905
Added AND Nodes: 1945 1946
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 72 with id = 1940 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1951 currentId 1940
Added AND Nodes: 1950 1951
8 => callsites count before spliiting 248 with id = 1925 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1956 currentId 1925
Added AND Nodes: 1955 1956
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 58 with id = 1686 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1961 currentId 1686
Added AND Nodes: 1960 1961
10 => callsites count before spliiting 529 with id = 1935 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1966 currentId 1935
Added AND Nodes: 1965 1966
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => callsites count before spliiting 210 with id = 1371 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1971 currentId 1371
Added AND Nodes: 1970 1971
4 => callsites count before spliiting 215 with id = 1006 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1976 currentId 1006
Added AND Nodes: 1975 1976
1 => callsites count before spliiting 61 with id = 1950 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1981 currentId 1950
Added AND Nodes: 1980 1981
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 50 with id = 1960 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1986 currentId 1960
Added AND Nodes: 1985 1986
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => LOOP outcome: Correct & reachbound = False
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => callsites count before spliiting 654 with id = 1965 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1991 currentId 1965
Added AND Nodes: 1990 1991
5 => callsites count before spliiting 205 with id = 1576 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1996 currentId 1576
Added AND Nodes: 1995 1996
8 => callsites count before spliiting 325 with id = 1955 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2001 currentId 1955
Added AND Nodes: 2000 2001
1 => callsites count before spliiting 59 with id = 1941 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2006 currentId 1941
Added AND Nodes: 2005 2006
0 => callsites count before spliiting 56 with id = 1716 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2011 currentId 1716
Added AND Nodes: 2010 2011
2 => callsites count before spliiting 53 with id = 1985 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2016 currentId 1985
Added AND Nodes: 2015 2016
10 => callsites count before spliiting 678 with id = 1990 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2021 currentId 1990
Added AND Nodes: 2020 2021
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 397 with id = 2000 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2026 currentId 2000
Added AND Nodes: 2025 2026
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 2015 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2031 currentId 2015
Added AND Nodes: 2030 2031
10 => callsites count before spliiting 689 with id = 2020 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2036 currentId 2020
Added AND Nodes: 2035 2036
0 => callsites count before spliiting 58 with id = 2010 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2041 currentId 2010
Added AND Nodes: 2040 2041
6 => callsites count before spliiting 215 with id = 1396 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2046 currentId 1396
Added AND Nodes: 2045 2046
4 => callsites count before spliiting 244 with id = 1975 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2051 currentId 1975
Added AND Nodes: 2050 2051
7 => callsites count before spliiting 200 with id = 1970 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2056 currentId 1970
Added AND Nodes: 2055 2056
8 => callsites count before spliiting 400 with id = 2025 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2061 currentId 2025
Added AND Nodes: 2060 2061
2 => callsites count before spliiting 54 with id = 2030 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2066 currentId 2030
Added AND Nodes: 2065 2066
10 => callsites count before spliiting 727 with id = 2035 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2071 currentId 2035
Added AND Nodes: 2070 2071
1 => callsites count before spliiting 55 with id = 1616 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2076 currentId 1616
Added AND Nodes: 2075 2076
2 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 213 with id = 1881 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2081 currentId 1881
Added AND Nodes: 2080 2081
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 763 with id = 2070 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2086 currentId 2070
Added AND Nodes: 2085 2086
8 => callsites count before spliiting 403 with id = 2060 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2091 currentId 2060
Added AND Nodes: 2090 2091
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 52 with id = 2075 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2096 currentId 2075
Added AND Nodes: 2095 2096
2 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 475 with id = 2090 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2101 currentId 2090
Added AND Nodes: 2100 2101
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 200 with id = 2045 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2106 currentId 2045
Added AND Nodes: 2105 2106
3 => callsites count before spliiting 52 with id = 1945 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2111 currentId 1945
Added AND Nodes: 2110 2111
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 296 with id = 2080 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2116 currentId 2080
Added AND Nodes: 2115 2116
2 => callsites count before spliiting 57 with id = 1961 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2121 currentId 1961
Added AND Nodes: 2120 2121
8 => callsites count before spliiting 487 with id = 2100 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2126 currentId 2100
Added AND Nodes: 2125 2126
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => callsites count before spliiting 60 with id = 2110 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2131 currentId 2110
Added AND Nodes: 2130 2131
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 52 with id = 2130 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2136 currentId 2130
Added AND Nodes: 2135 2136
8 => callsites count before spliiting 499 with id = 2125 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2141 currentId 2125
Added AND Nodes: 2140 2141
4 => callsites count before spliiting 267 with id = 2050 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2146 currentId 2050
Added AND Nodes: 2145 2146
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 510 with id = 2140 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2151 currentId 2140
Added AND Nodes: 2150 2151
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 373 with id = 2115 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2156 currentId 2115
Added AND Nodes: 2155 2156
5 => callsites count before spliiting 201 with id = 1471 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2161 currentId 1471
Added AND Nodes: 2160 2161
3 => callsites count before spliiting 55 with id = 2135 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2166 currentId 2135
Added AND Nodes: 2165 2166
2 => callsites count before spliiting 55 with id = 1666 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2171 currentId 1666
Added AND Nodes: 2170 2171
1 => callsites count before spliiting 51 with id = 2095 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2176 currentId 2095
Added AND Nodes: 2175 2176
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => callsites count before spliiting 59 with id = 2165 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2181 currentId 2165
Added AND Nodes: 2180 2181
1 => callsites count before spliiting 59 with id = 2175 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2186 currentId 2175
Added AND Nodes: 2185 2186
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 52 with id = 2170 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2191 currentId 2170
Added AND Nodes: 2190 2191
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => callsites count before spliiting 62 with id = 2180 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2196 currentId 2180
Added AND Nodes: 2195 2196
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 66 with id = 2185 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2201 currentId 2185
Added AND Nodes: 2200 2201
0 => callsites count before spliiting 55 with id = 2040 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2206 currentId 2040
Added AND Nodes: 2205 2206
3 => callsites count before spliiting 55 with id = 2195 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2211 currentId 2195
Added AND Nodes: 2210 2211
9 => callsites count before spliiting 383 with id = 2155 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2216 currentId 2155
Added AND Nodes: 2215 2216
1 => callsites count before spliiting 74 with id = 2200 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2221 currentId 2200
Added AND Nodes: 2220 2221
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 226 with id = 2145 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2226 currentId 2145
Added AND Nodes: 2225 2226
0 => callsites count before spliiting 63 with id = 2205 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2231 currentId 2205
Added AND Nodes: 2230 2231
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 64 with id = 2220 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2236 currentId 2220
Added AND Nodes: 2235 2236
3 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 55 with id = 2230 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2241 currentId 2230
Added AND Nodes: 2240 2241
9 => callsites count before spliiting 392 with id = 2215 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2246 currentId 2215
Added AND Nodes: 2245 2246
1 => callsites count before spliiting 62 with id = 2235 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2251 currentId 2235
Added AND Nodes: 2250 2251
3 => callsites count before spliiting 58 with id = 2166 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2256 currentId 2166
Added AND Nodes: 2255 2256
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 72 with id = 2250 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2261 currentId 2250
Added AND Nodes: 2260 2261
0 => callsites count before spliiting 58 with id = 2240 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2266 currentId 2240
Added AND Nodes: 2265 2266
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 51 with id = 2260 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2271 currentId 2260
Added AND Nodes: 2270 2271
0 => callsites count before spliiting 51 with id = 2265 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2276 currentId 2265
Added AND Nodes: 2275 2276
2 => callsites count before spliiting 52 with id = 2190 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2281 currentId 2190
Added AND Nodes: 2280 2281
1 => callsites count before spliiting 50 with id = 2270 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2286 currentId 2270
Added AND Nodes: 2285 2286
7 => callsites count before spliiting 210 with id = 1281 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2291 currentId 1281
Added AND Nodes: 2290 2291
3 => callsites count before spliiting 55 with id = 2136 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2296 currentId 2136
Added AND Nodes: 2295 2296
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 60 with id = 2280 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2301 currentId 2280
Added AND Nodes: 2300 2301
0 => callsites count before spliiting 50 with id = 2275 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2306 currentId 2275
Added AND Nodes: 2305 2306
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 59 with id = 2295 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2311 currentId 2295
Added AND Nodes: 2310 2311
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 400 with id = 2245 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2316 currentId 2245
Added AND Nodes: 2315 2316
2 => callsites count before spliiting 52 with id = 2300 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2321 currentId 2300
Added AND Nodes: 2320 2321
3 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 58 with id = 2305 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2326 currentId 2305
Added AND Nodes: 2325 2326
1 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 55 with id = 2320 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2331 currentId 2320
Added AND Nodes: 2330 2331
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 58 with id = 2131 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2336 currentId 2131
Added AND Nodes: 2335 2336
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 50 with id = 2335 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2341 currentId 2335
Added AND Nodes: 2340 2341
2 => callsites count before spliiting 59 with id = 2330 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2346 currentId 2330
Added AND Nodes: 2345 2346
0 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 232 with id = 2225 and splitMode 0
1 => LOOP outcome: Correct & reachbound = False
4 => sending calltree : splitMode 0 mustReachId 2351 currentId 2225
Added AND Nodes: 2350 2351
5 => callsites count before spliiting 210 with id = 1376 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2356 currentId 1376
Added AND Nodes: 2355 2356
9 => callsites count before spliiting 480 with id = 2315 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2361 currentId 2315
Added AND Nodes: 2360 2361
0 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 220 with id = 2290 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2366 currentId 2290
Added AND Nodes: 2365 2366
3 => callsites count before spliiting 51 with id = 2340 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2371 currentId 2340
Added AND Nodes: 2370 2371
2 => callsites count before spliiting 53 with id = 2345 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2376 currentId 2345
Added AND Nodes: 2375 2376
1 => callsites count before spliiting 64 with id = 2236 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2381 currentId 2236
Added AND Nodes: 2380 2381
9 => callsites count before spliiting 516 with id = 2360 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2386 currentId 2360
Added AND Nodes: 2385 2386
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 55 with id = 2241 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2391 currentId 2241
Added AND Nodes: 2390 2391
3 => callsites count before spliiting 57 with id = 2370 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2396 currentId 2370
Added AND Nodes: 2395 2396
2 => callsites count before spliiting 59 with id = 2375 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2401 currentId 2375
Added AND Nodes: 2400 2401
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 59 with id = 2390 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2406 currentId 2390
Added AND Nodes: 2405 2406
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 57 with id = 2221 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2411 currentId 2221
Added AND Nodes: 2410 2411
0 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 66 with id = 2400 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2416 currentId 2400
Added AND Nodes: 2415 2416
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 276 with id = 1991 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2421 currentId 1991
Added AND Nodes: 2420 2421
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 58 with id = 2231 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2426 currentId 2231
Added AND Nodes: 2425 2426
2 => callsites count before spliiting 63 with id = 2415 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2431 currentId 2415
Added AND Nodes: 2430 2431
9 => callsites count before spliiting 530 with id = 2385 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2436 currentId 2385
Added AND Nodes: 2435 2436
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 63 with id = 2201 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2441 currentId 2201
Added AND Nodes: 2440 2441
7 => callsites count before spliiting 222 with id = 2365 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2446 currentId 2365
Added AND Nodes: 2445 2446
0 => callsites count before spliiting 50 with id = 2425 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2451 currentId 2425
Added AND Nodes: 2450 2451
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 57 with id = 2336 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2456 currentId 2336
Added AND Nodes: 2455 2456
1 => callsites count before spliiting 51 with id = 2440 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2461 currentId 2440
Added AND Nodes: 2460 2461
9 => callsites count before spliiting 542 with id = 2435 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2466 currentId 2435
Added AND Nodes: 2465 2466
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 51 with id = 2450 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2471 currentId 2450
Added AND Nodes: 2470 2471
2 => callsites count before spliiting 58 with id = 2416 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2476 currentId 2416
Added AND Nodes: 2475 2476
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 284 with id = 1596 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2481 currentId 1596
Added AND Nodes: 2480 2481
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 552 with id = 2465 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2486 currentId 2465
Added AND Nodes: 2485 2486
1 => callsites count before spliiting 54 with id = 2186 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2491 currentId 2186
Added AND Nodes: 2490 2491
5 => callsites count before spliiting 200 with id = 2355 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2496 currentId 2355
Added AND Nodes: 2495 2496
2 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 57 with id = 2470 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2501 currentId 2470
Added AND Nodes: 2500 2501
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 228 with id = 1351 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2506 currentId 1351
Added AND Nodes: 2505 2506
8 => callsites count before spliiting 262 with id = 2101 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2511 currentId 2101
Added AND Nodes: 2510 2511
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 50 with id = 2490 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2516 currentId 2490
Added AND Nodes: 2515 2516
9 => callsites count before spliiting 563 with id = 2485 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2521 currentId 2485
Added AND Nodes: 2520 2521
2 => callsites count before spliiting 53 with id = 2331 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2526 currentId 2331
Added AND Nodes: 2525 2526
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 58 with id = 2515 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2531 currentId 2515
Added AND Nodes: 2530 2531
11 => callsites count before spliiting 294 with id = 2480 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2536 currentId 2480
Added AND Nodes: 2535 2536
0 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 219 with id = 2350 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2541 currentId 2350
Added AND Nodes: 2540 2541
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 281 with id = 2420 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2546 currentId 2420
Added AND Nodes: 2545 2546
7 => callsites count before spliiting 233 with id = 2445 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2551 currentId 2445
Added AND Nodes: 2550 2551
3 => callsites count before spliiting 55 with id = 2111 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2556 currentId 2111
Added AND Nodes: 2555 2556
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 304 with id = 2535 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2561 currentId 2535
Added AND Nodes: 2560 2561
0 => callsites count before spliiting 57 with id = 2426 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2566 currentId 2426
Added AND Nodes: 2565 2566
1 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 577 with id = 2520 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2571 currentId 2520
Added AND Nodes: 2570 2571
2 => callsites count before spliiting 55 with id = 2321 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2576 currentId 2321
Added AND Nodes: 2575 2576
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 275 with id = 2510 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2581 currentId 2510
Added AND Nodes: 2580 2581
11 => callsites count before spliiting 400 with id = 2560 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2586 currentId 2560
Added AND Nodes: 2585 2586
2 => callsites count before spliiting 59 with id = 2575 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2591 currentId 2575
Added AND Nodes: 2590 2591
1 => callsites count before spliiting 60 with id = 2176 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2596 currentId 2176
Added AND Nodes: 2595 2596
6 => callsites count before spliiting 270 with id = 2505 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2601 currentId 2505
Added AND Nodes: 2600 2601
3 => callsites count before spliiting 52 with id = 2555 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2606 currentId 2555
Added AND Nodes: 2605 2606
2 => callsites count before spliiting 53 with id = 2590 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2611 currentId 2590
Added AND Nodes: 2610 2611
11 => callsites count before spliiting 488 with id = 2585 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2616 currentId 2585
Added AND Nodes: 2615 2616
10 => callsites count before spliiting 367 with id = 2545 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2621 currentId 2545
Added AND Nodes: 2620 2621
5 => callsites count before spliiting 211 with id = 1321 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2626 currentId 1321
Added AND Nodes: 2625 2626
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 51 with id = 2595 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2631 currentId 2595
Added AND Nodes: 2630 2631
11 => callsites count before spliiting 495 with id = 2615 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2636 currentId 2615
Added AND Nodes: 2635 2636
8 => callsites count before spliiting 285 with id = 2580 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2641 currentId 2580
Added AND Nodes: 2640 2641
2 => callsites count before spliiting 58 with id = 2591 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2646 currentId 2591
Added AND Nodes: 2645 2646
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 53 with id = 2206 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2651 currentId 2206
Added AND Nodes: 2650 2651
11 => callsites count before spliiting 580 with id = 2635 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2656 currentId 2635
Added AND Nodes: 2655 2656
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 305 with id = 2600 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2661 currentId 2600
Added AND Nodes: 2660 2661
2 => callsites count before spliiting 53 with id = 2576 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2666 currentId 2576
Added AND Nodes: 2665 2666
1 => callsites count before spliiting 60 with id = 2630 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2671 currentId 2630
Added AND Nodes: 2670 2671
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 203 with id = 2550 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2676 currentId 2550
Added AND Nodes: 2675 2676
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => callsites count before spliiting 433 with id = 2620 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2681 currentId 2620
Added AND Nodes: 2680 2681
2 => LOOP outcome: Correct & reachbound = False
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 671 with id = 2655 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2686 currentId 2655
Added AND Nodes: 2685 2686
6 => callsites count before spliiting 224 with id = 2660 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2691 currentId 2660
Added AND Nodes: 2690 2691
1 => callsites count before spliiting 50 with id = 2670 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2696 currentId 2670
Added AND Nodes: 2695 2696
8 => callsites count before spliiting 296 with id = 2640 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2701 currentId 2640
Added AND Nodes: 2700 2701
10 => callsites count before spliiting 453 with id = 2680 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2706 currentId 2680
Added AND Nodes: 2705 2706
5 => callsites count before spliiting 207 with id = 2625 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2711 currentId 2625
Added AND Nodes: 2710 2711
0 => callsites count before spliiting 52 with id = 2650 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2716 currentId 2650
Added AND Nodes: 2715 2716
1 => callsites count before spliiting 63 with id = 2695 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2721 currentId 2695
Added AND Nodes: 2720 2721
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 56 with id = 2720 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2726 currentId 2720
Added AND Nodes: 2725 2726
11 => callsites count before spliiting 766 with id = 2685 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2731 currentId 2685
Added AND Nodes: 2730 2731
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 60 with id = 2725 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2736 currentId 2725
Added AND Nodes: 2735 2736
2 => callsites count before spliiting 66 with id = 2281 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2741 currentId 2281
Added AND Nodes: 2740 2741
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 55 with id = 2735 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2746 currentId 2735
Added AND Nodes: 2745 2746
8 => callsites count before spliiting 365 with id = 2700 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2751 currentId 2700
Added AND Nodes: 2750 2751
11 => callsites count before spliiting 798 with id = 2730 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2756 currentId 2730
Added AND Nodes: 2755 2756
2 => callsites count before spliiting 54 with id = 2740 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2761 currentId 2740
Added AND Nodes: 2760 2761
1 => callsites count before spliiting 61 with id = 2745 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2766 currentId 2745
Added AND Nodes: 2765 2766
1 => callsites count before spliiting 51 with id = 2765 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2771 currentId 2765
Added AND Nodes: 2770 2771
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
6 => callsites count before spliiting 256 with id = 2690 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2776 currentId 2690
Added AND Nodes: 2775 2776
8 => callsites count before spliiting 377 with id = 2750 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2781 currentId 2750
Added AND Nodes: 2780 2781
1 => callsites count before spliiting 55 with id = 2770 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2786 currentId 2770
Added AND Nodes: 2785 2786
11 => callsites count before spliiting 810 with id = 2755 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2791 currentId 2755
Added AND Nodes: 2790 2791
1 => callsites count before spliiting 50 with id = 2785 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2796 currentId 2785
Added AND Nodes: 2795 2796
8 => callsites count before spliiting 450 with id = 2780 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2801 currentId 2780
Added AND Nodes: 2800 2801
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => callsites count before spliiting 57 with id = 2760 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2806 currentId 2760
Added AND Nodes: 2805 2806
1 => callsites count before spliiting 56 with id = 2795 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2811 currentId 2795
Added AND Nodes: 2810 2811
11 => callsites count before spliiting 822 with id = 2790 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2816 currentId 2790
Added AND Nodes: 2815 2816
8 => callsites count before spliiting 513 with id = 2800 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2821 currentId 2800
Added AND Nodes: 2820 2821
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 839 with id = 2815 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2826 currentId 2815
Added AND Nodes: 2825 2826
7 => callsites count before spliiting 206 with id = 2675 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2831 currentId 2675
Added AND Nodes: 2830 2831
2 => callsites count before spliiting 50 with id = 2805 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2836 currentId 2805
Added AND Nodes: 2835 2836
8 => callsites count before spliiting 527 with id = 2820 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2841 currentId 2820
Added AND Nodes: 2840 2841
6 => callsites count before spliiting 200 with id = 2775 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2846 currentId 2775
Added AND Nodes: 2845 2846
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 540 with id = 2840 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2851 currentId 2840
Added AND Nodes: 2850 2851
2 => callsites count before spliiting 58 with id = 2835 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2856 currentId 2835
Added AND Nodes: 2855 2856
11 => callsites count before spliiting 850 with id = 2825 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2861 currentId 2825
Added AND Nodes: 2860 2861
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 50 with id = 2855 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2866 currentId 2855
Added AND Nodes: 2865 2866
11 => callsites count before spliiting 866 with id = 2860 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2871 currentId 2860
Added AND Nodes: 2870 2871
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 53 with id = 2865 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2876 currentId 2865
Added AND Nodes: 2875 2876
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 57 with id = 2875 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2881 currentId 2875
Added AND Nodes: 2880 2881
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 51 with id = 2880 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2886 currentId 2880
Added AND Nodes: 2885 2886
4 => callsites count before spliiting 204 with id = 2540 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2891 currentId 2540
Added AND Nodes: 2890 2891
1 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 57 with id = 2885 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2896 currentId 2885
Added AND Nodes: 2895 2896
3 => callsites count before spliiting 51 with id = 2605 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2901 currentId 2605
Added AND Nodes: 2900 2901
1 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 213 with id = 2681 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2906 currentId 2681
Added AND Nodes: 2905 2906
2 => callsites count before spliiting 60 with id = 2895 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2911 currentId 2895
Added AND Nodes: 2910 2911
6 => callsites count before spliiting 234 with id = 2845 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2916 currentId 2845
Added AND Nodes: 2915 2916
3 => callsites count before spliiting 59 with id = 2900 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2921 currentId 2900
Added AND Nodes: 2920 2921
2 => callsites count before spliiting 53 with id = 2910 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2926 currentId 2910
Added AND Nodes: 2925 2926
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 51 with id = 2920 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2931 currentId 2920
Added AND Nodes: 2930 2931
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 50 with id = 2925 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2936 currentId 2925
Added AND Nodes: 2935 2936
10 => callsites count before spliiting 230 with id = 2905 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2941 currentId 2905
Added AND Nodes: 2940 2941
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 54 with id = 2930 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2946 currentId 2930
Added AND Nodes: 2945 2946
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 215 with id = 1291 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2951 currentId 1291
Added AND Nodes: 2950 2951
2 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 57 with id = 2736 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2956 currentId 2736
Added AND Nodes: 2955 2956
3 => callsites count before spliiting 58 with id = 2945 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2961 currentId 2945
Added AND Nodes: 2960 2961
1 => callsites count before spliiting 51 with id = 2955 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2966 currentId 2955
Added AND Nodes: 2965 2966
6 => callsites count before spliiting 216 with id = 2915 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2971 currentId 2915
Added AND Nodes: 2970 2971
3 => callsites count before spliiting 52 with id = 2960 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2976 currentId 2960
2 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 2975 2976
10 => callsites count before spliiting 242 with id = 2940 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2981 currentId 2940
Added AND Nodes: 2980 2981
1 => callsites count before spliiting 57 with id = 2965 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2986 currentId 2965
Added AND Nodes: 2985 2986
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 54 with id = 2975 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2991 currentId 2975
Added AND Nodes: 2990 2991
1 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 217 with id = 2361 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2996 currentId 2361
Added AND Nodes: 2995 2996
3 => callsites count before spliiting 59 with id = 2990 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3001 currentId 2990
Added AND Nodes: 3000 3001
5 => callsites count before spliiting 246 with id = 2950 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3006 currentId 2950
Added AND Nodes: 3005 3006
10 => callsites count before spliiting 320 with id = 2980 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3011 currentId 2980
Added AND Nodes: 3010 3011
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 53 with id = 2715 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3016 currentId 2715
Added AND Nodes: 3015 3016
2 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 318 with id = 2995 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3021 currentId 2995
Added AND Nodes: 3020 3021
8 => callsites count before spliiting 266 with id = 2821 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3026 currentId 2821
Added AND Nodes: 3025 3026
0 => callsites count before spliiting 61 with id = 3015 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3031 currentId 3015
Added AND Nodes: 3030 3031
2 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 56 with id = 2726 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3036 currentId 2726
Added AND Nodes: 3035 3036
10 => callsites count before spliiting 330 with id = 3010 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3041 currentId 3010
Added AND Nodes: 3040 3041
0 => callsites count before spliiting 53 with id = 3030 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3046 currentId 3030
Added AND Nodes: 3045 3046
9 => callsites count before spliiting 414 with id = 3020 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3051 currentId 3020
Added AND Nodes: 3050 3051
1 => callsites count before spliiting 51 with id = 3035 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3056 currentId 3035
Added AND Nodes: 3055 3056
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 58 with id = 2876 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3061 currentId 2876
Added AND Nodes: 3060 3061
1 => callsites count before spliiting 56 with id = 3055 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3066 currentId 3055
Added AND Nodes: 3065 3066
0 => callsites count before spliiting 56 with id = 3045 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3071 currentId 3045
Added AND Nodes: 3070 3071
2 => callsites count before spliiting 50 with id = 3060 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3076 currentId 3060
Added AND Nodes: 3075 3076
5 => callsites count before spliiting 271 with id = 3005 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3081 currentId 3005
3 => callsites count before spliiting 53 with id = 2946 and splitMode 100
Added AND Nodes: 3080 3081
3 => sending calltree : splitMode 100 mustReachId 3086 currentId 2946
Added AND Nodes: 3085 3086
9 => callsites count before spliiting 430 with id = 3050 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3091 currentId 3050
Added AND Nodes: 3090 3091
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 60 with id = 3070 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3096 currentId 3070
Added AND Nodes: 3095 3096
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 401 with id = 3040 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3101 currentId 3040
Added AND Nodes: 3100 3101
1 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
8 => callsites count before spliiting 344 with id = 3025 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3106 currentId 3025
Added AND Nodes: 3105 3106
0 => callsites count before spliiting 54 with id = 3095 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3111 currentId 3095
Added AND Nodes: 3110 3111
9 => callsites count before spliiting 442 with id = 3090 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3116 currentId 3090
Added AND Nodes: 3115 3116
3 => callsites count before spliiting 55 with id = 2931 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3121 currentId 2931
Added AND Nodes: 3120 3121
2 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 210 with id = 2830 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 3126 currentId 2830
Added AND Nodes: 3125 3126
0 => callsites count before spliiting 56 with id = 3110 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3131 currentId 3110
Added AND Nodes: 3130 3131
3 => callsites count before spliiting 59 with id = 3120 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3136 currentId 3120
Added AND Nodes: 3135 3136
1 => callsites count before spliiting 56 with id = 3036 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3141 currentId 3036
Added AND Nodes: 3140 3141
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 61 with id = 3130 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3146 currentId 3130
Added AND Nodes: 3145 3146
3 => callsites count before spliiting 53 with id = 3135 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3151 currentId 3135
Added AND Nodes: 3150 3151
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 518 with id = 3115 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3156 currentId 3115
Added AND Nodes: 3155 3156
1 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 55 with id = 2866 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3161 currentId 2866
Added AND Nodes: 3160 3161
1 => callsites count before spliiting 59 with id = 2721 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3166 currentId 2721
Added AND Nodes: 3165 3166
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 318 with id = 3080 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3171 currentId 3080
Added AND Nodes: 3170 3171
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 55 with id = 3131 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3176 currentId 3131
Added AND Nodes: 3175 3176
2 => callsites count before spliiting 59 with id = 3160 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3181 currentId 3160
Added AND Nodes: 3180 3181
1 => callsites count before spliiting 64 with id = 3165 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3186 currentId 3165
Added AND Nodes: 3185 3186
3 => callsites count before spliiting 53 with id = 3121 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3191 currentId 3121
Added AND Nodes: 3190 3191
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 53 with id = 3180 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3196 currentId 3180
Added AND Nodes: 3195 3196
1 => callsites count before spliiting 58 with id = 3185 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3201 currentId 3185
Added AND Nodes: 3200 3201
9 => callsites count before spliiting 528 with id = 3155 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3206 currentId 3155
Added AND Nodes: 3205 3206
0 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 356 with id = 3105 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3211 currentId 3105
Added AND Nodes: 3210 3211
1 => callsites count before spliiting 50 with id = 3200 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3216 currentId 3200
Added AND Nodes: 3215 3216
0 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 405 with id = 3100 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3221 currentId 3100
Added AND Nodes: 3220 3221
0 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 228 with id = 3170 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3226 currentId 3170
Added AND Nodes: 3225 3226
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 56 with id = 3071 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3231 currentId 3071
Added AND Nodes: 3230 3231
9 => callsites count before spliiting 617 with id = 3205 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3236 currentId 3205
Added AND Nodes: 3235 3236
11 => callsites count before spliiting 240 with id = 2731 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3241 currentId 2731
Added AND Nodes: 3240 3241
2 => callsites count before spliiting 52 with id = 2856 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3246 currentId 2856
Added AND Nodes: 3245 3246
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 60 with id = 2901 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3251 currentId 2901
Added AND Nodes: 3250 3251
2 => callsites count before spliiting 55 with id = 3245 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3256 currentId 3245
Added AND Nodes: 3255 3256
1 => callsites count before spliiting 55 with id = 3186 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3261 currentId 3186
Added AND Nodes: 3260 3261
10 => callsites count before spliiting 416 with id = 3220 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3266 currentId 3220
Added AND Nodes: 3265 3266
0 => callsites count before spliiting 63 with id = 3046 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3271 currentId 3046
Added AND Nodes: 3270 3271
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 325 with id = 3240 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3276 currentId 3240
Added AND Nodes: 3275 3276
8 => callsites count before spliiting 366 with id = 3210 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3281 currentId 3210
Added AND Nodes: 3280 3281
2 => callsites count before spliiting 59 with id = 3255 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3286 currentId 3255
Added AND Nodes: 3285 3286
10 => callsites count before spliiting 434 with id = 3265 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3291 currentId 3265
Added AND Nodes: 3290 3291
0 => callsites count before spliiting 56 with id = 3270 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3296 currentId 3270
Added AND Nodes: 3295 3296
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 53 with id = 3285 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3301 currentId 3285
Added AND Nodes: 3300 3301
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 620 with id = 3235 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3306 currentId 3235
Added AND Nodes: 3305 3306
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 54 with id = 3271 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3311 currentId 3271
Added AND Nodes: 3310 3311
11 => callsites count before spliiting 336 with id = 3275 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3316 currentId 3275
Added AND Nodes: 3315 3316
3 => callsites count before spliiting 50 with id = 3250 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3321 currentId 3250
Added AND Nodes: 3320 3321
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 253 with id = 3225 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3326 currentId 3225
Added AND Nodes: 3325 3326
9 => callsites count before spliiting 631 with id = 3305 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3331 currentId 3305
Added AND Nodes: 3330 3331
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 59 with id = 2696 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3336 currentId 2696
Added AND Nodes: 3335 3336
9 => callsites count before spliiting 652 with id = 3330 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3341 currentId 3330
Added AND Nodes: 3340 3341
11 => callsites count before spliiting 424 with id = 3315 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3346 currentId 3315
Added AND Nodes: 3345 3346
2 => callsites count before spliiting 53 with id = 2836 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3351 currentId 2836
Added AND Nodes: 3350 3351
9 => callsites count before spliiting 673 with id = 3340 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3356 currentId 3340
Added AND Nodes: 3355 3356
8 => callsites count before spliiting 377 with id = 3280 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3361 currentId 3280
Added AND Nodes: 3360 3361
9 => callsites count before spliiting 694 with id = 3355 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3366 currentId 3355
Added AND Nodes: 3365 3366
9 => callsites count before spliiting 713 with id = 3365 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3371 currentId 3365
Added AND Nodes: 3370 3371
1 => callsites count before spliiting 57 with id = 3335 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3376 currentId 3335
Added AND Nodes: 3375 3376
9 => callsites count before spliiting 731 with id = 3370 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3381 currentId 3370
Added AND Nodes: 3380 3381
0 => callsites count before spliiting 51 with id = 3016 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3386 currentId 3016
Added AND Nodes: 3385 3386
11 => callsites count before spliiting 434 with id = 3345 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3391 currentId 3345
Added AND Nodes: 3390 3391
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 528 with id = 3390 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3396 currentId 3390
Added AND Nodes: 3395 3396
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 554 with id = 3395 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3401 currentId 3395
Added AND Nodes: 3400 3401
10 => callsites count before spliiting 236 with id = 3266 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3406 currentId 3266
Added AND Nodes: 3405 3406
3 => callsites count before spliiting 52 with id = 3320 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3411 currentId 3320
Added AND Nodes: 3410 3411
11 => callsites count before spliiting 565 with id = 3400 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3416 currentId 3400
Added AND Nodes: 3415 3416
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 62 with id = 3375 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3421 currentId 3375
Added AND Nodes: 3420 3421
11 => callsites count before spliiting 589 with id = 3415 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3426 currentId 3415
Added AND Nodes: 3425 3426
11 => callsites count before spliiting 637 with id = 3425 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3431 currentId 3425
Added AND Nodes: 3430 3431
0 => callsites count before spliiting 57 with id = 3385 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3436 currentId 3385
Added AND Nodes: 3435 3436
10 => callsites count before spliiting 320 with id = 3405 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3441 currentId 3405
Added AND Nodes: 3440 3441
1 => callsites count before spliiting 59 with id = 3420 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3446 currentId 3420
Added AND Nodes: 3445 3446
5 => callsites count before spliiting 216 with id = 3325 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3451 currentId 3325
Added AND Nodes: 3450 3451
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 55 with id = 3445 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3456 currentId 3445
Added AND Nodes: 3455 3456
3 => callsites count before spliiting 66 with id = 3410 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3461 currentId 3410
Added AND Nodes: 3460 3461
1 => callsites count before spliiting 61 with id = 3455 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3466 currentId 3455
Added AND Nodes: 3465 3466
3 => callsites count before spliiting 60 with id = 3460 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3471 currentId 3460
Added AND Nodes: 3470 3471
8 => callsites count before spliiting 382 with id = 3360 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3476 currentId 3360
Added AND Nodes: 3475 3476
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 50 with id = 3470 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3481 currentId 3470
Added AND Nodes: 3480 3481
1 => callsites count before spliiting 50 with id = 3465 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3486 currentId 3465
Added AND Nodes: 3485 3486
10 => callsites count before spliiting 410 with id = 3440 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3491 currentId 3440
Added AND Nodes: 3490 3491
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 54 with id = 3480 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3496 currentId 3480
Added AND Nodes: 3495 3496
1 => callsites count before spliiting 58 with id = 3485 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3501 currentId 3485
Added AND Nodes: 3500 3501
1 => callsites count before spliiting 50 with id = 3500 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3506 currentId 3500
Added AND Nodes: 3505 3506
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 62 with id = 3495 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3511 currentId 3495
Added AND Nodes: 3510 3511
10 => callsites count before spliiting 494 with id = 3490 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3516 currentId 3490
Added AND Nodes: 3515 3516
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 54 with id = 3510 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3521 currentId 3510
Added AND Nodes: 3520 3521
1 => callsites count before spliiting 53 with id = 3505 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3526 currentId 3505
Added AND Nodes: 3525 3526
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 57 with id = 3525 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3531 currentId 3525
Added AND Nodes: 3530 3531
3 => callsites count before spliiting 57 with id = 3520 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3536 currentId 3520
Added AND Nodes: 3535 3536
1 => callsites count before spliiting 51 with id = 3530 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3541 currentId 3530
Added AND Nodes: 3540 3541
7 => callsites count before spliiting 205 with id = 3125 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 3546 currentId 3125
Added AND Nodes: 3545 3546
3 => callsites count before spliiting 50 with id = 3535 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3551 currentId 3535
Added AND Nodes: 3550 3551
2 => callsites count before spliiting 55 with id = 3350 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3556 currentId 3350
Added AND Nodes: 3555 3556
1 => callsites count before spliiting 57 with id = 3540 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3561 currentId 3540
Added AND Nodes: 3560 3561
10 => callsites count before spliiting 502 with id = 3515 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3566 currentId 3515
Added AND Nodes: 3565 3566
3 => callsites count before spliiting 64 with id = 3550 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3571 currentId 3550
Added AND Nodes: 3570 3571
1 => callsites count before spliiting 60 with id = 3560 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3576 currentId 3560
Added AND Nodes: 3575 3576
3 => callsites count before spliiting 57 with id = 3570 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3581 currentId 3570
Added AND Nodes: 3580 3581
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 56 with id = 3555 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3586 currentId 3555
Added AND Nodes: 3585 3586
1 => callsites count before spliiting 53 with id = 3575 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3591 currentId 3575
Added AND Nodes: 3590 3591
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 409 with id = 3475 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3596 currentId 3475
Added AND Nodes: 3595 3596
3 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 52 with id = 3585 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3601 currentId 3585
Added AND Nodes: 3600 3601
10 => callsites count before spliiting 591 with id = 3565 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3606 currentId 3565
Added AND Nodes: 3605 3606
2 => callsites count before spliiting 60 with id = 3600 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3611 currentId 3600
Added AND Nodes: 3610 3611
2 => callsites count before spliiting 52 with id = 3610 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3616 currentId 3610
Added AND Nodes: 3615 3616
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 55 with id = 3615 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3621 currentId 3615
Added AND Nodes: 3620 3621
8 => callsites count before spliiting 428 with id = 3595 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 3626 currentId 3595
Added AND Nodes: 3625 3626
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 59 with id = 3620 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3631 currentId 3620
Added AND Nodes: 3630 3631
10 => callsites count before spliiting 596 with id = 3605 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3636 currentId 3605
Added AND Nodes: 3635 3636
2 => callsites count before spliiting 53 with id = 3630 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3641 currentId 3630
Added AND Nodes: 3640 3641
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 628 with id = 3635 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3646 currentId 3635
Added AND Nodes: 3645 3646
2 => callsites count before spliiting 59 with id = 3640 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3651 currentId 3640
Added AND Nodes: 3650 3651
3 => callsites count before spliiting 57 with id = 3511 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3656 currentId 3511
Added AND Nodes: 3655 3656
5 => callsites count before spliiting 222 with id = 3450 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3661 currentId 3450
Added AND Nodes: 3660 3661
2 => callsites count before spliiting 62 with id = 3650 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3666 currentId 3650
Added AND Nodes: 3665 3666
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 640 with id = 3645 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3671 currentId 3645
Added AND Nodes: 3670 3671
3 => callsites count before spliiting 63 with id = 3655 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3676 currentId 3655
Added AND Nodes: 3675 3676
3 => callsites count before spliiting 51 with id = 3675 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3681 currentId 3675
Added AND Nodes: 3680 3681
2 => callsites count before spliiting 55 with id = 3665 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3686 currentId 3665
Added AND Nodes: 3685 3686
10 => callsites count before spliiting 658 with id = 3670 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3691 currentId 3670
Added AND Nodes: 3690 3691
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 670 with id = 3690 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3696 currentId 3690
Added AND Nodes: 3695 3696
2 => callsites count before spliiting 60 with id = 3685 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3701 currentId 3685
Added AND Nodes: 3700 3701
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 53 with id = 3700 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3706 currentId 3700
Added AND Nodes: 3705 3706
10 => callsites count before spliiting 681 with id = 3695 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 3711 currentId 3695
Added AND Nodes: 3710 3711
2 => callsites count before spliiting 55 with id = 3705 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3716 currentId 3705
Added AND Nodes: 3715 3716
1 => LOOP outcome: Correct & reachbound = False
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 59 with id = 3496 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3721 currentId 3496
Added AND Nodes: 3720 3721
4 => callsites count before spliiting 200 with id = 2890 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 3726 currentId 2890
Added AND Nodes: 3725 3726
3 => callsites count before spliiting 65 with id = 3720 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3731 currentId 3720
Added AND Nodes: 3730 3731
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 53 with id = 3730 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3736 currentId 3730
Added AND Nodes: 3735 3736
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 227 with id = 3396 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3741 currentId 3396
Added AND Nodes: 3740 3741
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => callsites count before spliiting 62 with id = 3435 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3746 currentId 3435
Added AND Nodes: 3745 3746
3 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 322 with id = 3740 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3751 currentId 3740
Added AND Nodes: 3750 3751
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 56 with id = 3745 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3756 currentId 3745
Added AND Nodes: 3755 3756
2 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 203 with id = 2971 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 3761 currentId 2971
Added AND Nodes: 3760 3761
0 => callsites count before spliiting 62 with id = 3755 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3766 currentId 3755
Added AND Nodes: 3765 3766
3 => callsites count before spliiting 56 with id = 3481 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3771 currentId 3481
Added AND Nodes: 3770 3771
1 => callsites count before spliiting 56 with id = 3526 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3776 currentId 3526
Added AND Nodes: 3775 3776
2 => LOOP outcome: Correct & reachbound = False
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => callsites count before spliiting 50 with id = 3770 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3781 currentId 3770
Added AND Nodes: 3780 3781
0 => callsites count before spliiting 50 with id = 3765 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3786 currentId 3765
Added AND Nodes: 3785 3786
2 => callsites count before spliiting 55 with id = 3651 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3791 currentId 3651
Added AND Nodes: 3790 3791
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 56 with id = 3780 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3796 currentId 3780
Added AND Nodes: 3795 3796
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 58 with id = 3785 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3801 currentId 3785
Added AND Nodes: 3800 3801
2 => callsites count before spliiting 59 with id = 3790 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3806 currentId 3790
Added AND Nodes: 3805 3806
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 50 with id = 3800 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3811 currentId 3800
Added AND Nodes: 3810 3811
1 => callsites count before spliiting 56 with id = 3506 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3816 currentId 3506
Added AND Nodes: 3815 3816
2 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 50 with id = 3815 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3821 currentId 3815
Added AND Nodes: 3820 3821
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 53 with id = 3810 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3826 currentId 3810
Added AND Nodes: 3825 3826
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 56 with id = 3820 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3831 currentId 3820
Added AND Nodes: 3830 3831
3 => callsites count before spliiting 50 with id = 3471 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3836 currentId 3471
Added AND Nodes: 3835 3836
11 => callsites count before spliiting 337 with id = 3750 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3841 currentId 3750
Added AND Nodes: 3840 3841
0 => callsites count before spliiting 57 with id = 3825 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3846 currentId 3825
Added AND Nodes: 3845 3846
1 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 54 with id = 3835 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3851 currentId 3835
Added AND Nodes: 3850 3851
0 => callsites count before spliiting 60 with id = 3845 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3856 currentId 3845
Added AND Nodes: 3855 3856
2 => callsites count before spliiting 59 with id = 3631 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3861 currentId 3631
Added AND Nodes: 3860 3861
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 53 with id = 3855 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 3866 currentId 3855
Added AND Nodes: 3865 3866
3 => callsites count before spliiting 62 with id = 3850 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3871 currentId 3850
Added AND Nodes: 3870 3871
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 54 with id = 3870 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 3876 currentId 3870
Added AND Nodes: 3875 3876
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 349 with id = 3840 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3881 currentId 3840
Added AND Nodes: 3880 3881
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 53 with id = 3621 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3886 currentId 3621
Added AND Nodes: 3885 3886
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 58 with id = 3885 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3891 currentId 3885
Added AND Nodes: 3890 3891
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 200 with id = 3660 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 3896 currentId 3660
Added AND Nodes: 3895 3896
1 => callsites count before spliiting 57 with id = 3501 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3901 currentId 3501
Added AND Nodes: 3900 3901
9 => callsites count before spliiting 219 with id = 3306 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3906 currentId 3306
Added AND Nodes: 3905 3906
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 429 with id = 3880 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3911 currentId 3880
Added AND Nodes: 3910 3911
2 => callsites count before spliiting 55 with id = 3616 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3916 currentId 3616
Added AND Nodes: 3915 3916
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 59 with id = 3915 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3921 currentId 3915
Added AND Nodes: 3920 3921
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 60 with id = 3900 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 3926 currentId 3900
Added AND Nodes: 3925 3926
9 => callsites count before spliiting 231 with id = 3905 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 3931 currentId 3905
Added AND Nodes: 3930 3931
2 => callsites count before spliiting 53 with id = 3920 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 3936 currentId 3920
Added AND Nodes: 3935 3936
6 => callsites count before spliiting 223 with id = 2916 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 3941 currentId 2916
Added AND Nodes: 3940 3941
11 => callsites count before spliiting 439 with id = 3910 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 3946 currentId 3910
Added AND Nodes: 3945 3946
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_bitvector_linux-3.16-rc1.tar.xz-43_2a-drivers--block--skd.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 1 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 10 algo id is 2
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 15 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 15 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 51 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
1 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 36 and splitMode 50
1 => callsites count before spliiting 14 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 56 currentId 26
10 => sending calltree : splitMode 50 mustReachId 61 currentId 36
Added AND Nodes: 55 56
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 56 from client 1 to 2
2 => after replyFromServer: 100
Added AND Nodes: 60 61
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 61 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 51
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
1 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => outcome: Correct
5 => outcome: Correct
for clientid : 1 algo id is 0
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => callsites count before spliiting 1 with id = 61 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 96 currentId 61
Added AND Nodes: 95 96
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 96 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 101 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 106 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 96 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 111 currentId 96
Added AND Nodes: 110 111
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 111 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 106 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 116 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 111 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 121 currentId 111
Added AND Nodes: 120 121
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 121 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 121 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 126 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 126 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 131 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 116 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 136 currentId 116
Added AND Nodes: 135 136
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 136 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 136 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 141 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 141 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 146 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 146 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 151 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 151 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 156 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 156 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 161 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 161 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 166 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 166 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 171 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 5 with id = 171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 176 from client 6 to 7
7 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 176 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 181 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 181 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 186 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 186 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 191 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 191 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 196 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 196 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 201 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 201 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 206 currentId 201
Added AND Nodes: 205 206
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 206 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 6 with id = 206 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 211 currentId 206
Added AND Nodes: 210 211
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 211 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 17 with id = 210 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 216 currentId 210
Added AND Nodes: 215 216
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 216 from client 7 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 56 with id = 215 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 221 currentId 215
Added AND Nodes: 220 221
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 221 from client 7 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 7 with id = 56 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 226 currentId 56
Added AND Nodes: 225 226
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 226 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 11 with id = 131 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 231 currentId 131
Added AND Nodes: 230 231
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 231 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 16 with id = 175 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 236 currentId 175
Added AND Nodes: 235 236
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 236 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 5 with id = 236 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 241 currentId 236
Added AND Nodes: 240 241
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 241 from client 5 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 26 with id = 240 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 246 currentId 240
Added AND Nodes: 245 246
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 246 from client 5 to 6
6 => after replyFromServer: 0
5 => callsites count before spliiting 200 with id = 245 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 251 currentId 245
Added AND Nodes: 250 251
4 => callsites count before spliiting 227 with id = 241 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 256 currentId 241
Added AND Nodes: 255 256
6 => callsites count before spliiting 201 with id = 246 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 261 currentId 246
Added AND Nodes: 260 261
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 256 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 251 from client 5 to 4
4 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => callsites count before spliiting 866 with id = 250 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 266 currentId 250
Added AND Nodes: 265 266
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 266 from client 5 to 4
4 => after replyFromServer: 0
5 => callsites count before spliiting 692 with id = 265 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 271 currentId 265
Added AND Nodes: 270 271
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 271 from client 5 to 6
6 => after replyFromServer: 0
5 => callsites count before spliiting 538 with id = 270 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 276 currentId 270
Added AND Nodes: 275 276
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 276 from client 5 to 4
4 => after replyFromServer: 0
5 => callsites count before spliiting 621 with id = 275 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 281 currentId 275
Added AND Nodes: 280 281
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 281 from client 5 to 6
6 => after replyFromServer: 0
7 => callsites count before spliiting 201 with id = 220 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 286 currentId 220
Added AND Nodes: 285 286
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 247 with id = 286 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 291 currentId 286
Added AND Nodes: 290 291
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 237 with id = 276 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 296 currentId 276
Added AND Nodes: 295 296
5 => callsites count before spliiting 635 with id = 280 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 301 currentId 280
Added AND Nodes: 300 301
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 296 from client 4 to 6
6 => after replyFromServer: 0
4 => callsites count before spliiting 223 with id = 295 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 306 currentId 295
Added AND Nodes: 305 306
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 593 with id = 300 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 311 currentId 300
Added AND Nodes: 310 311
7 => callsites count before spliiting 251 with id = 291 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 316 currentId 291
Added AND Nodes: 315 316
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 2
Assign partition 301 from client 5 to 6
6 => after replyFromServer: 0
5 => callsites count before spliiting 483 with id = 310 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 321 currentId 310
Added AND Nodes: 320 321
4 => callsites count before spliiting 250 with id = 306 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 326 currentId 306
Added AND Nodes: 325 326
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 326 from client 4 to 6
6 => after replyFromServer: 0
4 => callsites count before spliiting 225 with id = 325 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 331 currentId 325
Added AND Nodes: 330 331
7 => callsites count before spliiting 200 with id = 316 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 336 currentId 316
Added AND Nodes: 335 336
4 => callsites count before spliiting 201 with id = 330 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 341 currentId 330
Added AND Nodes: 340 341
5 => callsites count before spliiting 251 with id = 321 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 346 currentId 321
Added AND Nodes: 345 346
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 267 with id = 326 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 351 currentId 326
Added AND Nodes: 350 351
6 => callsites count before spliiting 204 with id = 350 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 356 currentId 350
Added AND Nodes: 355 356
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 226 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 361 currentId 226
Added AND Nodes: 360 361
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 361 from client 3 to 0
0 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 4 with id = 231 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 366 currentId 231
Added AND Nodes: 365 366
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 366 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 256 with id = 331 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 371 currentId 331
Added AND Nodes: 370 371
6 => callsites count before spliiting 254 with id = 351 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 376 currentId 351
Added AND Nodes: 375 376
7 => callsites count before spliiting 253 with id = 336 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 336
Added AND Nodes: 380 381
6 => callsites count before spliiting 221 with id = 375 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 386 currentId 375
Added AND Nodes: 385 386
7 => callsites count before spliiting 217 with id = 380 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 391 currentId 380
Added AND Nodes: 390 391
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 1 with id = 361 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 396 currentId 361
Added AND Nodes: 395 396
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 396 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 366 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 401 currentId 366
Added AND Nodes: 400 401
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 401 from client 10 to 9
9 => after replyFromServer: 50
10 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => callsites count before spliiting 25 with id = 400 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 406 currentId 400
Added AND Nodes: 405 406
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 406 from client 10 to 11
11 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 401 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 411 currentId 401
Added AND Nodes: 410 411
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 411 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 6 with id = 411 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 416 currentId 411
Added AND Nodes: 415 416
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 416 from client 8 to 9
9 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 8 with id = 360 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 421 currentId 360
Added AND Nodes: 420 421
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 421 from client 3 to 2
2 => after replyFromServer: 100
6 => callsites count before spliiting 224 with id = 385 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 426 currentId 385
Added AND Nodes: 425 426
7 => callsites count before spliiting 218 with id = 391 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 431 currentId 391
Added AND Nodes: 430 431
4 => callsites count before spliiting 252 with id = 370 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 436 currentId 370
Added AND Nodes: 435 436
6 => callsites count before spliiting 208 with id = 425 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 441 currentId 425
Added AND Nodes: 440 441
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 221 with id = 435 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 446 currentId 435
Added AND Nodes: 445 446
7 => callsites count before spliiting 213 with id = 430 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 451 currentId 430
Added AND Nodes: 450 451
5 => callsites count before spliiting 268 with id = 346 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 456 currentId 346
Added AND Nodes: 455 456
4 => callsites count before spliiting 213 with id = 445 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 461 currentId 445
Added AND Nodes: 460 461
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 218 with id = 455 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 466 currentId 455
Added AND Nodes: 465 466
5 => callsites count before spliiting 209 with id = 465 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 471 currentId 465
Added AND Nodes: 470 471
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 207 with id = 450 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 476 currentId 450
Added AND Nodes: 475 476
3 => Spliiting due to client waiting
3 => callsites count before spliiting 14 with id = 420 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 481 currentId 420
Added AND Nodes: 480 481
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 481 from client 3 to 0
0 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 46 with id = 405 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 486 currentId 405
Added AND Nodes: 485 486
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 486 from client 10 to 9
9 => after replyFromServer: 50
5 => callsites count before spliiting 206 with id = 471 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 491 currentId 471
Added AND Nodes: 490 491
7 => callsites count before spliiting 200 with id = 475 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 496 currentId 475
Added AND Nodes: 495 496
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 202 with id = 490 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 501 currentId 490
Added AND Nodes: 500 501
7 => callsites count before spliiting 204 with id = 496 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 506 currentId 496
Added AND Nodes: 505 506
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 205 with id = 500 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 511 currentId 500
Added AND Nodes: 510 511
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 236 with id = 376 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 516 currentId 376
Added AND Nodes: 515 516
5 => callsites count before spliiting 207 with id = 466 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 521 currentId 466
Added AND Nodes: 520 521
5 => callsites count before spliiting 205 with id = 520 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 526 currentId 520
Added AND Nodes: 525 526
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 20 with id = 480 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 531 currentId 480
Added AND Nodes: 530 531
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 531 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 35 with id = 406 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 536 currentId 406
Added AND Nodes: 535 536
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 536 from client 11 to 9
9 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 238 with id = 436 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 541 currentId 436
Added AND Nodes: 540 541
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => Spliiting due to client waiting
10 => callsites count before spliiting 167 with id = 485 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 546 currentId 485
Added AND Nodes: 545 546
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 546 from client 10 to 9
9 => after replyFromServer: 50
1 => Spliiting due to client waiting
1 => callsites count before spliiting 10 with id = 396 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 551 currentId 396
Added AND Nodes: 550 551
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 551 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 49 with id = 481 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 556 currentId 481
Added AND Nodes: 555 556
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 556 from client 0 to 1
1 => after replyFromServer: 100
7 => callsites count before spliiting 241 with id = 381 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 561 currentId 381
Added AND Nodes: 560 561
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => callsites count before spliiting 207 with id = 545 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 566 currentId 545
Added AND Nodes: 565 566
0 => callsites count before spliiting 55 with id = 555 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 571 currentId 555
Added AND Nodes: 570 571
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 311 from client 5 to 4
4 => after replyFromServer: 0
4 => callsites count before spliiting 250 with id = 311 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 576 currentId 311
Added AND Nodes: 575 576
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 245 with id = 576 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 581 currentId 576
Added AND Nodes: 580 581
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 571 from client 0 to 3
3 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 31 with id = 556 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 586 currentId 556
Added AND Nodes: 585 586
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 586 from client 1 to 3
3 => after replyFromServer: 100
4 => callsites count before spliiting 201 with id = 580 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 591 currentId 580
Added AND Nodes: 590 591
10 => callsites count before spliiting 233 with id = 565 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 596 currentId 565
Added AND Nodes: 595 596
4 => callsites count before spliiting 205 with id = 590 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 601 currentId 590
Added AND Nodes: 600 601
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 242 with id = 456 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 606 currentId 456
Added AND Nodes: 605 606
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 2
Assign partition 566 from client 10 to 8
8 => after replyFromServer: 50
6 => callsites count before spliiting 290 with id = 515 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 611 currentId 515
Added AND Nodes: 610 611
10 => callsites count before spliiting 259 with id = 595 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 616 currentId 595
Added AND Nodes: 615 616
5 => callsites count before spliiting 204 with id = 605 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 621 currentId 605
Added AND Nodes: 620 621
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 235 with id = 610 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 626 currentId 610
Added AND Nodes: 625 626
6 => callsites count before spliiting 222 with id = 625 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 631 currentId 625
Added AND Nodes: 630 631
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 231 with id = 581 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 636 currentId 581
Added AND Nodes: 635 636
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 211 with id = 635 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 641 currentId 635
Added AND Nodes: 640 641
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => callsites count before spliiting 282 with id = 615 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 646 currentId 615
Added AND Nodes: 645 646
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 3
Assign partition 596 from client 10 to 11
11 => after replyFromServer: 50
1 => callsites count before spliiting 53 with id = 585 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 651 currentId 585
Added AND Nodes: 650 651
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 333 with id = 645 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 656 currentId 645
Added AND Nodes: 655 656
0 => callsites count before spliiting 69 with id = 570 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 661 currentId 570
Added AND Nodes: 660 661
9 => callsites count before spliiting 217 with id = 546 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 666 currentId 546
Added AND Nodes: 665 666
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 206 with id = 566 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 671 currentId 566
Added AND Nodes: 670 671
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 3
Assign partition 616 from client 10 to 8
8 => after replyFromServer: 50
7 => callsites count before spliiting 272 with id = 561 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 676 currentId 561
Added AND Nodes: 675 676
10 => callsites count before spliiting 458 with id = 655 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 681 currentId 655
Added AND Nodes: 680 681
7 => callsites count before spliiting 205 with id = 675 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 686 currentId 675
Added AND Nodes: 685 686
0 => callsites count before spliiting 139 with id = 660 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 691 currentId 660
Added AND Nodes: 690 691
7 => callsites count before spliiting 235 with id = 685 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 696 currentId 685
Added AND Nodes: 695 696
4 => callsites count before spliiting 265 with id = 636 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 701 currentId 636
Added AND Nodes: 700 701
7 => callsites count before spliiting 251 with id = 695 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 706 currentId 695
Added AND Nodes: 705 706
1 => callsites count before spliiting 83 with id = 651 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 711 currentId 651
Added AND Nodes: 710 711
1 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 222 with id = 700 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 716 currentId 700
Added AND Nodes: 715 716
7 => callsites count before spliiting 252 with id = 705 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 721 currentId 705
Added AND Nodes: 720 721
10 => callsites count before spliiting 483 with id = 680 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 726 currentId 680
Added AND Nodes: 725 726
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => callsites count before spliiting 243 with id = 715 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 731 currentId 715
Added AND Nodes: 730 731
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => callsites count before spliiting 102 with id = 586 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 736 currentId 586
Added AND Nodes: 735 736
3 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 233 with id = 720 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 741 currentId 720
Added AND Nodes: 740 741
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 95 with id = 690 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 746 currentId 690
Added AND Nodes: 745 746
7 => callsites count before spliiting 202 with id = 740 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 751 currentId 740
Added AND Nodes: 750 751
5 => callsites count before spliiting 248 with id = 621 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 756 currentId 621
Added AND Nodes: 755 756
7 => callsites count before spliiting 219 with id = 750 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 761 currentId 750
Added AND Nodes: 760 761
0 => callsites count before spliiting 51 with id = 745 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 766 currentId 745
Added AND Nodes: 765 766
11 => callsites count before spliiting 250 with id = 596 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 771 currentId 596
Added AND Nodes: 770 771
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 3
Assign partition 646 from client 10 to 11
11 => after replyFromServer: 50
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_bitvector_linux-3.16-rc1.tar.xz-43_2a-drivers--net--wireless--orinoco--orinoco_usb.ko-entry_point_false-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 2 algo id is 0
Added OR Node: 6
for clientid : 3 algo id is 0
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
for clientid : 10 algo id is 2
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
for clientid : 11 algo id is 2
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
0 => Spliiting due to client waiting
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => callsites count before spliiting 35 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 1
1 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 35 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 51 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 56 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 56 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 61 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 61 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 66 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 37 with id = 31 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 71 currentId 31
9 => Spliiting due to client waiting
Added AND Nodes: 70 71
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 71 from client 1 to 2
2 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 66 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 76 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => callsites count before spliiting 37 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 81 currentId 36
Added AND Nodes: 80 81
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 81 from client 9 to 10
10 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 76 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 101 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 106 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 116 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 121 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 121 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 126 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 81 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 131 currentId 81
Added AND Nodes: 130 131
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 131 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 126 and splitMode 0
10 => outcome: Correct
6 => sending calltree : splitMode 0 mustReachId 136 currentId 126
Added AND Nodes: 135 136
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 136 from client 6 to 7
7 => after replyFromServer: 0
for clientid : 10 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 136 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 141 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 141 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 146 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 146 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 151 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 151 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 156 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 156 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 161 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 161 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 166 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 166 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 171 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => Spliiting due to client waiting
2 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 131 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 176 currentId 131
2 => callsites count before spliiting 32 with id = 71 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 181 currentId 71
Added AND Nodes: 175 176
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 176 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
Added AND Nodes: 180 181
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 181 from client 2 to 3
3 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 186 currentId 171
Added AND Nodes: 185 186
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 186 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 186 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 191 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 191 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 196 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 196 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 201 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 176 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 206 currentId 176
Added AND Nodes: 205 206
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 206 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 201 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 211 currentId 201
Added AND Nodes: 210 211
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 211 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 211 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 216 currentId 211
Added AND Nodes: 215 216
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 216 from client 7 to 4
4 => after replyFromServer: 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 206 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 221 currentId 206
Added AND Nodes: 220 221
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 221 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 216 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 226 currentId 216
Added AND Nodes: 225 226
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 226 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 221 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 231 currentId 221
Added AND Nodes: 230 231
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 231 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 5 with id = 181 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 236 currentId 181
Added AND Nodes: 235 236
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 236 from client 3 to 0
0 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 226 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 241 currentId 226
Added AND Nodes: 240 241
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 241 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 241 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 246 currentId 241
Added AND Nodes: 245 246
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 246 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 20 with id = 235 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 251 currentId 235
Added AND Nodes: 250 251
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 251 from client 3 to 1
1 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 246 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 256 currentId 246
Added AND Nodes: 255 256
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 256 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 27 with id = 231 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 261 currentId 231
Added AND Nodes: 260 261
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 261 from client 11 to 8
8 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 256 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 266 currentId 256
Added AND Nodes: 265 266
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 266 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 25 with id = 250 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 271 currentId 250
Added AND Nodes: 270 271
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 271 from client 3 to 2
2 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 266 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 276 currentId 266
Added AND Nodes: 275 276
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 276 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 276 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 281 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 281 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 286 currentId 281
Added AND Nodes: 285 286
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 286 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 286 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 291 currentId 286
Added AND Nodes: 290 291
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 291 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 5 with id = 261 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 296 currentId 261
Added AND Nodes: 295 296
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 296 from client 8 to 9
9 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 291 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 301 currentId 291
Added AND Nodes: 300 301
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 301 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 301 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 306 currentId 301
Added AND Nodes: 305 306
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 306 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 306 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 311 currentId 306
Added AND Nodes: 310 311
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 311 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 20 with id = 295 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 316 currentId 295
Added AND Nodes: 315 316
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 316 from client 8 to 10
10 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 311 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 321 currentId 311
Added AND Nodes: 320 321
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 321 from client 4 to 5
4 => LOOP outcome: Correct & reachbound = False
5 => after replyFromServer: 0
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 41 with id = 236 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 326 currentId 236
1 => outcome: Correct
Added AND Nodes: 325 326
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 326 from client 0 to 3
3 => after replyFromServer: 100
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 8 with id = 271 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 331 currentId 271
Added AND Nodes: 330 331
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 331 from client 2 to 1
1 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 321 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 336 currentId 321
Added AND Nodes: 335 336
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 336 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 296 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 341 currentId 296
Added AND Nodes: 340 341
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 341 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 336 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 346 currentId 336
Added AND Nodes: 345 346
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 346 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 25 with id = 315 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 351 currentId 315
Added AND Nodes: 350 351
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 351 from client 8 to 9
9 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 346 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 356 currentId 346
Added AND Nodes: 355 356
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 356 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 356 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 361 currentId 356
Added AND Nodes: 360 361
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 361 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 361 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 366 currentId 361
Added AND Nodes: 365 366
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 366 from client 5 to 6
5 => LOOP outcome: Correct & reachbound = False
6 => after replyFromServer: 0
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => callsites count before spliiting 55 with id = 325 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 371 currentId 325
Added AND Nodes: 370 371
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 366 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 376 currentId 366
Added AND Nodes: 375 376
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 376 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => LOOP outcome: Correct & reachbound = False
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 376 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 376
Added AND Nodes: 380 381
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 381 from client 7 to 4
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
4 => after replyFromServer: 0
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 381 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 386 currentId 381
Added AND Nodes: 385 386
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 386 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 1 with id = 386 and splitMode 0
8 => outcome: Correct
5 => sending calltree : splitMode 0 mustReachId 391 currentId 386
for clientid : 8 algo id is 2
Added AND Nodes: 390 391
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 391 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 4 with id = 351 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 396 currentId 351
Added AND Nodes: 395 396
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 396 from client 9 to 8
8 => after replyFromServer: 50
1 => Spliiting due to client waiting
1 => callsites count before spliiting 12 with id = 331 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 401 currentId 331
Added AND Nodes: 400 401
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 401 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 391 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 406 currentId 391
Added AND Nodes: 405 406
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 406 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 8 with id = 326 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 411 currentId 326
Added AND Nodes: 410 411
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 411 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 406 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 416 currentId 406
Added AND Nodes: 415 416
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 416 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 40 with id = 395 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 421 currentId 395
Added AND Nodes: 420 421
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 421 from client 9 to 10
10 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 16 with id = 330 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 426 currentId 330
Added AND Nodes: 425 426
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 426 from client 2 to 3
3 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 416 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 431 currentId 416
Added AND Nodes: 430 431
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 431 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 431 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 436 currentId 431
Added AND Nodes: 435 436
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 436 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
2 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 436 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 441 currentId 436
Added AND Nodes: 440 441
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 441 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 441 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 446 currentId 441
Added AND Nodes: 445 446
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 446 from client 7 to 4
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => after replyFromServer: 0
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 3 with id = 411 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 451 currentId 411
Added AND Nodes: 450 451
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 451 from client 1 to 0
0 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 446 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 456 currentId 446
Added AND Nodes: 455 456
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 456 from client 4 to 5
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => after replyFromServer: 0
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 14 with id = 421 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 461 currentId 421
Added AND Nodes: 460 461
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 461 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 456 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 466 currentId 456
Added AND Nodes: 465 466
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 466 from client 5 to 6
5 => LOOP outcome: Correct & reachbound = False
6 => after replyFromServer: 0
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 115 with id = 341 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 471 currentId 341
Added AND Nodes: 470 471
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 471 from client 11 to 10
10 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 466 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 476 currentId 466
Added AND Nodes: 475 476
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 476 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 476 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 481 currentId 476
Added AND Nodes: 480 481
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 481 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 481 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 486 currentId 481
Added AND Nodes: 485 486
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 486 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 120 with id = 470 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 491 currentId 470
Added AND Nodes: 490 491
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 491 from client 11 to 8
8 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 5 with id = 486 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 496 currentId 486
Added AND Nodes: 495 496
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 496 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 20 with id = 495 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 501 currentId 495
Added AND Nodes: 500 501
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 501 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 6 with id = 451 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 506 currentId 451
Added AND Nodes: 505 506
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 506 from client 0 to 3
3 => after replyFromServer: 100
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 156 with id = 420 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 511 currentId 420
Added AND Nodes: 510 511
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 511 from client 9 to 11
11 => after replyFromServer: 50
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 496 and splitMode 0
7 => callsites count before spliiting 1 with id = 501 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 516 currentId 496
Added AND Nodes: 515 516
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 516 from client 6 to 4
4 => after replyFromServer: 0
7 => sending calltree : splitMode 0 mustReachId 521 currentId 501
Added AND Nodes: 520 521
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 521 from client 7 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
6 => outcome: Correct
Added New : 
7 : 
7 => outcome: Correct
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 9 with id = 450 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 526 currentId 450
Added AND Nodes: 525 526
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 526 from client 1 to 0
0 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 516 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 531 currentId 516
Added AND Nodes: 530 531
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 531 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 521 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 536 currentId 521
Added AND Nodes: 535 536
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 536 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 531 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 541 currentId 531
Added AND Nodes: 540 541
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 541 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 536 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 546 currentId 536
Added AND Nodes: 545 546
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 546 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => callsites count before spliiting 211 with id = 510 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 551 currentId 510
Added AND Nodes: 550 551
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 541 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 556 currentId 541
Added AND Nodes: 555 556
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 556 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 551 from client 9 to 11
11 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 546 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 561 currentId 546
Added AND Nodes: 560 561
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 561 from client 5 to 7
5 => LOOP outcome: Correct & reachbound = False
7 => after replyFromServer: 0
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 556 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 566 currentId 556
Added AND Nodes: 565 566
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 566 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 561 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 571 currentId 561
Added AND Nodes: 570 571
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 571 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 506 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 576 currentId 506
Added AND Nodes: 575 576
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 576 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 566 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 581 currentId 566
Added AND Nodes: 580 581
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 581 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 571 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 586 currentId 571
Added AND Nodes: 585 586
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 586 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 581 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 591 currentId 581
Added AND Nodes: 590 591
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 591 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 586 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 596 currentId 586
Added AND Nodes: 595 596
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 596 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 74 with id = 471 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 601 currentId 471
Added AND Nodes: 600 601
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 601 from client 10 to 8
8 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 28 with id = 425 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 606 currentId 425
Added AND Nodes: 605 606
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 606 from client 2 to 3
3 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 596 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 611 currentId 596
Added AND Nodes: 610 611
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 611 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 591 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 616 currentId 591
Added AND Nodes: 615 616
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 616 from client 4 to 7
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
7 => after replyFromServer: 0
for clientid : 4 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 611 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 621 currentId 611
Added AND Nodes: 620 621
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 621 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 616 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 626 currentId 616
Added AND Nodes: 625 626
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 626 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 6 with id = 621 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 631 currentId 621
Added AND Nodes: 630 631
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 631 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 626 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 636 currentId 626
Added AND Nodes: 635 636
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 636 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
9 => callsites count before spliiting 598 with id = 550 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 641 currentId 550
Added AND Nodes: 640 641
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 641 from client 9 to 10
10 => after replyFromServer: 50
5 => callsites count before spliiting 25 with id = 630 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 646 currentId 630
Added AND Nodes: 645 646
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 646 from client 5 to 4
4 => after replyFromServer: 0
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
9 => callsites count before spliiting 648 with id = 640 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 651 currentId 640
Added AND Nodes: 650 651
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 77 with id = 631 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 656 currentId 631
Added AND Nodes: 655 656
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 656 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 131 with id = 645 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 661 currentId 645
Added AND Nodes: 660 661
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 661 from client 5 to 6
6 => after replyFromServer: 0
2 => Spliiting due to client waiting
1 => Spliiting due to client waiting
1 => callsites count before spliiting 32 with id = 525 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 666 currentId 525
Added AND Nodes: 665 666
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 666 from client 1 to 3
3 => after replyFromServer: 100
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 651 from client 9 to 11
11 => after replyFromServer: 50
5 => callsites count before spliiting 274 with id = 660 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 671 currentId 660
Added AND Nodes: 670 671
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 671 from client 5 to 4
4 => after replyFromServer: 0
7 => callsites count before spliiting 244 with id = 636 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 676 currentId 636
Added AND Nodes: 675 676
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 676 from client 7 to 6
6 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 138 with id = 671 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 681 currentId 671
Added AND Nodes: 680 681
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 681 from client 4 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => callsites count before spliiting 254 with id = 680 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 686 currentId 680
Added AND Nodes: 685 686
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 686 from client 4 to 5
5 => after replyFromServer: 0
7 => callsites count before spliiting 735 with id = 675 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 691 currentId 675
Added AND Nodes: 690 691
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 691 from client 7 to 4
4 => after replyFromServer: 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 25 with id = 651 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 696 currentId 651
Added AND Nodes: 695 696
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 696 from client 11 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 39 with id = 601 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 701 currentId 601
Added AND Nodes: 700 701
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 701 from client 8 to 10
10 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => callsites count before spliiting 797 with id = 690 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 706 currentId 690
Added AND Nodes: 705 706
6 => callsites count before spliiting 244 with id = 681 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 711 currentId 681
Added AND Nodes: 710 711
0 => callsites count before spliiting 68 with id = 576 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 716 currentId 576
Added AND Nodes: 715 716
0 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 706 from client 7 to 4
4 => after replyFromServer: 0
2 => callsites count before spliiting 55 with id = 605 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 721 currentId 605
Added AND Nodes: 720 721
7 => callsites count before spliiting 646 with id = 705 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 726 currentId 705
Added AND Nodes: 725 726
1 => callsites count before spliiting 70 with id = 665 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 731 currentId 665
Added AND Nodes: 730 731
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 75 with id = 666 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 736 currentId 666
Added AND Nodes: 735 736
3 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 31 with id = 706 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 741 currentId 706
Added AND Nodes: 740 741
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 741 from client 4 to 7
7 => after replyFromServer: 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 8 with id = 701 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 746 currentId 701
Added AND Nodes: 745 746
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 746 from client 10 to 11
11 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => callsites count before spliiting 230 with id = 711 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 751 currentId 711
Added AND Nodes: 750 751
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 751 from client 6 to 4
4 => after replyFromServer: 0
5 => callsites count before spliiting 322 with id = 686 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 756 currentId 686
Added AND Nodes: 755 756
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 756 from client 5 to 7
7 => after replyFromServer: 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 98 with id = 745 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 761 currentId 745
Added AND Nodes: 760 761
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 761 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => callsites count before spliiting 200 with id = 755 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 766 currentId 755
Added AND Nodes: 765 766
6 => callsites count before spliiting 201 with id = 750 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 771 currentId 750
Added AND Nodes: 770 771
1 => callsites count before spliiting 50 with id = 731 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 776 currentId 731
Added AND Nodes: 775 776
1 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 6 with id = 771 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 781 currentId 771
Added AND Nodes: 780 781
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 781 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 5 with id = 781 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 786 currentId 781
Added AND Nodes: 785 786
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 786 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
2 => callsites count before spliiting 50 with id = 720 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 791 currentId 720
Added AND Nodes: 790 791
0 => callsites count before spliiting 51 with id = 716 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 796 currentId 716
Added AND Nodes: 795 796
0 => LOOP outcome: Correct & reachbound = False
7 => Spliiting due to client waiting
7 => callsites count before spliiting 125 with id = 756 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 801 currentId 756
Added AND Nodes: 800 801
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 801 from client 7 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 21 with id = 801 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 806 currentId 801
Added AND Nodes: 805 806
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 806 from client 5 to 6
6 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 98 with id = 805 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 811 currentId 805
Added AND Nodes: 810 811
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 811 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
0 => callsites count before spliiting 52 with id = 796 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 816 currentId 796
Added AND Nodes: 815 816
6 => callsites count before spliiting 4 with id = 811 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 821 currentId 811
Added AND Nodes: 820 821
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 821 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => callsites count before spliiting 243 with id = 751 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 826 currentId 751
Added AND Nodes: 825 826
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 826 from client 4 to 6
6 => after replyFromServer: 0
3 => callsites count before spliiting 51 with id = 736 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 831 currentId 736
Added AND Nodes: 830 831
3 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 230 with id = 800 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 836 currentId 800
Added AND Nodes: 835 836
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 836 from client 7 to 5
5 => after replyFromServer: 0
1 => callsites count before spliiting 50 with id = 776 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 841 currentId 776
Added AND Nodes: 840 841
0 => callsites count before spliiting 67 with id = 815 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 846 currentId 815
Added AND Nodes: 845 846
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => callsites count before spliiting 56 with id = 840 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 851 currentId 840
Added AND Nodes: 850 851
3 => callsites count before spliiting 52 with id = 831 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 856 currentId 831
Added AND Nodes: 855 856
0 => outcome: Errors
Outcome NOK bestAlgo updated to 0
Verification Outcome : NOK
Time Taken : 334.113251
bestAlgo: 0
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_bitvector_linux-3.16-rc1.tar.xz-43_2a-net--unix--unix.ko-entry_point_false-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 1 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
Added AND Nodes: 25 26
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 26 from client 8 to 9
9 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => callsites count before spliiting 92 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 1
1 => after replyFromServer: 100
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 26 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 36 currentId 26
Added AND Nodes: 35 36
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 36 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 92 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 41 currentId 21
Added AND Nodes: 40 41
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 41 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 92 with id = 36 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 46 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 46 from client 10 to 11
11 => after replyFromServer: 50
1 => callsites count before spliiting 92 with id = 31 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 51 currentId 31
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
Added AND Nodes: 50 51
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 51 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 41 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 56 currentId 41
Added AND Nodes: 55 56
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 56 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 56 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 61 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 61 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 89 with id = 46 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 71 currentId 46
Added AND Nodes: 70 71
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 71 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
2 => callsites count before spliiting 51 with id = 51 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 76 currentId 51
Added AND Nodes: 75 76
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 76 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 92 with id = 66 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 81 currentId 66
Added AND Nodes: 80 81
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 81 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 81 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 86 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 91 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 51 with id = 71 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 96 currentId 71
Added AND Nodes: 95 96
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 96 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 91 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 101 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 10 with id = 76 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 106 currentId 76
Added AND Nodes: 105 106
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 106 from client 3 to 0
0 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 111 currentId 101
Added AND Nodes: 110 111
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 111 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 111 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 116 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 116 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 121 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 10 with id = 96 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 126 currentId 96
Added AND Nodes: 125 126
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 126 from client 9 to 10
10 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 38 with id = 105 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 131 currentId 105
Added AND Nodes: 130 131
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 131 from client 3 to 1
1 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 121 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 136 currentId 121
Added AND Nodes: 135 136
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 136 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 136 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 141 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 6 with id = 126 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 146 currentId 126
Added AND Nodes: 145 146
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 146 from client 10 to 11
11 => after replyFromServer: 50
10 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 141 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 151 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 27 with id = 106 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 156 currentId 106
Added AND Nodes: 155 156
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 156 from client 0 to 2
2 => after replyFromServer: 100
7 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 38 with id = 125 and splitMode 50
7 => callsites count before spliiting 1 with id = 151 and splitMode 0
9 => sending calltree : splitMode 50 mustReachId 161 currentId 125
7 => sending calltree : splitMode 0 mustReachId 166 currentId 151
Added AND Nodes: 160 161
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 161 from client 9 to 8
Added AND Nodes: 165 166
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 166 from client 7 to 4
8 => after replyFromServer: 50
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
3 => callsites count before spliiting 65 with id = 130 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 171 currentId 130
Added AND Nodes: 170 171
3 => LOOP outcome: Correct & reachbound = False
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 166 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 166
Added AND Nodes: 175 176
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 176 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 176 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 181 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => callsites count before spliiting 56 with id = 155 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 186 currentId 155
Added AND Nodes: 185 186
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 181 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 191 currentId 181
Added AND Nodes: 190 191
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 191 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 191 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 196 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 196 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 201 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 201 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 206 currentId 201
Added AND Nodes: 205 206
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 206 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => callsites count before spliiting 57 with id = 131 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 211 currentId 131
Added AND Nodes: 210 211
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 206 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 216 currentId 206
Added AND Nodes: 215 216
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 216 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 216 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 221 currentId 216
Added AND Nodes: 220 221
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 221 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => callsites count before spliiting 64 with id = 156 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 226 currentId 156
Added AND Nodes: 225 226
2 => LOOP outcome: Correct & reachbound = False
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 221 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 231 currentId 221
Added AND Nodes: 230 231
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 231 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 231 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 236 currentId 231
Added AND Nodes: 235 236
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 236 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 236 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 241 currentId 236
Added AND Nodes: 240 241
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 241 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 241 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 246 currentId 241
Added AND Nodes: 245 246
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 246 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 246 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 251 currentId 246
Added AND Nodes: 250 251
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 251 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => callsites count before spliiting 59 with id = 185 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 256 currentId 185
Added AND Nodes: 255 256
0 => LOOP outcome: Correct & reachbound = False
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 251 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 261 currentId 251
Added AND Nodes: 260 261
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 261 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => callsites count before spliiting 50 with id = 171 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 266 currentId 171
Added AND Nodes: 265 266
9 => callsites count before spliiting 201 with id = 160 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 271 currentId 160
Added AND Nodes: 270 271
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 261 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 276 currentId 261
Added AND Nodes: 275 276
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 276 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 276 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 281 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 281 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 286 currentId 281
Added AND Nodes: 285 286
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 286 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => callsites count before spliiting 204 with id = 270 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 291 currentId 270
Added AND Nodes: 290 291
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 286 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 296 currentId 286
Added AND Nodes: 295 296
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 296 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 296 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 301 currentId 296
Added AND Nodes: 300 301
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 301 from client 6 to 7
6 => LOOP outcome: Correct & reachbound = False
7 => after replyFromServer: 0
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 301 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 306 currentId 301
Added AND Nodes: 305 306
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 306 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => callsites count before spliiting 220 with id = 145 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 311 currentId 145
Added AND Nodes: 310 311
4 => Spliiting due to client waiting
4 => callsites count before spliiting 16 with id = 306 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 316 currentId 306
Added AND Nodes: 315 316
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 316 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 4 with id = 316 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 321 currentId 316
Added AND Nodes: 320 321
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 321 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 11 with id = 320 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 326 currentId 320
Added AND Nodes: 325 326
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 326 from client 5 to 7
7 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 29 with id = 325 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 331 currentId 325
Added AND Nodes: 330 331
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 331 from client 5 to 4
4 => after replyFromServer: 0
11 => callsites count before spliiting 226 with id = 146 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 336 currentId 146
Added AND Nodes: 335 336
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
5 => callsites count before spliiting 284 with id = 330 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 341 currentId 330
Added AND Nodes: 340 341
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 54 with id = 226 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 346 currentId 226
Added AND Nodes: 345 346
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 261 with id = 321 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 351 currentId 321
Added AND Nodes: 350 351
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 321 with id = 331 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 356 currentId 331
Added AND Nodes: 355 356
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => callsites count before spliiting 224 with id = 310 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 361 currentId 310
Added AND Nodes: 360 361
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
WARNING: Duplicate si_unique_call annotations in unix_next_socket
5 => callsites count before spliiting 282 with id = 341 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 366 currentId 341
Added AND Nodes: 365 366
WARNING: Duplicate si_unique_call annotations in unix_next_socket
6 => callsites count before spliiting 271 with id = 351 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 371 currentId 351
Added AND Nodes: 370 371
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 59 with id = 346 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 376 currentId 346
Added AND Nodes: 375 376
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 244 with id = 326 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 326
Added AND Nodes: 380 381
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 74 with id = 210 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 386 currentId 210
Added AND Nodes: 385 386
0 => callsites count before spliiting 68 with id = 256 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 391 currentId 256
Added AND Nodes: 390 391
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 66 with id = 265 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 396 currentId 265
Added AND Nodes: 395 396
3 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 61 with id = 396 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 401 currentId 396
Added AND Nodes: 400 401
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 59 with id = 385 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 406 currentId 385
Added AND Nodes: 405 406
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 60 with id = 391 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 411 currentId 391
Added AND Nodes: 410 411
0 => LOOP outcome: Correct & reachbound = False
WARNING: Duplicate si_unique_call annotations in unix_next_socket
4 => callsites count before spliiting 296 with id = 356 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 416 currentId 356
Added AND Nodes: 415 416
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 251 with id = 291 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 421 currentId 291
Added AND Nodes: 420 421
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
WARNING: Duplicate si_unique_call annotations in unix_next_socket
7 => callsites count before spliiting 280 with id = 381 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 426 currentId 381
Added AND Nodes: 425 426
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 73 with id = 406 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 431 currentId 406
Added AND Nodes: 430 431
1 => LOOP outcome: Correct & reachbound = False
0 => outcome: Errors
Outcome NOK bestAlgo updated to 0
Verification Outcome : NOK
Time Taken : 442.250488
bestAlgo: 0
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--isdn--mISDN--mISDN_dsp.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Verifying 15 impls
Verifying 15 impls
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Verifying 15 impls
Verifying 15 impls
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
Verifying 15 impls
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
for clientid : 3 algo id is 0
0 => outcome: Errors
Outcome NOK bestAlgo updated to 0
Verification Outcome : NOK
Time Taken : 8.788855
bestAlgo: 0
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--memstick--host--jmb38x_ms.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 5 algo id is 1
for clientid : 4 algo id is 1
for clientid : 6 algo id is 1
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 5
Algo : 1 started with splitmode 0
5 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
0 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 11 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 21 currentId 11
8 => Spliiting due to client waiting
for clientid : 11 algo id is 2
Added AND Nodes: 20 21
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 21 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 11 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 21 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 31 currentId 21
8 => Spliiting due to client waiting
8 => callsites count before spliiting 11 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 31 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 17 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 46 currentId 26
Added AND Nodes: 45 46
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 46 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => Spliiting due to client waiting
7 => Spliiting due to client waiting
9 => callsites count before spliiting 17 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 36
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 41
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 56 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 61 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 61 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 76 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 81 from client 5 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
2 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
2 => callsites count before spliiting 28 with id = 46 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 86 currentId 46
10 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 11 with id = 80 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 91 currentId 80
Added AND Nodes: 90 91
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 91 from client 5 to 6
10 => callsites count before spliiting 1 with id = 51 and splitMode 50
6 => after replyFromServer: 0
10 => sending calltree : splitMode 50 mustReachId 96 currentId 51
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 85 86
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 86 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 81 and splitMode 0
Added AND Nodes: 95 96
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 96 from client 10 to 11
4 => sending calltree : splitMode 0 mustReachId 101 currentId 81
11 => after replyFromServer: 50
Added AND Nodes: 100 101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 101 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 101 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 106 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 91 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 91
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 106 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 116 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 116 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 121 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 111 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 111
Added AND Nodes: 125 126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 126 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 131 from client 6 to 7
7 => after replyFromServer: 0
5 => callsites count before spliiting 21 with id = 121 and splitMode 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
5 => sending calltree : splitMode 0 mustReachId 136 currentId 121
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 135 136
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 136 from client 5 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 131 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 141 currentId 131
Added AND Nodes: 140 141
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 141 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
7 => outcome: Correct
Added New : 
4 : 
4 => outcome: Correct
for clientid : 7 algo id is 1
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 141 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 146 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 20 with id = 86 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 151 currentId 86
Added AND Nodes: 150 151
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 151 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 27 with id = 96 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 156 currentId 96
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 146 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 161 currentId 146
Added AND Nodes: 160 161
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 161 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 155 156
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 156 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 161 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 166 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 166 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 171 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 4 with id = 171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 176 from client 6 to 5
5 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 11 with id = 175 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 181 currentId 175
Added AND Nodes: 180 181
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 181 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
8 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 176 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 186 currentId 176
Added AND Nodes: 185 186
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 186 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => callsites count before spliiting 20 with id = 156 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 191 currentId 156
Added AND Nodes: 190 191
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 191 from client 8 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 13 with id = 151 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 196 currentId 151
Added AND Nodes: 195 196
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 196 from client 0 to 1
1 => after replyFromServer: 100
4 => Spliiting due to client waiting
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
4 => callsites count before spliiting 1 with id = 186 and splitMode 0
for clientid : 0 algo id is 0
4 => sending calltree : splitMode 0 mustReachId 201 currentId 186
Added AND Nodes: 200 201
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 201 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 181 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 206 currentId 181
Added AND Nodes: 205 206
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 206 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 201 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 211 currentId 201
Added AND Nodes: 210 211
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 211 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
9 => Spliiting due to client waiting
for clientid : 6 algo id is 1
9 => callsites count before spliiting 2 with id = 191 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 216 currentId 191
Added AND Nodes: 215 216
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 216 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 206 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 221 currentId 206
Added AND Nodes: 220 221
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 221 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 211 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 226 currentId 211
Added AND Nodes: 225 226
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 226 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 221 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 231 currentId 221
Added AND Nodes: 230 231
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 231 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
6 => Spliiting due to client waiting
for clientid : 7 algo id is 1
6 => callsites count before spliiting 2 with id = 226 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 236 currentId 226
Added AND Nodes: 235 236
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 236 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 14 with id = 235 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 241 currentId 235
Added AND Nodes: 240 241
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 241 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 236 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 246 currentId 236
Added AND Nodes: 245 246
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 246 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 231 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 251 currentId 231
Added AND Nodes: 250 251
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 251 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 241 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 256 currentId 241
Added AND Nodes: 255 256
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 256 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 246 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 261 currentId 246
Added AND Nodes: 260 261
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 261 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 3 with id = 251 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 266 currentId 251
Added AND Nodes: 265 266
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 266 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 4 with id = 256 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 271 currentId 256
Added AND Nodes: 270 271
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 271 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 12 with id = 196 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 276 currentId 196
Added AND Nodes: 275 276
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 276 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
10 => Spliiting due to client waiting
7 => Spliiting due to client waiting
10 => callsites count before spliiting 12 with id = 216 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 281 currentId 216
Added AND Nodes: 280 281
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 281 from client 10 to 11
11 => after replyFromServer: 50
7 => callsites count before spliiting 1 with id = 261 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 286 currentId 261
Added AND Nodes: 285 286
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 286 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 266 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 291 currentId 266
Added AND Nodes: 290 291
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 291 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 271 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 296 currentId 271
Added AND Nodes: 295 296
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 296 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 291 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 301 currentId 291
Added AND Nodes: 300 301
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 301 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 286 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 306 currentId 286
Added AND Nodes: 305 306
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 306 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 4 with id = 281 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 311 currentId 281
Added AND Nodes: 310 311
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 311 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 296 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 316 currentId 296
Added AND Nodes: 315 316
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 316 from client 6 to 5
5 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 311 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 321 currentId 311
Added AND Nodes: 320 321
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 321 from client 8 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 18 with id = 316 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 326 currentId 316
Added AND Nodes: 325 326
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 326 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 6 with id = 276 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 331 currentId 276
Added AND Nodes: 330 331
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 331 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 52 with id = 301 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 336 currentId 301
Added AND Nodes: 335 336
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 336 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 59 with id = 315 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 341 currentId 315
Added AND Nodes: 340 341
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 341 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 326 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 346 currentId 326
Added AND Nodes: 345 346
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 346 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 9 with id = 336 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 351 currentId 336
Added AND Nodes: 350 351
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 351 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 4 with id = 346 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 356 currentId 346
Added AND Nodes: 355 356
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 356 from client 6 to 5
5 => after replyFromServer: 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 10 with id = 321 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 361 currentId 321
Added AND Nodes: 360 361
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 361 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
3 => Spliiting due to client waiting
10 => Spliiting due to client waiting
3 => callsites count before spliiting 7 with id = 331 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 366 currentId 331
Added AND Nodes: 365 366
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 366 from client 3 to 0
0 => after replyFromServer: 100
10 => callsites count before spliiting 6 with id = 361 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 371 currentId 361
Added AND Nodes: 370 371
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 371 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 7 with id = 371 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 376 currentId 371
Added AND Nodes: 375 376
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 376 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 6 with id = 366 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 381 currentId 366
Added AND Nodes: 380 381
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 381 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 29 with id = 376 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 386 currentId 376
Added AND Nodes: 385 386
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 386 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => callsites count before spliiting 229 with id = 355 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 391 currentId 355
Added AND Nodes: 390 391
5 => callsites count before spliiting 226 with id = 356 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 396 currentId 356
Added AND Nodes: 395 396
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
9 => Spliiting due to client waiting
9 => callsites count before spliiting 37 with id = 386 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 401 currentId 386
Added AND Nodes: 400 401
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 401 from client 9 to 10
10 => after replyFromServer: 50
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 381 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 406 currentId 381
Added AND Nodes: 405 406
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 406 from client 1 to 2
2 => after replyFromServer: 100
1 => Spliiting due to client waiting
1 => callsites count before spliiting 11 with id = 405 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 411 currentId 405
Added AND Nodes: 410 411
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 411 from client 1 to 3
3 => after replyFromServer: 100
9 => Spliiting due to client waiting
9 => callsites count before spliiting 40 with id = 400 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 416 currentId 400
Added AND Nodes: 415 416
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 416 from client 9 to 11
11 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 57 with id = 415 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 421 currentId 415
Added AND Nodes: 420 421
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 421 from client 9 to 8
8 => after replyFromServer: 50
7 => callsites count before spliiting 238 with id = 351 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 426 currentId 351
Added AND Nodes: 425 426
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 15 with id = 410 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 431 currentId 410
Added AND Nodes: 430 431
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 431 from client 1 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 19 with id = 430 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 436 currentId 430
Added AND Nodes: 435 436
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 436 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => callsites count before spliiting 232 with id = 341 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 441 currentId 341
Added AND Nodes: 440 441
8 => Spliiting due to client waiting
8 => callsites count before spliiting 16 with id = 421 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 446 currentId 421
Added AND Nodes: 445 446
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 446 from client 8 to 9
9 => after replyFromServer: 50
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 68 with id = 401 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 451 currentId 401
Added AND Nodes: 450 451
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 451 from client 10 to 11
11 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 3 with id = 436 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 456 currentId 436
Added AND Nodes: 455 456
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 456 from client 3 to 1
1 => after replyFromServer: 100
2 => Spliiting due to client waiting
2 => callsites count before spliiting 6 with id = 406 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 461 currentId 406
Added AND Nodes: 460 461
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 461 from client 2 to 0
0 => after replyFromServer: 100
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => Spliiting due to client waiting
10 => callsites count before spliiting 91 with id = 450 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 466 currentId 450
Added AND Nodes: 465 466
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 466 from client 10 to 8
8 => after replyFromServer: 50
10 => Spliiting due to client waiting
10 => callsites count before spliiting 113 with id = 465 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 471 currentId 465
Added AND Nodes: 470 471
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 471 from client 10 to 9
9 => after replyFromServer: 50
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 16 with id = 460 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 476 currentId 460
Added AND Nodes: 475 476
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 476 from client 2 to 1
1 => after replyFromServer: 100
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 18 with id = 471 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 481 currentId 471
Added AND Nodes: 480 481
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 481 from client 9 to 8
8 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 22 with id = 475 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 486 currentId 475
Added AND Nodes: 485 486
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 486 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 19 with id = 455 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 491 currentId 455
Added AND Nodes: 490 491
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 491 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 1 with id = 486 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 496 currentId 486
Added AND Nodes: 495 496
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 496 from client 1 to 3
3 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
1 => Spliiting due to client waiting
1 => Spliiting due to client waiting
1 => callsites count before spliiting 5 with id = 495 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 501 currentId 495
Added AND Nodes: 500 501
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 501 from client 1 to 2
2 => after replyFromServer: 100
5 => callsites count before spliiting 207 with id = 396 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 506 currentId 396
Added AND Nodes: 505 506
6 => callsites count before spliiting 207 with id = 391 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 511 currentId 391
Added AND Nodes: 510 511
1 => callsites count before spliiting 51 with id = 500 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 516 currentId 500
Added AND Nodes: 515 516
1 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 20 with id = 496 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 521 currentId 496
Added AND Nodes: 520 521
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 521 from client 3 to 2
2 => after replyFromServer: 100
0 => Spliiting due to client waiting
0 => callsites count before spliiting 13 with id = 461 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 526 currentId 461
Added AND Nodes: 525 526
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 526 from client 0 to 1
1 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 68 with id = 451 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 531 currentId 451
Added AND Nodes: 530 531
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 531 from client 11 to 9
9 => after replyFromServer: 50
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 96 with id = 530 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 536 currentId 530
Added AND Nodes: 535 536
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 536 from client 11 to 10
10 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 20 with id = 525 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 541 currentId 525
Added AND Nodes: 540 541
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 541 from client 0 to 2
2 => after replyFromServer: 100
0 => Spliiting due to client waiting
0 => callsites count before spliiting 23 with id = 540 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 546 currentId 540
Added AND Nodes: 545 546
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 546 from client 0 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 26 with id = 545 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 551 currentId 545
Added AND Nodes: 550 551
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 551 from client 0 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => callsites count before spliiting 28 with id = 536 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 556 currentId 536
Added AND Nodes: 555 556
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 556 from client 10 to 8
8 => after replyFromServer: 50
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 30 with id = 550 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 561 currentId 550
Added AND Nodes: 560 561
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 561 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => callsites count before spliiting 235 with id = 441 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 566 currentId 441
Added AND Nodes: 565 566
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 561 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 571 currentId 561
Added AND Nodes: 570 571
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 571 from client 3 to 2
2 => after replyFromServer: 100
3 => Spliiting due to client waiting
3 => Spliiting due to client waiting
3 => callsites count before spliiting 5 with id = 570 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 576 currentId 570
Added AND Nodes: 575 576
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 576 from client 3 to 0
0 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 113 with id = 535 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 581 currentId 535
Added AND Nodes: 580 581
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 581 from client 11 to 10
10 => after replyFromServer: 50
4 => callsites count before spliiting 343 with id = 565 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 586 currentId 565
Added AND Nodes: 585 586
10 => Spliiting due to client waiting
10 => callsites count before spliiting 25 with id = 581 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 591 currentId 581
Added AND Nodes: 590 591
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 591 from client 10 to 8
8 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
3 => callsites count before spliiting 60 with id = 575 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 596 currentId 575
Added AND Nodes: 595 596
11 => Spliiting due to client waiting
11 => callsites count before spliiting 138 with id = 580 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 601 currentId 580
Added AND Nodes: 600 601
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 601 from client 11 to 8
8 => after replyFromServer: 50
2 => callsites count before spliiting 63 with id = 571 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 606 currentId 571
Added AND Nodes: 605 606
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
0 => callsites count before spliiting 58 with id = 576 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 611 currentId 576
Added AND Nodes: 610 611
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 611 from client 0 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 7 with id = 596 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 616 currentId 596
Added AND Nodes: 615 616
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 616 from client 3 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 13 with id = 526 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 621 currentId 526
Added AND Nodes: 620 621
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 621 from client 1 to 2
2 => after replyFromServer: 100
1 => Spliiting due to client waiting
1 => callsites count before spliiting 17 with id = 620 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 626 currentId 620
Added AND Nodes: 625 626
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 626 from client 1 to 3
3 => after replyFromServer: 100
1 => Spliiting due to client waiting
1 => callsites count before spliiting 20 with id = 625 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 631 currentId 625
Added AND Nodes: 630 631
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 631 from client 1 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 23 with id = 630 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 636 currentId 630
Added AND Nodes: 635 636
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 636 from client 1 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 27 with id = 635 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 641 currentId 635
Added AND Nodes: 640 641
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 641 from client 1 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 30 with id = 640 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 646 currentId 640
Added AND Nodes: 645 646
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 646 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 2 with id = 646 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 651 currentId 646
Added AND Nodes: 650 651
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 651 from client 3 to 0
0 => after replyFromServer: 100
3 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 1 with id = 651 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 656 currentId 651
Added AND Nodes: 655 656
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 656 from client 0 to 1
1 => after replyFromServer: 100
3 => callsites count before spliiting 60 with id = 650 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 661 currentId 650
Added AND Nodes: 660 661
1 => callsites count before spliiting 58 with id = 656 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 666 currentId 656
Added AND Nodes: 665 666
0 => callsites count before spliiting 61 with id = 655 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 671 currentId 655
Added AND Nodes: 670 671
7 => callsites count before spliiting 226 with id = 426 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 676 currentId 426
Added AND Nodes: 675 676
7 => callsites count before spliiting 237 with id = 675 and splitMode 0
1 => LOOP outcome: Correct & reachbound = False
7 => sending calltree : splitMode 0 mustReachId 681 currentId 675
Added AND Nodes: 680 681
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 245 with id = 511 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 686 currentId 511
Added AND Nodes: 685 686
7 => callsites count before spliiting 209 with id = 681 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 691 currentId 681
Added AND Nodes: 690 691
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 671 from client 0 to 1
1 => after replyFromServer: 100
6 => callsites count before spliiting 314 with id = 685 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 696 currentId 685
Added AND Nodes: 695 696
7 => callsites count before spliiting 255 with id = 690 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 701 currentId 690
Added AND Nodes: 700 701
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 245 with id = 506 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 706 currentId 506
Added AND Nodes: 705 706
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 661 from client 3 to 0
0 => after replyFromServer: 100
3 => callsites count before spliiting 62 with id = 660 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 711 currentId 660
Added AND Nodes: 710 711
5 => callsites count before spliiting 299 with id = 705 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 716 currentId 705
Added AND Nodes: 715 716
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 711 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
0 => callsites count before spliiting 51 with id = 661 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 721 currentId 661
Added AND Nodes: 720 721
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 721 from client 0 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 15 with id = 721 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 726 currentId 721
Added AND Nodes: 725 726
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 726 from client 3 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => callsites count before spliiting 270 with id = 566 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 731 currentId 566
Added AND Nodes: 730 731
2 => Spliiting due to client waiting
2 => callsites count before spliiting 13 with id = 621 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 736 currentId 621
Added AND Nodes: 735 736
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 736 from client 2 to 0
0 => after replyFromServer: 100
2 => Spliiting due to client waiting
2 => callsites count before spliiting 17 with id = 735 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 741 currentId 735
Added AND Nodes: 740 741
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 741 from client 2 to 1
1 => after replyFromServer: 100
2 => Spliiting due to client waiting
2 => callsites count before spliiting 20 with id = 740 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 746 currentId 740
Added AND Nodes: 745 746
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 746 from client 2 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 26 with id = 745 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 751 currentId 745
Added AND Nodes: 750 751
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 751 from client 2 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
2 => Spliiting due to client waiting
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
2 => Spliiting due to client waiting
2 => callsites count before spliiting 29 with id = 750 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 756 currentId 750
Added AND Nodes: 755 756
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 756 from client 2 to 3
3 => after replyFromServer: 100
2 => Spliiting due to client waiting
2 => Spliiting due to client waiting
2 => callsites count before spliiting 33 with id = 755 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 761 currentId 755
Added AND Nodes: 760 761
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 761 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 1 with id = 761 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 766 currentId 761
Added AND Nodes: 765 766
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 766 from client 1 to 2
2 => after replyFromServer: 100
1 => Spliiting due to client waiting
2 => Spliiting due to client waiting
2 => callsites count before spliiting 1 with id = 766 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 771 currentId 766
Added AND Nodes: 770 771
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 771 from client 2 to 3
3 => after replyFromServer: 100
3 => callsites count before spliiting 67 with id = 771 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 776 currentId 771
Added AND Nodes: 775 776
1 => callsites count before spliiting 68 with id = 765 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 781 currentId 765
Added AND Nodes: 780 781
2 => callsites count before spliiting 69 with id = 770 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 786 currentId 770
Added AND Nodes: 785 786
3 => callsites count before spliiting 52 with id = 775 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 791 currentId 775
Added AND Nodes: 790 791
3 => LOOP outcome: Correct & reachbound = False
9 => Spliiting due to client waiting
9 => callsites count before spliiting 85 with id = 531 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 796 currentId 531
Added AND Nodes: 795 796
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 796 from client 9 to 10
10 => after replyFromServer: 50
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 54 with id = 785 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 801 currentId 785
Added AND Nodes: 800 801
9 => Spliiting due to client waiting
9 => callsites count before spliiting 105 with id = 795 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 806 currentId 795
Added AND Nodes: 805 806
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 806 from client 9 to 11
11 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 110 with id = 805 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 811 currentId 805
Added AND Nodes: 810 811
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 811 from client 9 to 8
8 => after replyFromServer: 50
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 2
Assign partition 786 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 781 from client 1 to 2
2 => after replyFromServer: 100
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 98 with id = 806 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 816 currentId 806
Added AND Nodes: 815 816
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 816 from client 11 to 8
8 => after replyFromServer: 50
1 => callsites count before spliiting 52 with id = 780 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 821 currentId 780
Added AND Nodes: 820 821
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => callsites count before spliiting 249 with id = 676 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 826 currentId 676
Added AND Nodes: 825 826
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 203 with id = 706 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 831 currentId 706
Added AND Nodes: 830 831
5 => callsites count before spliiting 215 with id = 830 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 836 currentId 830
Added AND Nodes: 835 836
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
5 => callsites count before spliiting 222 with id = 835 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 841 currentId 835
Added AND Nodes: 840 841
1 => Spliiting due to client waiting
1 => callsites count before spliiting 25 with id = 821 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 846 currentId 821
Added AND Nodes: 845 846
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 846 from client 1 to 3
3 => after replyFromServer: 100
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 214 with id = 841 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 851 currentId 841
Added AND Nodes: 850 851
5 => callsites count before spliiting 219 with id = 850 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 856 currentId 850
Added AND Nodes: 855 856
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 232 with id = 836 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 861 currentId 836
Added AND Nodes: 860 861
5 => callsites count before spliiting 213 with id = 860 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 866 currentId 860
Added AND Nodes: 865 866
6 => callsites count before spliiting 208 with id = 686 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 871 currentId 686
Added AND Nodes: 870 871
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
5 => callsites count before spliiting 227 with id = 865 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 876 currentId 865
Added AND Nodes: 875 876
6 => callsites count before spliiting 217 with id = 870 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 881 currentId 870
Added AND Nodes: 880 881
6 => callsites count before spliiting 234 with id = 880 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 886 currentId 880
Added AND Nodes: 885 886
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 736 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 891 currentId 736
Added AND Nodes: 890 891
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 891 from client 0 to 1
1 => after replyFromServer: 100
5 => callsites count before spliiting 214 with id = 875 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 896 currentId 875
Added AND Nodes: 895 896
6 => callsites count before spliiting 212 with id = 885 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 901 currentId 885
Added AND Nodes: 900 901
6 => callsites count before spliiting 230 with id = 900 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 906 currentId 900
Added AND Nodes: 905 906
2 => callsites count before spliiting 53 with id = 781 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 911 currentId 781
Added AND Nodes: 910 911
5 => callsites count before spliiting 203 with id = 895 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 916 currentId 895
Added AND Nodes: 915 916
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 201 with id = 905 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 921 currentId 905
Added AND Nodes: 920 921
5 => callsites count before spliiting 204 with id = 916 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 926 currentId 916
Added AND Nodes: 925 926
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 232 with id = 866 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 931 currentId 866
Added AND Nodes: 930 931
5 => callsites count before spliiting 203 with id = 930 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 936 currentId 930
Added AND Nodes: 935 936
7 => callsites count before spliiting 239 with id = 825 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 941 currentId 825
Added AND Nodes: 940 941
6 => callsites count before spliiting 210 with id = 920 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 946 currentId 920
Added AND Nodes: 945 946
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 212 with id = 861 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 951 currentId 861
Added AND Nodes: 950 951
5 => callsites count before spliiting 375 with id = 950 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 956 currentId 950
Added AND Nodes: 955 956
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 911 from client 2 to 3
3 => after replyFromServer: 100
5 => callsites count before spliiting 330 with id = 955 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 961 currentId 955
Added AND Nodes: 960 961
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => callsites count before spliiting 247 with id = 960 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 966 currentId 960
Added AND Nodes: 965 966
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 45 with id = 890 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 971 currentId 890
Added AND Nodes: 970 971
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 971 from client 0 to 2
2 => after replyFromServer: 100
0 => callsites count before spliiting 53 with id = 970 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 976 currentId 970
Added AND Nodes: 975 976
6 => callsites count before spliiting 203 with id = 945 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 981 currentId 945
Added AND Nodes: 980 981
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 201 with id = 946 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 986 currentId 946
Added AND Nodes: 985 986
2 => callsites count before spliiting 51 with id = 971 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 991 currentId 971
Added AND Nodes: 990 991
6 => callsites count before spliiting 205 with id = 985 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 996 currentId 985
Added AND Nodes: 995 996
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 51 with id = 975 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1001 currentId 975
Added AND Nodes: 1000 1001
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 2
Assign partition 976 from client 0 to 3
3 => after replyFromServer: 100
7 => callsites count before spliiting 258 with id = 940 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1006 currentId 940
Added AND Nodes: 1005 1006
4 => callsites count before spliiting 260 with id = 730 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1011 currentId 730
Added AND Nodes: 1010 1011
4 => callsites count before spliiting 222 with id = 1010 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1016 currentId 1010
Added AND Nodes: 1015 1016
7 => callsites count before spliiting 207 with id = 1005 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1021 currentId 1005
Added AND Nodes: 1020 1021
4 => callsites count before spliiting 227 with id = 1015 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1026 currentId 1015
Added AND Nodes: 1025 1026
4 => callsites count before spliiting 203 with id = 1025 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1031 currentId 1025
Added AND Nodes: 1030 1031
4 => callsites count before spliiting 201 with id = 1030 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1036 currentId 1030
Added AND Nodes: 1035 1036
7 => callsites count before spliiting 201 with id = 1020 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1041 currentId 1020
Added AND Nodes: 1040 1041
7 => callsites count before spliiting 211 with id = 1040 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1046 currentId 1040
Added AND Nodes: 1045 1046
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 202 with id = 996 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1051 currentId 996
Added AND Nodes: 1050 1051
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 204 with id = 1026 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1056 currentId 1026
Added AND Nodes: 1055 1056
7 => callsites count before spliiting 202 with id = 1045 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1061 currentId 1045
Added AND Nodes: 1060 1061
4 => callsites count before spliiting 232 with id = 1055 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1066 currentId 1055
Added AND Nodes: 1065 1066
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 213 with id = 1016 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1071 currentId 1016
Added AND Nodes: 1070 1071
4 => callsites count before spliiting 241 with id = 1070 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1076 currentId 1070
Added AND Nodes: 1075 1076
7 => callsites count before spliiting 206 with id = 1060 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1081 currentId 1060
Added AND Nodes: 1080 1081
4 => callsites count before spliiting 320 with id = 1075 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1086 currentId 1075
Added AND Nodes: 1085 1086
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 200 with id = 831 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1091 currentId 831
Added AND Nodes: 1090 1091
4 => callsites count before spliiting 231 with id = 1085 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1096 currentId 1085
Added AND Nodes: 1095 1096
6 => callsites count before spliiting 210 with id = 901 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1101 currentId 901
Added AND Nodes: 1100 1101
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 221 with id = 886 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1106 currentId 886
Added AND Nodes: 1105 1106
3 => callsites count before spliiting 50 with id = 976 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1111 currentId 976
Added AND Nodes: 1110 1111
6 => callsites count before spliiting 216 with id = 1105 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1116 currentId 1105
Added AND Nodes: 1115 1116
6 => callsites count before spliiting 212 with id = 1115 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1121 currentId 1115
Added AND Nodes: 1120 1121
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 233 with id = 881 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1126 currentId 881
Added AND Nodes: 1125 1126
6 => callsites count before spliiting 212 with id = 1125 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1131 currentId 1125
Added AND Nodes: 1130 1131
6 => callsites count before spliiting 200 with id = 1130 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1136 currentId 1130
Added AND Nodes: 1135 1136
7 => callsites count before spliiting 205 with id = 1080 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1141 currentId 1080
Added AND Nodes: 1140 1141
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 203 with id = 1136 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1146 currentId 1136
Added AND Nodes: 1145 1146
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 203 with id = 1131 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1151 currentId 1131
Added AND Nodes: 1150 1151
0 => callsites count before spliiting 50 with id = 1000 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1156 currentId 1000
Added AND Nodes: 1155 1156
6 => callsites count before spliiting 206 with id = 1150 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1161 currentId 1150
Added AND Nodes: 1160 1161
7 => callsites count before spliiting 203 with id = 1141 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1166 currentId 1141
Added AND Nodes: 1165 1166
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 211 with id = 1126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1171 currentId 1126
Added AND Nodes: 1170 1171
6 => callsites count before spliiting 343 with id = 1170 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1176 currentId 1170
Added AND Nodes: 1175 1176
6 => callsites count before spliiting 318 with id = 1175 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1181 currentId 1175
Added AND Nodes: 1180 1181
6 => callsites count before spliiting 244 with id = 1180 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1186 currentId 1180
Added AND Nodes: 1185 1186
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 51 with id = 990 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1191 currentId 990
Added AND Nodes: 1190 1191
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 209 with id = 1166 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1196 currentId 1166
Added AND Nodes: 1195 1196
3 => callsites count before spliiting 52 with id = 1110 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1201 currentId 1110
Added AND Nodes: 1200 1201
7 => callsites count before spliiting 204 with id = 1195 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1206 currentId 1195
Added AND Nodes: 1205 1206
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 203 with id = 1011 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1211 currentId 1011
Added AND Nodes: 1210 1211
7 => callsites count before spliiting 201 with id = 1206 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1216 currentId 1206
Added AND Nodes: 1215 1216
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 206 with id = 1090 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1221 currentId 1090
Added AND Nodes: 1220 1221
7 => callsites count before spliiting 208 with id = 1216 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1226 currentId 1216
Added AND Nodes: 1225 1226
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 60 with id = 1156 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1231 currentId 1156
Added AND Nodes: 1230 1231
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 240 with id = 1041 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1236 currentId 1041
Added AND Nodes: 1235 1236
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 201 with id = 1235 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1241 currentId 1235
Added AND Nodes: 1240 1241
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--ethernet--calxeda--xgmac.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
for clientid : 10 algo id is 2
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 18 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 1
1 => after replyFromServer: 100
8 => Spliiting due to client waiting
6 => Spliiting due to client waiting
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
8 => callsites count before spliiting 18 with id = 16 and splitMode 50
for clientid : 0 algo id is 0
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 26
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 51 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 56 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 56 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 61 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 61 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 66 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 66 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 71 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 76 currentId 36
Added AND Nodes: 75 76
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 76 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 16 with id = 31 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 81 currentId 31
Added AND Nodes: 80 81
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 81 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 18 with id = 71 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 71
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 76 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 91 currentId 76
Added AND Nodes: 90 91
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 91 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 96 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 91 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 106 currentId 91
Added AND Nodes: 105 106
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 106 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 106 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 111 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 101 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 101
Added AND Nodes: 115 116
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 116 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 116 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 121 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 121 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 126 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 126 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 131 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 131 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 136 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 136 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 141 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 141 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 146 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 146 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 151 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 7 with id = 151 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 156 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 16 with id = 155 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 161 currentId 155
Added AND Nodes: 160 161
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 161 from client 4 to 6
6 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 37 with id = 160 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 166 currentId 160
Added AND Nodes: 165 166
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 166 from client 4 to 7
7 => after replyFromServer: 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 8 with id = 81 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 171 currentId 81
Added AND Nodes: 170 171
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 171 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
4 => callsites count before spliiting 209 with id = 165 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 165
Added AND Nodes: 175 176
7 => callsites count before spliiting 204 with id = 166 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 181 currentId 166
Added AND Nodes: 180 181
6 => callsites count before spliiting 224 with id = 161 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 186 currentId 161
Added AND Nodes: 185 186
5 => callsites count before spliiting 220 with id = 156 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 191 currentId 156
Added AND Nodes: 190 191
9 => Spliiting due to client waiting
9 => callsites count before spliiting 13 with id = 111 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 196 currentId 111
Added AND Nodes: 195 196
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 196 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 196 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 201 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => callsites count before spliiting 698 with id = 175 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 206 currentId 175
Added AND Nodes: 205 206
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 201 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 211 currentId 201
Added AND Nodes: 210 211
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 211 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 2
Assign partition 176 from client 4 to 7
7 => after replyFromServer: 0
5 => callsites count before spliiting 563 with id = 190 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 216 currentId 190
Added AND Nodes: 215 216
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 211 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 221 currentId 211
Added AND Nodes: 220 221
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 221 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => callsites count before spliiting 825 with id = 185 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 226 currentId 185
Added AND Nodes: 225 226
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 221 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 231 currentId 221
Added AND Nodes: 230 231
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 231 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 231 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 236 currentId 231
Added AND Nodes: 235 236
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 236 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => callsites count before spliiting 719 with id = 205 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 241 currentId 205
Added AND Nodes: 240 241
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 2
Assign partition 206 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 2
Assign partition 191 from client 5 to 4
4 => after replyFromServer: 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 2 with id = 171 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 246 currentId 171
Added AND Nodes: 245 246
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 246 from client 3 to 0
0 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 236 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 251 currentId 236
Added AND Nodes: 250 251
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 251 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => callsites count before spliiting 1000 with id = 215 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 256 currentId 215
Added AND Nodes: 255 256
6 => callsites count before spliiting 1406 with id = 225 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 261 currentId 225
Added AND Nodes: 260 261
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 3
Assign partition 186 from client 6 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 2
Assign partition 226 from client 6 to 5
5 => after replyFromServer: 0
6 => callsites count before spliiting 1721 with id = 260 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 266 currentId 260
Added AND Nodes: 265 266
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 2
Assign partition 261 from client 6 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 233 with id = 186 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 271 currentId 186
Added AND Nodes: 270 271
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 266 from client 6 to 4
4 => after replyFromServer: 0
3 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 2 with id = 246 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 276 currentId 246
Added AND Nodes: 275 276
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 276 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 251 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 281 currentId 251
Added AND Nodes: 280 281
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 281 from client 8 to 9
9 => after replyFromServer: 50
6 => callsites count before spliiting 1825 with id = 265 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 286 currentId 265
Added AND Nodes: 285 286
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 281 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 291 currentId 281
Added AND Nodes: 290 291
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 291 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 25 with id = 290 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 296 currentId 290
Added AND Nodes: 295 296
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 296 from client 9 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 286 from client 6 to 5
5 => after replyFromServer: 0
6 => callsites count before spliiting 1665 with id = 285 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 301 currentId 285
Added AND Nodes: 300 301
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 245 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 306 currentId 245
Added AND Nodes: 305 306
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 306 from client 3 to 2
2 => after replyFromServer: 100
1 => Spliiting due to client waiting
1 => callsites count before spliiting 1 with id = 276 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 311 currentId 276
Added AND Nodes: 310 311
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 311 from client 1 to 0
0 => after replyFromServer: 100
8 => Spliiting due to client waiting
6 => callsites count before spliiting 1585 with id = 300 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 316 currentId 300
Added AND Nodes: 315 316
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 31 with id = 295 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 321 currentId 295
Added AND Nodes: 320 321
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 321 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 37 with id = 320 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 326 currentId 320
Added AND Nodes: 325 326
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 326 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 13 with id = 321 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 331 currentId 321
Added AND Nodes: 330 331
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 331 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => callsites count before spliiting 1459 with id = 315 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 336 currentId 315
Added AND Nodes: 335 336
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => Spliiting due to client waiting
3 => Spliiting due to client waiting
3 => callsites count before spliiting 11 with id = 305 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 341 currentId 305
Added AND Nodes: 340 341
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 341 from client 3 to 0
0 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 5 with id = 280 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 346 currentId 280
Added AND Nodes: 345 346
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 346 from client 8 to 10
10 => after replyFromServer: 50
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 2
Assign partition 301 from client 6 to 7
7 => after replyFromServer: 0
6 => callsites count before spliiting 200 with id = 336 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 351 currentId 336
Added AND Nodes: 350 351
9 => Spliiting due to client waiting
9 => callsites count before spliiting 4 with id = 331 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 356 currentId 331
Added AND Nodes: 355 356
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 356 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 15 with id = 356 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 361 currentId 356
Added AND Nodes: 360 361
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 361 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 10 with id = 345 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 366 currentId 345
Added AND Nodes: 365 366
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 366 from client 8 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 5 with id = 366 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 371 currentId 366
Added AND Nodes: 370 371
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 371 from client 11 to 9
9 => after replyFromServer: 50
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 16 with id = 365 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 376 currentId 365
Added AND Nodes: 375 376
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 376 from client 8 to 9
9 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 9 with id = 370 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 381 currentId 370
Added AND Nodes: 380 381
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 381 from client 11 to 9
9 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 117 with id = 266 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 386 currentId 266
Added AND Nodes: 385 386
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 386 from client 4 to 6
6 => after replyFromServer: 0
4 => callsites count before spliiting 212 with id = 385 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 391 currentId 385
Added AND Nodes: 390 391
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 21 with id = 341 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 396 currentId 341
Added AND Nodes: 395 396
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 396 from client 0 to 1
1 => after replyFromServer: 100
4 => callsites count before spliiting 200 with id = 390 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 401 currentId 390
Added AND Nodes: 400 401
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 47 with id = 380 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 406 currentId 380
Added AND Nodes: 405 406
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 406 from client 11 to 10
10 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 8 with id = 286 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 411 currentId 286
Added AND Nodes: 410 411
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 411 from client 5 to 4
4 => after replyFromServer: 0
0 => callsites count before spliiting 53 with id = 395 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 416 currentId 395
Added AND Nodes: 415 416
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => callsites count before spliiting 208 with id = 410 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 421 currentId 410
Added AND Nodes: 420 421
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => callsites count before spliiting 203 with id = 375 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 426 currentId 375
Added AND Nodes: 425 426
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 426 from client 8 to 10
10 => after replyFromServer: 50
8 => callsites count before spliiting 256 with id = 425 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 431 currentId 425
Added AND Nodes: 430 431
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 431 from client 8 to 10
10 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => callsites count before spliiting 317 with id = 430 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 436 currentId 430
Added AND Nodes: 435 436
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 436 from client 8 to 10
10 => after replyFromServer: 50
3 => callsites count before spliiting 51 with id = 340 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 441 currentId 340
Added AND Nodes: 440 441
8 => callsites count before spliiting 431 with id = 435 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 446 currentId 435
Added AND Nodes: 445 446
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 446 from client 8 to 10
10 => after replyFromServer: 50
10 => callsites count before spliiting 203 with id = 446 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 451 currentId 446
Added AND Nodes: 450 451
8 => callsites count before spliiting 512 with id = 445 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 456 currentId 445
Added AND Nodes: 455 456
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 456 from client 8 to 10
10 => after replyFromServer: 50
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 416 from client 0 to 1
1 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 34 with id = 381 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 461 currentId 381
Added AND Nodes: 460 461
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 461 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => callsites count before spliiting 523 with id = 455 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 466 currentId 455
Added AND Nodes: 465 466
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 466 from client 8 to 9
9 => after replyFromServer: 50
8 => callsites count before spliiting 582 with id = 465 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 471 currentId 465
Added AND Nodes: 470 471
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 471 from client 8 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => callsites count before spliiting 643 with id = 470 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 476 currentId 470
Added AND Nodes: 475 476
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 476 from client 8 to 9
9 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False

LOCATION - 0: 11
removing 6
removing 31
removing 81
removing 171
removing 245
removing 305
removing 340
removing 440
removing 441
removing 341
removing 395
removing 415
removing 416
removing 306
removing 16
removing 36
removing 76
removing 91
removing 106
removing 111
removing 196
removing 201
removing 211
removing 221
removing 231
removing 236
removing 251
removing 280
removing 345
removing 365
removing 375
removing 425
removing 430
removing 435
removing 445
removing 455
removing 465
removing 470
removing 475
removing 476
removing 366
removing 370
removing 380
removing 405
Added New : 
4 : 3,-1,0,1,2
Reached root of partition tree. Verfification Finished.
Reached root bestAlgo updated to 1
Verification Outcome : OK
Time Taken : 435.020006
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--ethernet--emulex--benet--be2net.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
for clientid : 11 algo id is 2
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 41 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 41 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 51 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 56 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 56 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 61 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 61 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 66 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 66 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 71 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 71 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 76 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 76 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 81 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 81 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 86 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 33 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 96 currentId 26
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 91 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 101 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 95 96
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 96 from client 1 to 2
2 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 106 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 106 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 111 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 33 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 116 currentId 36
Added AND Nodes: 115 116
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 116 from client 9 to 10
10 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 111 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 111
Added AND Nodes: 120 121
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 121 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 121 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 126 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 131 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 131 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 136 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 136 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 141 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 141 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 146 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 146 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 151 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 151 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 156 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 156 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 161 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 161 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 166 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 166 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 171 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 171 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 176 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 176 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 181 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 181 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 186 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 186 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 191 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 191 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 196 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 196 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 201 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 201 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 206 currentId 201
Added AND Nodes: 205 206
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 206 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 206 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 211 currentId 206
Added AND Nodes: 210 211
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 211 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 211 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 216 currentId 211
Added AND Nodes: 215 216
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 216 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 216 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 221 currentId 216
Added AND Nodes: 220 221
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 221 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 221 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 226 currentId 221
Added AND Nodes: 225 226
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 226 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 226 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 231 currentId 226
Added AND Nodes: 230 231
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 231 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 231 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 236 currentId 231
Added AND Nodes: 235 236
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 236 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 236 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 241 currentId 236
Added AND Nodes: 240 241
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 241 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 241 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 246 currentId 241
Added AND Nodes: 245 246
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 246 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 246 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 251 currentId 246
Added AND Nodes: 250 251
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 251 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 251 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 256 currentId 251
Added AND Nodes: 255 256
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 256 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 256 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 261 currentId 256
Added AND Nodes: 260 261
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 261 from client 4 to 5
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 261 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 266 currentId 261
Added AND Nodes: 265 266
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 266 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 266 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 271 currentId 266
Added AND Nodes: 270 271
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 271 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 271 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 276 currentId 271
Added AND Nodes: 275 276
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 276 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 276 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 281 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 281 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 286 currentId 281
Added AND Nodes: 285 286
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 286 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 286 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 291 currentId 286
Added AND Nodes: 290 291
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 291 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 291 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 296 currentId 291
Added AND Nodes: 295 296
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 296 from client 7 to 4
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 296 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 301 currentId 296
Added AND Nodes: 300 301
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 301 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 301 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 306 currentId 301
Added AND Nodes: 305 306
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 306 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 306 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 311 currentId 306
Added AND Nodes: 310 311
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 311 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 311 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 316 currentId 311
Added AND Nodes: 315 316
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 316 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 316 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 321 currentId 316
Added AND Nodes: 320 321
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 321 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 321 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 326 currentId 321
Added AND Nodes: 325 326
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 326 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 326 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 331 currentId 326
Added AND Nodes: 330 331
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 331 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 331 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 336 currentId 331
Added AND Nodes: 335 336
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 336 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 336 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 341 currentId 336
Added AND Nodes: 340 341
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 341 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 341 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 346 currentId 341
Added AND Nodes: 345 346
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 346 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 346 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 351 currentId 346
Added AND Nodes: 350 351
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 351 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 351 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 356 currentId 351
Added AND Nodes: 355 356
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 356 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 356 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 361 currentId 356
Added AND Nodes: 360 361
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 361 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 361 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 366 currentId 361
Added AND Nodes: 365 366
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 366 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 366 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 371 currentId 366
Added AND Nodes: 370 371
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 371 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 13 with id = 96 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 376 currentId 96
Added AND Nodes: 375 376
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 376 from client 2 to 3
3 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => callsites count before spliiting 5 with id = 371 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 371
Added AND Nodes: 380 381
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 381 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 11 with id = 380 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 386 currentId 380
Added AND Nodes: 385 386
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 386 from client 7 to 5
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
5 => after replyFromServer: 0
for clientid : 7 algo id is 1
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 381 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 391 currentId 381
Added AND Nodes: 390 391
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 391 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 386 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 396 currentId 386
Added AND Nodes: 395 396
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 396 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 391 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 401 currentId 391
Added AND Nodes: 400 401
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 401 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 396 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 406 currentId 396
Added AND Nodes: 405 406
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 406 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 401 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 411 currentId 401
Added AND Nodes: 410 411
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 411 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 406 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 416 currentId 406
Added AND Nodes: 415 416
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 416 from client 5 to 7
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => after replyFromServer: 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 13 with id = 116 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 421 currentId 116
Added AND Nodes: 420 421
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 421 from client 10 to 11
11 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 411 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 426 currentId 411
Added AND Nodes: 425 426
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 426 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 426 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 431 currentId 426
Added AND Nodes: 430 431
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 431 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 431 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 436 currentId 431
Added AND Nodes: 435 436
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 436 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 5 with id = 421 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 441 currentId 421
Added AND Nodes: 440 441
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 441 from client 11 to 8
8 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 436 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 446 currentId 436
Added AND Nodes: 445 446
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 446 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 446 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 451 currentId 446
Added AND Nodes: 450 451
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 451 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 451 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 456 currentId 451
Added AND Nodes: 455 456
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 456 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 16 with id = 441 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 461 currentId 441
Added AND Nodes: 460 461
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 461 from client 8 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 30 with id = 460 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 466 currentId 460
Added AND Nodes: 465 466
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 466 from client 8 to 10
10 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 6 with id = 456 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 471 currentId 456
Added AND Nodes: 470 471
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 471 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 18 with id = 470 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 476 currentId 470
Added AND Nodes: 475 476
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 476 from client 6 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 111 with id = 475 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 481 currentId 475
Added AND Nodes: 480 481
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 481 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 124 with id = 480 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 486 currentId 480
Added AND Nodes: 485 486
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 486 from client 6 to 5
5 => after replyFromServer: 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => callsites count before spliiting 211 with id = 485 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 491 currentId 485
Added AND Nodes: 490 491
6 => callsites count before spliiting 306 with id = 490 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 496 currentId 490
Added AND Nodes: 495 496
5 => callsites count before spliiting 269 with id = 486 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 501 currentId 486
Added AND Nodes: 500 501
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 300 with id = 495 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 506 currentId 495
Added AND Nodes: 505 506
5 => callsites count before spliiting 247 with id = 501 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 511 currentId 501
Added AND Nodes: 510 511
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 209 with id = 505 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 516 currentId 505
Added AND Nodes: 515 516
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 208 with id = 516 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 521 currentId 516
Added AND Nodes: 520 521
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 201 with id = 521 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 526 currentId 521
Added AND Nodes: 525 526
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 236 with id = 511 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 531 currentId 511
Added AND Nodes: 530 531
6 => callsites count before spliiting 202 with id = 526 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 536 currentId 526
Added AND Nodes: 535 536
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => Spliiting due to client waiting
3 => callsites count before spliiting 7 with id = 376 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 541 currentId 376
Added AND Nodes: 540 541
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 541 from client 3 to 0
0 => after replyFromServer: 100
5 => callsites count before spliiting 232 with id = 530 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 546 currentId 530
Added AND Nodes: 545 546
6 => callsites count before spliiting 252 with id = 536 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 551 currentId 536
Added AND Nodes: 550 551
11 => Spliiting due to client waiting
11 => callsites count before spliiting 12 with id = 440 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 556 currentId 440
Added AND Nodes: 555 556
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 556 from client 11 to 9
9 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => callsites count before spliiting 26 with id = 555 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 561 currentId 555
Added AND Nodes: 560 561
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 561 from client 11 to 10
10 => after replyFromServer: 50
6 => callsites count before spliiting 221 with id = 550 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 566 currentId 550
Added AND Nodes: 565 566
4 => callsites count before spliiting 204 with id = 481 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 571 currentId 481
Added AND Nodes: 570 571
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 218 with id = 565 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 576 currentId 565
Added AND Nodes: 575 576
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 204 with id = 571 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 581 currentId 571
Added AND Nodes: 580 581
5 => callsites count before spliiting 202 with id = 545 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 586 currentId 545
Added AND Nodes: 585 586
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 215 with id = 580 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 591 currentId 580
Added AND Nodes: 590 591
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 201 with id = 591 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 596 currentId 591
Added AND Nodes: 595 596
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => Spliiting due to client waiting
3 => callsites count before spliiting 41 with id = 540 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 601 currentId 540
Added AND Nodes: 600 601
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 601 from client 3 to 1
1 => after replyFromServer: 100
4 => callsites count before spliiting 201 with id = 596 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 606 currentId 596
Added AND Nodes: 605 606
0 => Spliiting due to client waiting
0 => callsites count before spliiting 18 with id = 541 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 611 currentId 541
Added AND Nodes: 610 611
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 611 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 204 with id = 576 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 616 currentId 576
Added AND Nodes: 615 616
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 221 with id = 416 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 621 currentId 416
Added AND Nodes: 620 621
4 => callsites count before spliiting 218 with id = 605 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 626 currentId 605
Added AND Nodes: 625 626
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 420 with id = 620 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 631 currentId 620
Added AND Nodes: 630 631
7 => callsites count before spliiting 535 with id = 630 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 636 currentId 630
Added AND Nodes: 635 636
4 => callsites count before spliiting 212 with id = 626 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 641 currentId 626
Added AND Nodes: 640 641
7 => callsites count before spliiting 502 with id = 635 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 646 currentId 635
Added AND Nodes: 645 646
6 => callsites count before spliiting 216 with id = 616 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 651 currentId 616
Added AND Nodes: 650 651
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 200 with id = 546 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 656 currentId 546
Added AND Nodes: 655 656
7 => callsites count before spliiting 331 with id = 645 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 661 currentId 645
Added AND Nodes: 660 661
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => Spliiting due to client waiting
3 => callsites count before spliiting 46 with id = 600 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 666 currentId 600
Added AND Nodes: 665 666
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 666 from client 3 to 0
0 => after replyFromServer: 100
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 212 with id = 651 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 671 currentId 651
Added AND Nodes: 670 671
7 => callsites count before spliiting 277 with id = 646 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 676 currentId 646
Added AND Nodes: 675 676
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 57 with id = 665 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 681 currentId 665
Added AND Nodes: 680 681
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 65 with id = 601 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 686 currentId 601
Added AND Nodes: 685 686
1 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 208 with id = 670 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 691 currentId 670
Added AND Nodes: 690 691
7 => callsites count before spliiting 251 with id = 675 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 696 currentId 675
Added AND Nodes: 695 696
6 => callsites count before spliiting 200 with id = 690 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 701 currentId 690
Added AND Nodes: 700 701
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 233 with id = 531 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 706 currentId 531
Added AND Nodes: 705 706
5 => callsites count before spliiting 216 with id = 705 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 711 currentId 705
Added AND Nodes: 710 711
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 227 with id = 695 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 716 currentId 695
Added AND Nodes: 715 716
7 => callsites count before spliiting 406 with id = 715 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 721 currentId 715
Added AND Nodes: 720 721
7 => callsites count before spliiting 444 with id = 720 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 726 currentId 720
Added AND Nodes: 725 726
6 => callsites count before spliiting 209 with id = 701 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 731 currentId 701
Added AND Nodes: 730 731
7 => callsites count before spliiting 427 with id = 725 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 736 currentId 725
Added AND Nodes: 735 736
7 => callsites count before spliiting 314 with id = 735 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 741 currentId 735
Added AND Nodes: 740 741
0 => callsites count before spliiting 70 with id = 666 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 746 currentId 666
Added AND Nodes: 745 746
7 => callsites count before spliiting 211 with id = 740 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 751 currentId 740
Added AND Nodes: 750 751
11 => callsites count before spliiting 215 with id = 560 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 756 currentId 560
Added AND Nodes: 755 756
8 => callsites count before spliiting 215 with id = 465 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 761 currentId 465
Added AND Nodes: 760 761
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 201 with id = 750 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 766 currentId 750
Added AND Nodes: 765 766
3 => callsites count before spliiting 68 with id = 681 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 771 currentId 681
Added AND Nodes: 770 771
6 => callsites count before spliiting 202 with id = 730 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 776 currentId 730
Added AND Nodes: 775 776
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 63 with id = 611 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 781 currentId 611
Added AND Nodes: 780 781
11 => callsites count before spliiting 355 with id = 755 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 786 currentId 755
Added AND Nodes: 785 786
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
10 => callsites count before spliiting 201 with id = 561 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 791 currentId 561
Added AND Nodes: 790 791
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
7 => callsites count before spliiting 205 with id = 765 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 796 currentId 765
Added AND Nodes: 795 796
0 => callsites count before spliiting 127 with id = 745 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 801 currentId 745
Added AND Nodes: 800 801
5 => callsites count before spliiting 300 with id = 706 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 806 currentId 706
Added AND Nodes: 805 806
11 => callsites count before spliiting 465 with id = 785 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 811 currentId 785
Added AND Nodes: 810 811
6 => callsites count before spliiting 201 with id = 731 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 816 currentId 731
Added AND Nodes: 815 816
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 83 with id = 800 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 821 currentId 800
Added AND Nodes: 820 821
2 => callsites count before spliiting 57 with id = 780 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 826 currentId 780
Added AND Nodes: 825 826
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 510 with id = 810 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 831 currentId 810
Added AND Nodes: 830 831
7 => callsites count before spliiting 208 with id = 795 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 836 currentId 795
Added AND Nodes: 835 836
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 89 with id = 770 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 841 currentId 770
Added AND Nodes: 840 841
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => callsites count before spliiting 210 with id = 556 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 846 currentId 556
Added AND Nodes: 845 846
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 204 with id = 691 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 851 currentId 691
Added AND Nodes: 850 851
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 125 with id = 840 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 856 currentId 840
Added AND Nodes: 855 856
11 => callsites count before spliiting 575 with id = 830 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 861 currentId 830
Added AND Nodes: 860 861
7 => callsites count before spliiting 205 with id = 741 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 866 currentId 741
Added AND Nodes: 865 866
0 => callsites count before spliiting 128 with id = 820 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 871 currentId 820
Added AND Nodes: 870 871
6 => callsites count before spliiting 209 with id = 851 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 876 currentId 851
Added AND Nodes: 875 876
9 => callsites count before spliiting 286 with id = 845 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 881 currentId 845
Added AND Nodes: 880 881
1 => callsites count before spliiting 51 with id = 686 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 886 currentId 686
Added AND Nodes: 885 886
1 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 211 with id = 865 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 891 currentId 865
Added AND Nodes: 890 891
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 80 with id = 855 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 896 currentId 855
Added AND Nodes: 895 896
11 => callsites count before spliiting 606 with id = 860 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 901 currentId 860
Added AND Nodes: 900 901
5 => callsites count before spliiting 212 with id = 805 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 906 currentId 805
Added AND Nodes: 905 906
0 => callsites count before spliiting 109 with id = 870 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 911 currentId 870
Added AND Nodes: 910 911
9 => callsites count before spliiting 302 with id = 880 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 916 currentId 880
Added AND Nodes: 915 916
11 => callsites count before spliiting 713 with id = 900 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 921 currentId 900
Added AND Nodes: 920 921
6 => callsites count before spliiting 201 with id = 876 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 926 currentId 876
Added AND Nodes: 925 926
4 => callsites count before spliiting 220 with id = 640 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 931 currentId 640
Added AND Nodes: 930 931
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 72 with id = 910 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 936 currentId 910
Added AND Nodes: 935 936
0 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 211 with id = 890 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 941 currentId 890
Added AND Nodes: 940 941
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 205 with id = 931 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 946 currentId 931
Added AND Nodes: 945 946
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 312 with id = 915 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 951 currentId 915
Added AND Nodes: 950 951
4 => callsites count before spliiting 212 with id = 946 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 956 currentId 946
Added AND Nodes: 955 956
2 => callsites count before spliiting 71 with id = 825 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 961 currentId 825
Added AND Nodes: 960 961
11 => callsites count before spliiting 719 with id = 920 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 966 currentId 920
Added AND Nodes: 965 966
4 => callsites count before spliiting 200 with id = 955 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 971 currentId 955
Added AND Nodes: 970 971
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 201 with id = 941 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 976 currentId 941
Added AND Nodes: 975 976
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => callsites count before spliiting 320 with id = 950 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 981 currentId 950
Added AND Nodes: 980 981
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
6 => callsites count before spliiting 201 with id = 671 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 986 currentId 671
Added AND Nodes: 985 986
4 => callsites count before spliiting 200 with id = 971 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 991 currentId 971
Added AND Nodes: 990 991
8 => callsites count before spliiting 239 with id = 761 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 996 currentId 761
Added AND Nodes: 995 996
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => callsites count before spliiting 741 with id = 965 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1001 currentId 965
Added AND Nodes: 1000 1001
3 => callsites count before spliiting 122 with id = 895 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1006 currentId 895
Added AND Nodes: 1005 1006
0 => callsites count before spliiting 91 with id = 936 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1011 currentId 936
Added AND Nodes: 1010 1011
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 869 with id = 1000 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1016 currentId 1000
Added AND Nodes: 1015 1016
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 207 with id = 956 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1021 currentId 956
Added AND Nodes: 1020 1021
0 => callsites count before spliiting 102 with id = 1010 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1026 currentId 1010
Added AND Nodes: 1025 1026
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 159 with id = 1005 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1031 currentId 1005
Added AND Nodes: 1030 1031
3 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 59 with id = 960 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1036 currentId 960
Added AND Nodes: 1035 1036
2 => LOOP outcome: Correct & reachbound = False
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 280 with id = 996 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1041 currentId 996
Added AND Nodes: 1040 1041
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => callsites count before spliiting 238 with id = 791 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1046 currentId 791
Added AND Nodes: 1045 1046
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
2 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 202 with id = 736 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1051 currentId 736
Added AND Nodes: 1050 1051
4 => callsites count before spliiting 206 with id = 1020 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1056 currentId 1020
Added AND Nodes: 1055 1056
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 946 with id = 1015 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1061 currentId 1015
Added AND Nodes: 1060 1061
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 101 with id = 961 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1066 currentId 961
Added AND Nodes: 1065 1066
0 => callsites count before spliiting 86 with id = 1026 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1071 currentId 1026
Added AND Nodes: 1070 1071
0 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 205 with id = 1051 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1076 currentId 1051
Added AND Nodes: 1075 1076
4 => callsites count before spliiting 202 with id = 1056 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1081 currentId 1056
Added AND Nodes: 1080 1081
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 200 with id = 1075 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1086 currentId 1075
Added AND Nodes: 1085 1086
2 => callsites count before spliiting 112 with id = 1065 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1091 currentId 1065
Added AND Nodes: 1090 1091
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 57 with id = 886 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1096 currentId 886
Added AND Nodes: 1095 1096
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 76 with id = 1071 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1101 currentId 1071
Added AND Nodes: 1100 1101
7 => callsites count before spliiting 204 with id = 1085 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1106 currentId 1085
Added AND Nodes: 1105 1106
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 217 with id = 726 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1111 currentId 726
Added AND Nodes: 1110 1111
11 => callsites count before spliiting 278 with id = 1061 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1116 currentId 1061
Added AND Nodes: 1115 1116
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => callsites count before spliiting 208 with id = 1110 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1121 currentId 1110
Added AND Nodes: 1120 1121
2 => callsites count before spliiting 80 with id = 1091 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1126 currentId 1091
Added AND Nodes: 1125 1126
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 379 with id = 716 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1131 currentId 716
Added AND Nodes: 1130 1131
7 => callsites count before spliiting 438 with id = 1130 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1136 currentId 1130
Added AND Nodes: 1135 1136
7 => callsites count before spliiting 413 with id = 1135 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1141 currentId 1135
Added AND Nodes: 1140 1141
7 => callsites count before spliiting 305 with id = 1140 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1146 currentId 1140
Added AND Nodes: 1145 1146
8 => callsites count before spliiting 310 with id = 1041 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1151 currentId 1041
Added AND Nodes: 1150 1151
7 => callsites count before spliiting 204 with id = 1145 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1156 currentId 1145
Added AND Nodes: 1155 1156
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 328 with id = 905 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1161 currentId 905
Added AND Nodes: 1160 1161
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 202 with id = 1160 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1166 currentId 1160
Added AND Nodes: 1165 1166
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 203 with id = 1136 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1171 currentId 1136
Added AND Nodes: 1170 1171
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--ethernet--qlogic--qlge--qlge.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 1 algo id is 0
0 => Spliiting due to client waiting
0 => Spliiting due to client waiting
for clientid : 2 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 3 algo id is 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
0 => Spliiting due to client waiting
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 36 currentId 26
Added AND Nodes: 35 36
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 36 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 31 and splitMode 50
4 => Spliiting due to client waiting
9 => sending calltree : splitMode 50 mustReachId 41 currentId 31
4 => callsites count before spliiting 1 with id = 36 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 46 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 46 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
Added AND Nodes: 40 41
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 41 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 56 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 56 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 61 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 61 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 66 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 71 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 71 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 76 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 23 with id = 41 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 81 currentId 41
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 76 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 81 from client 10 to 11
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 4
4 => after replyFromServer: 0
11 => after replyFromServer: 50
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 86 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 101 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 106 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 106 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 111 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 116 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 116 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 121 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 121 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 126 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 126 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 131 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 131 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 136 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 136 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 141 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 141 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 146 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 146 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 151 from client 4 to 7
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => after replyFromServer: 0
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 151 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 156 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 156 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 161 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 161 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 166 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 166 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 171 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 171 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 176 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 176 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 181 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 181 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 186 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 186 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 191 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 191 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 196 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 8 with id = 196 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 201 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 20 with id = 200 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 206 currentId 200
Added AND Nodes: 205 206
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 206 from client 5 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 55 with id = 205 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 211 currentId 205
Added AND Nodes: 210 211
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 211 from client 5 to 7
7 => after replyFromServer: 0
5 => callsites count before spliiting 312 with id = 210 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 216 currentId 210
Added AND Nodes: 215 216
4 => callsites count before spliiting 214 with id = 206 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 221 currentId 206
Added AND Nodes: 220 221
4 => callsites count before spliiting 303 with id = 220 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 226 currentId 220
Added AND Nodes: 225 226
5 => callsites count before spliiting 657 with id = 215 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 231 currentId 215
Added AND Nodes: 230 231
5 => callsites count before spliiting 961 with id = 230 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 236 currentId 230
Added AND Nodes: 235 236
5 => callsites count before spliiting 1056 with id = 235 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 241 currentId 235
Added AND Nodes: 240 241
5 => callsites count before spliiting 1222 with id = 240 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 246 currentId 240
Added AND Nodes: 245 246
5 => callsites count before spliiting 1422 with id = 245 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 251 currentId 245
Added AND Nodes: 250 251
5 => callsites count before spliiting 1579 with id = 250 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 256 currentId 250
Added AND Nodes: 255 256
5 => callsites count before spliiting 1545 with id = 255 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 261 currentId 255
Added AND Nodes: 260 261
5 => callsites count before spliiting 1453 with id = 260 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 266 currentId 260
Added AND Nodes: 265 266
5 => callsites count before spliiting 1364 with id = 265 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 271 currentId 265
Added AND Nodes: 270 271
5 => callsites count before spliiting 1306 with id = 270 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 276 currentId 270
Added AND Nodes: 275 276
5 => callsites count before spliiting 1161 with id = 275 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 281 currentId 275
Added AND Nodes: 280 281
5 => callsites count before spliiting 1107 with id = 280 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 286 currentId 280
Added AND Nodes: 285 286
5 => callsites count before spliiting 1091 with id = 285 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 291 currentId 285
Added AND Nodes: 290 291
5 => callsites count before spliiting 978 with id = 290 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 296 currentId 290
Added AND Nodes: 295 296
5 => callsites count before spliiting 936 with id = 295 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 301 currentId 295
Added AND Nodes: 300 301
5 => callsites count before spliiting 854 with id = 300 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 306 currentId 300
Added AND Nodes: 305 306
5 => callsites count before spliiting 763 with id = 305 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 311 currentId 305
Added AND Nodes: 310 311
5 => callsites count before spliiting 709 with id = 310 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 316 currentId 310
Added AND Nodes: 315 316
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 44 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 321 currentId 6
Added AND Nodes: 320 321
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 321 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 14 with id = 81 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 326 currentId 81
Added AND Nodes: 325 326
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 326 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => callsites count before spliiting 280 with id = 225 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 331 currentId 225
Added AND Nodes: 330 331
7 => callsites count before spliiting 214 with id = 211 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 336 currentId 211
Added AND Nodes: 335 336
7 => callsites count before spliiting 302 with id = 335 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 341 currentId 335
Added AND Nodes: 340 341
7 => callsites count before spliiting 458 with id = 340 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 346 currentId 340
Added AND Nodes: 345 346
4 => callsites count before spliiting 247 with id = 330 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 351 currentId 330
Added AND Nodes: 350 351
6 => callsites count before spliiting 200 with id = 201 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 356 currentId 201
Added AND Nodes: 355 356
7 => callsites count before spliiting 488 with id = 345 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 361 currentId 345
Added AND Nodes: 360 361
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 18
Assign partition 216 from client 5 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 276 with id = 316 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 366 currentId 316
Added AND Nodes: 365 366
7 => callsites count before spliiting 221 with id = 346 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 371 currentId 346
Added AND Nodes: 370 371
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 18
Assign partition 231 from client 5 to 6
6 => after replyFromServer: 0
4 => callsites count before spliiting 270 with id = 350 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 376 currentId 350
Added AND Nodes: 375 376
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 219 with id = 341 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 341
Added AND Nodes: 380 381
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 204 with id = 351 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 386 currentId 351
Added AND Nodes: 385 386
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 208 with id = 336 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 391 currentId 336
Added AND Nodes: 390 391
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 200 with id = 231 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 396 currentId 231
Added AND Nodes: 395 396
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 17
Assign partition 236 from client 5 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 209 with id = 386 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 401 currentId 386
Added AND Nodes: 400 401
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 277 with id = 365 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 406 currentId 365
Added AND Nodes: 405 406
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 231 with id = 331 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 411 currentId 331
Added AND Nodes: 410 411
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 17
Assign partition 241 from client 5 to 6
6 => after replyFromServer: 0
4 => callsites count before spliiting 227 with id = 410 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 416 currentId 410
Added AND Nodes: 415 416
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 212 with id = 416 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 421 currentId 416
Added AND Nodes: 420 421
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 16
Assign partition 246 from client 5 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 227 with id = 411 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 426 currentId 411
Added AND Nodes: 425 426
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 212 with id = 226 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 431 currentId 226
Added AND Nodes: 430 431
5 => callsites count before spliiting 202 with id = 405 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 436 currentId 405
Added AND Nodes: 435 436
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 226 with id = 241 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 441 currentId 241
Added AND Nodes: 440 441
4 => callsites count before spliiting 254 with id = 221 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 446 currentId 221
Added AND Nodes: 445 446
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 16
Assign partition 251 from client 5 to 4
4 => after replyFromServer: 0
6 => callsites count before spliiting 402 with id = 440 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 451 currentId 440
Added AND Nodes: 450 451
6 => callsites count before spliiting 587 with id = 450 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 456 currentId 450
Added AND Nodes: 455 456
6 => callsites count before spliiting 649 with id = 455 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 461 currentId 455
Added AND Nodes: 460 461
6 => callsites count before spliiting 506 with id = 460 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 466 currentId 460
Added AND Nodes: 465 466
6 => callsites count before spliiting 423 with id = 465 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 471 currentId 465
Added AND Nodes: 470 471
6 => callsites count before spliiting 343 with id = 470 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 476 currentId 470
Added AND Nodes: 475 476
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 15
Assign partition 256 from client 5 to 7
7 => after replyFromServer: 0
6 => callsites count before spliiting 296 with id = 475 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 481 currentId 475
Added AND Nodes: 480 481
6 => callsites count before spliiting 205 with id = 480 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 486 currentId 480
Added AND Nodes: 485 486
1 => Spliiting due to client waiting
1 => callsites count before spliiting 2 with id = 321 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 491 currentId 321
Added AND Nodes: 490 491
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 491 from client 1 to 2
2 => after replyFromServer: 100
4 => callsites count before spliiting 282 with id = 251 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 496 currentId 251
Added AND Nodes: 495 496
6 => callsites count before spliiting 211 with id = 485 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 501 currentId 485
Added AND Nodes: 500 501
4 => callsites count before spliiting 242 with id = 495 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 506 currentId 495
Added AND Nodes: 505 506
5 => callsites count before spliiting 203 with id = 435 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 511 currentId 435
Added AND Nodes: 510 511
4 => callsites count before spliiting 205 with id = 505 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 516 currentId 505
Added AND Nodes: 515 516
6 => callsites count before spliiting 218 with id = 500 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 521 currentId 500
Added AND Nodes: 520 521
4 => callsites count before spliiting 245 with id = 515 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 526 currentId 515
Added AND Nodes: 525 526
4 => callsites count before spliiting 201 with id = 525 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 531 currentId 525
Added AND Nodes: 530 531
8 => Spliiting due to client waiting
8 => callsites count before spliiting 4 with id = 326 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 536 currentId 326
Added AND Nodes: 535 536
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 536 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => callsites count before spliiting 245 with id = 520 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 541 currentId 520
Added AND Nodes: 540 541
4 => callsites count before spliiting 382 with id = 530 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 546 currentId 530
Added AND Nodes: 545 546
4 => callsites count before spliiting 280 with id = 545 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 551 currentId 545
Added AND Nodes: 550 551
4 => callsites count before spliiting 251 with id = 550 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 556 currentId 550
Added AND Nodes: 555 556
6 => callsites count before spliiting 329 with id = 540 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 561 currentId 540
Added AND Nodes: 560 561
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 15
Assign partition 261 from client 5 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 247 with id = 555 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 566 currentId 555
Added AND Nodes: 565 566
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 339 with id = 561 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 571 currentId 561
Added AND Nodes: 570 571
6 => callsites count before spliiting 210 with id = 570 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 576 currentId 570
Added AND Nodes: 575 576
4 => callsites count before spliiting 280 with id = 566 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 581 currentId 566
Added AND Nodes: 580 581
2 => Spliiting due to client waiting
2 => callsites count before spliiting 2 with id = 491 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 586 currentId 491
Added AND Nodes: 585 586
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 586 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
4 => callsites count before spliiting 216 with id = 580 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 591 currentId 580
Added AND Nodes: 590 591
1 => Spliiting due to client waiting
1 => callsites count before spliiting 6 with id = 490 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 596 currentId 490
Added AND Nodes: 595 596
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 596 from client 1 to 0
0 => after replyFromServer: 100
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 14
Assign partition 266 from client 5 to 7
7 => after replyFromServer: 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 536 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 601 currentId 536
Added AND Nodes: 600 601
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 601 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 10 with id = 600 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 606 currentId 600
Added AND Nodes: 605 606
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 606 from client 9 to 11
11 => after replyFromServer: 50
6 => callsites count before spliiting 205 with id = 575 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 611 currentId 575
Added AND Nodes: 610 611
5 => callsites count before spliiting 250 with id = 510 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 616 currentId 510
Added AND Nodes: 615 616
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 255 with id = 616 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 621 currentId 616
Added AND Nodes: 620 621
5 => callsites count before spliiting 230 with id = 620 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 626 currentId 620
Added AND Nodes: 625 626
4 => callsites count before spliiting 208 with id = 590 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 631 currentId 590
Added AND Nodes: 630 631
6 => callsites count before spliiting 206 with id = 610 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 636 currentId 610
Added AND Nodes: 635 636
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 213 with id = 625 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 641 currentId 625
Added AND Nodes: 640 641
6 => callsites count before spliiting 244 with id = 636 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 646 currentId 636
Added AND Nodes: 645 646
5 => callsites count before spliiting 231 with id = 640 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 651 currentId 640
Added AND Nodes: 650 651
6 => callsites count before spliiting 244 with id = 645 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 656 currentId 645
Added AND Nodes: 655 656
6 => callsites count before spliiting 205 with id = 655 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 661 currentId 655
Added AND Nodes: 660 661
5 => callsites count before spliiting 200 with id = 650 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 666 currentId 650
Added AND Nodes: 665 666
6 => callsites count before spliiting 221 with id = 660 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 671 currentId 660
Added AND Nodes: 670 671
7 => callsites count before spliiting 293 with id = 266 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 676 currentId 266
Added AND Nodes: 675 676
4 => callsites count before spliiting 204 with id = 630 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 681 currentId 630
Added AND Nodes: 680 681
7 => callsites count before spliiting 223 with id = 675 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 686 currentId 675
Added AND Nodes: 685 686
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 586 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 691 currentId 586
Added AND Nodes: 690 691
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 691 from client 3 to 2
2 => after replyFromServer: 100
5 => callsites count before spliiting 222 with id = 665 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 696 currentId 665
Added AND Nodes: 695 696
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 228 with id = 685 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 701 currentId 685
Added AND Nodes: 700 701
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 203 with id = 670 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 706 currentId 670
Added AND Nodes: 705 706
7 => callsites count before spliiting 211 with id = 700 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 711 currentId 700
Added AND Nodes: 710 711
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 312 with id = 710 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 716 currentId 710
Added AND Nodes: 715 716
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 601 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 721 currentId 601
Added AND Nodes: 720 721
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 721 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 15 with id = 605 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 726 currentId 605
Added AND Nodes: 725 726
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 726 from client 9 to 10
10 => after replyFromServer: 50
7 => callsites count before spliiting 238 with id = 715 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 731 currentId 715
Added AND Nodes: 730 731
4 => callsites count before spliiting 210 with id = 680 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 736 currentId 680
Added AND Nodes: 735 736
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 220 with id = 511 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 741 currentId 511
Added AND Nodes: 740 741
4 => callsites count before spliiting 219 with id = 736 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 746 currentId 736
Added AND Nodes: 745 746
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 217 with id = 741 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 751 currentId 741
Added AND Nodes: 750 751
4 => callsites count before spliiting 200 with id = 745 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 756 currentId 745
Added AND Nodes: 755 756
7 => callsites count before spliiting 285 with id = 730 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 761 currentId 730
Added AND Nodes: 760 761
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 206 with id = 750 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 766 currentId 750
Added AND Nodes: 765 766
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 235 with id = 755 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 771 currentId 755
Added AND Nodes: 770 771
5 => callsites count before spliiting 203 with id = 765 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 776 currentId 765
Added AND Nodes: 775 776
4 => callsites count before spliiting 232 with id = 770 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 781 currentId 770
Added AND Nodes: 780 781
6 => callsites count before spliiting 211 with id = 571 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 786 currentId 571
Added AND Nodes: 785 786
7 => callsites count before spliiting 269 with id = 761 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 791 currentId 761
Added AND Nodes: 790 791
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 211 with id = 780 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 796 currentId 780
Added AND Nodes: 795 796
7 => callsites count before spliiting 201 with id = 790 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 801 currentId 790
Added AND Nodes: 800 801
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 202 with id = 786 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 806 currentId 786
Added AND Nodes: 805 806
4 => callsites count before spliiting 220 with id = 795 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 811 currentId 795
Added AND Nodes: 810 811
6 => callsites count before spliiting 207 with id = 805 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 816 currentId 805
Added AND Nodes: 815 816
5 => callsites count before spliiting 221 with id = 406 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 821 currentId 406
Added AND Nodes: 820 821
7 => callsites count before spliiting 205 with id = 800 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 826 currentId 800
Added AND Nodes: 825 826
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 227 with id = 521 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 831 currentId 521
Added AND Nodes: 830 831
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 212 with id = 825 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 836 currentId 825
Added AND Nodes: 835 836
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 267 with id = 836 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 841 currentId 836
Added AND Nodes: 840 841
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 200 with id = 591 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 846 currentId 591
Added AND Nodes: 845 846
7 => callsites count before spliiting 248 with id = 840 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 851 currentId 840
Added AND Nodes: 850 851
7 => callsites count before spliiting 204 with id = 850 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 856 currentId 850
Added AND Nodes: 855 856
5 => callsites count before spliiting 209 with id = 821 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 861 currentId 821
Added AND Nodes: 860 861
6 => callsites count before spliiting 209 with id = 830 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 866 currentId 830
Added AND Nodes: 865 866
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 253 with id = 855 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 871 currentId 855
Added AND Nodes: 870 871
5 => callsites count before spliiting 275 with id = 860 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 876 currentId 860
Added AND Nodes: 875 876
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 109 with id = 725 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 881 currentId 725
Added AND Nodes: 880 881
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 881 from client 9 to 11
11 => after replyFromServer: 50
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 253 with id = 875 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 886 currentId 875
Added AND Nodes: 885 886
7 => callsites count before spliiting 209 with id = 870 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 891 currentId 870
Added AND Nodes: 890 891
5 => callsites count before spliiting 206 with id = 885 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 896 currentId 885
Added AND Nodes: 895 896
6 => callsites count before spliiting 270 with id = 831 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 901 currentId 831
Added AND Nodes: 900 901
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 208 with id = 890 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 906 currentId 890
Added AND Nodes: 905 906
5 => callsites count before spliiting 245 with id = 895 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 911 currentId 895
Added AND Nodes: 910 911
6 => callsites count before spliiting 332 with id = 901 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 916 currentId 901
Added AND Nodes: 915 916
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 304 with id = 915 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 921 currentId 915
Added AND Nodes: 920 921
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 209 with id = 920 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 926 currentId 920
Added AND Nodes: 925 926
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 246 with id = 910 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 931 currentId 910
Added AND Nodes: 930 931
4 => callsites count before spliiting 203 with id = 846 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 936 currentId 846
Added AND Nodes: 935 936
6 => callsites count before spliiting 227 with id = 925 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 941 currentId 925
Added AND Nodes: 940 941
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 219 with id = 940 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 946 currentId 940
Added AND Nodes: 945 946
6 => callsites count before spliiting 245 with id = 945 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 951 currentId 945
Added AND Nodes: 950 951
4 => callsites count before spliiting 202 with id = 935 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 956 currentId 935
Added AND Nodes: 955 956
6 => callsites count before spliiting 225 with id = 950 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 961 currentId 950
Added AND Nodes: 960 961
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--ethernet--sis--sis900.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 3 algo id is 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
8 => after replyFromServer: 50
Algo : 2 started with splitmode 50
for clientid : 10 algo id is 2
for clientid : 9 algo id is 2
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
0 => Spliiting due to client waiting
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
8 => Spliiting due to client waiting
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
8 => Spliiting due to client waiting
0 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
8 => callsites count before spliiting 16 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 36 currentId 26
Added AND Nodes: 35 36
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 36 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 36 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 41 currentId 36
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 31 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 46 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 41 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
Added AND Nodes: 45 46
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 46 from client 10 to 9
9 => after replyFromServer: 50
4 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => callsites count before spliiting 1 with id = 41 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 51 currentId 41
Added AND Nodes: 50 51
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 51 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 56 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 56 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 61 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 16 with id = 61 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 66 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 66 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 71 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 71 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 76 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 76 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 81 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 81 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 4 with id = 86 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 15 with id = 90 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 96 currentId 90
Added AND Nodes: 95 96
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 96 from client 4 to 6
6 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 16 with id = 46 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 101 currentId 46
Added AND Nodes: 100 101
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 101 from client 9 to 11
11 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 91 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 91
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 6 with id = 96 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 96
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 5
5 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 22 with id = 106 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 116 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 145 with id = 110 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 121 currentId 110
Added AND Nodes: 120 121
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 121 from client 6 to 7
7 => after replyFromServer: 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 101 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 126 currentId 101
Added AND Nodes: 125 126
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 126 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => callsites count before spliiting 209 with id = 120 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 131 currentId 120
Added AND Nodes: 130 131
0 => callsites count before spliiting 56 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 136 currentId 6
Added AND Nodes: 135 136
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 136 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => callsites count before spliiting 229 with id = 116 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 141 currentId 116
Added AND Nodes: 140 141
8 => Spliiting due to client waiting
8 => callsites count before spliiting 13 with id = 126 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 146 currentId 126
Added AND Nodes: 145 146
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 146 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => callsites count before spliiting 200 with id = 121 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 121
Added AND Nodes: 150 151
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 141 from client 5 to 7
7 => after replyFromServer: 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 5 with id = 146 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 156 currentId 146
Added AND Nodes: 155 156
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 156 from client 10 to 9
9 => after replyFromServer: 50
10 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 8 with id = 156 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 161 from client 9 to 11
11 => after replyFromServer: 50
5 => callsites count before spliiting 345 with id = 140 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 166 currentId 140
Added AND Nodes: 165 166
1 => Spliiting due to client waiting
1 => callsites count before spliiting 8 with id = 136 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 171 currentId 136
Added AND Nodes: 170 171
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 171 from client 1 to 2
2 => after replyFromServer: 100
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 131 from client 6 to 5
5 => after replyFromServer: 0
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 24 with id = 155 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 176 currentId 155
Added AND Nodes: 175 176
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 176 from client 10 to 8
8 => after replyFromServer: 50
10 => Spliiting due to client waiting
10 => callsites count before spliiting 28 with id = 175 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 181 currentId 175
Added AND Nodes: 180 181
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 181 from client 10 to 11
11 => after replyFromServer: 50
4 => callsites count before spliiting 201 with id = 95 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 186 currentId 95
Added AND Nodes: 185 186
1 => Spliiting due to client waiting
1 => callsites count before spliiting 16 with id = 170 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 191 currentId 170
Added AND Nodes: 190 191
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 191 from client 1 to 3
3 => after replyFromServer: 100
2 => Spliiting due to client waiting
2 => callsites count before spliiting 10 with id = 171 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 196 currentId 171
Added AND Nodes: 195 196
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 196 from client 2 to 0
0 => after replyFromServer: 100
6 => callsites count before spliiting 209 with id = 130 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 201 currentId 130
Added AND Nodes: 200 201
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 186 from client 4 to 7
7 => after replyFromServer: 0
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => callsites count before spliiting 202 with id = 131 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 206 currentId 131
Added AND Nodes: 205 206
1 => Spliiting due to client waiting
1 => callsites count before spliiting 30 with id = 190 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 211 currentId 190
Added AND Nodes: 210 211
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 211 from client 1 to 2
2 => after replyFromServer: 100
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 201 from client 6 to 5
5 => after replyFromServer: 0
7 => callsites count before spliiting 478 with id = 186 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 216 currentId 186
Added AND Nodes: 215 216
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 200 with id = 185 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 221 currentId 185
Added AND Nodes: 220 221
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
6 => callsites count before spliiting 156 with id = 200 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 226 currentId 200
Added AND Nodes: 225 226
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 226 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
10 => callsites count before spliiting 411 with id = 180 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 231 currentId 180
Added AND Nodes: 230 231
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => callsites count before spliiting 84 with id = 216 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 236 currentId 216
Added AND Nodes: 235 236
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 236 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 5 with id = 226 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 241 currentId 226
Added AND Nodes: 240 241
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 241 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
1 => callsites count before spliiting 52 with id = 210 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 246 currentId 210
Added AND Nodes: 245 246
4 => Spliiting due to client waiting
4 => callsites count before spliiting 30 with id = 221 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 251 currentId 221
Added AND Nodes: 250 251
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 251 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 3 with id = 241 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 256 currentId 241
Added AND Nodes: 255 256
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 256 from client 7 to 4
4 => after replyFromServer: 0
10 => callsites count before spliiting 442 with id = 231 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 261 currentId 231
Added AND Nodes: 260 261
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
6 => Spliiting due to client waiting
7 => callsites count before spliiting 39 with id = 255 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 266 currentId 255
Added AND Nodes: 265 266
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 266 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => callsites count before spliiting 136 with id = 236 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 271 currentId 236
Added AND Nodes: 270 271
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 271 from client 6 to 7
7 => after replyFromServer: 0
3 => callsites count before spliiting 56 with id = 191 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 276 currentId 191
Added AND Nodes: 275 276
2 => callsites count before spliiting 57 with id = 211 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 281 currentId 211
Added AND Nodes: 280 281
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 902 with id = 270 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 286 currentId 270
Added AND Nodes: 285 286
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
10 => callsites count before spliiting 311 with id = 261 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 291 currentId 261
Added AND Nodes: 290 291
0 => callsites count before spliiting 56 with id = 196 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 296 currentId 196
Added AND Nodes: 295 296
7 => callsites count before spliiting 792 with id = 271 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 301 currentId 271
Added AND Nodes: 300 301
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 58 with id = 245 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 306 currentId 245
Added AND Nodes: 305 306
6 => callsites count before spliiting 690 with id = 286 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 311 currentId 286
Added AND Nodes: 310 311
6 => callsites count before spliiting 554 with id = 310 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 316 currentId 310
Added AND Nodes: 315 316
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
10 => callsites count before spliiting 1339 with id = 290 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 321 currentId 290
Added AND Nodes: 320 321
5 => callsites count before spliiting 200 with id = 251 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 326 currentId 251
Added AND Nodes: 325 326
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 200 with id = 266 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 331 currentId 266
Added AND Nodes: 330 331
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 987 with id = 301 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 336 currentId 301
Added AND Nodes: 335 336
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 222 with id = 336 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 341 currentId 336
Added AND Nodes: 340 341
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 203 with id = 176 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 346 currentId 176
Added AND Nodes: 345 346
9 => callsites count before spliiting 211 with id = 160 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 351 currentId 160
Added AND Nodes: 350 351
10 => callsites count before spliiting 1615 with id = 320 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 356 currentId 320
Added AND Nodes: 355 356
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 311 from client 6 to 5
5 => after replyFromServer: 0
2 => callsites count before spliiting 62 with id = 281 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 361 currentId 281
Added AND Nodes: 360 361
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 579 with id = 316 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 366 currentId 316
Added AND Nodes: 365 366
6 => callsites count before spliiting 456 with id = 365 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 371 currentId 365
Added AND Nodes: 370 371
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => callsites count before spliiting 238 with id = 345 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 376 currentId 345
Added AND Nodes: 375 376
9 => callsites count before spliiting 238 with id = 350 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 381 currentId 350
Added AND Nodes: 380 381
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 366 from client 6 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => callsites count before spliiting 2050 with id = 355 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 386 currentId 355
Added AND Nodes: 385 386
5 => Spliiting due to client waiting
5 => callsites count before spliiting 30 with id = 366 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 391 currentId 366
Added AND Nodes: 390 391
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 391 from client 5 to 4
4 => after replyFromServer: 0
7 => callsites count before spliiting 434 with id = 341 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 396 currentId 341
Added AND Nodes: 395 396
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => callsites count before spliiting 275 with id = 375 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 401 currentId 375
Added AND Nodes: 400 401
5 => Spliiting due to client waiting
6 => callsites count before spliiting 203 with id = 371 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 406 currentId 371
Added AND Nodes: 405 406
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 406 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 33 with id = 390 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 411 currentId 390
Added AND Nodes: 410 411
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 411 from client 5 to 6
6 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
10 => callsites count before spliiting 2066 with id = 385 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 416 currentId 385
Added AND Nodes: 415 416
5 => Spliiting due to client waiting
5 => callsites count before spliiting 36 with id = 410 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 421 currentId 410
Added AND Nodes: 420 421
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 421 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 199 with id = 396 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 426 currentId 396
Added AND Nodes: 425 426
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 426 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 36 with id = 421 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 431 currentId 421
Added AND Nodes: 430 431
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 431 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => callsites count before spliiting 207 with id = 181 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 436 currentId 181
Added AND Nodes: 435 436
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => Spliiting due to client waiting
7 => callsites count before spliiting 50 with id = 431 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 441 currentId 431
Added AND Nodes: 440 441
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 441 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => callsites count before spliiting 2079 with id = 415 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 446 currentId 415
Added AND Nodes: 445 446
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 257 with id = 380 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 451 currentId 380
Added AND Nodes: 450 451
8 => callsites count before spliiting 297 with id = 400 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 456 currentId 400
Added AND Nodes: 455 456
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 2
Assign partition 246 from client 1 to 0
0 => after replyFromServer: 100
1 => callsites count before spliiting 52 with id = 305 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 461 currentId 305
Added AND Nodes: 460 461
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 2
Assign partition 306 from client 1 to 3
3 => after replyFromServer: 100
0 => callsites count before spliiting 55 with id = 246 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 466 currentId 246
Added AND Nodes: 465 466
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 55 with id = 306 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 471 currentId 306
Added AND Nodes: 470 471
3 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 291 with id = 406 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 476 currentId 406
Added AND Nodes: 475 476
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 476 from client 4 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 253 with id = 475 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 481 currentId 475
Added AND Nodes: 480 481
2 => callsites count before spliiting 53 with id = 361 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 486 currentId 361
Added AND Nodes: 485 486
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 292 with id = 450 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 491 currentId 450
Added AND Nodes: 490 491
4 => callsites count before spliiting 215 with id = 480 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 496 currentId 480
Added AND Nodes: 495 496
3 => callsites count before spliiting 328 with id = 471 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 501 currentId 471
Added AND Nodes: 500 501
3 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 238 with id = 495 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 506 currentId 495
Added AND Nodes: 505 506
4 => callsites count before spliiting 203 with id = 505 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 511 currentId 505
Added AND Nodes: 510 511
8 => callsites count before spliiting 319 with id = 455 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 516 currentId 455
Added AND Nodes: 515 516
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 461 from client 1 to 0
0 => after replyFromServer: 100
6 => callsites count before spliiting 272 with id = 441 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 521 currentId 441
Added AND Nodes: 520 521
4 => callsites count before spliiting 201 with id = 510 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 526 currentId 510
Added AND Nodes: 525 526
5 => callsites count before spliiting 230 with id = 426 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 531 currentId 426
Added AND Nodes: 530 531
6 => callsites count before spliiting 201 with id = 520 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 536 currentId 520
Added AND Nodes: 535 536
5 => callsites count before spliiting 204 with id = 530 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 541 currentId 530
Added AND Nodes: 540 541
6 => callsites count before spliiting 237 with id = 535 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 546 currentId 535
Added AND Nodes: 545 546
5 => callsites count before spliiting 256 with id = 540 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 551 currentId 540
Added AND Nodes: 550 551
6 => callsites count before spliiting 245 with id = 545 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 556 currentId 545
Added AND Nodes: 555 556
3 => callsites count before spliiting 437 with id = 501 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 561 currentId 501
Added AND Nodes: 560 561
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 205 with id = 550 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 566 currentId 550
Added AND Nodes: 565 566
6 => callsites count before spliiting 207 with id = 555 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 571 currentId 555
Added AND Nodes: 570 571
5 => callsites count before spliiting 234 with id = 565 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 576 currentId 565
Added AND Nodes: 575 576
6 => callsites count before spliiting 204 with id = 570 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 581 currentId 570
Added AND Nodes: 580 581
9 => callsites count before spliiting 304 with id = 490 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 586 currentId 490
Added AND Nodes: 585 586
5 => callsites count before spliiting 205 with id = 575 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 591 currentId 575
Added AND Nodes: 590 591
4 => callsites count before spliiting 204 with id = 525 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 596 currentId 525
Added AND Nodes: 595 596
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 318 with id = 585 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 601 currentId 585
Added AND Nodes: 600 601
3 => callsites count before spliiting 303 with id = 561 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 606 currentId 561
Added AND Nodes: 605 606
3 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 201 with id = 580 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 611 currentId 580
Added AND Nodes: 610 611
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--scsi--dc395x.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 3 algo id is 0
for clientid : 2 algo id is 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => Spliiting due to client waiting
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
0 => Spliiting due to client waiting
0 => callsites count before spliiting 13 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
for clientid : 7 algo id is 1
for clientid : 6 algo id is 1
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
7 => Spliiting due to client waiting
8 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 31 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 36 currentId 31
8 => callsites count before spliiting 13 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 41 currentId 16
1 => Spliiting due to client waiting
Added AND Nodes: 40 41
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 41 from client 8 to 9
9 => after replyFromServer: 50
Added AND Nodes: 35 36
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 36 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => LOOP outcome: Correct & reachbound = False
7 => outcome: Correct
Added New : 
8 : 
1 => callsites count before spliiting 13 with id = 26 and splitMode 100
8 => outcome: Correct
1 => sending calltree : splitMode 100 mustReachId 46 currentId 26
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Added AND Nodes: 45 46
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 46 from client 1 to 3
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 51 currentId 36
Added AND Nodes: 50 51
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 51 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
9 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 56 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => callsites count before spliiting 1 with id = 41 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 61 currentId 41
Added AND Nodes: 60 61
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 61 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 56 and splitMode 0
9 => outcome: Correct
5 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 7
for clientid : 9 algo id is 2
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 66 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 71 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 71 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 61 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 86 currentId 61
Added AND Nodes: 85 86
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 86 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 91 currentId 81
Added AND Nodes: 90 91
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 91 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 14 with id = 46 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 96 currentId 46
Added AND Nodes: 95 96
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 96 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 106 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 106 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 111 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 11 with id = 86 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 116 currentId 86
Added AND Nodes: 115 116
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 116 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 111 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 121 currentId 111
Added AND Nodes: 120 121
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 121 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 121 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 126 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 131 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 14 with id = 96 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 136 currentId 96
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 131 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 131
Added AND Nodes: 140 141
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 141 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
Added AND Nodes: 135 136
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 136 from client 2 to 0
0 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 14 with id = 116 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 146 currentId 116
Added AND Nodes: 145 146
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 146 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 3 with id = 141 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 151 from client 5 to 7
7 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 19 with id = 150 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 156 currentId 150
Added AND Nodes: 155 156
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 156 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 151 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 161 currentId 151
Added AND Nodes: 160 161
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 161 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
2 => Spliiting due to client waiting
2 => callsites count before spliiting 22 with id = 135 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 166 currentId 135
Added AND Nodes: 165 166
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 166 from client 2 to 1
1 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
5 => Spliiting due to client waiting
for clientid : 2 algo id is 0
5 => callsites count before spliiting 35 with id = 155 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 171 currentId 155
Added AND Nodes: 170 171
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 171 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 156 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 176 currentId 156
Added AND Nodes: 175 176
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 176 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 11 with id = 161 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 181 currentId 161
Added AND Nodes: 180 181
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 181 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 3 with id = 176 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 186 currentId 176
Added AND Nodes: 185 186
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 186 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 7 with id = 171 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 191 currentId 171
Added AND Nodes: 190 191
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 191 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 4 with id = 181 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 196 currentId 181
Added AND Nodes: 195 196
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 196 from client 6 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => callsites count before spliiting 30 with id = 195 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 201 currentId 195
5 => callsites count before spliiting 1 with id = 191 and splitMode 0
Added AND Nodes: 200 201
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 201 from client 6 to 4
5 => sending calltree : splitMode 0 mustReachId 206 currentId 191
4 => after replyFromServer: 0
Added AND Nodes: 205 206
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 206 from client 5 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
5 => LOOP outcome: Correct & reachbound = False
6 : 
Added New : 
5 : 
6 => outcome: Correct
5 => outcome: Correct
for clientid : 6 algo id is 1
for clientid : 5 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 14 with id = 146 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 211 currentId 146
Added AND Nodes: 210 211
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 211 from client 9 to 10
10 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 4 with id = 206 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 216 currentId 206
Added AND Nodes: 215 216
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 216 from client 7 to 6
6 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 15 with id = 215 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 221 currentId 215
Added AND Nodes: 220 221
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 221 from client 7 to 5
5 => after replyFromServer: 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 166 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 226 currentId 166
Added AND Nodes: 225 226
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 226 from client 1 to 3
3 => after replyFromServer: 100
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 6 with id = 216 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 231 currentId 216
Added AND Nodes: 230 231
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 231 from client 6 to 4
4 => after replyFromServer: 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 22 with id = 210 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 236 currentId 210
Added AND Nodes: 235 236
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 236 from client 9 to 11
11 => after replyFromServer: 50
0 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
0 => callsites count before spliiting 37 with id = 136 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 241 currentId 136
Added AND Nodes: 240 241
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 241 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
5 => callsites count before spliiting 14 with id = 221 and splitMode 0
6 => callsites count before spliiting 40 with id = 230 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 246 currentId 230
Added AND Nodes: 245 246
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 246 from client 6 to 7
5 => sending calltree : splitMode 0 mustReachId 251 currentId 221
7 => after replyFromServer: 0
Added AND Nodes: 250 251
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 251 from client 5 to 6
6 => after replyFromServer: 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 236 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 256 currentId 236
Added AND Nodes: 255 256
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 256 from client 11 to 8
8 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 17 with id = 251 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 261 currentId 251
Added AND Nodes: 260 261
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 261 from client 6 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 74 with id = 231 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 266 currentId 231
Added AND Nodes: 265 266
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 226 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 271 currentId 226
Added AND Nodes: 270 271
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 271 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
10 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 3 with id = 256 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 276 currentId 256
Added AND Nodes: 275 276
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 276 from client 8 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => callsites count before spliiting 37 with id = 211 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 281 currentId 211
Added AND Nodes: 280 281
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 281 from client 10 to 11
11 => after replyFromServer: 50
2 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
2 => callsites count before spliiting 29 with id = 241 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 286 currentId 241
Added AND Nodes: 285 286
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 286 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 266 from client 4 to 6
6 => after replyFromServer: 0
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 84 with id = 261 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 291 currentId 261
Added AND Nodes: 290 291
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 291 from client 7 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => callsites count before spliiting 116 with id = 290 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 296 currentId 290
Added AND Nodes: 295 296
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 296 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
11 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
11 => callsites count before spliiting 29 with id = 281 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 301 currentId 281
Added AND Nodes: 300 301
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 301 from client 11 to 8
8 => after replyFromServer: 50
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
0 => callsites count before spliiting 65 with id = 286 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 306 currentId 286
Added AND Nodes: 305 306
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 306 from client 0 to 3
3 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 296 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 311 currentId 296
Added AND Nodes: 310 311
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 311 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => callsites count before spliiting 6 with id = 301 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 316 currentId 301
Added AND Nodes: 315 316
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 316 from client 8 to 10
10 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 311 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 321 currentId 311
Added AND Nodes: 320 321
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 321 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => callsites count before spliiting 10 with id = 316 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 326 currentId 316
Added AND Nodes: 325 326
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 326 from client 10 to 9
9 => after replyFromServer: 50
4 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 321 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 331 currentId 321
Added AND Nodes: 330 331
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 331 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 326 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 336 currentId 326
Added AND Nodes: 335 336
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 336 from client 9 to 11
11 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 331 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 341 currentId 331
Added AND Nodes: 340 341
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 341 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 341 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 346 currentId 341
Added AND Nodes: 345 346
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 346 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 75 with id = 335 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 351 currentId 335
Added AND Nodes: 350 351
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 351 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
3 => callsites count before spliiting 182 with id = 306 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 356 currentId 306
Added AND Nodes: 355 356
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 356 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 346 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 361 currentId 346
Added AND Nodes: 360 361
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 361 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 351 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 366 currentId 351
Added AND Nodes: 365 366
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 366 from client 8 to 10
10 => after replyFromServer: 50
8 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 361 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 371 currentId 361
Added AND Nodes: 370 371
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 371 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 371 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 376 currentId 371
Added AND Nodes: 375 376
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 376 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 191 with id = 365 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 381 currentId 365
Added AND Nodes: 380 381
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 381 from client 8 to 11
11 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 376 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 386 currentId 376
Added AND Nodes: 385 386
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 386 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 386 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 391 currentId 386
Added AND Nodes: 390 391
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 391 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 391 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 396 currentId 391
Added AND Nodes: 395 396
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 396 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 396 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 401 currentId 396
Added AND Nodes: 400 401
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 401 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => callsites count before spliiting 316 with id = 356 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 406 currentId 356
Added AND Nodes: 405 406
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 406 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 401 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 411 currentId 401
Added AND Nodes: 410 411
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 411 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 411 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 416 currentId 411
Added AND Nodes: 415 416
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 416 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 416 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 421 currentId 416
Added AND Nodes: 420 421
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 421 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => callsites count before spliiting 314 with id = 381 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 426 currentId 381
Added AND Nodes: 425 426
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 426 from client 11 to 9
9 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 421 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 431 currentId 421
Added AND Nodes: 430 431
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 431 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
Added New : 
11 : 
7 => outcome: Correct
11 => outcome: Correct
for clientid : 7 algo id is 1
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 431 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 436 currentId 431
Added AND Nodes: 435 436
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 436 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 436 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 441 currentId 436
Added AND Nodes: 440 441
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 441 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => callsites count before spliiting 393 with id = 250 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 446 currentId 250
Added AND Nodes: 445 446
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 446 from client 5 to 6
6 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 441 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 451 currentId 441
Added AND Nodes: 450 451
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 451 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 196 with id = 445 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 456 currentId 445
Added AND Nodes: 455 456
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 456 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 451 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 461 currentId 451
Added AND Nodes: 460 461
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 461 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 446 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 466 currentId 446
Added AND Nodes: 465 466
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 466 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 461 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 471 currentId 461
Added AND Nodes: 470 471
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 471 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 471 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 476 currentId 471
Added AND Nodes: 475 476
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 476 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => callsites count before spliiting 357 with id = 406 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 481 currentId 406
Added AND Nodes: 480 481
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 481 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 476 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 486 currentId 476
Added AND Nodes: 485 486
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 486 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 466 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 491 currentId 466
Added AND Nodes: 490 491
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 491 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 486 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 496 currentId 486
Added AND Nodes: 495 496
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 496 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 491 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 501 currentId 491
Added AND Nodes: 500 501
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 501 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 496 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 506 currentId 496
Added AND Nodes: 505 506
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 506 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => callsites count before spliiting 357 with id = 426 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 511 currentId 426
Added AND Nodes: 510 511
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 511 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 506 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 516 currentId 506
Added AND Nodes: 515 516
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 516 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 501 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 521 currentId 501
Added AND Nodes: 520 521
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 521 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 516 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 526 currentId 516
Added AND Nodes: 525 526
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 526 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 526 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 531 currentId 526
Added AND Nodes: 530 531
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 531 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 521 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 536 currentId 521
Added AND Nodes: 535 536
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 536 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 531 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 541 currentId 531
Added AND Nodes: 540 541
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 541 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 7 with id = 541 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 546 currentId 541
Added AND Nodes: 545 546
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 546 from client 7 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 12 with id = 545 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 551 currentId 545
Added AND Nodes: 550 551
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 551 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 4 with id = 511 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 556 currentId 511
Added AND Nodes: 555 556
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 556 from client 10 to 8
8 => after replyFromServer: 50
6 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => callsites count before spliiting 1 with id = 536 and splitMode 0
10 => outcome: Correct
6 => sending calltree : splitMode 0 mustReachId 561 currentId 536
Added AND Nodes: 560 561
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 561 from client 6 to 7
for clientid : 10 algo id is 2
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 546 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 566 currentId 546
Added AND Nodes: 565 566
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 566 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 551 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 571 currentId 551
Added AND Nodes: 570 571
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 571 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 571 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 576 currentId 571
Added AND Nodes: 575 576
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 576 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 566 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 581 currentId 566
Added AND Nodes: 580 581
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 581 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 561 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 586 currentId 561
Added AND Nodes: 585 586
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 586 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 576 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 591 currentId 576
Added AND Nodes: 590 591
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 591 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 581 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 596 currentId 581
Added AND Nodes: 595 596
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 596 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 591 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 601 currentId 591
Added AND Nodes: 600 601
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 601 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 596 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 606 currentId 596
Added AND Nodes: 605 606
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 606 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 586 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 611 currentId 586
Added AND Nodes: 610 611
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 611 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => callsites count before spliiting 357 with id = 481 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 616 currentId 481
Added AND Nodes: 615 616
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 616 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 601 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 621 currentId 601
Added AND Nodes: 620 621
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 621 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 606 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 626 currentId 606
Added AND Nodes: 625 626
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 626 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 621 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 631 currentId 621
Added AND Nodes: 630 631
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 631 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 611 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 636 currentId 611
Added AND Nodes: 635 636
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 636 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 626 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 641 currentId 626
Added AND Nodes: 640 641
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 641 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 631 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 646 currentId 631
Added AND Nodes: 645 646
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 646 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 641 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 651 currentId 641
Added AND Nodes: 650 651
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 651 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 636 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 656 currentId 636
Added AND Nodes: 655 656
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 656 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 646 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 661 currentId 646
Added AND Nodes: 660 661
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 661 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 651 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 666 currentId 651
Added AND Nodes: 665 666
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 666 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 661 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 671 currentId 661
Added AND Nodes: 670 671
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 671 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 666 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 676 currentId 666
Added AND Nodes: 675 676
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 676 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 656 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 681 currentId 656
Added AND Nodes: 680 681
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 681 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 671 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 686 currentId 671
Added AND Nodes: 685 686
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 686 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 676 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 691 currentId 676
Added AND Nodes: 690 691
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 691 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 686 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 696 currentId 686
Added AND Nodes: 695 696
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 696 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 691 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 701 currentId 691
Added AND Nodes: 700 701
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 701 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 696 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 706 currentId 696
Added AND Nodes: 705 706
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 706 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 701 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 711 currentId 701
Added AND Nodes: 710 711
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 711 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 681 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 716 currentId 681
Added AND Nodes: 715 716
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 716 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => callsites count before spliiting 356 with id = 556 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 721 currentId 556
Added AND Nodes: 720 721
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 721 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 706 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 726 currentId 706
Added AND Nodes: 725 726
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 726 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 711 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 731 currentId 711
Added AND Nodes: 730 731
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 731 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 731 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 736 currentId 731
Added AND Nodes: 735 736
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 736 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 716 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 741 currentId 716
Added AND Nodes: 740 741
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 741 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 3 with id = 726 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 746 currentId 726
Added AND Nodes: 745 746
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 746 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 736 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 751 currentId 736
Added AND Nodes: 750 751
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 751 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 746 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 756 currentId 746
Added AND Nodes: 755 756
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 756 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 741 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 761 currentId 741
Added AND Nodes: 760 761
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 761 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 751 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 766 currentId 751
Added AND Nodes: 765 766
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 766 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 756 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 771 currentId 756
Added AND Nodes: 770 771
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 771 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 766 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 776 currentId 766
Added AND Nodes: 775 776
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 776 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 771 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 781 currentId 771
Added AND Nodes: 780 781
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 781 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 761 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 786 currentId 761
Added AND Nodes: 785 786
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 786 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 776 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 791 currentId 776
Added AND Nodes: 790 791
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 791 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 781 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 796 currentId 781
Added AND Nodes: 795 796
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 796 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 796 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 801 currentId 796
Added AND Nodes: 800 801
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 801 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 791 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 806 currentId 791
Added AND Nodes: 805 806
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 806 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 786 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 811 currentId 786
Added AND Nodes: 810 811
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 811 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 801 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 816 currentId 801
Added AND Nodes: 815 816
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 816 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 806 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 821 currentId 806
Added AND Nodes: 820 821
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 821 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 816 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 826 currentId 816
Added AND Nodes: 825 826
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 826 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 821 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 831 currentId 821
Added AND Nodes: 830 831
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 831 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 811 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 836 currentId 811
Added AND Nodes: 835 836
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 836 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 826 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 841 currentId 826
Added AND Nodes: 840 841
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 841 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 831 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 846 currentId 831
Added AND Nodes: 845 846
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 846 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 841 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 851 currentId 841
Added AND Nodes: 850 851
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 851 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 836 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 856 currentId 836
Added AND Nodes: 855 856
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 856 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 3 with id = 846 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 861 currentId 846
Added AND Nodes: 860 861
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 861 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 851 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 866 currentId 851
Added AND Nodes: 865 866
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 866 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 861 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 871 currentId 861
Added AND Nodes: 870 871
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 871 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
3 => callsites count before spliiting 357 with id = 616 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 876 currentId 616
Added AND Nodes: 875 876
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 876 from client 3 to 2
2 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 866 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 881 currentId 866
Added AND Nodes: 880 881
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 881 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 856 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 886 currentId 856
Added AND Nodes: 885 886
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 886 from client 4 to 6
6 => after replyFromServer: 0
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 871 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 891 currentId 871
Added AND Nodes: 890 891
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 891 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 881 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 896 currentId 881
Added AND Nodes: 895 896
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 896 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 891 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 901 currentId 891
Added AND Nodes: 900 901
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 901 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 896 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 906 currentId 896
Added AND Nodes: 905 906
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 906 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 886 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 911 currentId 886
Added AND Nodes: 910 911
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 911 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 901 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 916 currentId 901
Added AND Nodes: 915 916
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 916 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 906 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 921 currentId 906
Added AND Nodes: 920 921
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 921 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => callsites count before spliiting 357 with id = 721 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 926 currentId 721
Added AND Nodes: 925 926
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 926 from client 11 to 9
9 => after replyFromServer: 50
6 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => callsites count before spliiting 1 with id = 916 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 931 currentId 916
Added AND Nodes: 930 931
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 931 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 911 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 936 currentId 911
Added AND Nodes: 935 936
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 936 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 921 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 941 currentId 921
Added AND Nodes: 940 941
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 941 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 931 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 946 currentId 931
Added AND Nodes: 945 946
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 946 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 941 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 951 currentId 941
Added AND Nodes: 950 951
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 951 from client 5 to 4
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 946 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 956 currentId 946
Added AND Nodes: 955 956
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 956 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 936 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 961 currentId 936
Added AND Nodes: 960 961
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 961 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 951 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 966 currentId 951
Added AND Nodes: 965 966
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 966 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 956 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 971 currentId 956
Added AND Nodes: 970 971
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 971 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 966 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 976 currentId 966
Added AND Nodes: 975 976
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 976 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 961 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 981 currentId 961
Added AND Nodes: 980 981
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 981 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 971 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 986 currentId 971
Added AND Nodes: 985 986
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 986 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 986 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 991 currentId 986
Added AND Nodes: 990 991
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 991 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 976 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 996 currentId 976
Added AND Nodes: 995 996
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 996 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 6 with id = 981 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1001 currentId 981
Added AND Nodes: 1000 1001
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1001 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 991 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1006 currentId 991
Added AND Nodes: 1005 1006
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1006 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 6 with id = 996 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1011 currentId 996
Added AND Nodes: 1010 1011
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1011 from client 7 to 4
4 => after replyFromServer: 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 3 with id = 926 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1016 currentId 926
Added AND Nodes: 1015 1016
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1016 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => callsites count before spliiting 112 with id = 1010 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1021 currentId 1010
Added AND Nodes: 1020 1021
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1021 from client 7 to 6
4 => callsites count before spliiting 65 with id = 1011 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1026 currentId 1011
6 => after replyFromServer: 0
Added AND Nodes: 1025 1026
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
for clientid : 7 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1026 from client 4 to 7
4 => outcome: Correct
7 => after replyFromServer: 0
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1026 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1031 currentId 1026
Added AND Nodes: 1030 1031
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1031 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1021 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1036 currentId 1021
Added AND Nodes: 1035 1036
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1036 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
4 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1036 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1041 currentId 1036
Added AND Nodes: 1040 1041
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1041 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
6 => Spliiting due to client waiting
4 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1041 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1046 currentId 1041
Added AND Nodes: 1045 1046
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1046 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1046 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1051 currentId 1046
Added AND Nodes: 1050 1051
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1051 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1051 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1056 currentId 1051
Added AND Nodes: 1055 1056
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1056 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1056 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1061 currentId 1056
Added AND Nodes: 1060 1061
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1061 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1061 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1066 currentId 1061
Added AND Nodes: 1065 1066
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1066 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1066 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1071 currentId 1066
Added AND Nodes: 1070 1071
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1071 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1071 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1076 currentId 1071
Added AND Nodes: 1075 1076
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1076 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1076 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1081 currentId 1076
Added AND Nodes: 1080 1081
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1081 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => callsites count before spliiting 356 with id = 876 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1086 currentId 876
Added AND Nodes: 1085 1086
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1086 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => callsites count before spliiting 430 with id = 1001 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1091 currentId 1001
Added AND Nodes: 1090 1091
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1091 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => callsites count before spliiting 355 with id = 1016 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1096 currentId 1016
Added AND Nodes: 1095 1096
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 1096 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1091 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1101 currentId 1091
Added AND Nodes: 1100 1101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1101 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1101 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1106 currentId 1101
Added AND Nodes: 1105 1106
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1106 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1106 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1111 currentId 1106
Added AND Nodes: 1110 1111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1111 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1111 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1116 currentId 1111
Added AND Nodes: 1115 1116
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1116 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1121 currentId 1116
Added AND Nodes: 1120 1121
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1121 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
1 => callsites count before spliiting 355 with id = 1086 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1126 currentId 1086
Added AND Nodes: 1125 1126
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1126 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1121 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1131 currentId 1121
Added AND Nodes: 1130 1131
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1131 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => callsites count before spliiting 355 with id = 1096 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1136 currentId 1096
Added AND Nodes: 1135 1136
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1136 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1131 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1141 currentId 1131
Added AND Nodes: 1140 1141
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1141 from client 6 to 5
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1141 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1146 currentId 1141
Added AND Nodes: 1145 1146
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1146 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1146 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1151 currentId 1146
Added AND Nodes: 1150 1151
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1151 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1151 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1156 currentId 1151
Added AND Nodes: 1155 1156
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1156 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 4 with id = 1136 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1161 currentId 1136
Added AND Nodes: 1160 1161
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1161 from client 11 to 9
9 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1156 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1166 currentId 1156
Added AND Nodes: 1165 1166
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1166 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1166 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1171 currentId 1166
Added AND Nodes: 1170 1171
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1171 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => callsites count before spliiting 355 with id = 1126 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1176 currentId 1126
Added AND Nodes: 1175 1176
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1176 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1171 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1181 currentId 1171
Added AND Nodes: 1180 1181
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1181 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 3 with id = 1161 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1186 currentId 1161
Added AND Nodes: 1185 1186
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1186 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1181 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1191 currentId 1181
Added AND Nodes: 1190 1191
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1191 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1191 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1196 currentId 1191
Added AND Nodes: 1195 1196
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1196 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1196 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1201 currentId 1196
Added AND Nodes: 1200 1201
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1201 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1201 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1206 currentId 1201
Added AND Nodes: 1205 1206
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1206 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1206 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1211 currentId 1206
Added AND Nodes: 1210 1211
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1211 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1211 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1216 currentId 1211
Added AND Nodes: 1215 1216
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1216 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1216 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1221 currentId 1216
Added AND Nodes: 1220 1221
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1221 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => callsites count before spliiting 353 with id = 1186 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1226 currentId 1186
Added AND Nodes: 1225 1226
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 1226 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1221 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1231 currentId 1221
Added AND Nodes: 1230 1231
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1231 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1231 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1236 currentId 1231
Added AND Nodes: 1235 1236
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1236 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1236 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1241 currentId 1236
Added AND Nodes: 1240 1241
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1241 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1241 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1246 currentId 1241
Added AND Nodes: 1245 1246
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1246 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => callsites count before spliiting 357 with id = 1176 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1251 currentId 1176
Added AND Nodes: 1250 1251
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 1251 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1246 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1256 currentId 1246
Added AND Nodes: 1255 1256
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1256 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1256 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1261 currentId 1256
Added AND Nodes: 1260 1261
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1261 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1261 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1266 currentId 1261
Added AND Nodes: 1265 1266
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1266 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1266 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1271 currentId 1266
Added AND Nodes: 1270 1271
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1271 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => callsites count before spliiting 357 with id = 1226 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1276 currentId 1226
Added AND Nodes: 1275 1276
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1276 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1271 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1281 currentId 1271
Added AND Nodes: 1280 1281
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1281 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1281 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1286 currentId 1281
Added AND Nodes: 1285 1286
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1286 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1286 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1291 currentId 1286
Added AND Nodes: 1290 1291
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1291 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1291 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1296 currentId 1291
Added AND Nodes: 1295 1296
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1296 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1296 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1301 currentId 1296
Added AND Nodes: 1300 1301
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1301 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1301 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1306 currentId 1301
Added AND Nodes: 1305 1306
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1306 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1306 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1311 currentId 1306
Added AND Nodes: 1310 1311
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1311 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => callsites count before spliiting 356 with id = 1251 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1316 currentId 1251
Added AND Nodes: 1315 1316
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1316 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1311 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1321 currentId 1311
Added AND Nodes: 1320 1321
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1321 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1321 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1326 currentId 1321
Added AND Nodes: 1325 1326
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1326 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1326 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1331 currentId 1326
Added AND Nodes: 1330 1331
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1331 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => callsites count before spliiting 356 with id = 1276 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1336 currentId 1276
Added AND Nodes: 1335 1336
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1336 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1331 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1341 currentId 1331
Added AND Nodes: 1340 1341
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1341 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1341 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1346 currentId 1341
Added AND Nodes: 1345 1346
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1346 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1346 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1351 currentId 1346
Added AND Nodes: 1350 1351
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1351 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1351 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1356 currentId 1351
Added AND Nodes: 1355 1356
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1356 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1356 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1361 currentId 1356
Added AND Nodes: 1360 1361
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1361 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1361 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1366 currentId 1361
Added AND Nodes: 1365 1366
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1366 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1366 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1371 currentId 1366
Added AND Nodes: 1370 1371
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1371 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1371 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1376 currentId 1371
Added AND Nodes: 1375 1376
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1376 from client 7 to 6
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1376 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1381 currentId 1376
Added AND Nodes: 1380 1381
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1381 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => callsites count before spliiting 360 with id = 1316 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1386 currentId 1316
Added AND Nodes: 1385 1386
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1386 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1381 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1391 currentId 1381
Added AND Nodes: 1390 1391
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1391 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1391 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1396 currentId 1391
Added AND Nodes: 1395 1396
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1396 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1396 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1401 currentId 1396
Added AND Nodes: 1400 1401
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1401 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => callsites count before spliiting 360 with id = 1336 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1406 currentId 1336
Added AND Nodes: 1405 1406
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1406 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1401 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1411 currentId 1401
Added AND Nodes: 1410 1411
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1411 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1411 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1416 currentId 1411
Added AND Nodes: 1415 1416
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1416 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1416 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1421 currentId 1416
Added AND Nodes: 1420 1421
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1421 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1421 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1426 currentId 1421
Added AND Nodes: 1425 1426
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1426 from client 7 to 6
7 => LOOP outcome: Correct & reachbound = False
6 => after replyFromServer: 0
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1426 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1431 currentId 1426
Added AND Nodes: 1430 1431
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1431 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1431 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1436 currentId 1431
Added AND Nodes: 1435 1436
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1436 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1436 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1441 currentId 1436
Added AND Nodes: 1440 1441
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1441 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 3 with id = 1406 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1446 currentId 1406
Added AND Nodes: 1445 1446
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 1446 from client 10 to 8
8 => after replyFromServer: 50
10 => Spliiting due to client waiting
10 => callsites count before spliiting 7 with id = 1445 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1451 currentId 1445
Added AND Nodes: 1450 1451
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 1451 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1441 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1456 currentId 1441
Added AND Nodes: 1455 1456
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1456 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1456 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1461 currentId 1456
Added AND Nodes: 1460 1461
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1461 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1461 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1466 currentId 1461
Added AND Nodes: 1465 1466
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1466 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1466 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1471 currentId 1466
Added AND Nodes: 1470 1471
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1471 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => callsites count before spliiting 358 with id = 1386 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1476 currentId 1386
Added AND Nodes: 1475 1476
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1476 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1471 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1481 currentId 1471
Added AND Nodes: 1480 1481
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1481 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1481 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1486 currentId 1481
Added AND Nodes: 1485 1486
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1486 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1486 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1491 currentId 1486
Added AND Nodes: 1490 1491
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1491 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1491 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1496 currentId 1491
Added AND Nodes: 1495 1496
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1496 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1496 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1501 currentId 1496
Added AND Nodes: 1500 1501
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1501 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1501 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1506 currentId 1501
Added AND Nodes: 1505 1506
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1506 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1506 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1511 currentId 1506
Added AND Nodes: 1510 1511
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1511 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1511 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1516 currentId 1511
Added AND Nodes: 1515 1516
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1516 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1516 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1521 currentId 1516
Added AND Nodes: 1520 1521
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1521 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => callsites count before spliiting 357 with id = 1446 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1526 currentId 1446
Added AND Nodes: 1525 1526
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1526 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1521 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1531 currentId 1521
Added AND Nodes: 1530 1531
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1531 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1531 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1536 currentId 1531
Added AND Nodes: 1535 1536
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1536 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1536 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1541 currentId 1536
Added AND Nodes: 1540 1541
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1541 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1541 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1546 currentId 1541
Added AND Nodes: 1545 1546
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1546 from client 7 to 6
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1546 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1551 currentId 1546
Added AND Nodes: 1550 1551
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1551 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1551 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1556 currentId 1551
Added AND Nodes: 1555 1556
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1556 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1556 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1561 currentId 1556
Added AND Nodes: 1560 1561
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1561 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1561 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1566 currentId 1561
Added AND Nodes: 1565 1566
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1566 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1566 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1571 currentId 1566
Added AND Nodes: 1570 1571
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1571 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1571 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1576 currentId 1571
Added AND Nodes: 1575 1576
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1576 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => callsites count before spliiting 358 with id = 1476 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1581 currentId 1476
Added AND Nodes: 1580 1581
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 1581 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1576 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1586 currentId 1576
Added AND Nodes: 1585 1586
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1586 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1586 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1591 currentId 1586
Added AND Nodes: 1590 1591
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1591 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1591 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1596 currentId 1591
Added AND Nodes: 1595 1596
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1596 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1596 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1601 currentId 1596
Added AND Nodes: 1600 1601
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1601 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1601 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1606 currentId 1601
Added AND Nodes: 1605 1606
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1606 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => callsites count before spliiting 358 with id = 1526 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1611 currentId 1526
Added AND Nodes: 1610 1611
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1611 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1606 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1616 currentId 1606
Added AND Nodes: 1615 1616
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1616 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1616 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1621 currentId 1616
Added AND Nodes: 1620 1621
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1621 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1621 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1626 currentId 1621
Added AND Nodes: 1625 1626
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1626 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1626 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1631 currentId 1626
Added AND Nodes: 1630 1631
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1631 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1631 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1636 currentId 1631
Added AND Nodes: 1635 1636
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1636 from client 7 to 6
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1636 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1641 currentId 1636
Added AND Nodes: 1640 1641
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1641 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1641 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1646 currentId 1641
Added AND Nodes: 1645 1646
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1646 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1646 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1651 currentId 1646
Added AND Nodes: 1650 1651
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1651 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1651 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1656 currentId 1651
Added AND Nodes: 1655 1656
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1656 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1656 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1661 currentId 1656
Added AND Nodes: 1660 1661
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1661 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1661 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1666 currentId 1661
Added AND Nodes: 1665 1666
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1666 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1666 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1671 currentId 1666
Added AND Nodes: 1670 1671
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1671 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1671 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1676 currentId 1671
Added AND Nodes: 1675 1676
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1676 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1676 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1681 currentId 1676
Added AND Nodes: 1680 1681
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1681 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => callsites count before spliiting 357 with id = 1611 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1686 currentId 1611
Added AND Nodes: 1685 1686
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 1686 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1681 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1691 currentId 1681
Added AND Nodes: 1690 1691
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1691 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1691 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1696 currentId 1691
Added AND Nodes: 1695 1696
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1696 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1696 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1701 currentId 1696
Added AND Nodes: 1700 1701
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1701 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1701 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1706 currentId 1701
Added AND Nodes: 1705 1706
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1706 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => callsites count before spliiting 357 with id = 1581 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1711 currentId 1581
Added AND Nodes: 1710 1711
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 1711 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1706 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1716 currentId 1706
Added AND Nodes: 1715 1716
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1716 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1716 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1721 currentId 1716
Added AND Nodes: 1720 1721
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1721 from client 4 to 7
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1721 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1726 currentId 1721
Added AND Nodes: 1725 1726
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1726 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1726 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1731 currentId 1726
Added AND Nodes: 1730 1731
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1731 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1731 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1736 currentId 1731
Added AND Nodes: 1735 1736
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1736 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1736 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1741 currentId 1736
Added AND Nodes: 1740 1741
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1741 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1741 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1746 currentId 1741
Added AND Nodes: 1745 1746
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1746 from client 7 to 6
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1746 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1751 currentId 1746
Added AND Nodes: 1750 1751
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1751 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1751 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1756 currentId 1751
Added AND Nodes: 1755 1756
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1756 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1756 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1761 currentId 1756
Added AND Nodes: 1760 1761
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1761 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1761 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1766 currentId 1761
Added AND Nodes: 1765 1766
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1766 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1766 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1771 currentId 1766
Added AND Nodes: 1770 1771
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1771 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1771 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1776 currentId 1771
Added AND Nodes: 1775 1776
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1776 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => callsites count before spliiting 357 with id = 1686 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1781 currentId 1686
Added AND Nodes: 1780 1781
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1781 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1776 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1786 currentId 1776
Added AND Nodes: 1785 1786
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1786 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => callsites count before spliiting 672 with id = 1786 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1791 currentId 1786
Added AND Nodes: 1790 1791
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1791 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1791 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1796 currentId 1791
Added AND Nodes: 1795 1796
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1796 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => callsites count before spliiting 357 with id = 1711 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1801 currentId 1711
Added AND Nodes: 1800 1801
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 1801 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1796 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1806 currentId 1796
Added AND Nodes: 1805 1806
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1806 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1806 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1811 currentId 1806
Added AND Nodes: 1810 1811
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1811 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 5 with id = 1781 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1816 currentId 1781
Added AND Nodes: 1815 1816
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1816 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1811 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1821 currentId 1811
Added AND Nodes: 1820 1821
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1821 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1821 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1826 currentId 1821
Added AND Nodes: 1825 1826
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1826 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1826 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1831 currentId 1826
Added AND Nodes: 1830 1831
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1831 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1831 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1836 currentId 1831
Added AND Nodes: 1835 1836
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1836 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1836 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1841 currentId 1836
Added AND Nodes: 1840 1841
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1841 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 1816 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1846 currentId 1816
Added AND Nodes: 1845 1846
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1846 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 8 with id = 1845 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1851 currentId 1845
Added AND Nodes: 1850 1851
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1851 from client 9 to 11
11 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 11 with id = 1850 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1856 currentId 1850
Added AND Nodes: 1855 1856
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1856 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1841 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1861 currentId 1841
Added AND Nodes: 1860 1861
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1861 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1861 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1866 currentId 1861
Added AND Nodes: 1865 1866
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1866 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1866 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1871 currentId 1866
Added AND Nodes: 1870 1871
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1871 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1871 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1876 currentId 1871
Added AND Nodes: 1875 1876
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1876 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
0 => callsites count before spliiting 357 with id = 1801 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1881 currentId 1801
Added AND Nodes: 1880 1881
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 1881 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1876 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1886 currentId 1876
Added AND Nodes: 1885 1886
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1886 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 4 with id = 1846 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1891 currentId 1846
Added AND Nodes: 1890 1891
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 1891 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1886 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1896 currentId 1886
Added AND Nodes: 1895 1896
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1896 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1896 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1901 currentId 1896
Added AND Nodes: 1900 1901
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1901 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1901 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1906 currentId 1901
Added AND Nodes: 1905 1906
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1906 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1906 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1911 currentId 1906
Added AND Nodes: 1910 1911
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1911 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1911 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1916 currentId 1911
Added AND Nodes: 1915 1916
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1916 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1916 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1921 currentId 1916
Added AND Nodes: 1920 1921
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1921 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1921 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1926 currentId 1921
Added AND Nodes: 1925 1926
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1926 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 4 with id = 1891 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1931 currentId 1891
Added AND Nodes: 1930 1931
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1931 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 8 with id = 1930 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1936 currentId 1930
Added AND Nodes: 1935 1936
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1936 from client 9 to 8
8 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1926 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1941 currentId 1926
Added AND Nodes: 1940 1941
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1941 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1941 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1946 currentId 1941
Added AND Nodes: 1945 1946
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1946 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => callsites count before spliiting 359 with id = 1935 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1951 currentId 1935
Added AND Nodes: 1950 1951
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 1951 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1946 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1956 currentId 1946
Added AND Nodes: 1955 1956
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1956 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
3 => callsites count before spliiting 356 with id = 1881 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1961 currentId 1881
Added AND Nodes: 1960 1961
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 1961 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1956 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1966 currentId 1956
Added AND Nodes: 1965 1966
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1966 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1966 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1971 currentId 1966
Added AND Nodes: 1970 1971
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1971 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 1936 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1976 currentId 1936
Added AND Nodes: 1975 1976
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1976 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1971 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1981 currentId 1971
Added AND Nodes: 1980 1981
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 1981 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 1981 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1986 currentId 1981
Added AND Nodes: 1985 1986
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 1986 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 1986 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1991 currentId 1986
Added AND Nodes: 1990 1991
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 1991 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 1991 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1996 currentId 1991
Added AND Nodes: 1995 1996
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 1996 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 1951 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2001 currentId 1951
Added AND Nodes: 2000 2001
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 2001 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 1996 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2006 currentId 1996
Added AND Nodes: 2005 2006
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 2006 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 2006 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2011 currentId 2006
Added AND Nodes: 2010 2011
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 2011 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 1976 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2016 currentId 1976
Added AND Nodes: 2015 2016
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 2016 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 2011 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2021 currentId 2011
Added AND Nodes: 2020 2021
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 2021 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 2021 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2026 currentId 2021
Added AND Nodes: 2025 2026
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 2026 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => callsites count before spliiting 355 with id = 1961 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2031 currentId 1961
Added AND Nodes: 2030 2031
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 2031 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = True
2 => outcome: ReachedBound
for clientid : 2 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 2026 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2036 currentId 2026
Added AND Nodes: 2035 2036
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 2036 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 2036 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2041 currentId 2036
Added AND Nodes: 2040 2041
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 2041 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
8 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 2041 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2046 currentId 2041
Added AND Nodes: 2045 2046
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 2046 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => callsites count before spliiting 1 with id = 2001 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2051 currentId 2001
Added AND Nodes: 2050 2051
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 2051 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 2016 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 2056 currentId 2016
Added AND Nodes: 2055 2056
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 2056 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 2046 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2061 currentId 2046
Added AND Nodes: 2060 2061
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 2061 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 2061 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2066 currentId 2061
Added AND Nodes: 2065 2066
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 2066 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 2066 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2071 currentId 2066
Added AND Nodes: 2070 2071
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 2071 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 2071 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2076 currentId 2071
Added AND Nodes: 2075 2076
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 2076 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 2076 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2081 currentId 2076
Added AND Nodes: 2080 2081
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 2081 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => LOOP outcome: Correct & reachbound = True

LOCATION - 0: 6
removing 11
removing 21
removing 31
removing 36
removing 51
removing 56
removing 66
removing 71
removing 76
removing 81
removing 91
removing 101
removing 106
removing 111
removing 121
removing 126
removing 131
removing 141
removing 150
removing 155
removing 171
removing 191
removing 206
removing 215
removing 221
removing 250
removing 446
removing 466
removing 491
removing 501
removing 521
removing 536
removing 561
removing 586
removing 611
removing 636
removing 656
removing 681
removing 716
removing 741
removing 761
removing 786
removing 811
removing 836
removing 856
removing 886
removing 911
removing 936
removing 961
removing 981
removing 1001
removing 1091
removing 1101
removing 1106
removing 1111
removing 1116
removing 1121
removing 1131
removing 1141
removing 1146
removing 1151
removing 1156
removing 1166
removing 1171
removing 1181
removing 1191
removing 1196
removing 1201
removing 1206
removing 1211
removing 1216
removing 1221
removing 1231
removing 1236
removing 1241
removing 1246
removing 1256
removing 1261
removing 1266
removing 1271
removing 1281
removing 1286
removing 1291
removing 1296
removing 1301
removing 1306
removing 1311
removing 1321
removing 1326
removing 1331
removing 1341
removing 1346
removing 1351
removing 1356
removing 1361
removing 1366
removing 1371
removing 1376
removing 1381
removing 1391
removing 1396
removing 1401
removing 1411
removing 1416
removing 1421
removing 1426
removing 1431
removing 1436
removing 1441
removing 1456
removing 1461
removing 1466
removing 1471
removing 1481
removing 1486
removing 1491
removing 1496
removing 1501
removing 1506
removing 1511
removing 1516
removing 1521
removing 1531
removing 1536
removing 1541
removing 1546
removing 1551
removing 1556
removing 1561
removing 1566
removing 1571
removing 1576
removing 1586
removing 1591
removing 1596
removing 1601
removing 1606
removing 1616
removing 1621
removing 1626
removing 1631
removing 1636
removing 1641
removing 1646
removing 1651
removing 1656
removing 1661
removing 1666
removing 1671
removing 1676
removing 1681
removing 1691
removing 1696
removing 1701
removing 1706
removing 1716
removing 1721
removing 1726
removing 1731
removing 1736
removing 1741
removing 1746
removing 1751
removing 1756
removing 1761
removing 1766
removing 1771
removing 1776
removing 1786
removing 1791
removing 1796
removing 1806
removing 1811
removing 1821
removing 1826
removing 1831
removing 1836
removing 1841
removing 1861
removing 1866
removing 1871
removing 1876
removing 1886
removing 1896
removing 1901
removing 1906
removing 1911
removing 1916
removing 1921
removing 1926
removing 1941
removing 1946
removing 1956
removing 1966
removing 1971
removing 1981
removing 1986
removing 1991
removing 1996
removing 2006
removing 2011
removing 2021
removing 2026
removing 2036
removing 2041
removing 2046
removing 2061
removing 2066
removing 2071
removing 2076
removing 2081
removing 16
removing 41
removing 61
removing 86
removing 116
removing 146
removing 211
removing 281
removing 301
removing 316
removing 326
removing 335
removing 351
removing 365
removing 381
removing 426
removing 511
removing 556
removing 721
removing 926
removing 1016
removing 1096
removing 1136
removing 1161
removing 1186
removing 1226
removing 1276
removing 1336
removing 1406
removing 1446
removing 1526
removing 1611
removing 1686
removing 1781
removing 1816
removing 1846
removing 1891
removing 1930
removing 1935
removing 1951
removing 2001
removing 2051
removing 1936
removing 1976
removing 2016
removing 2056
Reached root of partition tree. Verfification Finished.
Reached root bestAlgo updated to 0
Verification Outcome : ReachedBound
Time Taken : 3034.347255
bestAlgo: 0
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--scsi--dpt_i2o.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 2 algo id is 0
for clientid : 1 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
0 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 17 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
5 => Spliiting due to client waiting
8 => callsites count before spliiting 17 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 6
6 => after replyFromServer: 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 36
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 17 with id = 26 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 46 currentId 26
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 46 from client 2 to 1
1 => after replyFromServer: 100
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => LOOP outcome: Correct & reachbound = False
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => outcome: Correct
for clientid : 2 algo id is 0
4 => Spliiting due to client waiting
9 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 56 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => callsites count before spliiting 17 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 61 currentId 31
Added AND Nodes: 60 61
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 61 from client 9 to 10
10 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 56 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 101 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 106 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 13 with id = 46 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 116 currentId 46
10 => Spliiting due to client waiting
10 => callsites count before spliiting 13 with id = 61 and splitMode 50
Added AND Nodes: 115 116
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 116 from client 1 to 3
10 => sending calltree : splitMode 50 mustReachId 121 currentId 61
3 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 126 currentId 111
for clientid : 1 algo id is 0
Added AND Nodes: 125 126
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 126 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
Added AND Nodes: 120 121
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 121 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 126 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 131 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 131 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 136 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 136 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 141 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 4 with id = 121 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 146 currentId 121
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 141 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 151 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
Added AND Nodes: 145 146
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 146 from client 11 to 8
7 => outcome: Correct
8 => after replyFromServer: 50
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 151 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 156 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 156 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 161 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 161 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 166 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 2 with id = 116 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 171 currentId 116
Added AND Nodes: 170 171
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 171 from client 3 to 0
0 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 166 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 176 currentId 166
Added AND Nodes: 175 176
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 176 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 12 with id = 145 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 181 currentId 145
Added AND Nodes: 180 181
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 181 from client 11 to 9
9 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 4 with id = 176 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 186 currentId 176
Added AND Nodes: 185 186
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 186 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 18 with id = 185 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 185
Added AND Nodes: 190 191
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 191 from client 4 to 6
6 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 186 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 196 currentId 186
Added AND Nodes: 195 196
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 196 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 26 with id = 190 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 201 currentId 190
Added AND Nodes: 200 201
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 201 from client 4 to 5
5 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 146 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 206 currentId 146
Added AND Nodes: 205 206
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 206 from client 8 to 10
10 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 10 with id = 170 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 211 currentId 170
Added AND Nodes: 210 211
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 211 from client 3 to 2
2 => after replyFromServer: 100
0 => Spliiting due to client waiting
0 => callsites count before spliiting 1 with id = 171 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 216 currentId 171
Added AND Nodes: 215 216
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 216 from client 0 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 13 with id = 210 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 221 currentId 210
Added AND Nodes: 220 221
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 221 from client 3 to 2
2 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 16 with id = 205 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 226 currentId 205
Added AND Nodes: 225 226
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 226 from client 8 to 10
10 => after replyFromServer: 50
5 => callsites count before spliiting 205 with id = 201 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 231 currentId 201
Added AND Nodes: 230 231
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 221 with id = 196 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 236 currentId 196
Added AND Nodes: 235 236
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 19 with id = 221 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 241 currentId 221
Added AND Nodes: 240 241
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 241 from client 2 to 1
1 => after replyFromServer: 100
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 23 with id = 226 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 246 currentId 226
9 => Spliiting due to client waiting
Added AND Nodes: 245 246
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 246 from client 10 to 8
8 => after replyFromServer: 50
9 => callsites count before spliiting 83 with id = 181 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 251 currentId 181
Added AND Nodes: 250 251
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 251 from client 9 to 10
10 => after replyFromServer: 50
5 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 54 with id = 180 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 256 currentId 180
Added AND Nodes: 255 256
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 256 from client 11 to 8
8 => after replyFromServer: 50
3 => callsites count before spliiting 53 with id = 220 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 261 currentId 220
Added AND Nodes: 260 261
4 => Spliiting due to client waiting
4 => callsites count before spliiting 67 with id = 200 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 266 currentId 200
Added AND Nodes: 265 266
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 266 from client 4 to 7
7 => after replyFromServer: 0
0 => callsites count before spliiting 50 with id = 215 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 271 currentId 215
Added AND Nodes: 270 271
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 76 with id = 255 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 276 currentId 255
Added AND Nodes: 275 276
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 276 from client 11 to 10
10 => after replyFromServer: 50
5 => callsites count before spliiting 368 with id = 231 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 281 currentId 231
Added AND Nodes: 280 281
2 => callsites count before spliiting 50 with id = 240 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 286 currentId 240
Added AND Nodes: 285 286
2 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 261 from client 3 to 0
0 => after replyFromServer: 100
4 => callsites count before spliiting 200 with id = 265 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 291 currentId 265
Added AND Nodes: 290 291
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 254 with id = 280 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 296 currentId 280
Added AND Nodes: 295 296
6 => callsites count before spliiting 223 with id = 191 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 301 currentId 191
Added AND Nodes: 300 301
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 56 with id = 241 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 306 currentId 241
Added AND Nodes: 305 306
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 208 with id = 276 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 311 currentId 276
Added AND Nodes: 310 311
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => callsites count before spliiting 50 with id = 260 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 316 currentId 260
Added AND Nodes: 315 316
2 => callsites count before spliiting 53 with id = 286 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 321 currentId 286
Added AND Nodes: 320 321
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 50 with id = 261 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 326 currentId 261
Added AND Nodes: 325 326
0 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 216 with id = 275 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 331 currentId 275
Added AND Nodes: 330 331
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => callsites count before spliiting 225 with id = 301 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 336 currentId 301
Added AND Nodes: 335 336
1 => callsites count before spliiting 53 with id = 306 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 341 currentId 306
Added AND Nodes: 340 341
7 => callsites count before spliiting 220 with id = 266 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 346 currentId 266
Added AND Nodes: 345 346
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => callsites count before spliiting 58 with id = 326 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 351 currentId 326
Added AND Nodes: 350 351
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 321 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 356 currentId 321
Added AND Nodes: 355 356
5 => callsites count before spliiting 204 with id = 295 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 361 currentId 295
Added AND Nodes: 360 361
9 => callsites count before spliiting 201 with id = 250 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 366 currentId 250
Added AND Nodes: 365 366
8 => callsites count before spliiting 214 with id = 256 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 371 currentId 256
Added AND Nodes: 370 371
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 52 with id = 351 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 376 currentId 351
Added AND Nodes: 375 376
9 => callsites count before spliiting 219 with id = 365 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 381 currentId 365
Added AND Nodes: 380 381
6 => callsites count before spliiting 217 with id = 335 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 386 currentId 335
Added AND Nodes: 385 386
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 201 with id = 331 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 391 currentId 331
Added AND Nodes: 390 391
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => callsites count before spliiting 373 with id = 386 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 396 currentId 386
Added AND Nodes: 395 396
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 227 with id = 380 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 401 currentId 380
Added AND Nodes: 400 401
6 => callsites count before spliiting 274 with id = 396 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 406 currentId 396
Added AND Nodes: 405 406
9 => callsites count before spliiting 238 with id = 400 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 411 currentId 400
Added AND Nodes: 410 411
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
4 => callsites count before spliiting 220 with id = 291 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 416 currentId 291
Added AND Nodes: 415 416
10 => callsites count before spliiting 201 with id = 311 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 421 currentId 311
Added AND Nodes: 420 421
6 => callsites count before spliiting 486 with id = 405 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 426 currentId 405
Added AND Nodes: 425 426
4 => callsites count before spliiting 208 with id = 415 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 431 currentId 415
Added AND Nodes: 430 431
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 515 with id = 425 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 436 currentId 425
Added AND Nodes: 435 436
4 => callsites count before spliiting 210 with id = 431 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 441 currentId 431
Added AND Nodes: 440 441
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 475 with id = 435 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 446 currentId 435
Added AND Nodes: 445 446
10 => callsites count before spliiting 238 with id = 420 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 451 currentId 420
Added AND Nodes: 450 451
4 => callsites count before spliiting 706 with id = 441 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 456 currentId 441
Added AND Nodes: 455 456
6 => callsites count before spliiting 370 with id = 445 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 461 currentId 445
Added AND Nodes: 460 461
0 => callsites count before spliiting 50 with id = 375 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 466 currentId 375
Added AND Nodes: 465 466
0 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
10 => callsites count before spliiting 258 with id = 450 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 471 currentId 450
Added AND Nodes: 470 471
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 703 with id = 455 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 476 currentId 455
Added AND Nodes: 475 476
5 => callsites count before spliiting 209 with id = 360 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 481 currentId 360
Added AND Nodes: 480 481
6 => callsites count before spliiting 219 with id = 446 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 486 currentId 446
Added AND Nodes: 485 486
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 572 with id = 475 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 491 currentId 475
Added AND Nodes: 490 491
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 788 with id = 491 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 496 currentId 491
Added AND Nodes: 495 496
3 => callsites count before spliiting 54 with id = 315 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 501 currentId 315
Added AND Nodes: 500 501
4 => callsites count before spliiting 919 with id = 495 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 506 currentId 495
Added AND Nodes: 505 506
6 => callsites count before spliiting 201 with id = 486 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 511 currentId 486
Added AND Nodes: 510 511
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 788 with id = 505 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 516 currentId 505
Added AND Nodes: 515 516
1 => callsites count before spliiting 53 with id = 340 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 521 currentId 340
Added AND Nodes: 520 521
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 687 with id = 515 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 526 currentId 515
Added AND Nodes: 525 526
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 241 with id = 436 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 531 currentId 436
Added AND Nodes: 530 531
8 => callsites count before spliiting 248 with id = 371 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 536 currentId 371
Added AND Nodes: 535 536
4 => callsites count before spliiting 201 with id = 526 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 541 currentId 526
Added AND Nodes: 540 541
4 => callsites count before spliiting 200 with id = 540 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 546 currentId 540
Added AND Nodes: 545 546
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 432 with id = 545 and splitMode 0
6 => callsites count before spliiting 211 with id = 531 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 551 currentId 545
Added AND Nodes: 550 551
6 => sending calltree : splitMode 0 mustReachId 556 currentId 531
Added AND Nodes: 555 556
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => callsites count before spliiting 262 with id = 470 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 561 currentId 470
Added AND Nodes: 560 561
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 426 with id = 551 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 566 currentId 551
Added AND Nodes: 565 566
6 => callsites count before spliiting 233 with id = 426 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 571 currentId 426
Added AND Nodes: 570 571
9 => callsites count before spliiting 500 with id = 411 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 576 currentId 411
Added AND Nodes: 575 576
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
4 => callsites count before spliiting 400 with id = 565 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 581 currentId 565
Added AND Nodes: 580 581
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 340 with id = 576 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 586 currentId 576
Added AND Nodes: 585 586
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 282 with id = 546 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 591 currentId 546
Added AND Nodes: 590 591
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 201 with id = 570 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 596 currentId 570
Added AND Nodes: 595 596
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 269 with id = 591 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 601 currentId 591
Added AND Nodes: 600 601
6 => callsites count before spliiting 208 with id = 571 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 606 currentId 571
Added AND Nodes: 605 606
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 228 with id = 606 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 611 currentId 606
Added AND Nodes: 610 611
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 632 with id = 586 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 616 currentId 586
Added AND Nodes: 615 616
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
4 => callsites count before spliiting 207 with id = 600 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 621 currentId 600
Added AND Nodes: 620 621
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 209 with id = 406 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 626 currentId 406
Added AND Nodes: 625 626
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => callsites count before spliiting 253 with id = 535 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 631 currentId 535
Added AND Nodes: 630 631
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 200 with id = 625 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 636 currentId 625
Added AND Nodes: 635 636
11 => callsites count before spliiting 218 with id = 391 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 641 currentId 391
Added AND Nodes: 640 641
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 215 with id = 626 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 646 currentId 626
Added AND Nodes: 645 646
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 332 with id = 646 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 651 currentId 646
Added AND Nodes: 650 651
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 200 with id = 601 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 656 currentId 601
Added AND Nodes: 655 656
2 => callsites count before spliiting 56 with id = 355 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 661 currentId 355
Added AND Nodes: 660 661
6 => callsites count before spliiting 203 with id = 651 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 666 currentId 651
Added AND Nodes: 665 666
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 219 with id = 541 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 671 currentId 541
Added AND Nodes: 670 671
7 => callsites count before spliiting 248 with id = 346 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 676 currentId 346
Added AND Nodes: 675 676
7 => callsites count before spliiting 210 with id = 675 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 681 currentId 675
Added AND Nodes: 680 681
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 205 with id = 670 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 686 currentId 670
Added AND Nodes: 685 686
7 => callsites count before spliiting 244 with id = 681 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 691 currentId 681
Added AND Nodes: 690 691
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 212 with id = 336 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 696 currentId 336
Added AND Nodes: 695 696
4 => callsites count before spliiting 307 with id = 685 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 701 currentId 685
Added AND Nodes: 700 701
7 => callsites count before spliiting 676 with id = 691 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 706 currentId 691
Added AND Nodes: 705 706
7 => callsites count before spliiting 693 with id = 705 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 711 currentId 705
Added AND Nodes: 710 711
4 => callsites count before spliiting 269 with id = 700 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 716 currentId 700
Added AND Nodes: 715 716
7 => callsites count before spliiting 582 with id = 710 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 721 currentId 710
Added AND Nodes: 720 721
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 762 with id = 721 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 726 currentId 721
Added AND Nodes: 725 726
7 => callsites count before spliiting 893 with id = 725 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 731 currentId 725
Added AND Nodes: 730 731
7 => callsites count before spliiting 1081 with id = 730 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 736 currentId 730
Added AND Nodes: 735 736
7 => callsites count before spliiting 1008 with id = 735 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 741 currentId 735
Added AND Nodes: 740 741
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 201 with id = 741 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 746 currentId 741
Added AND Nodes: 745 746
4 => callsites count before spliiting 299 with id = 701 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 751 currentId 701
Added AND Nodes: 750 751
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 210 with id = 745 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 756 currentId 745
Added AND Nodes: 755 756
8 => callsites count before spliiting 332 with id = 630 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 761 currentId 630
Added AND Nodes: 760 761
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 206 with id = 755 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 766 currentId 755
Added AND Nodes: 765 766
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 217 with id = 686 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 771 currentId 686
Added AND Nodes: 770 771
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 317 with id = 770 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 776 currentId 770
Added AND Nodes: 775 776
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 242 with id = 746 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 781 currentId 746
Added AND Nodes: 780 781
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 201 with id = 780 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 786 currentId 780
Added AND Nodes: 785 786
4 => callsites count before spliiting 205 with id = 771 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 791 currentId 771
Added AND Nodes: 790 791
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => callsites count before spliiting 314 with id = 616 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 796 currentId 616
Added AND Nodes: 795 796
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => outcome: ReachedBound
for clientid : 9 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 3
Assign partition 421 from client 10 to 9
9 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 202 with id = 695 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 801 currentId 695
Added AND Nodes: 800 801
4 => callsites count before spliiting 311 with id = 791 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 806 currentId 791
Added AND Nodes: 805 806
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 217 with id = 781 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 811 currentId 781
Added AND Nodes: 810 811
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 2
Assign partition 536 from client 8 to 9
9 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 201 with id = 810 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 816 currentId 810
Added AND Nodes: 815 816
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 221 with id = 481 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 821 currentId 481
Added AND Nodes: 820 821
5 => callsites count before spliiting 427 with id = 820 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 826 currentId 820
Added AND Nodes: 825 826
4 => callsites count before spliiting 201 with id = 671 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 831 currentId 671
Added AND Nodes: 830 831
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 211 with id = 830 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 836 currentId 830
Added AND Nodes: 835 836
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 201 with id = 835 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 841 currentId 835
Added AND Nodes: 840 841
7 => callsites count before spliiting 206 with id = 736 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 846 currentId 736
Added AND Nodes: 845 846
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 233 with id = 846 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 851 currentId 846
Added AND Nodes: 850 851
7 => callsites count before spliiting 214 with id = 850 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 856 currentId 850
Added AND Nodes: 855 856
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 225 with id = 696 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 861 currentId 696
Added AND Nodes: 860 861
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 201 with id = 836 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 866 currentId 836
Added AND Nodes: 865 866
6 => callsites count before spliiting 392 with id = 861 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 871 currentId 861
Added AND Nodes: 870 871
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 6
Assign partition 416 from client 4 to 6
6 => after replyFromServer: 0
4 => callsites count before spliiting 213 with id = 831 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 876 currentId 831
Added AND Nodes: 875 876
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 235 with id = 851 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 881 currentId 851
Added AND Nodes: 880 881
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 2
Assign partition 451 from client 10 to 9
9 => after replyFromServer: 50
4 => callsites count before spliiting 203 with id = 875 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 886 currentId 875
Added AND Nodes: 885 886
7 => callsites count before spliiting 206 with id = 880 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 891 currentId 880
Added AND Nodes: 890 891
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 631 from client 8 to 9
9 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 206 with id = 876 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 896 currentId 876
Added AND Nodes: 895 896
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 206 with id = 881 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 901 currentId 881
Added AND Nodes: 900 901
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 471 from client 10 to 9
9 => after replyFromServer: 50
4 => callsites count before spliiting 200 with id = 895 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 906 currentId 895
Added AND Nodes: 905 906
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 3 with id = 761 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 911 currentId 761
Added AND Nodes: 910 911
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 911 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => callsites count before spliiting 204 with id = 900 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 916 currentId 900
Added AND Nodes: 915 916
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => Spliiting due to client waiting
4 => callsites count before spliiting 213 with id = 516 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 921 currentId 516
Added AND Nodes: 920 921
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => callsites count before spliiting 138 with id = 561 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 926 currentId 561
Added AND Nodes: 925 926
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 926 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => callsites count before spliiting 220 with id = 921 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 931 currentId 921
Added AND Nodes: 930 931
7 => callsites count before spliiting 203 with id = 901 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 936 currentId 901
Added AND Nodes: 935 936
11 => Spliiting due to client waiting
11 => callsites count before spliiting 164 with id = 641 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 941 currentId 641
Added AND Nodes: 940 941
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 941 from client 11 to 10
10 => after replyFromServer: 50
4 => callsites count before spliiting 327 with id = 930 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 946 currentId 930
Added AND Nodes: 945 946
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 202 with id = 946 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 951 currentId 946
Added AND Nodes: 950 951
4 => callsites count before spliiting 211 with id = 950 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 956 currentId 950
Added AND Nodes: 955 956
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 202 with id = 955 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 961 currentId 955
Added AND Nodes: 960 961
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 213 with id = 731 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 966 currentId 731
Added AND Nodes: 965 966
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 911 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 971 currentId 911
Added AND Nodes: 970 971
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 971 from client 9 to 11
11 => after replyFromServer: 50
4 => callsites count before spliiting 209 with id = 956 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 976 currentId 956
Added AND Nodes: 975 976
9 => callsites count before spliiting 211 with id = 970 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 981 currentId 970
Added AND Nodes: 980 981
7 => callsites count before spliiting 206 with id = 966 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 986 currentId 966
Added AND Nodes: 985 986
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 232 with id = 985 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 991 currentId 985
Added AND Nodes: 990 991
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 230 with id = 990 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 996 currentId 990
Added AND Nodes: 995 996
9 => callsites count before spliiting 612 with id = 980 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1001 currentId 980
Added AND Nodes: 1000 1001
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 203 with id = 931 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1006 currentId 931
Added AND Nodes: 1005 1006
9 => callsites count before spliiting 913 with id = 1000 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1011 currentId 1000
Added AND Nodes: 1010 1011
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => callsites count before spliiting 464 with id = 1011 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1016 currentId 1011
Added AND Nodes: 1015 1016
7 => callsites count before spliiting 262 with id = 991 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1021 currentId 991
Added AND Nodes: 1020 1021
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => callsites count before spliiting 302 with id = 1016 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1026 currentId 1016
Added AND Nodes: 1025 1026
4 => callsites count before spliiting 219 with id = 1005 and splitMode 0
9 => LOOP outcome: Correct & reachbound = False
Added New : 
4 => sending calltree : splitMode 0 mustReachId 1031 currentId 1005
9 : 
Added AND Nodes: 1030 1031
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => callsites count before spliiting 203 with id = 1021 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1036 currentId 1021
Added AND Nodes: 1035 1036
6 => callsites count before spliiting 245 with id = 416 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1041 currentId 416
Added AND Nodes: 1040 1041
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 222 with id = 1040 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1046 currentId 1040
Added AND Nodes: 1045 1046
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 225 with id = 986 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1051 currentId 986
Added AND Nodes: 1050 1051
4 => callsites count before spliiting 222 with id = 1006 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1056 currentId 1006
Added AND Nodes: 1055 1056
7 => callsites count before spliiting 297 with id = 1050 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1061 currentId 1050
Added AND Nodes: 1060 1061
6 => callsites count before spliiting 348 with id = 1045 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1066 currentId 1045
Added AND Nodes: 1065 1066
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => Spliiting due to client waiting
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 353 with id = 1066 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1071 currentId 1066
Added AND Nodes: 1070 1071
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => callsites count before spliiting 99 with id = 926 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1076 currentId 926
Added AND Nodes: 1075 1076
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 1076 from client 8 to 9
9 => after replyFromServer: 50
6 => callsites count before spliiting 352 with id = 1071 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1081 currentId 1071
Added AND Nodes: 1080 1081
7 => callsites count before spliiting 224 with id = 1051 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1086 currentId 1051
Added AND Nodes: 1085 1086
6 => callsites count before spliiting 220 with id = 1080 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1091 currentId 1080
Added AND Nodes: 1090 1091
4 => callsites count before spliiting 203 with id = 1055 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1096 currentId 1055
Added AND Nodes: 1095 1096
7 => callsites count before spliiting 312 with id = 1085 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1101 currentId 1085
Added AND Nodes: 1100 1101
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 490 with id = 1075 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1106 currentId 1075
Added AND Nodes: 1105 1106
6 => callsites count before spliiting 218 with id = 1090 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1111 currentId 1090
Added AND Nodes: 1110 1111
7 => callsites count before spliiting 303 with id = 1086 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1116 currentId 1086
Added AND Nodes: 1115 1116
8 => callsites count before spliiting 840 with id = 1105 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1121 currentId 1105
Added AND Nodes: 1120 1121
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 225 with id = 1110 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1126 currentId 1110
Added AND Nodes: 1125 1126
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 587 with id = 1121 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1131 currentId 1121
Added AND Nodes: 1130 1131
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 337 with id = 726 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1136 currentId 726
Added AND Nodes: 1135 1136
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 201 with id = 1095 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1141 currentId 1095
Added AND Nodes: 1140 1141
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => callsites count before spliiting 295 with id = 1131 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1146 currentId 1131
Added AND Nodes: 1145 1146
6 => callsites count before spliiting 201 with id = 1126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1151 currentId 1126
Added AND Nodes: 1150 1151
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => callsites count before spliiting 257 with id = 1151 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1156 currentId 1151
Added AND Nodes: 1155 1156
7 => callsites count before spliiting 215 with id = 1136 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1161 currentId 1136
Added AND Nodes: 1160 1161
6 => callsites count before spliiting 493 with id = 1155 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1166 currentId 1155
Added AND Nodes: 1165 1166
6 => callsites count before spliiting 585 with id = 1165 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1171 currentId 1165
Added AND Nodes: 1170 1171
6 => callsites count before spliiting 408 with id = 1170 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1176 currentId 1170
Added AND Nodes: 1175 1176
7 => callsites count before spliiting 216 with id = 1160 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1181 currentId 1160
Added AND Nodes: 1180 1181
6 => callsites count before spliiting 242 with id = 1175 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1186 currentId 1175
Added AND Nodes: 1185 1186
4 => callsites count before spliiting 204 with id = 1096 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1191 currentId 1096
Added AND Nodes: 1190 1191
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 206 with id = 1185 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1196 currentId 1185
Added AND Nodes: 1195 1196
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 211 with id = 1056 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1201 currentId 1056
Added AND Nodes: 1200 1201
6 => callsites count before spliiting 201 with id = 1196 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1206 currentId 1196
Added AND Nodes: 1205 1206
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 224 with id = 1181 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1211 currentId 1181
Added AND Nodes: 1210 1211
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => Spliiting due to client waiting
11 => callsites count before spliiting 116 with id = 971 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1216 currentId 971
Added AND Nodes: 1215 1216
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 1216 from client 11 to 8
8 => after replyFromServer: 50
6 => callsites count before spliiting 207 with id = 1186 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1221 currentId 1186
Added AND Nodes: 1220 1221
11 => callsites count before spliiting 212 with id = 1215 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1226 currentId 1215
Added AND Nodes: 1225 1226
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 202 with id = 1201 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1231 currentId 1201
Added AND Nodes: 1230 1231
11 => callsites count before spliiting 545 with id = 1225 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1236 currentId 1225
Added AND Nodes: 1235 1236
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 887 with id = 1235 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1241 currentId 1235
Added AND Nodes: 1240 1241
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 945 with id = 1240 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1246 currentId 1240
Added AND Nodes: 1245 1246
7 => callsites count before spliiting 214 with id = 1211 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1251 currentId 1211
Added AND Nodes: 1250 1251
11 => callsites count before spliiting 1142 with id = 1245 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1256 currentId 1245
Added AND Nodes: 1255 1256
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => callsites count before spliiting 208 with id = 506 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1261 currentId 506
Added AND Nodes: 1260 1261
6 => callsites count before spliiting 201 with id = 1221 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1266 currentId 1221
Added AND Nodes: 1265 1266
4 => callsites count before spliiting 211 with id = 1260 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1271 currentId 1260
Added AND Nodes: 1270 1271
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 636 with id = 1256 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1276 currentId 1256
Added AND Nodes: 1275 1276
11 => callsites count before spliiting 667 with id = 1275 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1281 currentId 1275
Added AND Nodes: 1280 1281
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => callsites count before spliiting 215 with id = 1265 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1286 currentId 1265
Added AND Nodes: 1285 1286
4 => callsites count before spliiting 207 with id = 1271 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1291 currentId 1271
Added AND Nodes: 1290 1291
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 303 with id = 1285 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1296 currentId 1285
Added AND Nodes: 1295 1296
7 => callsites count before spliiting 201 with id = 1161 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1301 currentId 1161
Added AND Nodes: 1300 1301
6 => callsites count before spliiting 373 with id = 1295 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1306 currentId 1295
Added AND Nodes: 1305 1306
4 => callsites count before spliiting 201 with id = 1291 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1311 currentId 1291
Added AND Nodes: 1310 1311
6 => callsites count before spliiting 248 with id = 1305 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1316 currentId 1305
Added AND Nodes: 1315 1316
4 => callsites count before spliiting 282 with id = 1310 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1321 currentId 1310
Added AND Nodes: 1320 1321
6 => callsites count before spliiting 200 with id = 1315 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1326 currentId 1315
Added AND Nodes: 1325 1326
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 220 with id = 1300 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1331 currentId 1300
Added AND Nodes: 1330 1331
4 => callsites count before spliiting 244 with id = 1320 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1336 currentId 1320
Added AND Nodes: 1335 1336
11 => callsites count before spliiting 312 with id = 1281 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1341 currentId 1281
Added AND Nodes: 1340 1341
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 614 with id = 1340 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1346 currentId 1340
Added AND Nodes: 1345 1346
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => callsites count before spliiting 656 with id = 1345 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1351 currentId 1345
Added AND Nodes: 1350 1351
11 => callsites count before spliiting 699 with id = 1350 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1356 currentId 1350
Added AND Nodes: 1355 1356
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => callsites count before spliiting 202 with id = 1335 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1361 currentId 1335
Added AND Nodes: 1360 1361
6 => callsites count before spliiting 268 with id = 1296 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1366 currentId 1296
Added AND Nodes: 1365 1366
7 => callsites count before spliiting 205 with id = 1301 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1371 currentId 1301
Added AND Nodes: 1370 1371
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 481 with id = 1356 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1376 currentId 1356
Added AND Nodes: 1375 1376
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 209 with id = 1371 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1381 currentId 1371
Added AND Nodes: 1380 1381
6 => callsites count before spliiting 278 with id = 1266 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1386 currentId 1266
Added AND Nodes: 1385 1386
4 => callsites count before spliiting 299 with id = 1321 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1391 currentId 1321
Added AND Nodes: 1390 1391
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 201 with id = 1376 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1396 currentId 1376
Added AND Nodes: 1395 1396
11 => callsites count before spliiting 229 with id = 1395 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1401 currentId 1395
7 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 1400 1401
Added New : 
7 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 216 with id = 711 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1406 currentId 711
Added AND Nodes: 1405 1406
7 => callsites count before spliiting 217 with id = 1405 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1411 currentId 1405
Added AND Nodes: 1410 1411
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 207 with id = 1311 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1416 currentId 1311
Added AND Nodes: 1415 1416
7 => callsites count before spliiting 214 with id = 1411 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1421 currentId 1411
Added AND Nodes: 1420 1421
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => callsites count before spliiting 200 with id = 1396 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1426 currentId 1396
Added AND Nodes: 1425 1426
4 => callsites count before spliiting 304 with id = 1415 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1431 currentId 1415
Added AND Nodes: 1430 1431
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
7 => callsites count before spliiting 212 with id = 1421 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1436 currentId 1421
Added AND Nodes: 1435 1436
4 => callsites count before spliiting 242 with id = 1430 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1441 currentId 1430
Added AND Nodes: 1440 1441
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => callsites count before spliiting 567 with id = 1241 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1446 currentId 1241
Added AND Nodes: 1445 1446
11 => callsites count before spliiting 864 with id = 1445 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1451 currentId 1445
Added AND Nodes: 1450 1451
11 => callsites count before spliiting 1201 with id = 1450 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1456 currentId 1450
Added AND Nodes: 1455 1456
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => callsites count before spliiting 1493 with id = 1455 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1461 currentId 1455
Added AND Nodes: 1460 1461
7 => callsites count before spliiting 201 with id = 1406 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1466 currentId 1406
Added AND Nodes: 1465 1466
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 205 with id = 1466 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1471 currentId 1466
Added AND Nodes: 1470 1471
11 => callsites count before spliiting 315 with id = 1446 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1476 currentId 1446
Added AND Nodes: 1475 1476
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => callsites count before spliiting 614 with id = 1475 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1481 currentId 1475
Added AND Nodes: 1480 1481
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = True
Added New : 
11 : 
4 => callsites count before spliiting 316 with id = 1416 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1486 currentId 1416
Added AND Nodes: 1485 1486
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 260 with id = 1485 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1491 currentId 1485
Added AND Nodes: 1490 1491
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 202 with id = 706 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1496 currentId 706
Added AND Nodes: 1495 1496
7 => callsites count before spliiting 213 with id = 1495 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1501 currentId 1495
Added AND Nodes: 1500 1501
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 202 with id = 1171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1506 currentId 1171
Added AND Nodes: 1505 1506
7 => callsites count before spliiting 216 with id = 1501 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1511 currentId 1501
Added AND Nodes: 1510 1511
7 => callsites count before spliiting 202 with id = 1510 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1516 currentId 1510
Added AND Nodes: 1515 1516
3 => callsites count before spliiting 58 with id = 500 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1521 currentId 500
Added AND Nodes: 1520 1521
7 => callsites count before spliiting 340 with id = 1515 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1526 currentId 1515
Added AND Nodes: 1525 1526
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 289 with id = 1505 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1531 currentId 1505
Added AND Nodes: 1530 1531
7 => callsites count before spliiting 330 with id = 1525 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1536 currentId 1525
Added AND Nodes: 1535 1536
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 335 with id = 1535 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1541 currentId 1535
Added AND Nodes: 1540 1541
7 => callsites count before spliiting 210 with id = 1540 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1546 currentId 1540
Added AND Nodes: 1545 1546
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 203 with id = 1261 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1551 currentId 1261
Added AND Nodes: 1550 1551
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 323 with id = 1506 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1556 currentId 1506
Added AND Nodes: 1555 1556
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 205 with id = 1541 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1561 currentId 1541
Added AND Nodes: 1560 1561
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 292 with id = 1166 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1566 currentId 1166
Added AND Nodes: 1565 1566
7 => callsites count before spliiting 487 with id = 1561 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1571 currentId 1561
Added AND Nodes: 1570 1571
4 => callsites count before spliiting 233 with id = 1551 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1576 currentId 1551
Added AND Nodes: 1575 1576
7 => callsites count before spliiting 338 with id = 1570 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1581 currentId 1570
Added AND Nodes: 1580 1581
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 219 with id = 1580 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1586 currentId 1580
Added AND Nodes: 1585 1586
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 200 with id = 1576 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1591 currentId 1576
Added AND Nodes: 1590 1591
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 205 with id = 1586 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1596 currentId 1586
Added AND Nodes: 1595 1596
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 243 with id = 1590 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1601 currentId 1590
Added AND Nodes: 1600 1601
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 210 with id = 1596 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1606 currentId 1596
Added AND Nodes: 1605 1606
6 => callsites count before spliiting 215 with id = 1566 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1611 currentId 1566
Added AND Nodes: 1610 1611
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 317 with id = 1610 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1616 currentId 1610
Added AND Nodes: 1615 1616
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 337 with id = 1591 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1621 currentId 1591
Added AND Nodes: 1620 1621
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 300 with id = 1156 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1626 currentId 1156
Added AND Nodes: 1625 1626
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 200 with id = 1606 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1631 currentId 1606
Added AND Nodes: 1630 1631
6 => callsites count before spliiting 458 with id = 1625 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1636 currentId 1625
Added AND Nodes: 1635 1636
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 451 with id = 1635 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1641 currentId 1635
Added AND Nodes: 1640 1641
6 => callsites count before spliiting 281 with id = 1640 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1646 currentId 1640
Added AND Nodes: 1645 1646
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 326 with id = 496 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1651 currentId 496
Added AND Nodes: 1650 1651
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 215 with id = 1631 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1656 currentId 1631
Added AND Nodes: 1655 1656
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 204 with id = 1651 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1661 currentId 1651
Added AND Nodes: 1660 1661
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 452 with id = 1226 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1666 currentId 1226
Added AND Nodes: 1665 1666
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-fs--dlm--dlm.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50, 0
for clientid : 4 algo id is 1
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 25 26
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 26 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 6 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 36 currentId 6
Added AND Nodes: 35 36
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 36 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 6 with id = 26 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 46 currentId 26
Added AND Nodes: 45 46
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 46 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 6 with id = 36 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 51 currentId 36
7 => Spliiting due to client waiting
Added AND Nodes: 50 51
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 51 from client 1 to 2
2 => after replyFromServer: 100
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 41
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 46 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 61 currentId 46
Added AND Nodes: 60 61
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 61 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 66 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 71 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 18 with id = 76 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 36 with id = 80 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 86 currentId 80
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 67 with id = 85 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 91 currentId 85
Added AND Nodes: 90 91
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 91 from client 7 to 6
6 => after replyFromServer: 0
7 => callsites count before spliiting 237 with id = 90 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 90
Added AND Nodes: 95 96
4 => callsites count before spliiting 208 with id = 81 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 81
Added AND Nodes: 100 101
5 => callsites count before spliiting 230 with id = 86 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 86
Added AND Nodes: 105 106
7 => callsites count before spliiting 416 with id = 95 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 111 currentId 95
Added AND Nodes: 110 111
6 => callsites count before spliiting 210 with id = 91 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 116 currentId 91
Added AND Nodes: 115 116
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 220 with id = 100 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 100
Added AND Nodes: 120 121
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 200 with id = 121 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 295 with id = 106 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 131 currentId 106
Added AND Nodes: 130 131
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 716 with id = 110 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 136 currentId 110
Added AND Nodes: 135 136
4 => callsites count before spliiting 254 with id = 101 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 101
Added AND Nodes: 140 141
4 => callsites count before spliiting 307 with id = 140 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 146 currentId 140
Added AND Nodes: 145 146
7 => callsites count before spliiting 741 with id = 135 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 135
Added AND Nodes: 150 151
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 286 with id = 131 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 156 currentId 131
Added AND Nodes: 155 156
5 => callsites count before spliiting 228 with id = 155 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 161 currentId 155
Added AND Nodes: 160 161
7 => callsites count before spliiting 712 with id = 150 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 166 currentId 150
Added AND Nodes: 165 166
4 => callsites count before spliiting 290 with id = 146 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 171 currentId 146
Added AND Nodes: 170 171
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => Spliiting due to client waiting
2 => callsites count before spliiting 4 with id = 51 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 176 currentId 51
Added AND Nodes: 175 176
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 176 from client 2 to 3
3 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 3 with id = 61 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 181 currentId 61
Added AND Nodes: 180 181
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 181 from client 11 to 8
8 => after replyFromServer: 50
5 => callsites count before spliiting 200 with id = 160 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 186 currentId 160
Added AND Nodes: 185 186
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 211 with id = 116 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 191 currentId 116
Added AND Nodes: 190 191
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 339 with id = 191 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 710 with id = 165 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 201 currentId 165
Added AND Nodes: 200 201
6 => callsites count before spliiting 260 with id = 196 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 206 currentId 196
Added AND Nodes: 205 206
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 289 with id = 206 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 211 currentId 206
Added AND Nodes: 210 211
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 213 with id = 211 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 216 currentId 211
Added AND Nodes: 215 216
6 => callsites count before spliiting 294 with id = 215 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 221 currentId 215
Added AND Nodes: 220 221
6 => callsites count before spliiting 250 with id = 220 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 226 currentId 220
Added AND Nodes: 225 226
6 => callsites count before spliiting 211 with id = 225 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 231 currentId 225
Added AND Nodes: 230 231
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 234 with id = 231 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 236 currentId 231
Added AND Nodes: 235 236
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 201 with id = 236 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 241 currentId 236
Added AND Nodes: 240 241
7 => callsites count before spliiting 680 with id = 200 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 246 currentId 200
Added AND Nodes: 245 246
7 => callsites count before spliiting 531 with id = 245 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 251 currentId 245
Added AND Nodes: 250 251
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => Spliiting due to client waiting
3 => callsites count before spliiting 37 with id = 176 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 256 currentId 176
Added AND Nodes: 255 256
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 256 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
6 => callsites count before spliiting 288 with id = 240 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 261 currentId 240
Added AND Nodes: 260 261
2 => Spliiting due to client waiting
2 => callsites count before spliiting 38 with id = 175 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 266 currentId 175
Added AND Nodes: 265 266
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 266 from client 2 to 1
1 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 7 with id = 181 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 271 currentId 181
Added AND Nodes: 270 271
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 271 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 18 with id = 271 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 276 currentId 271
Added AND Nodes: 275 276
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 276 from client 9 to 10
10 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 7 with id = 180 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 281 currentId 180
Added AND Nodes: 280 281
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 281 from client 11 to 8
8 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => callsites count before spliiting 23 with id = 280 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 286 currentId 280
Added AND Nodes: 285 286
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 286 from client 11 to 10
10 => after replyFromServer: 50
6 => callsites count before spliiting 230 with id = 260 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 291 currentId 260
Added AND Nodes: 290 291
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 48 with id = 256 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 296 currentId 256
Added AND Nodes: 295 296
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 296 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 48 with id = 266 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 301 currentId 266
Added AND Nodes: 300 301
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 301 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
2 => callsites count before spliiting 83 with id = 265 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 306 currentId 265
Added AND Nodes: 305 306
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 306 from client 2 to 1
1 => after replyFromServer: 100
7 => callsites count before spliiting 378 with id = 246 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 311 currentId 246
Added AND Nodes: 310 311
7 => callsites count before spliiting 214 with id = 310 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 316 currentId 310
Added AND Nodes: 315 316
7 => callsites count before spliiting 203 with id = 315 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 321 currentId 315
Added AND Nodes: 320 321
3 => callsites count before spliiting 69 with id = 296 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 326 currentId 296
Added AND Nodes: 325 326
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 70 with id = 301 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 331 currentId 301
Added AND Nodes: 330 331
0 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 205 with id = 320 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 336 currentId 320
Added AND Nodes: 335 336
2 => callsites count before spliiting 100 with id = 305 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 341 currentId 305
Added AND Nodes: 340 341
1 => callsites count before spliiting 68 with id = 306 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 346 currentId 306
Added AND Nodes: 345 346
1 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 209 with id = 335 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 351 currentId 335
Added AND Nodes: 350 351
7 => callsites count before spliiting 202 with id = 350 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 356 currentId 350
Added AND Nodes: 355 356
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 368 with id = 356 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 361 currentId 356
Added AND Nodes: 360 361
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 253 with id = 361 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 366 currentId 361
Added AND Nodes: 365 366
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 237 with id = 366 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 371 currentId 366
Added AND Nodes: 370 371
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => callsites count before spliiting 265 with id = 371 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 376 currentId 371
Added AND Nodes: 375 376
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 355 with id = 161 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 381 currentId 161
Added AND Nodes: 380 381
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 266 with id = 376 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 386 currentId 376
Added AND Nodes: 385 386
0 => callsites count before spliiting 58 with id = 331 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 391 currentId 331
Added AND Nodes: 390 391
7 => callsites count before spliiting 437 with id = 385 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 396 currentId 385
Added AND Nodes: 395 396
2 => callsites count before spliiting 106 with id = 340 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 401 currentId 340
Added AND Nodes: 400 401
7 => callsites count before spliiting 364 with id = 395 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 406 currentId 395
Added AND Nodes: 405 406
7 => callsites count before spliiting 286 with id = 405 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 411 currentId 405
Added AND Nodes: 410 411
7 => callsites count before spliiting 208 with id = 410 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 416 currentId 410
Added AND Nodes: 415 416
3 => callsites count before spliiting 56 with id = 326 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 421 currentId 326
Added AND Nodes: 420 421
3 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 345 with id = 171 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 426 currentId 171
Added AND Nodes: 425 426
9 => callsites count before spliiting 253 with id = 275 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 431 currentId 275
Added AND Nodes: 430 431
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 57 with id = 346 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 436 currentId 346
Added AND Nodes: 435 436
4 => callsites count before spliiting 233 with id = 425 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 441 currentId 425
Added AND Nodes: 440 441
10 => callsites count before spliiting 240 with id = 286 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 446 currentId 286
Added AND Nodes: 445 446
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => callsites count before spliiting 202 with id = 440 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 451 currentId 440
Added AND Nodes: 450 451
8 => callsites count before spliiting 304 with id = 281 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 456 currentId 281
Added AND Nodes: 455 456
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--drivers--snd-dummy.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 4 algo id is 1
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 5 algo id is 1
for clientid : 7 algo id is 1
for clientid : 6 algo id is 1
for clientid : 8 algo id is 2
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 28 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
0 => Spliiting due to client waiting
0 => callsites count before spliiting 28 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 36 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
Added AND Nodes: 35 36
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 36 from client 0 to 1
9 => after replyFromServer: 50
1 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 26 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 41 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 41 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => callsites count before spliiting 1 with id = 41 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 41
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 51 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 56 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 56 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 61 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 61 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 66 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 66 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 71 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 71 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 76 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 76 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 81 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 86 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 91 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 96 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 96 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 24 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 106 currentId 31
1 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 101
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 105 106
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 106 from client 9 to 10
10 => after replyFromServer: 50
1 => callsites count before spliiting 24 with id = 36 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 116 currentId 36
Added AND Nodes: 115 116
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 116 from client 1 to 2
2 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 111 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 111
Added AND Nodes: 120 121
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 121 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 121 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 126 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 126 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 131 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 131 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 136 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 136 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 141 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 141 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 146 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 146 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 151 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 151 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 156 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 156 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 161 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 17 with id = 106 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 166 currentId 106
Added AND Nodes: 165 166
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 166 from client 10 to 11
11 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 17 with id = 116 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 171 currentId 116
Added AND Nodes: 170 171
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 171 from client 2 to 3
3 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 161 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 176 currentId 161
Added AND Nodes: 175 176
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 176 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 176 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 181 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 181 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 186 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 186 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 191 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 9 with id = 166 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 196 currentId 166
Added AND Nodes: 195 196
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 196 from client 11 to 8
8 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => callsites count before spliiting 49 with id = 195 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 201 currentId 195
Added AND Nodes: 200 201
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 201 from client 11 to 9
9 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 9 with id = 171 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 206 currentId 171
Added AND Nodes: 205 206
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 206 from client 3 to 0
0 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 191 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 211 currentId 191
Added AND Nodes: 210 211
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 211 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 211 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 216 currentId 211
Added AND Nodes: 215 216
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 216 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 61 with id = 200 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 221 currentId 200
Added AND Nodes: 220 221
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 221 from client 11 to 10
10 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 22 with id = 205 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 226 currentId 205
Added AND Nodes: 225 226
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 226 from client 3 to 1
1 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 216 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 231 currentId 216
Added AND Nodes: 230 231
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 231 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 36 with id = 225 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 236 currentId 225
Added AND Nodes: 235 236
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 236 from client 3 to 2
2 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 231 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 241 currentId 231
Added AND Nodes: 240 241
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 241 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 241 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 246 currentId 241
Added AND Nodes: 245 246
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 246 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
3 => callsites count before spliiting 52 with id = 235 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 251 currentId 235
Added AND Nodes: 250 251
9 => Spliiting due to client waiting
3 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 4 with id = 201 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 256 currentId 201
Added AND Nodes: 255 256
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 256 from client 9 to 10
10 => after replyFromServer: 50
8 => callsites count before spliiting 288 with id = 196 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 261 currentId 196
Added AND Nodes: 260 261
11 => callsites count before spliiting 207 with id = 220 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 266 currentId 220
Added AND Nodes: 265 266
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 261 from client 8 to 9
9 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 246 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 271 currentId 246
Added AND Nodes: 270 271
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 271 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 271 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 276 currentId 271
Added AND Nodes: 275 276
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 276 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 276 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 281 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 281 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 286 currentId 281
Added AND Nodes: 285 286
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 286 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 286 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 291 currentId 286
Added AND Nodes: 290 291
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 291 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 291 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 296 currentId 291
Added AND Nodes: 295 296
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 296 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => callsites count before spliiting 319 with id = 260 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 301 currentId 260
Added AND Nodes: 300 301
11 => callsites count before spliiting 404 with id = 265 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 306 currentId 265
Added AND Nodes: 305 306
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 296 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 311 currentId 296
Added AND Nodes: 310 311
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 311 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 311 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 316 currentId 311
Added AND Nodes: 315 316
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 316 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 316 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 321 currentId 316
Added AND Nodes: 320 321
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 321 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
0 => callsites count before spliiting 58 with id = 206 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 326 currentId 206
Added AND Nodes: 325 326
0 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 221 with id = 261 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 331 currentId 261
Added AND Nodes: 330 331
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 321 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 336 currentId 321
Added AND Nodes: 335 336
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 336 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 336 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 341 currentId 336
Added AND Nodes: 340 341
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 341 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
3 => callsites count before spliiting 65 with id = 251 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 346 currentId 251
Added AND Nodes: 345 346
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 52 with id = 236 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 351 currentId 236
Added AND Nodes: 350 351
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 50 with id = 226 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 356 currentId 226
Added AND Nodes: 355 356
8 => callsites count before spliiting 599 with id = 300 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 361 currentId 300
Added AND Nodes: 360 361
5 => Spliiting due to client waiting
5 => callsites count before spliiting 5 with id = 341 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 366 currentId 341
Added AND Nodes: 365 366
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 366 from client 5 to 7
7 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 16 with id = 365 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 371 currentId 365
Added AND Nodes: 370 371
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 371 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => callsites count before spliiting 412 with id = 305 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 376 currentId 305
Added AND Nodes: 375 376
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 366 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 366
Added AND Nodes: 380 381
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 381 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 371 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 386 currentId 371
Added AND Nodes: 385 386
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 386 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 381 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 391 currentId 381
Added AND Nodes: 390 391
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 391 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 5 with id = 386 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 396 currentId 386
Added AND Nodes: 395 396
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 396 from client 5 to 6
6 => after replyFromServer: 0
9 => callsites count before spliiting 244 with id = 330 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 401 currentId 330
Added AND Nodes: 400 401
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 16 with id = 395 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 406 currentId 395
Added AND Nodes: 405 406
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 406 from client 5 to 4
4 => after replyFromServer: 0
6 => callsites count before spliiting 273 with id = 396 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 411 currentId 396
Added AND Nodes: 410 411
7 => callsites count before spliiting 214 with id = 391 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 416 currentId 391
Added AND Nodes: 415 416
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 619 with id = 360 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 421 currentId 360
Added AND Nodes: 420 421
5 => callsites count before spliiting 283 with id = 405 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 426 currentId 405
Added AND Nodes: 425 426
9 => callsites count before spliiting 256 with id = 400 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 431 currentId 400
Added AND Nodes: 430 431
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
4 => callsites count before spliiting 359 with id = 406 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 436 currentId 406
Added AND Nodes: 435 436
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 421 with id = 375 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 441 currentId 375
Added AND Nodes: 440 441
6 => callsites count before spliiting 610 with id = 410 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 446 currentId 410
Added AND Nodes: 445 446
7 => callsites count before spliiting 296 with id = 416 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 451 currentId 416
Added AND Nodes: 450 451
2 => callsites count before spliiting 52 with id = 351 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 456 currentId 351
Added AND Nodes: 455 456
2 => LOOP outcome: Correct & reachbound = False
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 65 with id = 346 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 461 currentId 346
Added AND Nodes: 460 461
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 582 with id = 425 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 466 currentId 425
Added AND Nodes: 465 466
11 => callsites count before spliiting 429 with id = 440 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 471 currentId 440
Added AND Nodes: 470 471
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 52 with id = 326 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 476 currentId 326
Added AND Nodes: 475 476
10 => callsites count before spliiting 229 with id = 256 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 481 currentId 256
Added AND Nodes: 480 481
6 => callsites count before spliiting 527 with id = 445 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 486 currentId 445
Added AND Nodes: 485 486
8 => callsites count before spliiting 796 with id = 420 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 491 currentId 420
Added AND Nodes: 490 491
4 => callsites count before spliiting 233 with id = 436 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 496 currentId 436
Added AND Nodes: 495 496
8 => callsites count before spliiting 799 with id = 490 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 501 currentId 490
Added AND Nodes: 500 501
10 => callsites count before spliiting 618 with id = 480 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 506 currentId 480
Added AND Nodes: 505 506
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 644 with id = 465 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 511 currentId 465
Added AND Nodes: 510 511
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => callsites count before spliiting 384 with id = 471 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 516 currentId 471
Added AND Nodes: 515 516
2 => callsites count before spliiting 52 with id = 456 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 521 currentId 456
Added AND Nodes: 520 521
0 => callsites count before spliiting 50 with id = 475 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 526 currentId 475
Added AND Nodes: 525 526
9 => callsites count before spliiting 243 with id = 431 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 531 currentId 431
Added AND Nodes: 530 531
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 52 with id = 355 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 536 currentId 355
Added AND Nodes: 535 536
6 => callsites count before spliiting 652 with id = 485 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 541 currentId 485
Added AND Nodes: 540 541
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 64 with id = 461 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 546 currentId 461
Added AND Nodes: 545 546
3 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 399 with id = 515 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 551 currentId 515
Added AND Nodes: 550 551
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
5 => callsites count before spliiting 588 with id = 510 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 556 currentId 510
Added AND Nodes: 555 556
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 240 with id = 495 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 561 currentId 495
Added AND Nodes: 560 561
9 => callsites count before spliiting 290 with id = 531 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 566 currentId 531
Added AND Nodes: 565 566
2 => callsites count before spliiting 55 with id = 520 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 571 currentId 520
Added AND Nodes: 570 571
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 50 with id = 525 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 576 currentId 525
Added AND Nodes: 575 576
7 => callsites count before spliiting 345 with id = 451 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 581 currentId 451
Added AND Nodes: 580 581
5 => callsites count before spliiting 305 with id = 556 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 586 currentId 556
Added AND Nodes: 585 586
6 => callsites count before spliiting 355 with id = 541 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 591 currentId 541
Added AND Nodes: 590 591
9 => callsites count before spliiting 307 with id = 565 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 596 currentId 565
Added AND Nodes: 595 596
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => callsites count before spliiting 220 with id = 506 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 601 currentId 506
Added AND Nodes: 600 601
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 50 with id = 535 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 606 currentId 535
Added AND Nodes: 605 606
5 => callsites count before spliiting 291 with id = 585 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 611 currentId 585
Added AND Nodes: 610 611
0 => callsites count before spliiting 55 with id = 575 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 616 currentId 575
Added AND Nodes: 615 616
5 => callsites count before spliiting 208 with id = 610 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 621 currentId 610
Added AND Nodes: 620 621
9 => callsites count before spliiting 204 with id = 596 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 626 currentId 596
Added AND Nodes: 625 626
4 => callsites count before spliiting 237 with id = 560 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 631 currentId 560
Added AND Nodes: 630 631
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => callsites count before spliiting 512 with id = 601 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 636 currentId 601
Added AND Nodes: 635 636
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => callsites count before spliiting 64 with id = 546 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 641 currentId 546
Added AND Nodes: 640 641
5 => callsites count before spliiting 210 with id = 620 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 646 currentId 620
Added AND Nodes: 645 646
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 289 with id = 551 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 651 currentId 551
Added AND Nodes: 650 651
2 => callsites count before spliiting 54 with id = 571 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 656 currentId 571
Added AND Nodes: 655 656
7 => callsites count before spliiting 338 with id = 580 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 661 currentId 580
Added AND Nodes: 660 661
6 => callsites count before spliiting 335 with id = 590 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 666 currentId 590
Added AND Nodes: 665 666
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 50 with id = 615 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 671 currentId 615
Added AND Nodes: 670 671
7 => callsites count before spliiting 396 with id = 660 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 676 currentId 660
Added AND Nodes: 675 676
7 => callsites count before spliiting 220 with id = 675 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 681 currentId 675
Added AND Nodes: 680 681
10 => callsites count before spliiting 261 with id = 636 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 686 currentId 636
Added AND Nodes: 685 686
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => callsites count before spliiting 218 with id = 625 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 691 currentId 625
Added AND Nodes: 690 691
10 => callsites count before spliiting 279 with id = 685 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 696 currentId 685
Added AND Nodes: 695 696
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => callsites count before spliiting 295 with id = 695 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 701 currentId 695
Added AND Nodes: 700 701
2 => callsites count before spliiting 52 with id = 655 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 706 currentId 655
Added AND Nodes: 705 706
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 317 with id = 700 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 711 currentId 700
Added AND Nodes: 710 711
10 => callsites count before spliiting 334 with id = 710 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 716 currentId 710
Added AND Nodes: 715 716
11 => callsites count before spliiting 433 with id = 650 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 721 currentId 650
Added AND Nodes: 720 721
10 => callsites count before spliiting 375 with id = 715 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 726 currentId 715
Added AND Nodes: 725 726
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 430 with id = 690 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 731 currentId 690
Added AND Nodes: 730 731
2 => callsites count before spliiting 53 with id = 706 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 736 currentId 706
Added AND Nodes: 735 736
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 200 with id = 726 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 741 currentId 726
Added AND Nodes: 740 741
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 609 with id = 730 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 746 currentId 730
Added AND Nodes: 745 746
9 => callsites count before spliiting 649 with id = 745 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 751 currentId 745
Added AND Nodes: 750 751
9 => callsites count before spliiting 664 with id = 750 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 756 currentId 750
Added AND Nodes: 755 756
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
10 => callsites count before spliiting 291 with id = 741 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 761 currentId 741
Added AND Nodes: 760 761
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => callsites count before spliiting 60 with id = 640 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 766 currentId 640
Added AND Nodes: 765 766
7 => callsites count before spliiting 423 with id = 661 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 771 currentId 661
Added AND Nodes: 770 771
10 => callsites count before spliiting 295 with id = 761 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 776 currentId 761
Added AND Nodes: 775 776
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
1 => callsites count before spliiting 53 with id = 605 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 781 currentId 605
Added AND Nodes: 780 781
3 => callsites count before spliiting 52 with id = 765 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 786 currentId 765
Added AND Nodes: 785 786
3 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 219 with id = 756 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 791 currentId 756
Added AND Nodes: 790 791
1 => callsites count before spliiting 57 with id = 780 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 796 currentId 780
Added AND Nodes: 795 796
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 50 with id = 670 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 801 currentId 670
Added AND Nodes: 800 801
11 => callsites count before spliiting 315 with id = 721 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 806 currentId 721
Added AND Nodes: 805 806
3 => callsites count before spliiting 53 with id = 786 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 811 currentId 786
Added AND Nodes: 810 811
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 52 with id = 796 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 816 currentId 796
Added AND Nodes: 815 816
9 => callsites count before spliiting 370 with id = 791 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 821 currentId 791
Added AND Nodes: 820 821
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => callsites count before spliiting 415 with id = 770 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 826 currentId 770
Added AND Nodes: 825 826
8 => callsites count before spliiting 560 with id = 501 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 831 currentId 501
Added AND Nodes: 830 831
9 => callsites count before spliiting 293 with id = 821 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 836 currentId 821
Added AND Nodes: 835 836
1 => callsites count before spliiting 51 with id = 815 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 841 currentId 815
Added AND Nodes: 840 841
9 => callsites count before spliiting 296 with id = 835 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 846 currentId 835
Added AND Nodes: 845 846
9 => callsites count before spliiting 456 with id = 845 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 851 currentId 845
Added AND Nodes: 850 851
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => callsites count before spliiting 630 with id = 851 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 856 currentId 851
Added AND Nodes: 855 856
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 710 with id = 830 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 861 currentId 830
Added AND Nodes: 860 861
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 412 with id = 825 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 866 currentId 825
Added AND Nodes: 865 866
4 => callsites count before spliiting 393 with id = 631 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 871 currentId 631
Added AND Nodes: 870 871
1 => callsites count before spliiting 50 with id = 840 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 876 currentId 840
Added AND Nodes: 875 876
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 50 with id = 800 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 881 currentId 800
Added AND Nodes: 880 881
8 => callsites count before spliiting 424 with id = 861 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 886 currentId 861
Added AND Nodes: 885 886
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 424 with id = 666 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 891 currentId 666
Added AND Nodes: 890 891
6 => callsites count before spliiting 305 with id = 890 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 896 currentId 890
Added AND Nodes: 895 896
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 684 with id = 856 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 901 currentId 856
Added AND Nodes: 900 901
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
6 => callsites count before spliiting 203 with id = 896 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 906 currentId 896
Added AND Nodes: 905 906
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 976 with id = 901 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 911 currentId 901
Added AND Nodes: 910 911
2 => callsites count before spliiting 54 with id = 736 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 916 currentId 736
Added AND Nodes: 915 916
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 403 with id = 870 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 921 currentId 870
Added AND Nodes: 920 921
9 => callsites count before spliiting 980 with id = 910 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 926 currentId 910
Added AND Nodes: 925 926
9 => callsites count before spliiting 1559 with id = 925 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 931 currentId 925
Added AND Nodes: 930 931
10 => callsites count before spliiting 218 with id = 776 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 936 currentId 776
Added AND Nodes: 935 936
9 => callsites count before spliiting 2369 with id = 930 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 941 currentId 930
Added AND Nodes: 940 941
10 => callsites count before spliiting 277 with id = 935 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 946 currentId 935
Added AND Nodes: 945 946
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => callsites count before spliiting 50 with id = 880 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 951 currentId 880
Added AND Nodes: 950 951
1 => callsites count before spliiting 50 with id = 876 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 956 currentId 876
Added AND Nodes: 955 956
1 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 54 with id = 916 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 961 currentId 916
Added AND Nodes: 960 961
9 => callsites count before spliiting 2372 with id = 940 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 966 currentId 940
Added AND Nodes: 965 966
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 334 with id = 886 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 971 currentId 886
Added AND Nodes: 970 971
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 630 with id = 966 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 976 currentId 966
Added AND Nodes: 975 976
3 => callsites count before spliiting 53 with id = 811 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 981 currentId 811
Added AND Nodes: 980 981
3 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 958 with id = 975 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 986 currentId 975
Added AND Nodes: 985 986
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
2 => callsites count before spliiting 50 with id = 960 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 991 currentId 960
Added AND Nodes: 990 991
0 => callsites count before spliiting 50 with id = 950 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 996 currentId 950
Added AND Nodes: 995 996
7 => callsites count before spliiting 484 with id = 865 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1001 currentId 865
Added AND Nodes: 1000 1001
1 => callsites count before spliiting 50 with id = 956 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1006 currentId 956
Added AND Nodes: 1005 1006
7 => callsites count before spliiting 332 with id = 1000 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1011 currentId 1000
Added AND Nodes: 1010 1011
7 => callsites count before spliiting 241 with id = 1010 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1016 currentId 1010
Added AND Nodes: 1015 1016
3 => callsites count before spliiting 54 with id = 981 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1021 currentId 981
Added AND Nodes: 1020 1021
2 => callsites count before spliiting 55 with id = 990 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1026 currentId 990
Added AND Nodes: 1025 1026
11 => callsites count before spliiting 320 with id = 805 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1031 currentId 805
Added AND Nodes: 1030 1031
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => callsites count before spliiting 359 with id = 920 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1036 currentId 920
Added AND Nodes: 1035 1036
0 => callsites count before spliiting 50 with id = 995 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1041 currentId 995
Added AND Nodes: 1040 1041
4 => callsites count before spliiting 209 with id = 1035 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1046 currentId 1035
Added AND Nodes: 1045 1046
3 => callsites count before spliiting 50 with id = 1020 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1051 currentId 1020
Added AND Nodes: 1050 1051
4 => callsites count before spliiting 201 with id = 1045 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1056 currentId 1045
Added AND Nodes: 1055 1056
0 => callsites count before spliiting 52 with id = 1040 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1061 currentId 1040
Added AND Nodes: 1060 1061
0 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 52 with id = 1025 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1066 currentId 1025
Added AND Nodes: 1065 1066
3 => callsites count before spliiting 50 with id = 1050 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1071 currentId 1050
Added AND Nodes: 1070 1071
1 => callsites count before spliiting 50 with id = 1005 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1076 currentId 1005
Added AND Nodes: 1075 1076
0 => callsites count before spliiting 51 with id = 1061 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1081 currentId 1061
Added AND Nodes: 1080 1081
0 => LOOP outcome: Correct & reachbound = True
7 => callsites count before spliiting 201 with id = 1015 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1086 currentId 1015
Added AND Nodes: 1085 1086
3 => callsites count before spliiting 51 with id = 1070 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1091 currentId 1070
Added AND Nodes: 1090 1091
7 => callsites count before spliiting 204 with id = 1085 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1096 currentId 1085
Added AND Nodes: 1095 1096
4 => callsites count before spliiting 219 with id = 1055 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1101 currentId 1055
Added AND Nodes: 1100 1101
8 => callsites count before spliiting 681 with id = 971 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1106 currentId 971
Added AND Nodes: 1105 1106
8 => callsites count before spliiting 733 with id = 1105 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1111 currentId 1105
Added AND Nodes: 1110 1111
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 579 with id = 1111 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1116 currentId 1111
Added AND Nodes: 1115 1116
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => callsites count before spliiting 201 with id = 1100 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1121 currentId 1100
Added AND Nodes: 1120 1121
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => callsites count before spliiting 552 with id = 1116 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1126 currentId 1116
Added AND Nodes: 1125 1126
8 => callsites count before spliiting 1113 with id = 1125 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1131 currentId 1125
Added AND Nodes: 1130 1131
8 => callsites count before spliiting 1119 with id = 1130 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1136 currentId 1130
Added AND Nodes: 1135 1136
6 => callsites count before spliiting 380 with id = 906 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1141 currentId 906
Added AND Nodes: 1140 1141
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 681 with id = 1141 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1146 currentId 1141
Added AND Nodes: 1145 1146
11 => callsites count before spliiting 218 with id = 1031 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1151 currentId 1031
Added AND Nodes: 1150 1151
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 656 with id = 1146 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1156 currentId 1146
Added AND Nodes: 1155 1156
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 50 with id = 1081 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1161 currentId 1081
Added AND Nodes: 1160 1161
6 => callsites count before spliiting 1073 with id = 1156 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1166 currentId 1156
Added AND Nodes: 1165 1166
6 => callsites count before spliiting 1940 with id = 1165 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1171 currentId 1165
Added AND Nodes: 1170 1171
1 => callsites count before spliiting 52 with id = 1075 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1176 currentId 1075
Added AND Nodes: 1175 1176
6 => callsites count before spliiting 2782 with id = 1170 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1181 currentId 1170
Added AND Nodes: 1180 1181
6 => callsites count before spliiting 3237 with id = 1180 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1186 currentId 1180
Added AND Nodes: 1185 1186
6 => callsites count before spliiting 3046 with id = 1185 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1191 currentId 1185
Added AND Nodes: 1190 1191
6 => callsites count before spliiting 2854 with id = 1190 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1196 currentId 1190
Added AND Nodes: 1195 1196
2 => callsites count before spliiting 53 with id = 1065 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1201 currentId 1065
Added AND Nodes: 1200 1201
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 1030 with id = 1186 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1206 currentId 1186
Added AND Nodes: 1205 1206
6 => callsites count before spliiting 1483 with id = 1205 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1211 currentId 1205
Added AND Nodes: 1210 1211
6 => callsites count before spliiting 1302 with id = 1210 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1216 currentId 1210
Added AND Nodes: 1215 1216
6 => callsites count before spliiting 1116 with id = 1215 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1221 currentId 1215
Added AND Nodes: 1220 1221
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 51 with id = 1160 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1226 currentId 1160
Added AND Nodes: 1225 1226
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 56 with id = 1225 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1231 currentId 1225
Added AND Nodes: 1230 1231
6 => callsites count before spliiting 1026 with id = 1211 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1236 currentId 1211
Added AND Nodes: 1235 1236
3 => callsites count before spliiting 51 with id = 1090 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1241 currentId 1090
Added AND Nodes: 1240 1241
2 => callsites count before spliiting 50 with id = 1200 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1246 currentId 1200
Added AND Nodes: 1245 1246
6 => callsites count before spliiting 836 with id = 1235 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1251 currentId 1235
Added AND Nodes: 1250 1251
6 => callsites count before spliiting 648 with id = 1250 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1256 currentId 1250
Added AND Nodes: 1255 1256
6 => callsites count before spliiting 453 with id = 1255 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1261 currentId 1255
Added AND Nodes: 1260 1261
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 52 with id = 1240 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1266 currentId 1240
Added AND Nodes: 1265 1266
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 52 with id = 1245 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1271 currentId 1245
Added AND Nodes: 1270 1271
6 => callsites count before spliiting 1591 with id = 1236 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1276 currentId 1236
Added AND Nodes: 1275 1276
0 => callsites count before spliiting 51 with id = 1230 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1281 currentId 1230
Added AND Nodes: 1280 1281
6 => callsites count before spliiting 2416 with id = 1275 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1286 currentId 1275
Added AND Nodes: 1285 1286
6 => callsites count before spliiting 2231 with id = 1285 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1291 currentId 1285
Added AND Nodes: 1290 1291
6 => callsites count before spliiting 2041 with id = 1290 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1296 currentId 1290
Added AND Nodes: 1295 1296
3 => callsites count before spliiting 50 with id = 1265 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1301 currentId 1265
Added AND Nodes: 1300 1301
6 => callsites count before spliiting 1850 with id = 1295 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1306 currentId 1295
Added AND Nodes: 1305 1306
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 50 with id = 1270 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1311 currentId 1270
Added AND Nodes: 1310 1311
3 => callsites count before spliiting 50 with id = 1300 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1316 currentId 1300
Added AND Nodes: 1315 1316
6 => callsites count before spliiting 1595 with id = 1286 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1321 currentId 1286
Added AND Nodes: 1320 1321
6 => callsites count before spliiting 1402 with id = 1320 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1326 currentId 1320
Added AND Nodes: 1325 1326
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--caif--caif_hsi.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 2 algo id is 0
for clientid : 1 algo id is 0
for clientid : 6 algo id is 1
for clientid : 3 algo id is 0
for clientid : 5 algo id is 1
for clientid : 4 algo id is 1
for clientid : 8 algo id is 2
for clientid : 9 algo id is 2
for clientid : 7 algo id is 1
for clientid : 10 algo id is 2
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 11 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 6
Algo : 1 started with splitmode 0
6 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
8 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 11 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 21 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 11 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 2
2 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 11 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
5 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
for clientid : 8 algo id is 2
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 36 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 41 currentId 36
Added AND Nodes: 40 41
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 41 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 46 currentId 31
Added AND Nodes: 45 46
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 46 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 41
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 14 with id = 26 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 56 currentId 26
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 51 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 61 currentId 51
Added AND Nodes: 60 61
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 61 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 55 56
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 56 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 46 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 66 currentId 46
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 4
4 => after replyFromServer: 0
Added AND Nodes: 65 66
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 66 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 71 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 76 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 76 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 11 with id = 56 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 86 currentId 56
11 => Spliiting due to client waiting
11 => callsites count before spliiting 12 with id = 66 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 91 currentId 66
Added AND Nodes: 85 86
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 86 from client 1 to 3
3 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 81 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 81
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 90 91
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 91 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 101 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 21 with id = 85 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 106 currentId 85
Added AND Nodes: 105 106
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 106 from client 1 to 0
0 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 101 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 101
Added AND Nodes: 110 111
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 111 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 116 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 11 with id = 91 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 121 currentId 91
Added AND Nodes: 120 121
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 121 from client 8 to 9
9 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 116 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 126 currentId 116
Added AND Nodes: 125 126
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 126 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 2 with id = 86 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 131 currentId 86
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 126 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 136 currentId 126
Added AND Nodes: 135 136
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 136 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
Added AND Nodes: 130 131
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 131 from client 3 to 2
for clientid : 5 algo id is 1
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 136 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 141 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 21 with id = 120 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 146 currentId 120
Added AND Nodes: 145 146
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 146 from client 8 to 10
10 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 141 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 7
clientCalltreeQueue Count : 1
7 => LOOP outcome: Correct & reachbound = False
Assign partition 151 from client 7 to 6
Added New : 
6 => after replyFromServer: 0
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 106 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 156 currentId 106
Added AND Nodes: 155 156
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 156 from client 0 to 1
1 => after replyFromServer: 100
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 151 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 161 currentId 151
Added AND Nodes: 160 161
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 161 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 121 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 166 currentId 121
Added AND Nodes: 165 166
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 166 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 2 with id = 131 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 171 currentId 131
Added AND Nodes: 170 171
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 171 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 161 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 176 currentId 161
Added AND Nodes: 175 176
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 176 from client 5 to 4
4 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
10 => Spliiting due to client waiting
10 => callsites count before spliiting 15 with id = 146 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 181 currentId 146
Added AND Nodes: 180 181
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 181 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 18 with id = 175 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 186 currentId 175
Added AND Nodes: 185 186
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 186 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 176 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 176
Added AND Nodes: 190 191
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 191 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 166 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 196 currentId 166
Added AND Nodes: 195 196
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 196 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 191 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 201 currentId 191
Added AND Nodes: 200 201
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 201 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 186 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 206 currentId 186
Added AND Nodes: 205 206
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 206 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 201 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 211 currentId 201
Added AND Nodes: 210 211
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 211 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 171 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 216 currentId 171
Added AND Nodes: 215 216
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 216 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 3 with id = 211 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 221 currentId 211
Added AND Nodes: 220 221
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 221 from client 6 to 7
7 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 206 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 226 currentId 206
Added AND Nodes: 225 226
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 226 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 156 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 231 currentId 156
Added AND Nodes: 230 231
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 231 from client 1 to 2
2 => after replyFromServer: 100
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 196 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 236 currentId 196
Added AND Nodes: 235 236
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 236 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 27 with id = 220 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 241 currentId 220
Added AND Nodes: 240 241
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 241 from client 6 to 4
4 => after replyFromServer: 0
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 7 with id = 226 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 246 currentId 226
Added AND Nodes: 245 246
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 246 from client 5 to 7
7 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 5 with id = 181 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 251 currentId 181
Added AND Nodes: 250 251
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 251 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 10 with id = 236 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 256 currentId 236
Added AND Nodes: 255 256
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 256 from client 10 to 9
9 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 1 with id = 216 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 261 currentId 216
Added AND Nodes: 260 261
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 261 from client 0 to 3
3 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => callsites count before spliiting 128 with id = 240 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 266 currentId 240
5 => callsites count before spliiting 59 with id = 245 and splitMode 0
Added AND Nodes: 265 266
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 266 from client 6 to 4
5 => sending calltree : splitMode 0 mustReachId 271 currentId 245
4 => after replyFromServer: 0
Added AND Nodes: 270 271
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 64 with id = 246 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 276 currentId 246
Added AND Nodes: 275 276
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 276 from client 7 to 6
6 => after replyFromServer: 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 22 with id = 256 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 281 currentId 256
Added AND Nodes: 280 281
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 281 from client 9 to 8
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => callsites count before spliiting 25 with id = 251 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 286 currentId 251
Added AND Nodes: 285 286
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 286 from client 11 to 10
10 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 261 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 291 currentId 261
Added AND Nodes: 290 291
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 291 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
0 => Spliiting due to client waiting
5 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 3 with id = 281 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 296 currentId 281
Added AND Nodes: 295 296
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 296 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 4 with id = 260 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 301 currentId 260
4 => Spliiting due to client waiting
Added AND Nodes: 300 301
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 301 from client 0 to 3
3 => after replyFromServer: 100
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => callsites count before spliiting 55 with id = 266 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 306 currentId 266
Added AND Nodes: 305 306
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 306 from client 4 to 7
7 => after replyFromServer: 0
5 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 109 with id = 305 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 311 currentId 305
Added AND Nodes: 310 311
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 311 from client 4 to 6
6 => after replyFromServer: 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 50 with id = 280 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 316 currentId 280
Added AND Nodes: 315 316
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 316 from client 9 to 8
8 => after replyFromServer: 50
4 => callsites count before spliiting 234 with id = 310 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 321 currentId 310
Added AND Nodes: 320 321
1 => callsites count before spliiting 51 with id = 291 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 326 currentId 291
Added AND Nodes: 325 326
3 => callsites count before spliiting 51 with id = 301 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 331 currentId 301
Added AND Nodes: 330 331
3 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 266 with id = 306 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 336 currentId 306
Added AND Nodes: 335 336
6 => callsites count before spliiting 206 with id = 311 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 341 currentId 311
Added AND Nodes: 340 341
11 => callsites count before spliiting 225 with id = 296 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 346 currentId 296
Added AND Nodes: 345 346
0 => callsites count before spliiting 54 with id = 300 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 351 currentId 300
Added AND Nodes: 350 351
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 226 with id = 316 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 356 currentId 316
Added AND Nodes: 355 356
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 442 with id = 271 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 361 currentId 271
Added AND Nodes: 360 361
9 => callsites count before spliiting 251 with id = 315 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 366 currentId 315
Added AND Nodes: 365 366
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => callsites count before spliiting 91 with id = 325 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 371 currentId 325
Added AND Nodes: 370 371
4 => callsites count before spliiting 478 with id = 320 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 376 currentId 320
Added AND Nodes: 375 376
7 => callsites count before spliiting 432 with id = 335 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 335
Added AND Nodes: 380 381
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 88 with id = 331 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 386 currentId 331
Added AND Nodes: 385 386
6 => callsites count before spliiting 464 with id = 340 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 391 currentId 340
Added AND Nodes: 390 391
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 546 with id = 345 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 396 currentId 345
Added AND Nodes: 395 396
0 => callsites count before spliiting 75 with id = 351 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 401 currentId 351
Added AND Nodes: 400 401
9 => callsites count before spliiting 395 with id = 365 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 406 currentId 365
Added AND Nodes: 405 406
4 => callsites count before spliiting 388 with id = 375 and splitMode 0
9 => LOOP outcome: Correct & reachbound = False
4 => sending calltree : splitMode 0 mustReachId 411 currentId 375
Added New : 
9 : 
Added AND Nodes: 410 411
1 => callsites count before spliiting 129 with id = 370 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 416 currentId 370
Added AND Nodes: 415 416
1 => LOOP outcome: Correct & reachbound = False
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => callsites count before spliiting 128 with id = 385 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 421 currentId 385
Added AND Nodes: 420 421
7 => callsites count before spliiting 211 with id = 381 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 426 currentId 381
Added AND Nodes: 425 426
11 => callsites count before spliiting 669 with id = 395 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 431 currentId 395
Added AND Nodes: 430 431
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 141 with id = 400 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 436 currentId 400
Added AND Nodes: 435 436
6 => callsites count before spliiting 209 with id = 391 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 441 currentId 391
Added AND Nodes: 440 441
1 => callsites count before spliiting 97 with id = 416 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 446 currentId 416
Added AND Nodes: 445 446
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
8 => callsites count before spliiting 228 with id = 356 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 451 currentId 356
Added AND Nodes: 450 451
3 => callsites count before spliiting 165 with id = 420 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 456 currentId 420
Added AND Nodes: 455 456
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 296 with id = 361 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 461 currentId 361
Added AND Nodes: 460 461
9 => callsites count before spliiting 210 with id = 406 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 466 currentId 406
Added AND Nodes: 465 466
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
4 => callsites count before spliiting 206 with id = 376 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 471 currentId 376
Added AND Nodes: 470 471
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 154 with id = 435 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 476 currentId 435
Added AND Nodes: 475 476
1 => callsites count before spliiting 98 with id = 445 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 481 currentId 445
Added AND Nodes: 480 481
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 355 with id = 450 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 486 currentId 450
Added AND Nodes: 485 486
5 => callsites count before spliiting 354 with id = 460 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 491 currentId 460
Added AND Nodes: 490 491
0 => callsites count before spliiting 220 with id = 475 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 496 currentId 475
Added AND Nodes: 495 496
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 70 with id = 456 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 501 currentId 456
Added AND Nodes: 500 501
6 => callsites count before spliiting 204 with id = 440 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 506 currentId 440
Added AND Nodes: 505 506
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 358 with id = 490 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 511 currentId 490
Added AND Nodes: 510 511
7 => callsites count before spliiting 206 with id = 425 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 516 currentId 425
Added AND Nodes: 515 516
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 211 with id = 471 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 521 currentId 471
Added AND Nodes: 520 521
8 => callsites count before spliiting 444 with id = 485 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 526 currentId 485
Added AND Nodes: 525 526
1 => callsites count before spliiting 75 with id = 481 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 531 currentId 481
Added AND Nodes: 530 531
2 => callsites count before spliiting 56 with id = 231 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 536 currentId 231
Added AND Nodes: 535 536
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 220 with id = 466 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 541 currentId 466
Added AND Nodes: 540 541
3 => callsites count before spliiting 71 with id = 500 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 546 currentId 500
Added AND Nodes: 545 546
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 53 with id = 496 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 551 currentId 496
Added AND Nodes: 550 551
0 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 442 with id = 510 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 556 currentId 510
Added AND Nodes: 555 556
9 => callsites count before spliiting 248 with id = 540 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 561 currentId 540
Added AND Nodes: 560 561
5 => callsites count before spliiting 395 with id = 555 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 566 currentId 555
Added AND Nodes: 565 566
1 => callsites count before spliiting 108 with id = 530 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 571 currentId 530
Added AND Nodes: 570 571
5 => callsites count before spliiting 290 with id = 565 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 576 currentId 565
Added AND Nodes: 575 576
3 => callsites count before spliiting 101 with id = 546 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 581 currentId 546
Added AND Nodes: 580 581
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 109 with id = 570 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 586 currentId 570
Added AND Nodes: 585 586
9 => callsites count before spliiting 276 with id = 560 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 591 currentId 560
Added AND Nodes: 590 591
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 131 with id = 585 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 596 currentId 585
Added AND Nodes: 595 596
1 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 205 with id = 520 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 601 currentId 520
Added AND Nodes: 600 601
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 206 with id = 575 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 606 currentId 575
Added AND Nodes: 605 606
6 => callsites count before spliiting 203 with id = 506 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 611 currentId 506
Added AND Nodes: 610 611
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 61 with id = 551 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 616 currentId 551
Added AND Nodes: 615 616
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 88 with id = 581 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 621 currentId 581
Added AND Nodes: 620 621
7 => callsites count before spliiting 208 with id = 516 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 626 currentId 516
Added AND Nodes: 625 626
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
1 => callsites count before spliiting 70 with id = 596 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 631 currentId 596
Added AND Nodes: 630 631
1 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 257 with id = 396 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 636 currentId 396
Added AND Nodes: 635 636
3 => callsites count before spliiting 55 with id = 620 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 641 currentId 620
Added AND Nodes: 640 641
8 => callsites count before spliiting 517 with id = 525 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 646 currentId 525
Added AND Nodes: 645 646
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 88 with id = 631 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 651 currentId 631
Added AND Nodes: 650 651
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 114 with id = 640 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 656 currentId 640
Added AND Nodes: 655 656
11 => callsites count before spliiting 282 with id = 635 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 661 currentId 635
Added AND Nodes: 660 661
10 => callsites count before spliiting 369 with id = 286 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 666 currentId 286
Added AND Nodes: 665 666
3 => callsites count before spliiting 136 with id = 655 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 671 currentId 655
Added AND Nodes: 670 671
3 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 333 with id = 660 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 676 currentId 660
Added AND Nodes: 675 676
0 => callsites count before spliiting 64 with id = 616 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 681 currentId 616
Added AND Nodes: 680 681
10 => callsites count before spliiting 576 with id = 665 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 686 currentId 665
Added AND Nodes: 685 686
3 => callsites count before spliiting 97 with id = 671 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 691 currentId 671
Added AND Nodes: 690 691
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 100 with id = 680 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 696 currentId 680
Added AND Nodes: 695 696
10 => callsites count before spliiting 659 with id = 685 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 701 currentId 685
Added AND Nodes: 700 701
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 846 with id = 700 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 706 currentId 700
Added AND Nodes: 705 706
11 => callsites count before spliiting 369 with id = 675 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 711 currentId 675
Added AND Nodes: 710 711
10 => callsites count before spliiting 982 with id = 705 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 716 currentId 705
Added AND Nodes: 715 716
6 => callsites count before spliiting 207 with id = 611 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 721 currentId 611
Added AND Nodes: 720 721
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 548 with id = 710 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 726 currentId 710
Added AND Nodes: 725 726
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => callsites count before spliiting 208 with id = 601 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 731 currentId 601
Added AND Nodes: 730 731
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => callsites count before spliiting 1098 with id = 715 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 736 currentId 715
Added AND Nodes: 735 736
5 => callsites count before spliiting 202 with id = 606 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 741 currentId 606
Added AND Nodes: 740 741
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => callsites count before spliiting 1180 with id = 735 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 746 currentId 735
Added AND Nodes: 745 746
7 => callsites count before spliiting 206 with id = 626 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 751 currentId 626
Added AND Nodes: 750 751
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
10 => callsites count before spliiting 1323 with id = 745 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 756 currentId 745
Added AND Nodes: 755 756
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => callsites count before spliiting 223 with id = 726 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 761 currentId 726
Added AND Nodes: 760 761
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 64 with id = 651 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 766 currentId 651
Added AND Nodes: 765 766
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 210 with id = 756 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 771 currentId 756
Added AND Nodes: 770 771
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
5 => callsites count before spliiting 203 with id = 741 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 776 currentId 741
Added AND Nodes: 775 776
0 => callsites count before spliiting 64 with id = 681 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 781 currentId 681
Added AND Nodes: 780 781
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 61 with id = 691 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 786 currentId 691
Added AND Nodes: 785 786
3 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 64 with id = 766 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 791 currentId 766
Added AND Nodes: 790 791
4 => callsites count before spliiting 206 with id = 731 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 796 currentId 731
Added AND Nodes: 795 796
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => callsites count before spliiting 93 with id = 790 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 801 currentId 790
Added AND Nodes: 800 801
6 => callsites count before spliiting 204 with id = 721 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 806 currentId 721
Added AND Nodes: 805 806
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 206 with id = 775 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 811 currentId 775
Added AND Nodes: 810 811
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 201 with id = 751 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 816 currentId 751
Added AND Nodes: 815 816
10 => callsites count before spliiting 227 with id = 771 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 821 currentId 771
Added AND Nodes: 820 821
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 215 with id = 591 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 826 currentId 591
Added AND Nodes: 825 826
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 64 with id = 786 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 831 currentId 786
Added AND Nodes: 830 831
11 => callsites count before spliiting 205 with id = 761 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 836 currentId 761
Added AND Nodes: 835 836
3 => callsites count before spliiting 88 with id = 830 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 841 currentId 830
Added AND Nodes: 840 841
3 => callsites count before spliiting 61 with id = 840 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 846 currentId 840
Added AND Nodes: 845 846
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 64 with id = 781 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 851 currentId 781
Added AND Nodes: 850 851
0 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 240 with id = 835 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 856 currentId 835
Added AND Nodes: 855 856
5 => callsites count before spliiting 207 with id = 811 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 861 currentId 811
Added AND Nodes: 860 861
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 217 with id = 815 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 866 currentId 815
Added AND Nodes: 865 866
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 206 with id = 796 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 871 currentId 796
Added AND Nodes: 870 871
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 271 with id = 855 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 876 currentId 855
Added AND Nodes: 875 876
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 64 with id = 831 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 881 currentId 831
Added AND Nodes: 880 881
3 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 214 with id = 806 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 886 currentId 806
Added AND Nodes: 885 886
1 => callsites count before spliiting 64 with id = 791 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 891 currentId 791
Added AND Nodes: 890 891
1 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 210 with id = 866 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 896 currentId 866
Added AND Nodes: 895 896
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 207 with id = 861 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 901 currentId 861
Added AND Nodes: 900 901
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 216 with id = 885 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 906 currentId 885
Added AND Nodes: 905 906
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 64 with id = 881 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 911 currentId 881
Added AND Nodes: 910 911
3 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 213 with id = 871 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 916 currentId 871
Added AND Nodes: 915 916
10 => callsites count before spliiting 207 with id = 821 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 921 currentId 821
Added AND Nodes: 920 921
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
7 => callsites count before spliiting 201 with id = 896 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 926 currentId 896
Added AND Nodes: 925 926
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 212 with id = 901 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 931 currentId 901
Added AND Nodes: 930 931
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 213 with id = 915 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 936 currentId 915
Added AND Nodes: 935 936
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 209 with id = 906 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 941 currentId 906
Added AND Nodes: 940 941
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 65 with id = 891 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 946 currentId 891
Added AND Nodes: 945 946
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 201 with id = 931 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 951 currentId 931
Added AND Nodes: 950 951
7 => callsites count before spliiting 213 with id = 926 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 956 currentId 926
Added AND Nodes: 955 956
6 => callsites count before spliiting 219 with id = 941 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 961 currentId 941
Added AND Nodes: 960 961
4 => callsites count before spliiting 214 with id = 936 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 966 currentId 936
Added AND Nodes: 965 966
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => callsites count before spliiting 216 with id = 646 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 971 currentId 646
Added AND Nodes: 970 971
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 204 with id = 950 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 976 currentId 950
Added AND Nodes: 975 976
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 207 with id = 955 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 981 currentId 955
Added AND Nodes: 980 981
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 56 with id = 536 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 986 currentId 536
Added AND Nodes: 985 986
2 => callsites count before spliiting 121 with id = 985 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 991 currentId 985
Added AND Nodes: 990 991
6 => callsites count before spliiting 202 with id = 960 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 996 currentId 960
Added AND Nodes: 995 996
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 149 with id = 990 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1001 currentId 990
Added AND Nodes: 1000 1001
2 => callsites count before spliiting 160 with id = 1000 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1006 currentId 1000
Added AND Nodes: 1005 1006
2 => callsites count before spliiting 142 with id = 1005 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1011 currentId 1005
Added AND Nodes: 1010 1011
2 => callsites count before spliiting 124 with id = 1010 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1016 currentId 1010
Added AND Nodes: 1015 1016
4 => callsites count before spliiting 210 with id = 966 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1021 currentId 966
Added AND Nodes: 1020 1021
2 => callsites count before spliiting 106 with id = 1015 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1026 currentId 1015
Added AND Nodes: 1025 1026
2 => callsites count before spliiting 128 with id = 1025 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1031 currentId 1025
Added AND Nodes: 1030 1031
2 => callsites count before spliiting 148 with id = 1030 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1036 currentId 1030
Added AND Nodes: 1035 1036
2 => callsites count before spliiting 155 with id = 1035 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1041 currentId 1035
Added AND Nodes: 1040 1041
5 => callsites count before spliiting 205 with id = 976 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1046 currentId 976
Added AND Nodes: 1045 1046
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 212 with id = 981 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1051 currentId 981
Added AND Nodes: 1050 1051
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 136 with id = 1040 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1056 currentId 1040
Added AND Nodes: 1055 1056
2 => callsites count before spliiting 118 with id = 1055 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1061 currentId 1055
Added AND Nodes: 1060 1061
2 => callsites count before spliiting 133 with id = 1060 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1066 currentId 1060
Added AND Nodes: 1065 1066
2 => callsites count before spliiting 184 with id = 1065 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1071 currentId 1065
Added AND Nodes: 1070 1071
2 => callsites count before spliiting 161 with id = 1070 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1076 currentId 1070
Added AND Nodes: 1075 1076
2 => callsites count before spliiting 172 with id = 1075 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1081 currentId 1075
Added AND Nodes: 1080 1081
6 => callsites count before spliiting 221 with id = 996 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1086 currentId 996
Added AND Nodes: 1085 1086
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 207 with id = 1020 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1091 currentId 1020
Added AND Nodes: 1090 1091
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 154 with id = 1080 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1096 currentId 1080
Added AND Nodes: 1095 1096
2 => callsites count before spliiting 158 with id = 1095 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1101 currentId 1095
Added AND Nodes: 1100 1101
2 => callsites count before spliiting 170 with id = 1100 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1106 currentId 1100
Added AND Nodes: 1105 1106
2 => callsites count before spliiting 203 with id = 1105 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1111 currentId 1105
Added AND Nodes: 1110 1111
2 => callsites count before spliiting 184 with id = 1110 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1116 currentId 1110
Added AND Nodes: 1115 1116
2 => callsites count before spliiting 188 with id = 1115 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1121 currentId 1115
Added AND Nodes: 1120 1121
2 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 62 with id = 1121 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1126 currentId 1121
Added AND Nodes: 1125 1126
2 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 83 with id = 1126 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1131 currentId 1126
Added AND Nodes: 1130 1131
2 => callsites count before spliiting 52 with id = 1130 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1136 currentId 1130
Added AND Nodes: 1135 1136
2 => callsites count before spliiting 55 with id = 1135 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1141 currentId 1135
Added AND Nodes: 1140 1141
2 => LOOP outcome: Correct & reachbound = True
5 => callsites count before spliiting 220 with id = 1046 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1146 currentId 1046
Added AND Nodes: 1145 1146
2 => callsites count before spliiting 70 with id = 1141 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1151 currentId 1141
Added AND Nodes: 1150 1151
7 => callsites count before spliiting 232 with id = 1051 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1156 currentId 1051
Added AND Nodes: 1155 1156
2 => callsites count before spliiting 77 with id = 1150 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1161 currentId 1150
Added AND Nodes: 1160 1161
2 => callsites count before spliiting 90 with id = 1160 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1166 currentId 1160
Added AND Nodes: 1165 1166
2 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 225 with id = 1091 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1171 currentId 1091
Added AND Nodes: 1170 1171
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 65 with id = 851 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1176 currentId 851
Added AND Nodes: 1175 1176
0 => callsites count before spliiting 99 with id = 1175 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1181 currentId 1175
Added AND Nodes: 1180 1181
0 => callsites count before spliiting 146 with id = 1180 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1186 currentId 1180
Added AND Nodes: 1185 1186
0 => callsites count before spliiting 189 with id = 1185 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1191 currentId 1185
Added AND Nodes: 1190 1191
0 => callsites count before spliiting 171 with id = 1190 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1196 currentId 1190
Added AND Nodes: 1195 1196
0 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 210 with id = 1086 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1201 currentId 1086
Added AND Nodes: 1200 1201
2 => callsites count before spliiting 64 with id = 1166 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1206 currentId 1166
Added AND Nodes: 1205 1206
2 => callsites count before spliiting 76 with id = 1205 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1211 currentId 1205
Added AND Nodes: 1210 1211
0 => callsites count before spliiting 64 with id = 1196 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1216 currentId 1196
Added AND Nodes: 1215 1216
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 54 with id = 1210 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1221 currentId 1210
Added AND Nodes: 1220 1221
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
2 => LOOP outcome: Correct & reachbound = True
5 => callsites count before spliiting 213 with id = 1145 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1226 currentId 1145
Added AND Nodes: 1225 1226
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
2 => callsites count before spliiting 64 with id = 1206 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1231 currentId 1206
Added AND Nodes: 1230 1231
2 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 209 with id = 1171 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1236 currentId 1171
Added AND Nodes: 1235 1236
7 => callsites count before spliiting 206 with id = 1155 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1241 currentId 1155
Added AND Nodes: 1240 1241
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 221 with id = 1226 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1246 currentId 1226
Added AND Nodes: 1245 1246
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 65 with id = 1216 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1251 currentId 1216
Added AND Nodes: 1250 1251
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 59 with id = 1231 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1256 currentId 1231
Added AND Nodes: 1255 1256
2 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 214 with id = 1235 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1261 currentId 1235
Added AND Nodes: 1260 1261
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
5 => callsites count before spliiting 203 with id = 1246 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1266 currentId 1246
Added AND Nodes: 1265 1266
0 => callsites count before spliiting 65 with id = 1251 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1271 currentId 1251
Added AND Nodes: 1270 1271
0 => callsites count before spliiting 75 with id = 1270 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1276 currentId 1270
Added AND Nodes: 1275 1276
0 => callsites count before spliiting 89 with id = 1275 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1281 currentId 1275
Added AND Nodes: 1280 1281
0 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 83 with id = 1281 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1286 currentId 1281
Added AND Nodes: 1285 1286
0 => callsites count before spliiting 96 with id = 1285 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1291 currentId 1285
Added AND Nodes: 1290 1291
4 => callsites count before spliiting 208 with id = 1261 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1296 currentId 1261
Added AND Nodes: 1295 1296
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 80 with id = 1290 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1301 currentId 1290
Added AND Nodes: 1300 1301
0 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 201 with id = 1200 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1306 currentId 1200
Added AND Nodes: 1305 1306
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 64 with id = 1301 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1311 currentId 1301
Added AND Nodes: 1310 1311
0 => LOOP outcome: Correct & reachbound = False
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--dec--tulip--xircom_cb.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 2 algo id is 0
for clientid : 1 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
for clientid : 5 algo id is 1
for clientid : 7 algo id is 1
for clientid : 6 algo id is 1
for clientid : 8 algo id is 2
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 25 26
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 26 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
0 => Spliiting due to client waiting
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => callsites count before spliiting 12 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 36 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 41 currentId 36
Added AND Nodes: 40 41
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 41 from client 7 to 6
6 => after replyFromServer: 0
9 => Spliiting due to client waiting
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => callsites count before spliiting 12 with id = 26 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 46 currentId 26
Added AND Nodes: 45 46
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 46 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 16 with id = 31 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 51 currentId 31
6 => Spliiting due to client waiting
Added AND Nodes: 50 51
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 51 from client 2 to 1
1 => after replyFromServer: 100
6 => callsites count before spliiting 1 with id = 41 and splitMode 0
2 => LOOP outcome: Correct & reachbound = False
6 => sending calltree : splitMode 0 mustReachId 56 currentId 41
2 => outcome: Correct
for clientid : 2 algo id is 0
Added AND Nodes: 55 56
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 56 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 66 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 71 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 71 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 14 with id = 46 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 81 currentId 46
Added AND Nodes: 80 81
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 81 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 86 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 11 with id = 51 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 91 currentId 51
Added AND Nodes: 90 91
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 91 from client 1 to 3
3 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 86 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 96 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 96 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 19 with id = 90 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 106 currentId 90
Added AND Nodes: 105 106
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 106 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 101
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 111 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 116 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => callsites count before spliiting 11 with id = 81 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 121 currentId 81
Added AND Nodes: 120 121
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 121 from client 11 to 8
8 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 116 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 126 currentId 116
Added AND Nodes: 125 126
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 126 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 2 with id = 91 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 131 currentId 91
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 126 and splitMode 0
Added AND Nodes: 130 131
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 131 from client 3 to 2
2 => after replyFromServer: 100
7 => sending calltree : splitMode 0 mustReachId 136 currentId 126
Added AND Nodes: 135 136
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 136 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 136 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 141 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 19 with id = 120 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 146 currentId 120
Added AND Nodes: 145 146
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 146 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 141 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 151 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 6 with id = 106 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 156 currentId 106
Added AND Nodes: 155 156
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 156 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
8 => Spliiting due to client waiting
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => callsites count before spliiting 2 with id = 121 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 161 currentId 121
Added AND Nodes: 160 161
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 161 from client 8 to 10
10 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 151 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 166 currentId 151
Added AND Nodes: 165 166
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 166 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
8 => Spliiting due to client waiting
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 166 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 171 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 3 with id = 131 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 176 currentId 131
Added AND Nodes: 175 176
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 176 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 161 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 181 currentId 161
Added AND Nodes: 180 181
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 181 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 186 currentId 171
Added AND Nodes: 185 186
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 186 from client 6 to 4
4 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 14 with id = 185 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 191 currentId 185
Added AND Nodes: 190 191
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 191 from client 6 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 186 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 196 currentId 186
Added AND Nodes: 195 196
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 196 from client 4 to 7
7 => after replyFromServer: 0
9 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => callsites count before spliiting 7 with id = 146 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 201 currentId 146
Added AND Nodes: 200 201
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 201 from client 9 to 8
8 => after replyFromServer: 50
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 196 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 206 currentId 196
Added AND Nodes: 205 206
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 206 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 191 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 211 currentId 191
Added AND Nodes: 210 211
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 211 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 206 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 216 currentId 206
Added AND Nodes: 215 216
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 216 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 181 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 221 currentId 181
Added AND Nodes: 220 221
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 221 from client 11 to 10
10 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 2 with id = 176 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 226 currentId 176
11 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 225 226
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 226 from client 3 to 0
Added New : 
11 : 
0 => after replyFromServer: 100
11 => outcome: Correct
3 => LOOP outcome: Correct & reachbound = False
for clientid : 11 algo id is 2
3 => outcome: Correct
for clientid : 3 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 156 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 231 currentId 156
Added AND Nodes: 230 231
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 231 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 13 with id = 201 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 236 currentId 201
Added AND Nodes: 235 236
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 236 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 216 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 241 currentId 216
Added AND Nodes: 240 241
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 241 from client 7 to 5
5 => after replyFromServer: 0
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 211 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 246 currentId 211
Added AND Nodes: 245 246
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 246 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 241 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 251 currentId 241
Added AND Nodes: 250 251
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 251 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 5 with id = 246 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 256 currentId 246
Added AND Nodes: 255 256
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 256 from client 4 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 12 with id = 240 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 261 currentId 240
Added AND Nodes: 260 261
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 261 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 221 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 266 currentId 221
Added AND Nodes: 265 266
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 266 from client 10 to 11
11 => after replyFromServer: 50
4 => Spliiting due to client waiting
10 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 1 with id = 226 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 271 currentId 226
Added AND Nodes: 270 271
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 271 from client 0 to 3
3 => after replyFromServer: 100
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 24 with id = 256 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 276 currentId 256
Added AND Nodes: 275 276
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 276 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 6 with id = 261 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 281 currentId 261
Added AND Nodes: 280 281
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 281 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 115 with id = 255 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 286 currentId 255
Added AND Nodes: 285 286
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 286 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 10 with id = 265 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 291 currentId 265
Added AND Nodes: 290 291
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 291 from client 10 to 8
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 270 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 296 currentId 270
Added AND Nodes: 295 296
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 296 from client 0 to 1
1 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 5 with id = 281 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 301 currentId 281
Added AND Nodes: 300 301
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 301 from client 5 to 4
4 => after replyFromServer: 0
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 236 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 306 currentId 236
Added AND Nodes: 305 306
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 306 from client 9 to 10
10 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 7 with id = 231 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 311 currentId 231
Added AND Nodes: 310 311
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 311 from client 2 to 0
0 => after replyFromServer: 100
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 1 with id = 271 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 316 currentId 271
Added AND Nodes: 315 316
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 316 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 9 with id = 291 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 321 currentId 291
Added AND Nodes: 320 321
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 321 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 1 with id = 296 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 326 currentId 296
Added AND Nodes: 325 326
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 326 from client 1 to 3
3 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 17 with id = 306 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 331 currentId 306
11 => Spliiting due to client waiting
Added AND Nodes: 330 331
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 331 from client 10 to 8
8 => after replyFromServer: 50
7 => callsites count before spliiting 205 with id = 276 and splitMode 0
11 => callsites count before spliiting 9 with id = 266 and splitMode 50
7 => sending calltree : splitMode 0 mustReachId 336 currentId 276
11 => sending calltree : splitMode 50 mustReachId 341 currentId 266
Added AND Nodes: 335 336
Added AND Nodes: 340 341
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => Spliiting due to client waiting
2 => callsites count before spliiting 7 with id = 316 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 346 currentId 316
Added AND Nodes: 345 346
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 346 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 7 with id = 311 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 351 currentId 311
Added AND Nodes: 350 351
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 351 from client 0 to 2
2 => after replyFromServer: 100
5 => callsites count before spliiting 216 with id = 300 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 356 currentId 300
Added AND Nodes: 355 356
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 16 with id = 321 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 361 currentId 321
Added AND Nodes: 360 361
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 361 from client 9 to 10
10 => after replyFromServer: 50
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 219 with id = 286 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 366 currentId 286
Added AND Nodes: 365 366
4 => callsites count before spliiting 215 with id = 301 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 371 currentId 301
Added AND Nodes: 370 371
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 18 with id = 326 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 376 currentId 326
Added AND Nodes: 375 376
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 376 from client 3 to 0
0 => after replyFromServer: 100
7 => callsites count before spliiting 263 with id = 336 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 336
Added AND Nodes: 380 381
5 => callsites count before spliiting 217 with id = 356 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 386 currentId 356
Added AND Nodes: 385 386
9 => callsites count before spliiting 226 with id = 360 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 391 currentId 360
Added AND Nodes: 390 391
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 51 with id = 375 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 396 currentId 375
Added AND Nodes: 395 396
3 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 215 with id = 381 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 401 currentId 381
Added AND Nodes: 400 401
4 => callsites count before spliiting 205 with id = 371 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 406 currentId 371
Added AND Nodes: 405 406
6 => callsites count before spliiting 252 with id = 366 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 411 currentId 366
Added AND Nodes: 410 411
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
1 => callsites count before spliiting 52 with id = 346 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 416 currentId 346
Added AND Nodes: 415 416
1 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 56 with id = 351 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 421 currentId 351
Added AND Nodes: 420 421
5 => callsites count before spliiting 207 with id = 386 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 426 currentId 386
Added AND Nodes: 425 426
10 => callsites count before spliiting 228 with id = 361 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 431 currentId 361
Added AND Nodes: 430 431
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 287 with id = 331 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 436 currentId 331
Added AND Nodes: 435 436
2 => callsites count before spliiting 50 with id = 420 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 441 currentId 420
Added AND Nodes: 440 441
8 => callsites count before spliiting 500 with id = 435 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 446 currentId 435
Added AND Nodes: 445 446
9 => callsites count before spliiting 225 with id = 391 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 451 currentId 391
Added AND Nodes: 450 451
7 => callsites count before spliiting 264 with id = 400 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 456 currentId 400
Added AND Nodes: 455 456
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
0 => callsites count before spliiting 50 with id = 376 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 461 currentId 376
Added AND Nodes: 460 461
0 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 220 with id = 455 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 466 currentId 455
Added AND Nodes: 465 466
8 => callsites count before spliiting 640 with id = 445 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 471 currentId 445
Added AND Nodes: 470 471
2 => callsites count before spliiting 283 with id = 440 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 476 currentId 440
Added AND Nodes: 475 476
11 => callsites count before spliiting 250 with id = 341 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 481 currentId 341
Added AND Nodes: 480 481
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => callsites count before spliiting 234 with id = 411 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 486 currentId 411
Added AND Nodes: 485 486
8 => callsites count before spliiting 679 with id = 470 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 491 currentId 470
Added AND Nodes: 490 491
2 => callsites count before spliiting 298 with id = 475 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 496 currentId 475
Added AND Nodes: 495 496
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => callsites count before spliiting 712 with id = 490 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 501 currentId 490
Added AND Nodes: 500 501
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 280 with id = 495 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 506 currentId 495
Added AND Nodes: 505 506
5 => callsites count before spliiting 250 with id = 425 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 511 currentId 425
Added AND Nodes: 510 511
2 => callsites count before spliiting 253 with id = 505 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 516 currentId 505
Added AND Nodes: 515 516
2 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 225 with id = 465 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 521 currentId 465
Added AND Nodes: 520 521
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => callsites count before spliiting 54 with id = 516 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 526 currentId 516
Added AND Nodes: 525 526
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 206 with id = 501 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 531 currentId 501
Added AND Nodes: 530 531
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => callsites count before spliiting 270 with id = 406 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 536 currentId 406
Added AND Nodes: 535 536
4 => callsites count before spliiting 205 with id = 535 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 541 currentId 535
Added AND Nodes: 540 541
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 209 with id = 521 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 546 currentId 521
Added AND Nodes: 545 546
11 => callsites count before spliiting 201 with id = 481 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 551 currentId 481
Added AND Nodes: 550 551
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 231 with id = 451 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 556 currentId 451
Added AND Nodes: 555 556
6 => callsites count before spliiting 260 with id = 486 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 561 currentId 486
Added AND Nodes: 560 561
9 => callsites count before spliiting 310 with id = 555 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 566 currentId 555
Added AND Nodes: 565 566
9 => callsites count before spliiting 344 with id = 565 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 571 currentId 565
Added AND Nodes: 570 571
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => callsites count before spliiting 274 with id = 511 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 576 currentId 511
Added AND Nodes: 575 576
11 => callsites count before spliiting 260 with id = 551 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 581 currentId 551
Added AND Nodes: 580 581
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
5 => callsites count before spliiting 222 with id = 575 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 586 currentId 575
Added AND Nodes: 585 586
10 => callsites count before spliiting 270 with id = 431 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 591 currentId 431
Added AND Nodes: 590 591
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
3 => callsites count before spliiting 52 with id = 396 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 596 currentId 396
Added AND Nodes: 595 596
3 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 252 with id = 536 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 601 currentId 536
Added AND Nodes: 600 601
5 => callsites count before spliiting 202 with id = 585 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 606 currentId 585
Added AND Nodes: 605 606
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 269 with id = 456 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 611 currentId 456
Added AND Nodes: 610 611
6 => callsites count before spliiting 248 with id = 560 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 616 currentId 560
Added AND Nodes: 615 616
9 => callsites count before spliiting 315 with id = 566 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 621 currentId 566
Added AND Nodes: 620 621
6 => callsites count before spliiting 201 with id = 615 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 626 currentId 615
Added AND Nodes: 625 626
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 266 with id = 610 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 631 currentId 610
Added AND Nodes: 630 631
7 => callsites count before spliiting 201 with id = 630 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 636 currentId 630
Added AND Nodes: 635 636
0 => callsites count before spliiting 50 with id = 461 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 641 currentId 461
Added AND Nodes: 640 641
0 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 200 with id = 586 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 646 currentId 586
Added AND Nodes: 645 646
4 => callsites count before spliiting 230 with id = 600 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 651 currentId 600
Added AND Nodes: 650 651
10 => callsites count before spliiting 229 with id = 591 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 656 currentId 591
Added AND Nodes: 655 656
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => callsites count before spliiting 202 with id = 650 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 661 currentId 650
Added AND Nodes: 660 661
7 => callsites count before spliiting 231 with id = 635 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 666 currentId 635
Added AND Nodes: 665 666
6 => callsites count before spliiting 237 with id = 625 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 671 currentId 625
Added AND Nodes: 670 671
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
7 => callsites count before spliiting 200 with id = 665 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 676 currentId 665
Added AND Nodes: 675 676
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => callsites count before spliiting 239 with id = 621 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 681 currentId 621
Added AND Nodes: 680 681
6 => callsites count before spliiting 200 with id = 670 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 686 currentId 670
Added AND Nodes: 685 686
11 => callsites count before spliiting 282 with id = 581 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 691 currentId 581
Added AND Nodes: 690 691
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 52 with id = 416 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 696 currentId 416
Added AND Nodes: 695 696
1 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 303 with id = 576 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 701 currentId 576
Added AND Nodes: 700 701
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => callsites count before spliiting 244 with id = 680 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 706 currentId 680
Added AND Nodes: 705 706
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 201 with id = 686 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 711 currentId 686
Added AND Nodes: 710 711
5 => callsites count before spliiting 200 with id = 700 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 716 currentId 700
Added AND Nodes: 715 716
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 200 with id = 660 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 721 currentId 660
Added AND Nodes: 720 721
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--8390--8390.ko-entry_point_false-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 3 algo id is 0
for clientid : 2 algo id is 0
for clientid : 1 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 4 algo id is 1
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 8 algo id is 2
for clientid : 7 algo id is 1
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
Added OR Node: 6
for clientid : 11 algo id is 2
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => Spliiting due to client waiting
8 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
Added AND Nodes: 25 26
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 26 from client 8 to 9
9 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
for clientid : 4 algo id is 1
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 14 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 3
3 => after replyFromServer: 100
5 => Spliiting due to client waiting
9 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
9 => callsites count before spliiting 1 with id = 26 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 41 currentId 26
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 6
6 => after replyFromServer: 0
Added AND Nodes: 40 41
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 41 from client 9 to 10
10 => after replyFromServer: 50
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
6 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 41 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 46 currentId 41
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 51 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 46 from client 10 to 11
11 => after replyFromServer: 50
Added AND Nodes: 50 51
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 51 from client 6 to 7
7 => after replyFromServer: 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 51 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
3 => Spliiting due to client waiting
for clientid : 4 algo id is 1
3 => callsites count before spliiting 17 with id = 31 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 66 currentId 31
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
Added AND Nodes: 65 66
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 66 from client 3 to 2
2 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 71 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 76 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 81 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 14 with id = 46 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 86 currentId 46
Added AND Nodes: 85 86
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 86 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 81 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 91 currentId 81
Added AND Nodes: 90 91
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 91 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 91 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 96 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 9 with id = 66 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 101 currentId 66
8 => Spliiting due to client waiting
8 => callsites count before spliiting 15 with id = 86 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 106 currentId 86
Added AND Nodes: 105 106
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 106 from client 8 to 9
9 => after replyFromServer: 50
Added AND Nodes: 100 101
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 101 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 96 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 96
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 7
7 => after replyFromServer: 0
for clientid : 8 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 116 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 106 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 121 currentId 106
Added AND Nodes: 120 121
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 121 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 116
Added AND Nodes: 125 126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 126 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 126 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 131 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
10 => Spliiting due to client waiting
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => callsites count before spliiting 1 with id = 121 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 136 currentId 121
Added AND Nodes: 135 136
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 136 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 4 with id = 101 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 141 currentId 101
Added AND Nodes: 140 141
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 141 from client 1 to 0
0 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 131 and splitMode 0
1 => LOOP outcome: Correct & reachbound = False
6 => sending calltree : splitMode 0 mustReachId 146 currentId 131
Added AND Nodes: 145 146
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 146 from client 6 to 7
7 => after replyFromServer: 0
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 146 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 151 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 151 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 156 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 5 with id = 136 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 161 currentId 136
Added AND Nodes: 160 161
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 161 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 156 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 166 currentId 156
Added AND Nodes: 165 166
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 166 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 166 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 171 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 6 with id = 141 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 176 currentId 141
Added AND Nodes: 175 176
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 176 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 4 with id = 161 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 181 currentId 161
Added AND Nodes: 180 181
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 181 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 171 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 186 currentId 171
Added AND Nodes: 185 186
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 186 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 186 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 191 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 191 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 196 currentId 191
Added AND Nodes: 195 196
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 196 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 196 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 201 currentId 196
Added AND Nodes: 200 201
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 201 from client 6 to 7
6 => LOOP outcome: Correct & reachbound = False
7 => after replyFromServer: 0
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 3 with id = 181 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 206 currentId 181
Added AND Nodes: 205 206
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 206 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 201 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 211 currentId 201
Added AND Nodes: 210 211
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 211 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
3 => Spliiting due to client waiting
3 => callsites count before spliiting 5 with id = 176 and splitMode 100
7 => Spliiting due to client waiting
3 => sending calltree : splitMode 100 mustReachId 216 currentId 176
Added AND Nodes: 215 216
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 216 from client 3 to 2
2 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 211 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 221 currentId 211
Added AND Nodes: 220 221
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 221 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 221 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 226 currentId 221
Added AND Nodes: 225 226
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 226 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 9 with id = 215 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 231 currentId 215
Added AND Nodes: 230 231
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 231 from client 3 to 1
1 => after replyFromServer: 100
10 => Spliiting due to client waiting
10 => callsites count before spliiting 7 with id = 206 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 236 currentId 206
Added AND Nodes: 235 236
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 236 from client 10 to 11
11 => after replyFromServer: 50
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
10 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 226 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 241 currentId 226
Added AND Nodes: 240 241
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 241 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 169 with id = 235 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 246 currentId 235
Added AND Nodes: 245 246
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 246 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 241 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 251 currentId 241
Added AND Nodes: 250 251
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 251 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 251 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 256 currentId 251
Added AND Nodes: 255 256
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 256 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 61 with id = 236 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 261 currentId 236
Added AND Nodes: 260 261
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 261 from client 11 to 9
9 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 4 with id = 216 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 266 currentId 216
Added AND Nodes: 265 266
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 266 from client 2 to 0
0 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 256 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 271 currentId 256
Added AND Nodes: 270 271
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 271 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 5 with id = 271 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 276 currentId 271
Added AND Nodes: 275 276
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 276 from client 6 to 7
7 => after replyFromServer: 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 9 with id = 265 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 281 currentId 265
Added AND Nodes: 280 281
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 281 from client 2 to 3
3 => after replyFromServer: 100
6 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => callsites count before spliiting 64 with id = 260 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 286 currentId 260
Added AND Nodes: 285 286
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 286 from client 11 to 10
10 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 10 with id = 275 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 291 currentId 275
Added AND Nodes: 290 291
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 291 from client 6 to 4
4 => after replyFromServer: 0
2 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 276 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 296 currentId 276
Added AND Nodes: 295 296
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 296 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 29 with id = 291 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 301 currentId 291
Added AND Nodes: 300 301
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 301 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 3 with id = 246 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 306 currentId 246
Added AND Nodes: 305 306
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 306 from client 8 to 11
11 => after replyFromServer: 50
0 => Spliiting due to client waiting
0 => callsites count before spliiting 3 with id = 266 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 311 currentId 266
Added AND Nodes: 310 311
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 311 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 296 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 316 currentId 296
Added AND Nodes: 315 316
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 316 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 11 with id = 231 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 321 currentId 231
Added AND Nodes: 320 321
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 321 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 30 with id = 301 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 326 currentId 301
Added AND Nodes: 325 326
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 326 from client 6 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 4 with id = 316 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 331 currentId 316
Added AND Nodes: 330 331
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 331 from client 7 to 5
5 => after replyFromServer: 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 281 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 336 currentId 281
Added AND Nodes: 335 336
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 336 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => callsites count before spliiting 200 with id = 325 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 341 currentId 325
Added AND Nodes: 340 341
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 341 from client 6 to 5
5 => after replyFromServer: 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 17 with id = 311 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 346 currentId 311
Added AND Nodes: 345 346
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 346 from client 2 to 3
3 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 68 with id = 340 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 351 currentId 340
Added AND Nodes: 350 351
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 351 from client 6 to 7
7 => after replyFromServer: 0
6 => Spliiting due to client waiting
10 => callsites count before spliiting 221 with id = 286 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 356 currentId 286
Added AND Nodes: 355 356
6 => Spliiting due to client waiting
6 => callsites count before spliiting 92 with id = 350 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 361 currentId 350
Added AND Nodes: 360 361
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 361 from client 6 to 4
4 => after replyFromServer: 0
8 => callsites count before spliiting 216 with id = 305 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 366 currentId 305
Added AND Nodes: 365 366
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => callsites count before spliiting 207 with id = 360 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 371 currentId 360
Added AND Nodes: 370 371
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 371 from client 6 to 5
5 => after replyFromServer: 0
3 => callsites count before spliiting 57 with id = 346 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 376 currentId 346
Added AND Nodes: 375 376
3 => LOOP outcome: Correct & reachbound = False
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => callsites count before spliiting 60 with id = 345 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 381 currentId 345
Added AND Nodes: 380 381
6 => Spliiting due to client waiting
6 => callsites count before spliiting 151 with id = 370 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 386 currentId 370
Added AND Nodes: 385 386
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 386 from client 6 to 4
4 => after replyFromServer: 0
0 => callsites count before spliiting 81 with id = 321 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 391 currentId 321
Added AND Nodes: 390 391
0 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 212 with id = 385 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 396 currentId 385
Added AND Nodes: 395 396
11 => callsites count before spliiting 212 with id = 306 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 401 currentId 306
Added AND Nodes: 400 401
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 246 with id = 261 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 406 currentId 261
Added AND Nodes: 405 406
1 => callsites count before spliiting 86 with id = 336 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 411 currentId 336
Added AND Nodes: 410 411
1 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 216 with id = 371 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 416 currentId 371
Added AND Nodes: 415 416
7 => callsites count before spliiting 292 with id = 351 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 421 currentId 351
Added AND Nodes: 420 421
4 => callsites count before spliiting 201 with id = 386 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 426 currentId 386
Added AND Nodes: 425 426
8 => callsites count before spliiting 371 with id = 365 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 431 currentId 365
Added AND Nodes: 430 431
3 => callsites count before spliiting 237 with id = 376 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 436 currentId 376
Added AND Nodes: 435 436
3 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 177 with id = 380 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 441 currentId 380
Added AND Nodes: 440 441
10 => callsites count before spliiting 653 with id = 355 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 446 currentId 355
Added AND Nodes: 445 446
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 416 from client 5 to 4
4 => after replyFromServer: 0
0 => callsites count before spliiting 235 with id = 391 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 451 currentId 391
Added AND Nodes: 450 451
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 421 from client 7 to 5
5 => after replyFromServer: 0
6 => callsites count before spliiting 200 with id = 396 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 456 currentId 396
Added AND Nodes: 455 456
9 => callsites count before spliiting 451 with id = 405 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 461 currentId 405
Added AND Nodes: 460 461
1 => callsites count before spliiting 235 with id = 411 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 466 currentId 411
Added AND Nodes: 465 466
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 456 from client 6 to 4
4 => after replyFromServer: 0
7 => callsites count before spliiting 467 with id = 420 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 471 currentId 420
Added AND Nodes: 470 471
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 471 from client 7 to 6
6 => after replyFromServer: 0
8 => callsites count before spliiting 663 with id = 430 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 476 currentId 430
Added AND Nodes: 475 476
11 => callsites count before spliiting 212 with id = 401 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 481 currentId 401
Added AND Nodes: 480 481
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 234 with id = 440 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 486 currentId 440
Added AND Nodes: 485 486
10 => callsites count before spliiting 801 with id = 445 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 491 currentId 445
Added AND Nodes: 490 491
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
3 => callsites count before spliiting 203 with id = 436 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 496 currentId 436
Added AND Nodes: 495 496
0 => callsites count before spliiting 292 with id = 450 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 501 currentId 450
Added AND Nodes: 500 501
1 => callsites count before spliiting 292 with id = 465 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 506 currentId 465
Added AND Nodes: 505 506
6 => Spliiting due to client waiting
6 => callsites count before spliiting 59 with id = 471 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 511 currentId 471
Added AND Nodes: 510 511
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 511 from client 6 to 4
4 => after replyFromServer: 0
7 => callsites count before spliiting 579 with id = 470 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 516 currentId 470
Added AND Nodes: 515 516
9 => callsites count before spliiting 697 with id = 460 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 521 currentId 460
Added AND Nodes: 520 521
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 241 with id = 481 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 526 currentId 481
Added AND Nodes: 525 526
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 272 with id = 485 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 531 currentId 485
Added AND Nodes: 530 531
2 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 919 with id = 475 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 536 currentId 475
Added AND Nodes: 535 536
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
10 => callsites count before spliiting 832 with id = 490 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 541 currentId 490
Added AND Nodes: 540 541
3 => callsites count before spliiting 220 with id = 495 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 546 currentId 495
Added AND Nodes: 545 546
6 => callsites count before spliiting 223 with id = 510 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 551 currentId 510
Added AND Nodes: 550 551
0 => callsites count before spliiting 409 with id = 500 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 556 currentId 500
Added AND Nodes: 555 556
1 => callsites count before spliiting 409 with id = 505 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 561 currentId 505
Added AND Nodes: 560 561
7 => callsites count before spliiting 648 with id = 515 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 566 currentId 515
Added AND Nodes: 565 566
2 => callsites count before spliiting 148 with id = 531 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 571 currentId 531
Added AND Nodes: 570 571
4 => callsites count before spliiting 221 with id = 511 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 576 currentId 511
Added AND Nodes: 575 576
11 => callsites count before spliiting 217 with id = 526 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 581 currentId 526
Added AND Nodes: 580 581
10 => callsites count before spliiting 898 with id = 540 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 586 currentId 540
Added AND Nodes: 585 586
3 => callsites count before spliiting 230 with id = 545 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 591 currentId 545
Added AND Nodes: 590 591
6 => callsites count before spliiting 225 with id = 550 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 596 currentId 550
Added AND Nodes: 595 596
8 => callsites count before spliiting 300 with id = 536 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 601 currentId 536
Added AND Nodes: 600 601
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 562 with id = 555 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 606 currentId 555
Added AND Nodes: 605 606
1 => callsites count before spliiting 562 with id = 560 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 611 currentId 560
Added AND Nodes: 610 611
5 => callsites count before spliiting 249 with id = 421 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 616 currentId 421
Added AND Nodes: 615 616
7 => callsites count before spliiting 625 with id = 565 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 621 currentId 565
Added AND Nodes: 620 621
4 => callsites count before spliiting 311 with id = 575 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 626 currentId 575
Added AND Nodes: 625 626
2 => callsites count before spliiting 294 with id = 570 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 631 currentId 570
Added AND Nodes: 630 631
11 => callsites count before spliiting 387 with id = 580 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 636 currentId 580
Added AND Nodes: 635 636
6 => callsites count before spliiting 202 with id = 595 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 641 currentId 595
Added AND Nodes: 640 641
3 => callsites count before spliiting 234 with id = 590 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 646 currentId 590
Added AND Nodes: 645 646
8 => callsites count before spliiting 206 with id = 601 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 651 currentId 601
Added AND Nodes: 650 651
10 => callsites count before spliiting 1004 with id = 585 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 656 currentId 585
Added AND Nodes: 655 656
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 603 with id = 605 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 661 currentId 605
Added AND Nodes: 660 661
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 603 with id = 610 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 666 currentId 610
Added AND Nodes: 665 666
1 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 658 with id = 620 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 671 currentId 620
Added AND Nodes: 670 671
4 => callsites count before spliiting 258 with id = 625 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 676 currentId 625
Added AND Nodes: 675 676
11 => callsites count before spliiting 565 with id = 635 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 681 currentId 635
Added AND Nodes: 680 681
6 => callsites count before spliiting 214 with id = 640 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 686 currentId 640
Added AND Nodes: 685 686
2 => callsites count before spliiting 319 with id = 630 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 691 currentId 630
Added AND Nodes: 690 691
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 315 with id = 521 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 696 currentId 521
Added AND Nodes: 695 696
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 80 with id = 661 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 701 currentId 661
Added AND Nodes: 700 701
3 => callsites count before spliiting 362 with id = 645 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 706 currentId 645
Added AND Nodes: 705 706
1 => callsites count before spliiting 80 with id = 666 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 711 currentId 666
Added AND Nodes: 710 711
10 => callsites count before spliiting 1074 with id = 655 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 716 currentId 655
Added AND Nodes: 715 716
7 => callsites count before spliiting 594 with id = 670 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 721 currentId 670
Added AND Nodes: 720 721
8 => callsites count before spliiting 245 with id = 651 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 726 currentId 651
Added AND Nodes: 725 726
4 => callsites count before spliiting 231 with id = 576 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 731 currentId 576
Added AND Nodes: 730 731
11 => callsites count before spliiting 589 with id = 680 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 736 currentId 680
Added AND Nodes: 735 736
2 => callsites count before spliiting 64 with id = 691 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 741 currentId 691
Added AND Nodes: 740 741
9 => callsites count before spliiting 335 with id = 695 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 746 currentId 695
Added AND Nodes: 745 746
3 => callsites count before spliiting 478 with id = 705 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 751 currentId 705
Added AND Nodes: 750 751
10 => callsites count before spliiting 1189 with id = 715 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 756 currentId 715
Added AND Nodes: 755 756
1 => callsites count before spliiting 52 with id = 710 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 761 currentId 710
0 => callsites count before spliiting 52 with id = 700 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 766 currentId 700
Added AND Nodes: 760 761
Added AND Nodes: 765 766
6 => callsites count before spliiting 205 with id = 685 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 771 currentId 685
Added AND Nodes: 770 771
4 => callsites count before spliiting 304 with id = 730 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 776 currentId 730
Added AND Nodes: 775 776
8 => callsites count before spliiting 337 with id = 725 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 781 currentId 725
Added AND Nodes: 780 781
7 => callsites count before spliiting 567 with id = 720 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 786 currentId 720
Added AND Nodes: 785 786
10 => callsites count before spliiting 1202 with id = 755 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 791 currentId 755
Added AND Nodes: 790 791
9 => callsites count before spliiting 440 with id = 745 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 796 currentId 745
Added AND Nodes: 795 796
3 => callsites count before spliiting 537 with id = 750 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 801 currentId 750
Added AND Nodes: 800 801
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 127 with id = 765 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 806 currentId 765
Added AND Nodes: 805 806
4 => callsites count before spliiting 200 with id = 775 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 811 currentId 775
Added AND Nodes: 810 811
8 => callsites count before spliiting 425 with id = 780 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 816 currentId 780
Added AND Nodes: 815 816
7 => callsites count before spliiting 508 with id = 785 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 821 currentId 785
Added AND Nodes: 820 821
1 => callsites count before spliiting 147 with id = 760 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 826 currentId 760
Added AND Nodes: 825 826
11 => callsites count before spliiting 637 with id = 735 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 831 currentId 735
Added AND Nodes: 830 831
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 102 with id = 740 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 836 currentId 740
Added AND Nodes: 835 836
6 => callsites count before spliiting 207 with id = 770 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 841 currentId 770
Added AND Nodes: 840 841
3 => callsites count before spliiting 94 with id = 801 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 846 currentId 801
Added AND Nodes: 845 846
4 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 1274 with id = 790 and splitMode 50
Added New : 
4 : 
10 => sending calltree : splitMode 50 mustReachId 851 currentId 790
Added AND Nodes: 850 851
8 => callsites count before spliiting 473 with id = 815 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 856 currentId 815
Added AND Nodes: 855 856
7 => callsites count before spliiting 451 with id = 820 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 861 currentId 820
Added AND Nodes: 860 861
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 174 with id = 805 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 866 currentId 805
Added AND Nodes: 865 866
1 => callsites count before spliiting 225 with id = 825 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 871 currentId 825
Added AND Nodes: 870 871
2 => callsites count before spliiting 142 with id = 835 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 876 currentId 835
Added AND Nodes: 875 876
3 => callsites count before spliiting 103 with id = 845 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 881 currentId 845
Added AND Nodes: 880 881
4 => callsites count before spliiting 210 with id = 776 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 886 currentId 776
Added AND Nodes: 885 886
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 326 with id = 860 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 891 currentId 860
Added AND Nodes: 890 891
10 => callsites count before spliiting 1342 with id = 850 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 896 currentId 850
Added AND Nodes: 895 896
0 => callsites count before spliiting 211 with id = 865 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 901 currentId 865
Added AND Nodes: 900 901
1 => callsites count before spliiting 269 with id = 870 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 906 currentId 870
Added AND Nodes: 905 906
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 207 with id = 840 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 911 currentId 840
Added AND Nodes: 910 911
8 => callsites count before spliiting 224 with id = 856 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 916 currentId 856
Added AND Nodes: 915 916
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 570 with id = 795 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 921 currentId 795
Added AND Nodes: 920 921
2 => callsites count before spliiting 201 with id = 875 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 926 currentId 875
Added AND Nodes: 925 926
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 71 with id = 880 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 931 currentId 880
Added AND Nodes: 930 931
4 => callsites count before spliiting 211 with id = 731 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 936 currentId 731
Added AND Nodes: 935 936
10 => callsites count before spliiting 1443 with id = 895 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 941 currentId 895
Added AND Nodes: 940 941
1 => callsites count before spliiting 306 with id = 905 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 946 currentId 905
Added AND Nodes: 945 946
0 => callsites count before spliiting 270 with id = 900 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 951 currentId 900
Added AND Nodes: 950 951
9 => callsites count before spliiting 634 with id = 920 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 956 currentId 920
Added AND Nodes: 955 956
7 => callsites count before spliiting 201 with id = 890 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 961 currentId 890
Added AND Nodes: 960 961
2 => callsites count before spliiting 94 with id = 926 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 966 currentId 926
Added AND Nodes: 965 966
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 296 with id = 935 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 971 currentId 935
Added AND Nodes: 970 971
10 => callsites count before spliiting 1540 with id = 940 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 976 currentId 940
Added AND Nodes: 975 976
8 => callsites count before spliiting 203 with id = 916 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 981 currentId 916
Added AND Nodes: 980 981
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 365 with id = 945 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 986 currentId 945
Added AND Nodes: 985 986
0 => callsites count before spliiting 314 with id = 950 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 991 currentId 950
Added AND Nodes: 990 991
9 => callsites count before spliiting 753 with id = 955 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 996 currentId 955
Added AND Nodes: 995 996
3 => callsites count before spliiting 63 with id = 930 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1001 currentId 930
Added AND Nodes: 1000 1001
4 => callsites count before spliiting 228 with id = 970 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1006 currentId 970
Added AND Nodes: 1005 1006
2 => callsites count before spliiting 87 with id = 966 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1011 currentId 966
Added AND Nodes: 1010 1011
9 => callsites count before spliiting 865 with id = 995 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1016 currentId 995
Added AND Nodes: 1015 1016
0 => callsites count before spliiting 288 with id = 990 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1021 currentId 990
Added AND Nodes: 1020 1021
8 => callsites count before spliiting 322 with id = 981 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1026 currentId 981
Added AND Nodes: 1025 1026
1 => callsites count before spliiting 358 with id = 985 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1031 currentId 985
Added AND Nodes: 1030 1031
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
10 => callsites count before spliiting 1574 with id = 975 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1036 currentId 975
Added AND Nodes: 1035 1036
6 => callsites count before spliiting 226 with id = 910 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1041 currentId 910
Added AND Nodes: 1040 1041
11 => callsites count before spliiting 646 with id = 830 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1046 currentId 830
Added AND Nodes: 1045 1046
3 => callsites count before spliiting 57 with id = 1000 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1051 currentId 1000
Added AND Nodes: 1050 1051
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 982 with id = 1015 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1056 currentId 1015
Added AND Nodes: 1055 1056
2 => callsites count before spliiting 146 with id = 1010 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1061 currentId 1010
Added AND Nodes: 1060 1061
7 => callsites count before spliiting 213 with id = 960 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1066 currentId 960
Added AND Nodes: 1065 1066
0 => callsites count before spliiting 289 with id = 1020 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1071 currentId 1020
Added AND Nodes: 1070 1071
1 => callsites count before spliiting 356 with id = 1030 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 1076 currentId 1030
Added AND Nodes: 1075 1076
10 => callsites count before spliiting 1676 with id = 1035 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1081 currentId 1035
Added AND Nodes: 1080 1081
11 => outcome: Errors
Outcome NOK bestAlgo updated to 2
Verification Outcome : NOK
Time Taken : 202.607661
bestAlgo: 2
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--marvell--sky2.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
for clientid : 5 algo id is 1
for clientid : 2 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 25 26
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 26 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 27 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 36 currentId 6
Added AND Nodes: 35 36
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 36 from client 0 to 1
1 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 51 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 56 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 27 with id = 26 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 61 currentId 26
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 56 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 66 currentId 56
Added AND Nodes: 65 66
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 66 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 60 61
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 61 from client 9 to 10
10 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 66 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 71 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 71 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 76 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 76 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 81 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 81 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 86 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 91 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 91 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 96 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 28 with id = 36 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 101 currentId 36
Added AND Nodes: 100 101
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 101 from client 1 to 3
3 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 96
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 27 with id = 106 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 116 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 121 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 121 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 126 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 126 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 131 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 131 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 136 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 136 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 141 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 141 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 146 from client 5 to 6
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => after replyFromServer: 0
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 146 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 151 from client 6 to 7
7 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 151 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 156 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 20 with id = 155 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 161 currentId 155
Added AND Nodes: 160 161
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 161 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 161 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 166 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 8 with id = 166 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 171 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 171 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 176 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 176 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 181 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 11 with id = 181 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 186 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 73 with id = 185 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 191 currentId 185
Added AND Nodes: 190 191
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 191 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 64 with id = 186 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 196 currentId 186
Added AND Nodes: 195 196
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 196 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 61 with id = 191 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 201 currentId 191
Added AND Nodes: 200 201
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 201 from client 5 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => callsites count before spliiting 214 with id = 200 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 206 currentId 200
Added AND Nodes: 205 206
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 206 from client 5 to 7
7 => after replyFromServer: 0
7 => callsites count before spliiting 258 with id = 206 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 211 currentId 206
Added AND Nodes: 210 211
3 => Spliiting due to client waiting
3 => callsites count before spliiting 23 with id = 101 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 216 currentId 101
Added AND Nodes: 215 216
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 216 from client 3 to 2
2 => after replyFromServer: 100
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 267 with id = 205 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 221 currentId 205
Added AND Nodes: 220 221
10 => Spliiting due to client waiting
10 => callsites count before spliiting 26 with id = 61 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 226 currentId 61
Added AND Nodes: 225 226
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 226 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => callsites count before spliiting 200 with id = 220 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 231 currentId 220
Added AND Nodes: 230 231
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 205 with id = 150 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 236 currentId 150
Added AND Nodes: 235 236
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 274 with id = 211 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 241 currentId 211
Added AND Nodes: 240 241
6 => callsites count before spliiting 307 with id = 236 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 246 currentId 236
Added AND Nodes: 245 246
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 270 with id = 201 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 251 currentId 201
Added AND Nodes: 250 251
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 234 with id = 246 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 256 currentId 246
Added AND Nodes: 255 256
3 => Spliiting due to client waiting
3 => callsites count before spliiting 29 with id = 215 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 261 currentId 215
Added AND Nodes: 260 261
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 261 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => callsites count before spliiting 273 with id = 251 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 266 currentId 251
Added AND Nodes: 265 266
2 => Spliiting due to client waiting
2 => callsites count before spliiting 4 with id = 216 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 271 currentId 216
Added AND Nodes: 270 271
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 271 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 23 with id = 226 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 276 currentId 226
Added AND Nodes: 275 276
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 276 from client 11 to 8
8 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 276 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 281 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 281 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 286 currentId 281
Added AND Nodes: 285 286
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 286 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 286 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 291 currentId 286
Added AND Nodes: 290 291
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 291 from client 10 to 8
8 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => callsites count before spliiting 306 with id = 221 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 296 currentId 221
Added AND Nodes: 295 296
7 => callsites count before spliiting 278 with id = 240 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 301 currentId 240
Added AND Nodes: 300 301
0 => Spliiting due to client waiting
0 => callsites count before spliiting 9 with id = 261 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 306 currentId 261
Added AND Nodes: 305 306
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 306 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 4 with id = 271 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 311 currentId 271
Added AND Nodes: 310 311
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 311 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => callsites count before spliiting 202 with id = 300 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 316 currentId 300
Added AND Nodes: 315 316
11 => Spliiting due to client waiting
11 => callsites count before spliiting 29 with id = 275 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 321 currentId 275
Added AND Nodes: 320 321
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 321 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => Spliiting due to client waiting
8 => callsites count before spliiting 4 with id = 291 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 326 currentId 291
Added AND Nodes: 325 326
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 326 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => callsites count before spliiting 314 with id = 266 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 331 currentId 266
Added AND Nodes: 330 331
5 => callsites count before spliiting 239 with id = 295 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 336 currentId 295
Added AND Nodes: 335 336
3 => Spliiting due to client waiting
3 => callsites count before spliiting 7 with id = 306 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 341 currentId 306
Added AND Nodes: 340 341
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 341 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 3 with id = 311 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 346 currentId 311
Added AND Nodes: 345 346
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 346 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 9 with id = 321 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 351 currentId 321
Added AND Nodes: 350 351
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 351 from client 9 to 11
11 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 21 with id = 351 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 356 currentId 351
Added AND Nodes: 355 356
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 356 from client 11 to 8
8 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 2 with id = 326 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 361 currentId 326
Added AND Nodes: 360 361
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 361 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => callsites count before spliiting 266 with id = 330 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 366 currentId 330
Added AND Nodes: 365 366
7 => callsites count before spliiting 211 with id = 301 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 371 currentId 301
Added AND Nodes: 370 371
0 => Spliiting due to client waiting
0 => callsites count before spliiting 17 with id = 341 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 376 currentId 341
Added AND Nodes: 375 376
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 376 from client 0 to 3
3 => after replyFromServer: 100
1 => Spliiting due to client waiting
1 => callsites count before spliiting 2 with id = 346 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 381 currentId 346
Added AND Nodes: 380 381
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 381 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
4 => callsites count before spliiting 253 with id = 365 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 386 currentId 365
Added AND Nodes: 385 386
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 356 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 391 currentId 356
Added AND Nodes: 390 391
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 391 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 361 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 396 currentId 361
Added AND Nodes: 395 396
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 396 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => callsites count before spliiting 201 with id = 335 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 401 currentId 335
Added AND Nodes: 400 401
10 => Spliiting due to client waiting
10 => callsites count before spliiting 11 with id = 396 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 406 currentId 396
Added AND Nodes: 405 406
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 406 from client 10 to 8
8 => after replyFromServer: 50
6 => callsites count before spliiting 257 with id = 256 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 411 currentId 256
Added AND Nodes: 410 411
8 => Spliiting due to client waiting
8 => callsites count before spliiting 24 with id = 406 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 416 currentId 406
Added AND Nodes: 415 416
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 416 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => callsites count before spliiting 224 with id = 385 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 421 currentId 385
Added AND Nodes: 420 421
0 => Spliiting due to client waiting
0 => callsites count before spliiting 33 with id = 375 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 426 currentId 375
Added AND Nodes: 425 426
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 426 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 15 with id = 376 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 431 currentId 376
Added AND Nodes: 430 431
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 431 from client 3 to 0
0 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 16 with id = 391 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 436 currentId 391
Added AND Nodes: 435 436
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 436 from client 11 to 8
8 => after replyFromServer: 50
5 => callsites count before spliiting 203 with id = 400 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 441 currentId 400
Added AND Nodes: 440 441
11 => callsites count before spliiting 273 with id = 435 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 446 currentId 435
Added AND Nodes: 445 446
7 => callsites count before spliiting 200 with id = 370 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 451 currentId 370
Added AND Nodes: 450 451
11 => callsites count before spliiting 296 with id = 445 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 456 currentId 445
Added AND Nodes: 455 456
6 => callsites count before spliiting 236 with id = 410 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 461 currentId 410
Added AND Nodes: 460 461
5 => callsites count before spliiting 206 with id = 440 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 466 currentId 440
Added AND Nodes: 465 466
7 => callsites count before spliiting 231 with id = 450 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 471 currentId 450
Added AND Nodes: 470 471
0 => callsites count before spliiting 139 with id = 431 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 476 currentId 431
Added AND Nodes: 475 476
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 276 with id = 436 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 481 currentId 436
Added AND Nodes: 480 481
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => callsites count before spliiting 316 with id = 455 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 486 currentId 455
Added AND Nodes: 485 486
5 => callsites count before spliiting 222 with id = 465 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 491 currentId 465
Added AND Nodes: 490 491
11 => callsites count before spliiting 494 with id = 485 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 496 currentId 485
Added AND Nodes: 495 496
0 => callsites count before spliiting 82 with id = 476 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 501 currentId 476
Added AND Nodes: 500 501
8 => callsites count before spliiting 263 with id = 481 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 506 currentId 481
Added AND Nodes: 505 506
5 => callsites count before spliiting 225 with id = 490 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 511 currentId 490
Added AND Nodes: 510 511
3 => callsites count before spliiting 57 with id = 430 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 516 currentId 430
Added AND Nodes: 515 516
3 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 576 with id = 495 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 521 currentId 495
Added AND Nodes: 520 521
7 => callsites count before spliiting 205 with id = 470 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 526 currentId 470
Added AND Nodes: 525 526
11 => callsites count before spliiting 629 with id = 520 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 531 currentId 520
Added AND Nodes: 530 531
9 => callsites count before spliiting 288 with id = 416 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 536 currentId 416
Added AND Nodes: 535 536
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 283 with id = 505 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 541 currentId 505
Added AND Nodes: 540 541
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 386 with id = 460 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 546 currentId 460
Added AND Nodes: 545 546
6 => callsites count before spliiting 261 with id = 545 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 551 currentId 545
Added AND Nodes: 550 551
10 => callsites count before spliiting 274 with id = 405 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 556 currentId 405
Added AND Nodes: 555 556
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => callsites count before spliiting 671 with id = 530 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 561 currentId 530
Added AND Nodes: 560 561
6 => callsites count before spliiting 200 with id = 550 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 566 currentId 550
Added AND Nodes: 565 566
7 => callsites count before spliiting 232 with id = 525 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 571 currentId 525
Added AND Nodes: 570 571
11 => callsites count before spliiting 683 with id = 560 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 576 currentId 560
Added AND Nodes: 575 576
7 => callsites count before spliiting 204 with id = 570 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 581 currentId 570
Added AND Nodes: 580 581
3 => callsites count before spliiting 60 with id = 516 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 586 currentId 516
Added AND Nodes: 585 586
3 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 248 with id = 556 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 591 currentId 556
Added AND Nodes: 590 591
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
9 => callsites count before spliiting 225 with id = 536 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 596 currentId 536
Added AND Nodes: 595 596
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 686 with id = 575 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 601 currentId 575
Added AND Nodes: 600 601
3 => callsites count before spliiting 94 with id = 586 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 606 currentId 586
Added AND Nodes: 605 606
3 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 236 with id = 580 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 611 currentId 580
Added AND Nodes: 610 611
11 => callsites count before spliiting 704 with id = 600 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 616 currentId 600
Added AND Nodes: 615 616
3 => callsites count before spliiting 82 with id = 606 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 621 currentId 606
Added AND Nodes: 620 621
3 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 200 with id = 591 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 626 currentId 591
Added AND Nodes: 625 626
1 => callsites count before spliiting 53 with id = 426 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 631 currentId 426
Added AND Nodes: 630 631
4 => callsites count before spliiting 238 with id = 420 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 636 currentId 420
Added AND Nodes: 635 636
11 => callsites count before spliiting 719 with id = 615 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 641 currentId 615
Added AND Nodes: 640 641
3 => callsites count before spliiting 64 with id = 621 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 646 currentId 621
Added AND Nodes: 645 646
7 => callsites count before spliiting 214 with id = 610 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 651 currentId 610
Added AND Nodes: 650 651
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 207 with id = 551 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 656 currentId 551
Added AND Nodes: 655 656
5 => callsites count before spliiting 210 with id = 510 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 661 currentId 510
Added AND Nodes: 660 661
5 => callsites count before spliiting 205 with id = 660 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 666 currentId 660
Added AND Nodes: 665 666
8 => callsites count before spliiting 203 with id = 541 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 671 currentId 541
Added AND Nodes: 670 671
0 => callsites count before spliiting 55 with id = 500 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 676 currentId 500
Added AND Nodes: 675 676
11 => callsites count before spliiting 736 with id = 640 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 681 currentId 640
Added AND Nodes: 680 681
8 => callsites count before spliiting 229 with id = 670 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 686 currentId 670
Added AND Nodes: 685 686
5 => callsites count before spliiting 207 with id = 665 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 691 currentId 665
Added AND Nodes: 690 691
10 => callsites count before spliiting 324 with id = 625 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 696 currentId 625
Added AND Nodes: 695 696
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 228 with id = 595 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 701 currentId 595
Added AND Nodes: 700 701
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 771 with id = 680 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 706 currentId 680
Added AND Nodes: 705 706
5 => callsites count before spliiting 209 with id = 690 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 711 currentId 690
Added AND Nodes: 710 711
8 => callsites count before spliiting 232 with id = 685 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 716 currentId 685
Added AND Nodes: 715 716
1 => callsites count before spliiting 51 with id = 630 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 721 currentId 630
Added AND Nodes: 720 721
0 => callsites count before spliiting 58 with id = 675 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 726 currentId 675
Added AND Nodes: 725 726
0 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 860 with id = 705 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 731 currentId 705
Added AND Nodes: 730 731
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
8 => callsites count before spliiting 244 with id = 715 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 736 currentId 715
Added AND Nodes: 735 736
8 => callsites count before spliiting 265 with id = 735 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 741 currentId 735
Added AND Nodes: 740 741
5 => callsites count before spliiting 208 with id = 710 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 746 currentId 710
Added AND Nodes: 745 746
0 => callsites count before spliiting 171 with id = 726 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 751 currentId 726
Added AND Nodes: 750 751
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 268 with id = 740 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 756 currentId 740
Added AND Nodes: 755 756
7 => callsites count before spliiting 207 with id = 650 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 761 currentId 650
Added AND Nodes: 760 761
8 => callsites count before spliiting 282 with id = 755 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 766 currentId 755
Added AND Nodes: 765 766
8 => callsites count before spliiting 300 with id = 765 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 771 currentId 765
Added AND Nodes: 770 771
8 => callsites count before spliiting 316 with id = 770 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 776 currentId 770
Added AND Nodes: 775 776
8 => callsites count before spliiting 324 with id = 775 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 781 currentId 775
Added AND Nodes: 780 781
5 => callsites count before spliiting 205 with id = 745 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 786 currentId 745
Added AND Nodes: 785 786
8 => callsites count before spliiting 336 with id = 780 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 791 currentId 780
Added AND Nodes: 790 791
11 => callsites count before spliiting 211 with id = 731 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 796 currentId 731
Added AND Nodes: 795 796
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
5 => callsites count before spliiting 201 with id = 785 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 801 currentId 785
Added AND Nodes: 800 801
6 => callsites count before spliiting 221 with id = 546 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 806 currentId 546
Added AND Nodes: 805 806
7 => callsites count before spliiting 214 with id = 760 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 811 currentId 760
Added AND Nodes: 810 811
8 => callsites count before spliiting 374 with id = 790 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 816 currentId 790
Added AND Nodes: 815 816
1 => callsites count before spliiting 63 with id = 720 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 821 currentId 720
Added AND Nodes: 820 821
1 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 332 with id = 696 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 826 currentId 696
Added AND Nodes: 825 826
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
8 => callsites count before spliiting 407 with id = 815 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 831 currentId 815
Added AND Nodes: 830 831
3 => callsites count before spliiting 58 with id = 645 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 836 currentId 645
Added AND Nodes: 835 836
9 => callsites count before spliiting 201 with id = 701 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 841 currentId 701
Added AND Nodes: 840 841
8 => callsites count before spliiting 509 with id = 830 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 846 currentId 830
Added AND Nodes: 845 846
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 208 with id = 801 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 851 currentId 801
Added AND Nodes: 850 851
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 53 with id = 835 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 856 currentId 835
Added AND Nodes: 855 856
10 => callsites count before spliiting 510 with id = 825 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 861 currentId 825
Added AND Nodes: 860 861
5 => callsites count before spliiting 205 with id = 786 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 866 currentId 786
Added AND Nodes: 865 866
7 => callsites count before spliiting 204 with id = 810 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 871 currentId 810
Added AND Nodes: 870 871
3 => callsites count before spliiting 97 with id = 855 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 876 currentId 855
Added AND Nodes: 875 876
9 => callsites count before spliiting 321 with id = 840 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 881 currentId 840
Added AND Nodes: 880 881
5 => callsites count before spliiting 209 with id = 865 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 886 currentId 865
Added AND Nodes: 885 886
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 129 with id = 875 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 891 currentId 875
Added AND Nodes: 890 891
3 => LOOP outcome: Correct & reachbound = False
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 475 with id = 880 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 896 currentId 880
Added AND Nodes: 895 896
3 => callsites count before spliiting 64 with id = 891 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 901 currentId 891
Added AND Nodes: 900 901
10 => callsites count before spliiting 514 with id = 860 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 906 currentId 860
Added AND Nodes: 905 906
6 => callsites count before spliiting 421 with id = 805 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 911 currentId 805
Added AND Nodes: 910 911
8 => callsites count before spliiting 223 with id = 846 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 916 currentId 846
Added AND Nodes: 915 916
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
11 => callsites count before spliiting 208 with id = 681 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 921 currentId 681
Added AND Nodes: 920 921
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 214 with id = 491 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 926 currentId 491
Added AND Nodes: 925 926
5 => callsites count before spliiting 211 with id = 925 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 931 currentId 925
Added AND Nodes: 930 931
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => callsites count before spliiting 216 with id = 931 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 936 currentId 931
Added AND Nodes: 935 936
0 => callsites count before spliiting 52 with id = 751 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 941 currentId 751
Added AND Nodes: 940 941
9 => callsites count before spliiting 479 with id = 895 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 946 currentId 895
Added AND Nodes: 945 946
11 => callsites count before spliiting 217 with id = 920 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 951 currentId 920
Added AND Nodes: 950 951
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 492 with id = 945 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 956 currentId 945
Added AND Nodes: 955 956
7 => callsites count before spliiting 207 with id = 870 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 961 currentId 870
Added AND Nodes: 960 961
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => callsites count before spliiting 202 with id = 935 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 966 currentId 935
Added AND Nodes: 965 966
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 76 with id = 900 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 971 currentId 900
Added AND Nodes: 970 971
3 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
2 => callsites count before spliiting 50 with id = 381 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 976 currentId 381
Added AND Nodes: 975 976
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 52 with id = 821 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 981 currentId 821
Added AND Nodes: 980 981
5 => callsites count before spliiting 203 with id = 936 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 986 currentId 936
Added AND Nodes: 985 986
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
3 => callsites count before spliiting 60 with id = 971 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 991 currentId 971
Added AND Nodes: 990 991
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
5 => callsites count before spliiting 208 with id = 441 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 996 currentId 441
Added AND Nodes: 995 996
5 => callsites count before spliiting 207 with id = 995 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1001 currentId 995
Added AND Nodes: 1000 1001
5 => callsites count before spliiting 201 with id = 1000 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1006 currentId 1000
Added AND Nodes: 1005 1006
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 460 with id = 910 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1011 currentId 910
Added AND Nodes: 1010 1011
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = True
Added New : 
5 : 
7 => callsites count before spliiting 203 with id = 960 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1016 currentId 960
Added AND Nodes: 1015 1016
5 => callsites count before spliiting 251 with id = 336 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1021 currentId 336
Added AND Nodes: 1020 1021
9 => callsites count before spliiting 226 with id = 946 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1026 currentId 946
Added AND Nodes: 1025 1026
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--renesas--sh_eth.ko-entry_point_false-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
Portfolio Split performed!!
for clientid : 4 algo id is 1
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
for clientid : 9 algo id is 2
for clientid : 8 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 9
Algo : 2 started with splitmode 50
9 => after replyFromServer: 50
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
9 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 16 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 25 26
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 26 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 26 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 26
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 29 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 41 currentId 6
Added AND Nodes: 40 41
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 41 from client 0 to 1
1 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 31
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 46 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 56 currentId 51
Added AND Nodes: 55 56
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 56 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 56 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 61 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 61 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 66 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 29 with id = 36 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 71 currentId 36
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 66 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
Added AND Nodes: 70 71
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 71 from client 10 to 11
11 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 101 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
1 => callsites count before spliiting 29 with id = 41 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 111 currentId 41
Added AND Nodes: 110 111
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 111 from client 1 to 2
2 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 106 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 116 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 116 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 121 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 121 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
4 => LOOP outcome: Correct & reachbound = False
Assign partition 126 from client 4 to 5
Added New : 
5 => after replyFromServer: 0
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 126 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 131 currentId 126
Added AND Nodes: 130 131
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 131 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 131 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 136 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 136 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 141 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 141 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 146 currentId 141
Added AND Nodes: 145 146
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 146 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 146 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 151 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 151 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 156 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 156 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 161 currentId 156
Added AND Nodes: 160 161
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 161 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 161 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 166 currentId 161
Added AND Nodes: 165 166
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 166 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 166 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 171 currentId 166
Added AND Nodes: 170 171
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 171 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 176 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 176 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 181 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 181 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 186 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 26 with id = 71 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 191 currentId 71
Added AND Nodes: 190 191
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 191 from client 11 to 9
9 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 186 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 196 currentId 186
Added AND Nodes: 195 196
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 196 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 14 with id = 111 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 201 currentId 111
Added AND Nodes: 200 201
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 201 from client 2 to 3
3 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 196 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 206 currentId 196
Added AND Nodes: 205 206
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 206 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 206 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 211 currentId 206
Added AND Nodes: 210 211
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 211 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 211 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 216 currentId 211
Added AND Nodes: 215 216
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 216 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 216 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 221 currentId 216
Added AND Nodes: 220 221
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 221 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 221 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 226 currentId 221
Added AND Nodes: 225 226
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 226 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 226 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 231 currentId 226
Added AND Nodes: 230 231
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 231 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 231 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 236 currentId 231
Added AND Nodes: 235 236
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 236 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 36 with id = 200 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 241 currentId 200
Added AND Nodes: 240 241
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 241 from client 2 to 0
0 => after replyFromServer: 100
9 => Spliiting due to client waiting
9 => callsites count before spliiting 14 with id = 191 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 246 currentId 191
Added AND Nodes: 245 246
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 246 from client 9 to 8
8 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 236 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 251 currentId 236
Added AND Nodes: 250 251
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 251 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
9 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 251 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 256 currentId 251
Added AND Nodes: 255 256
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 256 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 23 with id = 201 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 261 currentId 201
Added AND Nodes: 260 261
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 261 from client 3 to 1
1 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 256 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 266 currentId 256
Added AND Nodes: 265 266
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 266 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 246 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 271 currentId 246
Added AND Nodes: 270 271
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 271 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 266 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 276 currentId 266
Added AND Nodes: 275 276
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 276 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 276 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 281 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 281 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 286 currentId 281
Added AND Nodes: 285 286
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 286 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 286 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 291 currentId 286
Added AND Nodes: 290 291
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 291 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 291 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 296 currentId 291
Added AND Nodes: 295 296
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 296 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 37 with id = 245 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 301 currentId 245
Added AND Nodes: 300 301
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 301 from client 9 to 11
11 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 296 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 306 currentId 296
Added AND Nodes: 305 306
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 306 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 306 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 311 currentId 306
Added AND Nodes: 310 311
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 311 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 22 with id = 241 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 316 currentId 241
Added AND Nodes: 315 316
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 316 from client 0 to 2
2 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 311 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 321 currentId 311
Added AND Nodes: 320 321
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 321 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 321 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 326 currentId 321
Added AND Nodes: 325 326
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 326 from client 4 to 5
4 => LOOP outcome: Correct & reachbound = False
5 => after replyFromServer: 0
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 37 with id = 301 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 331 currentId 301
Added AND Nodes: 330 331
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 331 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 326 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 336 currentId 326
10 => Spliiting due to client waiting
Added AND Nodes: 335 336
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 336 from client 5 to 6
6 => after replyFromServer: 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 6 with id = 261 and splitMode 100
5 => LOOP outcome: Correct & reachbound = False
1 => sending calltree : splitMode 100 mustReachId 341 currentId 261
Added New : 
5 : 
5 => outcome: Correct
Added AND Nodes: 340 341
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 341 from client 1 to 3
3 => after replyFromServer: 100
for clientid : 5 algo id is 1
10 => callsites count before spliiting 23 with id = 271 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 346 currentId 271
Added AND Nodes: 345 346
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 346 from client 10 to 9
9 => after replyFromServer: 50
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 336 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 351 currentId 336
Added AND Nodes: 350 351
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 351 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 351 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 356 currentId 351
Added AND Nodes: 355 356
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 356 from client 7 to 4
7 => Spliiting due to client waiting
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 11 with id = 355 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 361 currentId 355
Added AND Nodes: 360 361
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 361 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 356 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 366 currentId 356
Added AND Nodes: 365 366
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 366 from client 4 to 6
4 => LOOP outcome: Correct & reachbound = False
6 => after replyFromServer: 0
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 361 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 371 currentId 361
Added AND Nodes: 370 371
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 371 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 366 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 376 currentId 366
Added AND Nodes: 375 376
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 376 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 371 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 381 currentId 371
Added AND Nodes: 380 381
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 381 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 56 with id = 331 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 386 currentId 331
Added AND Nodes: 385 386
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 386 from client 8 to 11
11 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 376 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 391 currentId 376
Added AND Nodes: 390 391
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 391 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 381 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 396 currentId 381
Added AND Nodes: 395 396
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 396 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 391 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 401 currentId 391
Added AND Nodes: 400 401
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 401 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 396 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 406 currentId 396
Added AND Nodes: 405 406
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 406 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 401 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 411 currentId 401
Added AND Nodes: 410 411
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 411 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 406 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 416 currentId 406
Added AND Nodes: 415 416
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 416 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 29 with id = 345 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 421 currentId 345
Added AND Nodes: 420 421
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 421 from client 10 to 9
9 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 411 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 426 currentId 411
Added AND Nodes: 425 426
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 426 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 17 with id = 416 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 431 currentId 416
Added AND Nodes: 430 431
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 431 from client 7 to 5
5 => after replyFromServer: 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 37 with id = 430 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 436 currentId 430
Added AND Nodes: 435 436
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 436 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 426 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 441 currentId 426
Added AND Nodes: 440 441
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 441 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 431 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 446 currentId 431
Added AND Nodes: 445 446
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 446 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 441 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 451 currentId 441
Added AND Nodes: 450 451
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 451 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 109 with id = 436 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 456 currentId 436
Added AND Nodes: 455 456
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 456 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 38 with id = 451 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 461 currentId 451
Added AND Nodes: 460 461
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 461 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 133 with id = 446 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 466 currentId 446
Added AND Nodes: 465 466
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 466 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 21 with id = 316 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 471 currentId 316
Added AND Nodes: 470 471
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 471 from client 2 to 0
0 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 20 with id = 461 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 476 currentId 461
Added AND Nodes: 475 476
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 476 from client 6 to 4
4 => after replyFromServer: 0
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
6 => callsites count before spliiting 248 with id = 475 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 481 currentId 475
Added AND Nodes: 480 481
3 => Spliiting due to client waiting
3 => callsites count before spliiting 25 with id = 341 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 486 currentId 341
Added AND Nodes: 485 486
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 486 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 481 from client 6 to 5
5 => after replyFromServer: 0
4 => callsites count before spliiting 235 with id = 476 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 491 currentId 476
Added AND Nodes: 490 491
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 491 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 24 with id = 421 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 496 currentId 421
Added AND Nodes: 495 496
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 496 from client 9 to 8
8 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 108 with id = 481 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 501 currentId 481
Added AND Nodes: 500 501
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 501 from client 5 to 4
4 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => callsites count before spliiting 224 with id = 456 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 506 currentId 456
Added AND Nodes: 505 506
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 506 from client 7 to 6
6 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 23 with id = 486 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 511 currentId 486
Added AND Nodes: 510 511
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 511 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 23 with id = 496 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 516 currentId 496
Added AND Nodes: 515 516
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 516 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 21 with id = 471 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 521 currentId 471
Added AND Nodes: 520 521
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 521 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 90 with id = 516 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 526 currentId 516
Added AND Nodes: 525 526
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 526 from client 10 to 9
9 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 21 with id = 521 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 531 currentId 521
Added AND Nodes: 530 531
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 531 from client 3 to 1
1 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 21 with id = 511 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 536 currentId 511
Added AND Nodes: 535 536
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 536 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => callsites count before spliiting 246 with id = 386 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 541 currentId 386
Added AND Nodes: 540 541
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 541 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 132 with id = 526 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 546 currentId 526
Added AND Nodes: 545 546
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 546 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 196 with id = 505 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 551 currentId 505
Added AND Nodes: 550 551
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 551 from client 7 to 4
4 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => callsites count before spliiting 281 with id = 500 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 556 currentId 500
Added AND Nodes: 555 556
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 556 from client 5 to 6
6 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 21 with id = 536 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 561 currentId 536
Added AND Nodes: 560 561
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 561 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
10 => callsites count before spliiting 594 with id = 546 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 566 currentId 546
Added AND Nodes: 565 566
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 566 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 21 with id = 531 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 571 currentId 531
Added AND Nodes: 570 571
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 571 from client 1 to 2
2 => after replyFromServer: 100
1 => Spliiting due to client waiting
1 => callsites count before spliiting 39 with id = 570 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 576 currentId 570
Added AND Nodes: 575 576
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 576 from client 1 to 0
0 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
5 => callsites count before spliiting 248 with id = 555 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 581 currentId 555
Added AND Nodes: 580 581
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 581 from client 5 to 4
4 => after replyFromServer: 0
1 => callsites count before spliiting 57 with id = 575 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 586 currentId 575
Added AND Nodes: 585 586
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 586 from client 1 to 0
0 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 112 with id = 580 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 591 currentId 580
Added AND Nodes: 590 591
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 591 from client 5 to 6
6 => after replyFromServer: 0
5 => callsites count before spliiting 251 with id = 590 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 596 currentId 590
Added AND Nodes: 595 596
5 => callsites count before spliiting 510 with id = 595 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 601 currentId 595
Added AND Nodes: 600 601
6 => callsites count before spliiting 206 with id = 591 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 606 currentId 591
Added AND Nodes: 605 606
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 25 with id = 585 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 611 currentId 585
Added AND Nodes: 610 611
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 611 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
5 => callsites count before spliiting 539 with id = 600 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 616 currentId 600
Added AND Nodes: 615 616
6 => callsites count before spliiting 683 with id = 605 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 621 currentId 605
Added AND Nodes: 620 621
5 => callsites count before spliiting 469 with id = 615 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 626 currentId 615
Added AND Nodes: 625 626
6 => callsites count before spliiting 627 with id = 620 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 631 currentId 620
Added AND Nodes: 630 631
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 4
Assign partition 596 from client 5 to 6
6 => after replyFromServer: 0
5 => callsites count before spliiting 290 with id = 625 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 636 currentId 625
Added AND Nodes: 635 636
6 => callsites count before spliiting 229 with id = 596 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 641 currentId 596
Added AND Nodes: 640 641
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 630 with id = 640 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 646 currentId 640
Added AND Nodes: 645 646
0 => Spliiting due to client waiting
0 => callsites count before spliiting 13 with id = 611 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 651 currentId 611
Added AND Nodes: 650 651
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 651 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 2
Assign partition 601 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 135 with id = 616 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 656 currentId 616
Added AND Nodes: 655 656
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 656 from client 5 to 6
6 => after replyFromServer: 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 18 with id = 651 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 661 currentId 651
Added AND Nodes: 660 661
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 661 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
7 => callsites count before spliiting 363 with id = 550 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 666 currentId 550
Added AND Nodes: 665 666
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 666 from client 7 to 5
5 => after replyFromServer: 0
6 => callsites count before spliiting 5 with id = 656 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 671 currentId 656
Added AND Nodes: 670 671
7 => callsites count before spliiting 226 with id = 665 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 676 currentId 665
Added AND Nodes: 675 676
7 => callsites count before spliiting 573 with id = 675 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 681 currentId 675
Added AND Nodes: 680 681
7 => callsites count before spliiting 613 with id = 680 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 686 currentId 680
Added AND Nodes: 685 686
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 3
Assign partition 676 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
0 => Spliiting due to client waiting
0 => callsites count before spliiting 5 with id = 661 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 691 currentId 661
Added AND Nodes: 690 691
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 691 from client 0 to 1
1 => after replyFromServer: 100
6 => callsites count before spliiting 202 with id = 676 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 696 currentId 676
Added AND Nodes: 695 696
6 => callsites count before spliiting 741 with id = 695 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 701 currentId 695
Added AND Nodes: 700 701
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 2
Assign partition 696 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
0 => callsites count before spliiting 79 with id = 690 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 706 currentId 690
Added AND Nodes: 705 706
0 => callsites count before spliiting 50 with id = 705 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 711 currentId 705
Added AND Nodes: 710 711
0 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 101 with id = 711 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 716 currentId 711
Added AND Nodes: 715 716
0 => callsites count before spliiting 55 with id = 715 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 721 currentId 715
Added AND Nodes: 720 721
0 => callsites count before spliiting 50 with id = 720 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 726 currentId 720
Added AND Nodes: 725 726
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--virtio_net.ko-entry_point_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 2 algo id is 0
for clientid : 1 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 8 algo id is 2
for clientid : 7 algo id is 1
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
8 => Spliiting due to client waiting
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
0 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
0 => callsites count before spliiting 21 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 2
2 => after replyFromServer: 100
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 21 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 51 currentId 46
Added AND Nodes: 50 51
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 51 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 56 currentId 36
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 51 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 61 currentId 51
Added AND Nodes: 60 61
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 61 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
Added AND Nodes: 55 56
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 56 from client 9 to 10
for clientid : 5 algo id is 1
10 => after replyFromServer: 50
2 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
2 => callsites count before spliiting 21 with id = 31 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 66 currentId 31
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 61 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 71 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 65 66
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 66 from client 2 to 1
1 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 81 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 81 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 86 currentId 81
Added AND Nodes: 85 86
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 86 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 96 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 96 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 101 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 101 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 106 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 106 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 111 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 111 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 116 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 20 with id = 56 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 121 currentId 56
Added AND Nodes: 120 121
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 121 from client 10 to 11
11 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 116 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 126 currentId 116
Added AND Nodes: 125 126
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 126 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 13 with id = 66 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 131 currentId 66
Added AND Nodes: 130 131
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 131 from client 1 to 3
3 => after replyFromServer: 100
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 126 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 136 currentId 126
Added AND Nodes: 135 136
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 136 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 136 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 141 currentId 136
Added AND Nodes: 140 141
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 141 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 17 with id = 130 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 146 currentId 130
Added AND Nodes: 145 146
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 146 from client 1 to 0
0 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 141 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 151 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 151 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 156 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 13 with id = 121 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 161 currentId 121
Added AND Nodes: 160 161
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 161 from client 11 to 8
8 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => Spliiting due to client waiting
11 => callsites count before spliiting 21 with id = 160 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 166 currentId 160
Added AND Nodes: 165 166
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 166 from client 11 to 9
9 => after replyFromServer: 50
5 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 1 with id = 156 and splitMode 0
Added New : 
11 : 
5 => sending calltree : splitMode 0 mustReachId 171 currentId 156
Added AND Nodes: 170 171
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 171 from client 5 to 6
11 => outcome: Correct
6 => after replyFromServer: 0
for clientid : 11 algo id is 2
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 4 with id = 131 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 176 currentId 131
Added AND Nodes: 175 176
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 176 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 171 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 181 currentId 171
Added AND Nodes: 180 181
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 181 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 181 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 186 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 12 with id = 166 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 191 currentId 166
Added AND Nodes: 190 191
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 191 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 6 with id = 146 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 196 currentId 146
Added AND Nodes: 195 196
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 196 from client 0 to 1
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
1 => after replyFromServer: 100
for clientid : 0 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 186 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 201 currentId 186
Added AND Nodes: 200 201
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 201 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 201 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 206 currentId 201
Added AND Nodes: 205 206
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 206 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
8 => Spliiting due to client waiting
6 => Spliiting due to client waiting
8 => callsites count before spliiting 4 with id = 161 and splitMode 50
6 => callsites count before spliiting 1 with id = 206 and splitMode 0
8 => sending calltree : splitMode 50 mustReachId 211 currentId 161
Added AND Nodes: 210 211
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 211 from client 8 to 11
11 => after replyFromServer: 50
6 => sending calltree : splitMode 0 mustReachId 216 currentId 206
Added AND Nodes: 215 216
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 216 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 54 with id = 191 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 221 currentId 191
Added AND Nodes: 220 221
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 221 from client 10 to 9
9 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 216 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 226 currentId 216
Added AND Nodes: 225 226
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 226 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 95 with id = 220 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 231 currentId 220
Added AND Nodes: 230 231
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 231 from client 10 to 8
8 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 5 with id = 176 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 236 currentId 176
Added AND Nodes: 235 236
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 236 from client 2 to 3
10 => LOOP outcome: Correct & reachbound = False
3 => after replyFromServer: 100
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 226 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 241 currentId 226
Added AND Nodes: 240 241
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 241 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
2 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
2 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 2 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 241 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 246 currentId 241
Added AND Nodes: 245 246
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 246 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 196 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 251 currentId 196
Added AND Nodes: 250 251
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 251 from client 1 to 0
0 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 246 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 256 currentId 246
Added AND Nodes: 255 256
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 256 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 256 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 261 currentId 256
Added AND Nodes: 260 261
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 261 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 261 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 266 currentId 261
Added AND Nodes: 265 266
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 266 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 5 with id = 211 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 271 currentId 211
Added AND Nodes: 270 271
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 271 from client 11 to 10
10 => after replyFromServer: 50
11 => Spliiting due to client waiting
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 266 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 276 currentId 266
Added AND Nodes: 275 276
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 276 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 276 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 281 currentId 276
Added AND Nodes: 280 281
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 281 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 221 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 286 currentId 221
Added AND Nodes: 285 286
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 286 from client 9 to 8
8 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 281 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 291 currentId 281
Added AND Nodes: 290 291
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 291 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 20 with id = 290 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 296 currentId 290
Added AND Nodes: 295 296
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 296 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 291 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 301 currentId 291
Added AND Nodes: 300 301
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 301 from client 4 to 6
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
6 => after replyFromServer: 0
for clientid : 4 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 12 with id = 251 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 306 currentId 251
Added AND Nodes: 305 306
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 306 from client 0 to 2
2 => after replyFromServer: 100
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 301 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 311 currentId 301
Added AND Nodes: 310 311
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 311 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 296 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 316 currentId 296
Added AND Nodes: 315 316
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 316 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 4 with id = 236 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 321 currentId 236
Added AND Nodes: 320 321
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 321 from client 3 to 1
1 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 311 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 326 currentId 311
Added AND Nodes: 325 326
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 326 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 316 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 331 currentId 316
Added AND Nodes: 330 331
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 331 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 326 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 336 currentId 326
Added AND Nodes: 335 336
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 336 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 16 with id = 305 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 341 currentId 305
Added AND Nodes: 340 341
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 341 from client 0 to 3
3 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 336 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 346 currentId 336
Added AND Nodes: 345 346
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 346 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 7 with id = 331 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 351 currentId 331
Added AND Nodes: 350 351
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 351 from client 5 to 6
6 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 346 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 356 currentId 346
Added AND Nodes: 355 356
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 356 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 50 with id = 350 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 361 currentId 350
8 => callsites count before spliiting 96 with id = 286 and splitMode 50
Added AND Nodes: 360 361
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 361 from client 5 to 4
8 => sending calltree : splitMode 50 mustReachId 366 currentId 286
4 => after replyFromServer: 0
Added AND Nodes: 365 366
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 366 from client 8 to 11
11 => after replyFromServer: 50
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 356 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 371 currentId 356
Added AND Nodes: 370 371
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 371 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 4 with id = 271 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 376 currentId 271
Added AND Nodes: 375 376
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 376 from client 10 to 9
9 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 13 with id = 306 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 381 currentId 306
Added AND Nodes: 380 381
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 381 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 49 with id = 351 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 386 currentId 351
Added AND Nodes: 385 386
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 386 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 172 with id = 365 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 391 currentId 365
Added AND Nodes: 390 391
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 391 from client 8 to 10
10 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 42 with id = 361 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 396 currentId 361
Added AND Nodes: 395 396
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 396 from client 4 to 6
6 => after replyFromServer: 0
8 => callsites count before spliiting 239 with id = 390 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 401 currentId 390
Added AND Nodes: 400 401
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 6 with id = 341 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 406 currentId 341
Added AND Nodes: 405 406
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 406 from client 3 to 2
2 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 83 with id = 371 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 411 currentId 371
Added AND Nodes: 410 411
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 411 from client 5 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
4 => callsites count before spliiting 157 with id = 395 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 416 currentId 395
Added AND Nodes: 415 416
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 416 from client 4 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
0 => Spliiting due to client waiting
for clientid : 10 algo id is 2
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 401 from client 8 to 10
10 => after replyFromServer: 50
0 => callsites count before spliiting 6 with id = 381 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 421 currentId 381
Added AND Nodes: 420 421
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 421 from client 0 to 3
3 => after replyFromServer: 100
7 => Spliiting due to client waiting
7 => callsites count before spliiting 49 with id = 411 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 426 currentId 411
Added AND Nodes: 425 426
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 426 from client 7 to 5
5 => after replyFromServer: 0
4 => callsites count before spliiting 233 with id = 415 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 431 currentId 415
Added AND Nodes: 430 431
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 431 from client 4 to 6
6 => after replyFromServer: 0
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => callsites count before spliiting 210 with id = 425 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 436 currentId 425
Added AND Nodes: 435 436
9 => Spliiting due to client waiting
9 => callsites count before spliiting 53 with id = 376 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 441 currentId 376
Added AND Nodes: 440 441
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 441 from client 9 to 10
10 => after replyFromServer: 50
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 436 from client 7 to 5
5 => after replyFromServer: 0
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
11 => Spliiting due to client waiting
11 => callsites count before spliiting 57 with id = 366 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 446 currentId 366
Added AND Nodes: 445 446
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 446 from client 11 to 9
9 => after replyFromServer: 50
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => callsites count before spliiting 92 with id = 420 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 451 currentId 420
Added AND Nodes: 450 451
0 => LOOP outcome: Correct & reachbound = False
6 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => callsites count before spliiting 71 with id = 431 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 456 currentId 431
Added AND Nodes: 455 456
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 456 from client 6 to 4
4 => after replyFromServer: 0
5 => callsites count before spliiting 75 with id = 436 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 461 currentId 436
Added AND Nodes: 460 461
8 => callsites count before spliiting 311 with id = 400 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 466 currentId 400
Added AND Nodes: 465 466
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 461 from client 5 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => callsites count before spliiting 59 with id = 406 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 471 currentId 406
Added AND Nodes: 470 471
3 => callsites count before spliiting 63 with id = 421 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 476 currentId 421
Added AND Nodes: 475 476
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 180 with id = 455 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 481 currentId 455
Added AND Nodes: 480 481
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 481 from client 6 to 4
4 => after replyFromServer: 0
0 => callsites count before spliiting 140 with id = 451 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 486 currentId 451
Added AND Nodes: 485 486
8 => callsites count before spliiting 445 with id = 465 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 491 currentId 465
Added AND Nodes: 490 491
2 => callsites count before spliiting 156 with id = 470 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 496 currentId 470
Added AND Nodes: 495 496
2 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 278 with id = 480 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 501 currentId 480
Added AND Nodes: 500 501
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 501 from client 6 to 7
7 => after replyFromServer: 0
0 => callsites count before spliiting 149 with id = 485 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 506 currentId 485
Added AND Nodes: 505 506
8 => callsites count before spliiting 624 with id = 490 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 511 currentId 490
Added AND Nodes: 510 511
3 => callsites count before spliiting 57 with id = 475 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 516 currentId 475
Added AND Nodes: 515 516
3 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 247 with id = 446 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 521 currentId 446
Added AND Nodes: 520 521
5 => callsites count before spliiting 303 with id = 460 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 526 currentId 460
Added AND Nodes: 525 526
10 => callsites count before spliiting 419 with id = 441 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 531 currentId 441
Added AND Nodes: 530 531
2 => callsites count before spliiting 81 with id = 496 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 536 currentId 496
Added AND Nodes: 535 536
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
0 => callsites count before spliiting 191 with id = 505 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 541 currentId 505
Added AND Nodes: 540 541
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 727 with id = 510 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 546 currentId 510
Added AND Nodes: 545 546
2 => callsites count before spliiting 88 with id = 535 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 551 currentId 535
Added AND Nodes: 550 551
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 378 with id = 520 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 556 currentId 520
Added AND Nodes: 555 556
0 => callsites count before spliiting 70 with id = 541 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 561 currentId 541
Added AND Nodes: 560 561
8 => callsites count before spliiting 796 with id = 545 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 566 currentId 545
Added AND Nodes: 565 566
9 => callsites count before spliiting 510 with id = 555 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 571 currentId 555
Added AND Nodes: 570 571
0 => callsites count before spliiting 55 with id = 560 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 576 currentId 560
Added AND Nodes: 575 576
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 57 with id = 551 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 581 currentId 551
Added AND Nodes: 580 581
8 => callsites count before spliiting 885 with id = 565 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 586 currentId 565
Added AND Nodes: 585 586
9 => callsites count before spliiting 646 with id = 570 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 591 currentId 570
Added AND Nodes: 590 591
2 => callsites count before spliiting 85 with id = 580 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 596 currentId 580
Added AND Nodes: 595 596
8 => callsites count before spliiting 1004 with id = 585 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 601 currentId 585
Added AND Nodes: 600 601
0 => callsites count before spliiting 63 with id = 576 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 606 currentId 576
Added AND Nodes: 605 606
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 697 with id = 590 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 611 currentId 590
Added AND Nodes: 610 611
3 => callsites count before spliiting 54 with id = 516 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 616 currentId 516
Added AND Nodes: 615 616
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 202 with id = 525 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 621 currentId 525
Added AND Nodes: 620 621
2 => callsites count before spliiting 107 with id = 595 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 626 currentId 595
Added AND Nodes: 625 626
9 => callsites count before spliiting 776 with id = 610 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 631 currentId 610
Added AND Nodes: 630 631
0 => callsites count before spliiting 55 with id = 605 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 636 currentId 605
Added AND Nodes: 635 636
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 242 with id = 601 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 641 currentId 601
Added AND Nodes: 640 641
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
2 => callsites count before spliiting 73 with id = 625 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 646 currentId 625
Added AND Nodes: 645 646
9 => callsites count before spliiting 829 with id = 630 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 651 currentId 630
Added AND Nodes: 650 651
0 => callsites count before spliiting 55 with id = 636 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 656 currentId 636
Added AND Nodes: 655 656
8 => callsites count before spliiting 217 with id = 641 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 661 currentId 641
Added AND Nodes: 660 661
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 849 with id = 650 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 666 currentId 650
Added AND Nodes: 665 666
2 => callsites count before spliiting 54 with id = 645 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 671 currentId 645
Added AND Nodes: 670 671
9 => callsites count before spliiting 913 with id = 665 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 676 currentId 665
Added AND Nodes: 675 676
0 => callsites count before spliiting 59 with id = 655 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 681 currentId 655
Added AND Nodes: 680 681
9 => callsites count before spliiting 956 with id = 675 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 686 currentId 675
Added AND Nodes: 685 686
0 => callsites count before spliiting 57 with id = 680 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 691 currentId 680
Added AND Nodes: 690 691
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 217 with id = 661 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 696 currentId 661
Added AND Nodes: 695 696
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 1072 with id = 685 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 701 currentId 685
Added AND Nodes: 700 701
8 => callsites count before spliiting 221 with id = 696 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 706 currentId 696
Added AND Nodes: 705 706
0 => callsites count before spliiting 59 with id = 691 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 711 currentId 691
Added AND Nodes: 710 711
6 => callsites count before spliiting 297 with id = 500 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 716 currentId 500
Added AND Nodes: 715 716
9 => callsites count before spliiting 1159 with id = 700 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 721 currentId 700
Added AND Nodes: 720 721
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 248 with id = 705 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 726 currentId 705
Added AND Nodes: 725 726
0 => callsites count before spliiting 87 with id = 710 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 731 currentId 710
Added AND Nodes: 730 731
6 => callsites count before spliiting 280 with id = 715 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 736 currentId 715
Added AND Nodes: 735 736
2 => callsites count before spliiting 67 with id = 670 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 741 currentId 670
Added AND Nodes: 740 741
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 2
Assign partition 526 from client 5 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 318 with id = 481 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 746 currentId 481
Added AND Nodes: 745 746
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
clientID of largest queue : 6
clientCalltreeQueue Count : 2
Assign partition 716 from client 6 to 7
7 => after replyFromServer: 0
8 => callsites count before spliiting 390 with id = 725 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 751 currentId 725
Added AND Nodes: 750 751
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 227 with id = 735 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 756 currentId 735
Added AND Nodes: 755 756
4 => callsites count before spliiting 301 with id = 745 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 761 currentId 745
Added AND Nodes: 760 761
0 => callsites count before spliiting 109 with id = 730 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 766 currentId 730
Added AND Nodes: 765 766
0 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 249 with id = 760 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 771 currentId 760
Added AND Nodes: 770 771
2 => callsites count before spliiting 55 with id = 740 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 776 currentId 740
Added AND Nodes: 775 776
3 => callsites count before spliiting 54 with id = 616 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 781 currentId 616
Added AND Nodes: 780 781
6 => callsites count before spliiting 229 with id = 755 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 786 currentId 755
Added AND Nodes: 785 786
0 => callsites count before spliiting 58 with id = 766 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 791 currentId 766
Added AND Nodes: 790 791
4 => callsites count before spliiting 217 with id = 770 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 796 currentId 770
Added AND Nodes: 795 796
3 => callsites count before spliiting 52 with id = 780 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 801 currentId 780
Added AND Nodes: 800 801
6 => callsites count before spliiting 331 with id = 785 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 806 currentId 785
Added AND Nodes: 805 806
2 => callsites count before spliiting 114 with id = 775 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 811 currentId 775
Added AND Nodes: 810 811
0 => callsites count before spliiting 194 with id = 790 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 816 currentId 790
Added AND Nodes: 815 816
6 => callsites count before spliiting 285 with id = 805 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 821 currentId 805
Added AND Nodes: 820 821
4 => callsites count before spliiting 248 with id = 795 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 826 currentId 795
Added AND Nodes: 825 826
3 => callsites count before spliiting 61 with id = 800 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 831 currentId 800
Added AND Nodes: 830 831
9 => callsites count before spliiting 280 with id = 721 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 836 currentId 721
Added AND Nodes: 835 836
0 => callsites count before spliiting 207 with id = 815 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 841 currentId 815
Added AND Nodes: 840 841
0 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 129 with id = 810 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 846 currentId 810
Added AND Nodes: 845 846
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 303 with id = 835 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 851 currentId 835
Added AND Nodes: 850 851
4 => callsites count before spliiting 239 with id = 825 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 856 currentId 825
Added AND Nodes: 855 856
3 => callsites count before spliiting 53 with id = 830 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 861 currentId 830
Added AND Nodes: 860 861
8 => callsites count before spliiting 278 with id = 751 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 866 currentId 751
Added AND Nodes: 865 866
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 61 with id = 841 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 871 currentId 841
Added AND Nodes: 870 871
9 => callsites count before spliiting 322 with id = 850 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 876 currentId 850
Added AND Nodes: 875 876
3 => callsites count before spliiting 81 with id = 860 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 881 currentId 860
Added AND Nodes: 880 881
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => callsites count before spliiting 258 with id = 866 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 886 currentId 866
Added AND Nodes: 885 886
3 => callsites count before spliiting 85 with id = 880 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 891 currentId 880
Added AND Nodes: 890 891
4 => callsites count before spliiting 219 with id = 855 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 896 currentId 855
Added AND Nodes: 895 896
2 => callsites count before spliiting 57 with id = 846 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 901 currentId 846
Added AND Nodes: 900 901
6 => callsites count before spliiting 201 with id = 820 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 906 currentId 820
Added AND Nodes: 905 906
3 => callsites count before spliiting 88 with id = 890 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 911 currentId 890
Added AND Nodes: 910 911
8 => callsites count before spliiting 286 with id = 885 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 916 currentId 885
Added AND Nodes: 915 916
0 => callsites count before spliiting 62 with id = 870 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 921 currentId 870
Added AND Nodes: 920 921
0 => LOOP outcome: Correct & reachbound = False
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => callsites count before spliiting 125 with id = 910 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 926 currentId 910
Added AND Nodes: 925 926
2 => callsites count before spliiting 52 with id = 900 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 931 currentId 900
Added AND Nodes: 930 931
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 248 with id = 876 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 936 currentId 876
Added AND Nodes: 935 936
3 => callsites count before spliiting 261 with id = 925 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 941 currentId 925
Added AND Nodes: 940 941
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 54 with id = 921 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 946 currentId 921
Added AND Nodes: 945 946
0 => LOOP outcome: Correct & reachbound = False
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 63 with id = 941 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 951 currentId 941
Added AND Nodes: 950 951
3 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 61 with id = 951 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 956 currentId 951
Added AND Nodes: 955 956
8 => callsites count before spliiting 304 with id = 916 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 961 currentId 916
Added AND Nodes: 960 961
0 => callsites count before spliiting 72 with id = 946 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 966 currentId 946
Added AND Nodes: 965 966
6 => callsites count before spliiting 214 with id = 905 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 971 currentId 905
Added AND Nodes: 970 971
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 255 with id = 620 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 976 currentId 620
Added AND Nodes: 975 976
8 => callsites count before spliiting 420 with id = 960 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 981 currentId 960
Added AND Nodes: 980 981
0 => callsites count before spliiting 56 with id = 965 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 986 currentId 965
Added AND Nodes: 985 986
6 => callsites count before spliiting 278 with id = 971 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 991 currentId 971
Added AND Nodes: 990 991
10 => callsites count before spliiting 404 with id = 531 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 996 currentId 531
Added AND Nodes: 995 996
5 => callsites count before spliiting 214 with id = 975 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1001 currentId 975
Added AND Nodes: 1000 1001
2 => callsites count before spliiting 59 with id = 931 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1006 currentId 931
Added AND Nodes: 1005 1006
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 62 with id = 955 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1011 currentId 955
Added AND Nodes: 1010 1011
3 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 430 with id = 980 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1016 currentId 980
Added AND Nodes: 1015 1016
6 => callsites count before spliiting 218 with id = 991 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1021 currentId 991
Added AND Nodes: 1020 1021
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 354 with id = 445 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1026 currentId 445
Added AND Nodes: 1025 1026
0 => callsites count before spliiting 58 with id = 985 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1031 currentId 985
Added AND Nodes: 1030 1031
8 => callsites count before spliiting 470 with id = 1015 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1036 currentId 1015
Added AND Nodes: 1035 1036
3 => callsites count before spliiting 54 with id = 1011 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1041 currentId 1011
Added AND Nodes: 1040 1041
3 => LOOP outcome: Correct & reachbound = False
2 => callsites count before spliiting 68 with id = 1005 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1046 currentId 1005
Added AND Nodes: 1045 1046
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 298 with id = 1021 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1051 currentId 1021
Added AND Nodes: 1050 1051
8 => callsites count before spliiting 559 with id = 1035 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1056 currentId 1035
Added AND Nodes: 1055 1056
11 => callsites count before spliiting 362 with id = 1025 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1061 currentId 1025
Added AND Nodes: 1060 1061
2 => callsites count before spliiting 51 with id = 1045 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1066 currentId 1045
Added AND Nodes: 1065 1066
2 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 594 with id = 1055 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1071 currentId 1055
Added AND Nodes: 1070 1071
11 => callsites count before spliiting 374 with id = 1060 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1076 currentId 1060
Added AND Nodes: 1075 1076
6 => callsites count before spliiting 299 with id = 1050 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1081 currentId 1050
Added AND Nodes: 1080 1081
0 => callsites count before spliiting 54 with id = 1030 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1086 currentId 1030
Added AND Nodes: 1085 1086
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 383 with id = 1075 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1091 currentId 1075
Added AND Nodes: 1090 1091
3 => callsites count before spliiting 72 with id = 1041 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1096 currentId 1041
Added AND Nodes: 1095 1096
3 => LOOP outcome: Correct & reachbound = False
6 => callsites count before spliiting 246 with id = 1081 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1101 currentId 1081
Added AND Nodes: 1100 1101
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => callsites count before spliiting 661 with id = 1070 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1106 currentId 1070
Added AND Nodes: 1105 1106
11 => callsites count before spliiting 481 with id = 1090 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1111 currentId 1090
Added AND Nodes: 1110 1111
6 => callsites count before spliiting 280 with id = 1101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1116 currentId 1101
Added AND Nodes: 1115 1116
2 => callsites count before spliiting 58 with id = 1066 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1121 currentId 1066
Added AND Nodes: 1120 1121
9 => callsites count before spliiting 278 with id = 936 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1126 currentId 936
Added AND Nodes: 1125 1126
8 => callsites count before spliiting 770 with id = 1105 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1131 currentId 1105
Added AND Nodes: 1130 1131
0 => callsites count before spliiting 63 with id = 1085 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1136 currentId 1085
Added AND Nodes: 1135 1136
0 => LOOP outcome: Correct & reachbound = True
11 => callsites count before spliiting 541 with id = 1110 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1141 currentId 1110
Added AND Nodes: 1140 1141
8 => callsites count before spliiting 852 with id = 1130 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1146 currentId 1130
6 => callsites count before spliiting 289 with id = 1115 and splitMode 0
Added AND Nodes: 1145 1146
6 => sending calltree : splitMode 0 mustReachId 1151 currentId 1115
Added AND Nodes: 1150 1151
11 => callsites count before spliiting 602 with id = 1140 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1156 currentId 1140
Added AND Nodes: 1155 1156
9 => callsites count before spliiting 345 with id = 1125 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1161 currentId 1125
Added AND Nodes: 1160 1161
8 => callsites count before spliiting 884 with id = 1145 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1166 currentId 1145
Added AND Nodes: 1165 1166
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
3 => callsites count before spliiting 50 with id = 1096 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1171 currentId 1096
Added AND Nodes: 1170 1171
6 => callsites count before spliiting 243 with id = 1150 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1176 currentId 1150
Added AND Nodes: 1175 1176
11 => callsites count before spliiting 648 with id = 1155 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1181 currentId 1155
Added AND Nodes: 1180 1181
8 => callsites count before spliiting 921 with id = 1165 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1186 currentId 1165
Added AND Nodes: 1185 1186
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 52 with id = 1136 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1191 currentId 1136
Added AND Nodes: 1190 1191
6 => callsites count before spliiting 243 with id = 1175 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1196 currentId 1175
Added AND Nodes: 1195 1196
11 => callsites count before spliiting 656 with id = 1180 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1201 currentId 1180
Added AND Nodes: 1200 1201
3 => callsites count before spliiting 57 with id = 1170 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1206 currentId 1170
Added AND Nodes: 1205 1206
6 => callsites count before spliiting 317 with id = 1195 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1211 currentId 1195
Added AND Nodes: 1210 1211
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 58 with id = 1190 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1216 currentId 1190
Added AND Nodes: 1215 1216
11 => callsites count before spliiting 719 with id = 1200 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1221 currentId 1200
Added AND Nodes: 1220 1221
6 => callsites count before spliiting 250 with id = 1211 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1226 currentId 1211
Added AND Nodes: 1225 1226
8 => callsites count before spliiting 206 with id = 1186 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1231 currentId 1186
3 => callsites count before spliiting 50 with id = 1205 and splitMode 100
Added AND Nodes: 1230 1231
3 => sending calltree : splitMode 100 mustReachId 1236 currentId 1205
Added AND Nodes: 1235 1236
11 => callsites count before spliiting 731 with id = 1220 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1241 currentId 1220
Added AND Nodes: 1240 1241
4 => callsites count before spliiting 200 with id = 895 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1246 currentId 895
Added AND Nodes: 1245 1246
6 => callsites count before spliiting 226 with id = 1225 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1251 currentId 1225
Added AND Nodes: 1250 1251
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 212 with id = 1161 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1256 currentId 1161
Added AND Nodes: 1255 1256
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 766 with id = 1240 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1261 currentId 1240
Added AND Nodes: 1260 1261
4 => callsites count before spliiting 241 with id = 896 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1266 currentId 896
Added AND Nodes: 1265 1266
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => callsites count before spliiting 257 with id = 1230 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1271 currentId 1230
Added AND Nodes: 1270 1271
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 231 with id = 1250 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1276 currentId 1250
Added AND Nodes: 1275 1276
4 => callsites count before spliiting 486 with id = 1266 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1281 currentId 1266
Added AND Nodes: 1280 1281
11 => callsites count before spliiting 814 with id = 1260 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1286 currentId 1260
Added AND Nodes: 1285 1286
4 => callsites count before spliiting 689 with id = 1280 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1291 currentId 1280
Added AND Nodes: 1290 1291
3 => callsites count before spliiting 62 with id = 1235 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1296 currentId 1235
Added AND Nodes: 1295 1296
11 => callsites count before spliiting 866 with id = 1285 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1301 currentId 1285
Added AND Nodes: 1300 1301
0 => callsites count before spliiting 50 with id = 1215 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1306 currentId 1215
Added AND Nodes: 1305 1306
0 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 648 with id = 1290 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1311 currentId 1290
Added AND Nodes: 1310 1311
11 => callsites count before spliiting 908 with id = 1300 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1316 currentId 1300
Added AND Nodes: 1315 1316
6 => callsites count before spliiting 205 with id = 1275 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1321 currentId 1275
Added AND Nodes: 1320 1321
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 728 with id = 1310 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1326 currentId 1310
Added AND Nodes: 1325 1326
9 => callsites count before spliiting 218 with id = 1256 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1331 currentId 1256
Added AND Nodes: 1330 1331
0 => callsites count before spliiting 84 with id = 1306 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1336 currentId 1306
Added AND Nodes: 1335 1336
4 => callsites count before spliiting 836 with id = 1325 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1341 currentId 1325
Added AND Nodes: 1340 1341
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 969 with id = 1315 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1346 currentId 1315
Added AND Nodes: 1345 1346
3 => callsites count before spliiting 64 with id = 1295 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1351 currentId 1295
Added AND Nodes: 1350 1351
2 => callsites count before spliiting 55 with id = 1120 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1356 currentId 1120
Added AND Nodes: 1355 1356
9 => callsites count before spliiting 234 with id = 1330 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1361 currentId 1330
Added AND Nodes: 1360 1361
0 => callsites count before spliiting 74 with id = 1335 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1366 currentId 1335
Added AND Nodes: 1365 1366
11 => callsites count before spliiting 1030 with id = 1345 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1371 currentId 1345
Added AND Nodes: 1370 1371
4 => callsites count before spliiting 303 with id = 1341 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1376 currentId 1341
Added AND Nodes: 1375 1376
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 324 with id = 1360 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1381 currentId 1360
Added AND Nodes: 1380 1381
8 => callsites count before spliiting 226 with id = 1271 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1386 currentId 1271
Added AND Nodes: 1385 1386
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => callsites count before spliiting 208 with id = 1376 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1391 currentId 1376
Added AND Nodes: 1390 1391
11 => callsites count before spliiting 1071 with id = 1370 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1396 currentId 1370
Added AND Nodes: 1395 1396
6 => callsites count before spliiting 207 with id = 1321 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1401 currentId 1321
Added AND Nodes: 1400 1401
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 50 with id = 1350 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1406 currentId 1350
Added AND Nodes: 1405 1406
0 => callsites count before spliiting 104 with id = 1365 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1411 currentId 1365
Added AND Nodes: 1410 1411
4 => callsites count before spliiting 281 with id = 1390 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1416 currentId 1390
Added AND Nodes: 1415 1416
11 => callsites count before spliiting 1108 with id = 1395 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1421 currentId 1395
Added AND Nodes: 1420 1421
0 => callsites count before spliiting 94 with id = 1410 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1426 currentId 1410
Added AND Nodes: 1425 1426
9 => callsites count before spliiting 388 with id = 1380 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1431 currentId 1380
Added AND Nodes: 1430 1431
11 => callsites count before spliiting 1149 with id = 1420 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1436 currentId 1420
Added AND Nodes: 1435 1436
4 => callsites count before spliiting 335 with id = 1415 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1441 currentId 1415
Added AND Nodes: 1440 1441
7 => callsites count before spliiting 236 with id = 716 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1446 currentId 716
Added AND Nodes: 1445 1446
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 84 with id = 1425 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1451 currentId 1425
Added AND Nodes: 1450 1451
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
11 => callsites count before spliiting 1181 with id = 1435 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1456 currentId 1435
Added AND Nodes: 1455 1456
3 => callsites count before spliiting 56 with id = 1405 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1461 currentId 1405
Added AND Nodes: 1460 1461
4 => callsites count before spliiting 302 with id = 1441 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1466 currentId 1441
Added AND Nodes: 1465 1466
6 => callsites count before spliiting 213 with id = 1401 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1471 currentId 1401
Added AND Nodes: 1470 1471
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 324 with id = 1465 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1476 currentId 1465
Added AND Nodes: 1475 1476
11 => callsites count before spliiting 1192 with id = 1455 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1481 currentId 1455
Added AND Nodes: 1480 1481
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 1222 with id = 1480 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1486 currentId 1480
Added AND Nodes: 1485 1486
4 => callsites count before spliiting 219 with id = 1476 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1491 currentId 1476
Added AND Nodes: 1490 1491
0 => callsites count before spliiting 53 with id = 1450 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1496 currentId 1450
Added AND Nodes: 1495 1496
8 => callsites count before spliiting 204 with id = 1386 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1501 currentId 1386
Added AND Nodes: 1500 1501
11 => callsites count before spliiting 1247 with id = 1485 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1506 currentId 1485
Added AND Nodes: 1505 1506
6 => callsites count before spliiting 224 with id = 1471 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1511 currentId 1471
Added AND Nodes: 1510 1511
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 213 with id = 1445 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1516 currentId 1445
Added AND Nodes: 1515 1516
4 => callsites count before spliiting 288 with id = 1490 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1521 currentId 1490
Added AND Nodes: 1520 1521
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => callsites count before spliiting 294 with id = 1500 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1526 currentId 1500
Added AND Nodes: 1525 1526
11 => callsites count before spliiting 1253 with id = 1505 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1531 currentId 1505
Added AND Nodes: 1530 1531
4 => callsites count before spliiting 287 with id = 1521 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1536 currentId 1521
Added AND Nodes: 1535 1536
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
8 => callsites count before spliiting 354 with id = 1525 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1541 currentId 1525
Added AND Nodes: 1540 1541
11 => callsites count before spliiting 1257 with id = 1530 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1546 currentId 1530
Added AND Nodes: 1545 1546
8 => callsites count before spliiting 385 with id = 1540 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1551 currentId 1540
Added AND Nodes: 1550 1551
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => callsites count before spliiting 63 with id = 1460 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1556 currentId 1460
Added AND Nodes: 1555 1556
3 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 222 with id = 1536 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1561 currentId 1536
Added AND Nodes: 1560 1561
11 => callsites count before spliiting 1316 with id = 1545 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1566 currentId 1545
Added AND Nodes: 1565 1566
6 => callsites count before spliiting 219 with id = 1511 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1571 currentId 1511
Added AND Nodes: 1570 1571
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 55 with id = 1495 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1576 currentId 1495
Added AND Nodes: 1575 1576
2 => callsites count before spliiting 50 with id = 1355 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1581 currentId 1355
Added AND Nodes: 1580 1581
4 => callsites count before spliiting 264 with id = 1561 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1586 currentId 1561
Added AND Nodes: 1585 1586
7 => callsites count before spliiting 218 with id = 1515 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1591 currentId 1515
Added AND Nodes: 1590 1591
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => callsites count before spliiting 262 with id = 1585 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1596 currentId 1585
Added AND Nodes: 1595 1596
8 => callsites count before spliiting 204 with id = 1551 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1601 currentId 1551
Added AND Nodes: 1600 1601
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
3 => callsites count before spliiting 73 with id = 1556 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1606 currentId 1556
Added AND Nodes: 1605 1606
3 => LOOP outcome: Correct & reachbound = True
6 => callsites count before spliiting 255 with id = 1570 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1611 currentId 1570
Added AND Nodes: 1610 1611
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 275 with id = 1595 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1616 currentId 1595
Added AND Nodes: 1615 1616
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 51 with id = 1575 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1621 currentId 1575
Added AND Nodes: 1620 1621
11 => callsites count before spliiting 234 with id = 1566 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1626 currentId 1566
Added AND Nodes: 1625 1626
0 => LOOP outcome: Correct & reachbound = True
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => callsites count before spliiting 264 with id = 1616 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1631 currentId 1616
Added AND Nodes: 1630 1631
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => callsites count before spliiting 68 with id = 1606 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1636 currentId 1606
Added AND Nodes: 1635 1636
8 => callsites count before spliiting 208 with id = 1601 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1641 currentId 1601
Added AND Nodes: 1640 1641
7 => callsites count before spliiting 208 with id = 1590 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1646 currentId 1590
Added AND Nodes: 1645 1646
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
9 => callsites count before spliiting 202 with id = 1431 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1651 currentId 1431
Added AND Nodes: 1650 1651
11 => callsites count before spliiting 204 with id = 1626 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1656 currentId 1626
Added AND Nodes: 1655 1656
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => callsites count before spliiting 210 with id = 1611 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1661 currentId 1611
Added AND Nodes: 1660 1661
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 248 with id = 1631 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1666 currentId 1631
Added AND Nodes: 1665 1666
0 => callsites count before spliiting 57 with id = 1621 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1671 currentId 1621
Added AND Nodes: 1670 1671
9 => callsites count before spliiting 256 with id = 1650 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1676 currentId 1650
Added AND Nodes: 1675 1676
4 => callsites count before spliiting 259 with id = 1665 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1681 currentId 1665
Added AND Nodes: 1680 1681
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => callsites count before spliiting 60 with id = 1635 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1686 currentId 1635
Added AND Nodes: 1685 1686
9 => callsites count before spliiting 312 with id = 1675 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1691 currentId 1675
Added AND Nodes: 1690 1691
4 => callsites count before spliiting 239 with id = 1681 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1696 currentId 1681
Added AND Nodes: 1695 1696
7 => callsites count before spliiting 218 with id = 1645 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1701 currentId 1645
Added AND Nodes: 1700 1701
6 => callsites count before spliiting 210 with id = 1661 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1706 currentId 1661
Added AND Nodes: 1705 1706
4 => callsites count before spliiting 231 with id = 1695 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1711 currentId 1695
Added AND Nodes: 1710 1711
9 => callsites count before spliiting 342 with id = 1690 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1716 currentId 1690
Added AND Nodes: 1715 1716
0 => callsites count before spliiting 56 with id = 1670 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1721 currentId 1670
Added AND Nodes: 1720 1721
11 => callsites count before spliiting 211 with id = 1656 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1726 currentId 1656
Added AND Nodes: 1725 1726
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 86 with id = 1580 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1731 currentId 1580
Added AND Nodes: 1730 1731
3 => callsites count before spliiting 58 with id = 1685 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1736 currentId 1685
Added AND Nodes: 1735 1736
9 => callsites count before spliiting 419 with id = 1715 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1741 currentId 1715
Added AND Nodes: 1740 1741
4 => callsites count before spliiting 243 with id = 1710 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1746 currentId 1710
Added AND Nodes: 1745 1746
8 => callsites count before spliiting 204 with id = 1641 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1751 currentId 1641
Added AND Nodes: 1750 1751
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 215 with id = 1705 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1756 currentId 1705
Added AND Nodes: 1755 1756
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 477 with id = 1740 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1761 currentId 1740
Added AND Nodes: 1760 1761
4 => callsites count before spliiting 271 with id = 1745 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1766 currentId 1745
Added AND Nodes: 1765 1766
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 65 with id = 1721 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1771 currentId 1721
Added AND Nodes: 1770 1771
0 => LOOP outcome: Correct & reachbound = True
7 => callsites count before spliiting 252 with id = 1700 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1776 currentId 1700
Added AND Nodes: 1775 1776
2 => callsites count before spliiting 97 with id = 1730 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1781 currentId 1730
Added AND Nodes: 1780 1781
9 => callsites count before spliiting 491 with id = 1760 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1786 currentId 1760
Added AND Nodes: 1785 1786
3 => callsites count before spliiting 84 with id = 1735 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1791 currentId 1735
Added AND Nodes: 1790 1791
4 => callsites count before spliiting 258 with id = 1766 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1796 currentId 1766
Added AND Nodes: 1795 1796
0 => callsites count before spliiting 56 with id = 1771 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1801 currentId 1771
Added AND Nodes: 1800 1801
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 514 with id = 1785 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1806 currentId 1785
Added AND Nodes: 1805 1806
2 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 533 with id = 1805 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1811 currentId 1805
Added AND Nodes: 1810 1811
6 => callsites count before spliiting 224 with id = 1756 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1816 currentId 1756
Added AND Nodes: 1815 1816
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 267 with id = 1796 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1821 currentId 1796
Added AND Nodes: 1820 1821
11 => callsites count before spliiting 290 with id = 1726 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1826 currentId 1726
Added AND Nodes: 1825 1826
7 => callsites count before spliiting 228 with id = 1775 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1831 currentId 1775
Added AND Nodes: 1830 1831
3 => callsites count before spliiting 72 with id = 1790 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1836 currentId 1790
Added AND Nodes: 1835 1836
9 => callsites count before spliiting 554 with id = 1810 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1841 currentId 1810
Added AND Nodes: 1840 1841
0 => callsites count before spliiting 52 with id = 1800 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1846 currentId 1800
Added AND Nodes: 1845 1846
11 => callsites count before spliiting 353 with id = 1825 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1851 currentId 1825
Added AND Nodes: 1850 1851
3 => callsites count before spliiting 57 with id = 1835 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1856 currentId 1835
Added AND Nodes: 1855 1856
3 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 278 with id = 1820 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1861 currentId 1820
Added AND Nodes: 1860 1861
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 378 with id = 1850 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1866 currentId 1850
Added AND Nodes: 1865 1866
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 563 with id = 1840 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1871 currentId 1840
Added AND Nodes: 1870 1871
0 => callsites count before spliiting 62 with id = 1845 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1876 currentId 1845
Added AND Nodes: 1875 1876
0 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 65 with id = 1781 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1881 currentId 1781
Added AND Nodes: 1880 1881
6 => callsites count before spliiting 209 with id = 1816 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1886 currentId 1816
Added AND Nodes: 1885 1886
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 70 with id = 1856 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1891 currentId 1856
Added AND Nodes: 1890 1891
3 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 270 with id = 1861 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1896 currentId 1861
Added AND Nodes: 1895 1896
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
7 => callsites count before spliiting 277 with id = 1830 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1901 currentId 1830
Added AND Nodes: 1900 1901
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
0 => callsites count before spliiting 56 with id = 1876 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1906 currentId 1876
Added AND Nodes: 1905 1906
11 => callsites count before spliiting 237 with id = 1866 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1911 currentId 1866
Added AND Nodes: 1910 1911
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => callsites count before spliiting 318 with id = 1895 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1916 currentId 1895
Added AND Nodes: 1915 1916
3 => callsites count before spliiting 70 with id = 1891 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1921 currentId 1891
Added AND Nodes: 1920 1921
4 => callsites count before spliiting 254 with id = 1915 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1926 currentId 1915
Added AND Nodes: 1925 1926
0 => callsites count before spliiting 55 with id = 1905 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1931 currentId 1905
Added AND Nodes: 1930 1931
0 => LOOP outcome: Correct & reachbound = True
7 => callsites count before spliiting 231 with id = 1900 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1936 currentId 1900
Added AND Nodes: 1935 1936
6 => callsites count before spliiting 222 with id = 1886 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1941 currentId 1886
Added AND Nodes: 1940 1941
4 => callsites count before spliiting 296 with id = 1925 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1946 currentId 1925
Added AND Nodes: 1945 1946
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 57 with id = 1880 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 1951 currentId 1880
Added AND Nodes: 1950 1951
8 => callsites count before spliiting 208 with id = 1751 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1956 currentId 1751
Added AND Nodes: 1955 1956
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => callsites count before spliiting 257 with id = 1946 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1961 currentId 1946
Added AND Nodes: 1960 1961
0 => callsites count before spliiting 61 with id = 1931 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1966 currentId 1931
Added AND Nodes: 1965 1966
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => LOOP outcome: Correct & reachbound = True
6 => callsites count before spliiting 208 with id = 1940 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1971 currentId 1940
Added AND Nodes: 1970 1971
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 271 with id = 976 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1976 currentId 976
Added AND Nodes: 1975 1976
7 => callsites count before spliiting 219 with id = 1935 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1981 currentId 1935
Added AND Nodes: 1980 1981
9 => callsites count before spliiting 213 with id = 1841 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 1986 currentId 1841
Added AND Nodes: 1985 1986
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
4 => callsites count before spliiting 258 with id = 1961 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1991 currentId 1961
Added AND Nodes: 1990 1991
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => callsites count before spliiting 51 with id = 1920 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 1996 currentId 1920
Added AND Nodes: 1995 1996
4 => callsites count before spliiting 281 with id = 1991 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2001 currentId 1991
Added AND Nodes: 2000 2001
5 => callsites count before spliiting 244 with id = 1975 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2006 currentId 1975
Added AND Nodes: 2005 2006
6 => callsites count before spliiting 226 with id = 1971 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2011 currentId 1971
Added AND Nodes: 2010 2011
2 => callsites count before spliiting 52 with id = 1950 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2016 currentId 1950
Added AND Nodes: 2015 2016
2 => LOOP outcome: Correct & reachbound = False
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 217 with id = 2000 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2021 currentId 2000
Added AND Nodes: 2020 2021
11 => callsites count before spliiting 245 with id = 1911 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2026 currentId 1911
Added AND Nodes: 2025 2026
9 => callsites count before spliiting 233 with id = 1986 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2031 currentId 1986
Added AND Nodes: 2030 2031
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
11 => callsites count before spliiting 315 with id = 2025 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2036 currentId 2025
Added AND Nodes: 2035 2036
4 => callsites count before spliiting 227 with id = 2020 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2041 currentId 2020
Added AND Nodes: 2040 2041
11 => callsites count before spliiting 383 with id = 2035 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2046 currentId 2035
Added AND Nodes: 2045 2046
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => callsites count before spliiting 257 with id = 1980 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2051 currentId 1980
Added AND Nodes: 2050 2051
4 => callsites count before spliiting 237 with id = 2040 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2056 currentId 2040
Added AND Nodes: 2055 2056
6 => callsites count before spliiting 219 with id = 2011 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2061 currentId 2011
Added AND Nodes: 2060 2061
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
5 => callsites count before spliiting 235 with id = 2005 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2066 currentId 2005
Added AND Nodes: 2065 2066
3 => callsites count before spliiting 67 with id = 1995 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2071 currentId 1995
Added AND Nodes: 2070 2071
4 => callsites count before spliiting 279 with id = 2055 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2076 currentId 2055
Added AND Nodes: 2075 2076
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => callsites count before spliiting 257 with id = 2076 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2081 currentId 2076
Added AND Nodes: 2080 2081
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 226 with id = 2046 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2086 currentId 2046
Added AND Nodes: 2085 2086
9 => callsites count before spliiting 209 with id = 2031 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2091 currentId 2031
Added AND Nodes: 2090 2091
11 => callsites count before spliiting 261 with id = 2085 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2096 currentId 2085
Added AND Nodes: 2095 2096
6 => callsites count before spliiting 221 with id = 2061 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2101 currentId 2061
Added AND Nodes: 2100 2101
11 => callsites count before spliiting 268 with id = 2095 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2106 currentId 2095
Added AND Nodes: 2105 2106
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
9 => callsites count before spliiting 250 with id = 2090 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2111 currentId 2090
Added AND Nodes: 2110 2111
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 271 with id = 2105 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2116 currentId 2105
Added AND Nodes: 2115 2116
11 => callsites count before spliiting 282 with id = 2115 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2121 currentId 2115
Added AND Nodes: 2120 2121
8 => callsites count before spliiting 202 with id = 1956 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 2126 currentId 1956
Added AND Nodes: 2125 2126
7 => callsites count before spliiting 214 with id = 2050 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2131 currentId 2050
Added AND Nodes: 2130 2131
8 => LOOP outcome: Correct & reachbound = True
Added New : 
8 : 
11 => callsites count before spliiting 292 with id = 2120 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2136 currentId 2120
Added AND Nodes: 2135 2136
5 => callsites count before spliiting 216 with id = 2065 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2141 currentId 2065
Added AND Nodes: 2140 2141
9 => callsites count before spliiting 278 with id = 2110 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2146 currentId 2110
Added AND Nodes: 2145 2146
3 => callsites count before spliiting 54 with id = 2070 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2151 currentId 2070
Added AND Nodes: 2150 2151
11 => callsites count before spliiting 311 with id = 2135 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2156 currentId 2135
Added AND Nodes: 2155 2156
4 => callsites count before spliiting 278 with id = 2021 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2161 currentId 2021
Added AND Nodes: 2160 2161
9 => callsites count before spliiting 287 with id = 2145 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2166 currentId 2145
Added AND Nodes: 2165 2166
11 => callsites count before spliiting 336 with id = 2155 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2171 currentId 2155
Added AND Nodes: 2170 2171
6 => callsites count before spliiting 214 with id = 2100 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2176 currentId 2100
Added AND Nodes: 2175 2176
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 356 with id = 2170 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2181 currentId 2170
Added AND Nodes: 2180 2181
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 378 with id = 2180 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2186 currentId 2180
Added AND Nodes: 2185 2186
11 => callsites count before spliiting 384 with id = 2185 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2191 currentId 2185
Added AND Nodes: 2190 2191
3 => callsites count before spliiting 51 with id = 2150 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2196 currentId 2150
Added AND Nodes: 2195 2196
3 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
11 => callsites count before spliiting 397 with id = 2190 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2201 currentId 2190
Added AND Nodes: 2200 2201
11 => callsites count before spliiting 408 with id = 2200 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2206 currentId 2200
Added AND Nodes: 2205 2206
4 => callsites count before spliiting 298 with id = 2161 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2211 currentId 2161
Added AND Nodes: 2210 2211
3 => callsites count before spliiting 56 with id = 2196 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2216 currentId 2196
Added AND Nodes: 2215 2216
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
2 => callsites count before spliiting 59 with id = 2016 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2221 currentId 2016
Added AND Nodes: 2220 2221
4 => callsites count before spliiting 259 with id = 2210 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2226 currentId 2210
Added AND Nodes: 2225 2226
6 => callsites count before spliiting 205 with id = 2176 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2231 currentId 2176
Added AND Nodes: 2230 2231
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 56 with id = 1966 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2236 currentId 1966
Added AND Nodes: 2235 2236
5 => callsites count before spliiting 238 with id = 2140 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2241 currentId 2140
Added AND Nodes: 2240 2241
3 => callsites count before spliiting 55 with id = 2215 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2246 currentId 2215
Added AND Nodes: 2245 2246
3 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 237 with id = 2225 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2251 currentId 2225
Added AND Nodes: 2250 2251
0 => callsites count before spliiting 52 with id = 2235 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2256 currentId 2235
Added AND Nodes: 2255 2256
3 => callsites count before spliiting 65 with id = 2246 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2261 currentId 2246
Added AND Nodes: 2260 2261
3 => callsites count before spliiting 51 with id = 2260 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2266 currentId 2260
Added AND Nodes: 2265 2266
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 58 with id = 2255 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2271 currentId 2255
Added AND Nodes: 2270 2271
6 => callsites count before spliiting 215 with id = 2231 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2276 currentId 2231
Added AND Nodes: 2275 2276
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
3 => callsites count before spliiting 56 with id = 2266 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2281 currentId 2266
Added AND Nodes: 2280 2281
11 => callsites count before spliiting 218 with id = 2206 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2286 currentId 2206
Added AND Nodes: 2285 2286
2 => callsites count before spliiting 68 with id = 2220 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2291 currentId 2220
Added AND Nodes: 2290 2291
4 => callsites count before spliiting 213 with id = 2250 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2296 currentId 2250
Added AND Nodes: 2295 2296
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 60 with id = 2270 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2301 currentId 2270
Added AND Nodes: 2300 2301
5 => callsites count before spliiting 233 with id = 2240 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2306 currentId 2240
Added AND Nodes: 2305 2306
0 => callsites count before spliiting 66 with id = 2300 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2311 currentId 2300
Added AND Nodes: 2310 2311
3 => callsites count before spliiting 52 with id = 2280 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2316 currentId 2280
Added AND Nodes: 2315 2316
0 => callsites count before spliiting 52 with id = 2310 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2321 currentId 2310
Added AND Nodes: 2320 2321
6 => callsites count before spliiting 206 with id = 2276 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2326 currentId 2276
Added AND Nodes: 2325 2326
0 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 62 with id = 2315 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2331 currentId 2315
Added AND Nodes: 2330 2331
4 => callsites count before spliiting 247 with id = 2295 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2336 currentId 2295
Added AND Nodes: 2335 2336
2 => callsites count before spliiting 51 with id = 2290 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2341 currentId 2290
Added AND Nodes: 2340 2341
3 => callsites count before spliiting 68 with id = 2330 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2346 currentId 2330
Added AND Nodes: 2345 2346
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 52 with id = 2321 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2351 currentId 2321
Added AND Nodes: 2350 2351
11 => callsites count before spliiting 202 with id = 2286 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2356 currentId 2286
Added AND Nodes: 2355 2356
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
3 => callsites count before spliiting 52 with id = 2346 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2361 currentId 2346
Added AND Nodes: 2360 2361
5 => callsites count before spliiting 247 with id = 2305 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2366 currentId 2305
Added AND Nodes: 2365 2366
4 => callsites count before spliiting 228 with id = 2335 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2371 currentId 2335
Added AND Nodes: 2370 2371
3 => callsites count before spliiting 51 with id = 2360 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2376 currentId 2360
Added AND Nodes: 2375 2376
6 => callsites count before spliiting 204 with id = 2325 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2381 currentId 2325
Added AND Nodes: 2380 2381
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 209 with id = 2146 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2386 currentId 2146
Added AND Nodes: 2385 2386
3 => callsites count before spliiting 50 with id = 2375 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2391 currentId 2375
Added AND Nodes: 2390 2391
3 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 51 with id = 2350 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2396 currentId 2350
Added AND Nodes: 2395 2396
2 => callsites count before spliiting 59 with id = 2340 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2401 currentId 2340
Added AND Nodes: 2400 2401
0 => callsites count before spliiting 58 with id = 2395 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2406 currentId 2395
Added AND Nodes: 2405 2406
4 => callsites count before spliiting 227 with id = 2370 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2411 currentId 2370
Added AND Nodes: 2410 2411
9 => callsites count before spliiting 220 with id = 2385 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2416 currentId 2385
Added AND Nodes: 2415 2416
0 => callsites count before spliiting 64 with id = 2405 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2421 currentId 2405
Added AND Nodes: 2420 2421
11 => callsites count before spliiting 208 with id = 2356 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2426 currentId 2356
Added AND Nodes: 2425 2426
11 => callsites count before spliiting 257 with id = 2425 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2431 currentId 2425
Added AND Nodes: 2430 2431
6 => callsites count before spliiting 218 with id = 2381 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2436 currentId 2381
Added AND Nodes: 2435 2436
0 => callsites count before spliiting 50 with id = 2420 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2441 currentId 2420
Added AND Nodes: 2440 2441
11 => callsites count before spliiting 265 with id = 2430 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2446 currentId 2430
Added AND Nodes: 2445 2446
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 280 with id = 2445 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2451 currentId 2445
Added AND Nodes: 2450 2451
11 => callsites count before spliiting 297 with id = 2450 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2456 currentId 2450
Added AND Nodes: 2455 2456
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
4 => callsites count before spliiting 205 with id = 2410 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2461 currentId 2410
Added AND Nodes: 2460 2461
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
0 => callsites count before spliiting 52 with id = 2440 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2466 currentId 2440
Added AND Nodes: 2465 2466
0 => LOOP outcome: Correct & reachbound = True
11 => callsites count before spliiting 314 with id = 2455 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2471 currentId 2455
Added AND Nodes: 2470 2471
11 => callsites count before spliiting 317 with id = 2470 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2476 currentId 2470
Added AND Nodes: 2475 2476
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 56 with id = 2466 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2481 currentId 2466
Added AND Nodes: 2480 2481
0 => LOOP outcome: Correct & reachbound = True
11 => callsites count before spliiting 239 with id = 2476 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2486 currentId 2476
Added AND Nodes: 2485 2486
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => callsites count before spliiting 217 with id = 2436 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2491 currentId 2436
Added AND Nodes: 2490 2491
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
0 => callsites count before spliiting 52 with id = 2481 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2496 currentId 2481
Added AND Nodes: 2495 2496
0 => LOOP outcome: Correct & reachbound = True
7 => callsites count before spliiting 206 with id = 2130 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2501 currentId 2130
Added AND Nodes: 2500 2501
0 => callsites count before spliiting 56 with id = 2496 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2506 currentId 2496
Added AND Nodes: 2505 2506
4 => callsites count before spliiting 245 with id = 2461 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2511 currentId 2461
Added AND Nodes: 2510 2511
0 => LOOP outcome: Correct & reachbound = True
0 => callsites count before spliiting 52 with id = 2506 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2516 currentId 2506
Added AND Nodes: 2515 2516
0 => LOOP outcome: Correct & reachbound = True
4 => callsites count before spliiting 205 with id = 2510 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2521 currentId 2510
Added AND Nodes: 2520 2521
0 => callsites count before spliiting 56 with id = 2516 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2526 currentId 2516
Added AND Nodes: 2525 2526
6 => callsites count before spliiting 299 with id = 2491 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2531 currentId 2491
0 => LOOP outcome: Correct & reachbound = True
Added AND Nodes: 2530 2531
9 => callsites count before spliiting 232 with id = 2386 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2536 currentId 2386
Added AND Nodes: 2535 2536
9 => callsites count before spliiting 264 with id = 2535 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2541 currentId 2535
Added AND Nodes: 2540 2541
0 => callsites count before spliiting 52 with id = 2526 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2546 currentId 2526
Added AND Nodes: 2545 2546
0 => LOOP outcome: Correct & reachbound = True
6 => callsites count before spliiting 207 with id = 2530 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2551 currentId 2530
Added AND Nodes: 2550 2551
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 278 with id = 2540 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2556 currentId 2540
Added AND Nodes: 2555 2556
3 => callsites count before spliiting 50 with id = 2391 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2561 currentId 2391
Added AND Nodes: 2560 2561
3 => LOOP outcome: Correct & reachbound = True
2 => callsites count before spliiting 51 with id = 2400 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 2566 currentId 2400
Added AND Nodes: 2565 2566
0 => callsites count before spliiting 56 with id = 2546 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 2571 currentId 2546
Added AND Nodes: 2570 2571
9 => callsites count before spliiting 298 with id = 2555 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2576 currentId 2555
Added AND Nodes: 2575 2576
0 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 64 with id = 2561 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2581 currentId 2561
Added AND Nodes: 2580 2581
9 => callsites count before spliiting 329 with id = 2575 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2586 currentId 2575
Added AND Nodes: 2585 2586
3 => callsites count before spliiting 50 with id = 2580 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2591 currentId 2580
Added AND Nodes: 2590 2591
9 => callsites count before spliiting 360 with id = 2585 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2596 currentId 2585
Added AND Nodes: 2595 2596
3 => callsites count before spliiting 56 with id = 2590 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2601 currentId 2590
Added AND Nodes: 2600 2601
6 => callsites count before spliiting 210 with id = 2551 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 2606 currentId 2551
Added AND Nodes: 2605 2606
9 => callsites count before spliiting 395 with id = 2595 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2611 currentId 2595
Added AND Nodes: 2610 2611
3 => callsites count before spliiting 58 with id = 2600 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2616 currentId 2600
Added AND Nodes: 2615 2616
9 => callsites count before spliiting 430 with id = 2610 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2621 currentId 2610
Added AND Nodes: 2620 2621
3 => callsites count before spliiting 64 with id = 2615 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2626 currentId 2615
Added AND Nodes: 2625 2626
2 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 207 with id = 2520 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2631 currentId 2520
Added AND Nodes: 2630 2631
9 => callsites count before spliiting 465 with id = 2620 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2636 currentId 2620
Added AND Nodes: 2635 2636
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
3 => callsites count before spliiting 50 with id = 2625 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2641 currentId 2625
Added AND Nodes: 2640 2641
3 => LOOP outcome: Correct & reachbound = True
3 => callsites count before spliiting 52 with id = 2641 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2646 currentId 2641
Added AND Nodes: 2645 2646
3 => callsites count before spliiting 51 with id = 2645 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2651 currentId 2645
Added AND Nodes: 2650 2651
5 => callsites count before spliiting 201 with id = 2365 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 2656 currentId 2365
Added AND Nodes: 2655 2656
3 => callsites count before spliiting 58 with id = 2650 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2661 currentId 2650
Added AND Nodes: 2660 2661
7 => callsites count before spliiting 200 with id = 2500 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 2666 currentId 2500
Added AND Nodes: 2665 2666
3 => callsites count before spliiting 64 with id = 2660 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2671 currentId 2660
Added AND Nodes: 2670 2671
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 50 with id = 2670 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2676 currentId 2670
Added AND Nodes: 2675 2676
9 => callsites count before spliiting 233 with id = 2636 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2681 currentId 2636
Added AND Nodes: 2680 2681
3 => callsites count before spliiting 52 with id = 2675 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2686 currentId 2675
Added AND Nodes: 2685 2686
9 => callsites count before spliiting 266 with id = 2680 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2691 currentId 2680
Added AND Nodes: 2690 2691
3 => callsites count before spliiting 58 with id = 2685 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2696 currentId 2685
Added AND Nodes: 2695 2696
3 => LOOP outcome: Correct & reachbound = True
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 52 with id = 2696 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2701 currentId 2696
Added AND Nodes: 2700 2701
3 => LOOP outcome: Correct & reachbound = True
11 => callsites count before spliiting 253 with id = 2486 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2706 currentId 2486
Added AND Nodes: 2705 2706
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 55 with id = 321 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 2711 currentId 321
Added AND Nodes: 2710 2711
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 56 with id = 2701 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 2716 currentId 2701
Added AND Nodes: 2715 2716
3 => LOOP outcome: Correct & reachbound = True
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 202 with id = 2630 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 2721 currentId 2630
Added AND Nodes: 2720 2721
9 => callsites count before spliiting 231 with id = 2691 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 2726 currentId 2691
Added AND Nodes: 2725 2726
9 => LOOP outcome: Correct & reachbound = True
Added New : 
9 : 
11 => callsites count before spliiting 202 with id = 2706 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 2731 currentId 2706
Added AND Nodes: 2730 2731
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on 205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--wan--hdlc_fr.ko-entry_point_false-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
for clientid : 6 algo id is 1
for clientid : 5 algo id is 1
for clientid : 7 algo id is 1
for clientid : 8 algo id is 2
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
0 => Spliiting due to client waiting
0 => callsites count before spliiting 14 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 21 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 31 currentId 21
8 => Spliiting due to client waiting
8 => callsites count before spliiting 14 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 31 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 31 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 41 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 18 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 46 currentId 26
Added AND Nodes: 45 46
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 46 from client 1 to 2
2 => after replyFromServer: 100
9 => Spliiting due to client waiting
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => callsites count before spliiting 1 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 36
7 => Spliiting due to client waiting
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
9 => outcome: Correct
7 => sending calltree : splitMode 0 mustReachId 56 currentId 41
for clientid : 9 algo id is 2
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 61 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 66 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 66 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 66
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 71 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 81 currentId 51
Added AND Nodes: 80 81
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 81 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 76 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 86 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 12 with id = 46 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 91 currentId 46
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 86 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 96 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 90 91
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 91 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 101 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 101 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 106 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => Spliiting due to client waiting
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => callsites count before spliiting 16 with id = 81 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 111 currentId 81
Added AND Nodes: 110 111
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 111 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 106 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 116 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 116 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 121 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => Spliiting due to client waiting
3 => callsites count before spliiting 7 with id = 91 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 126 currentId 91
Added AND Nodes: 125 126
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 126 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 121 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 131 currentId 121
Added AND Nodes: 130 131
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 131 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 131 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 136 currentId 131
Added AND Nodes: 135 136
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 136 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 12 with id = 111 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 141 currentId 111
Added AND Nodes: 140 141
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 141 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 136 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 146 currentId 136
Added AND Nodes: 145 146
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 146 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 146 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 151 currentId 146
Added AND Nodes: 150 151
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 151 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 151 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 156 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 6 with id = 126 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 161 currentId 126
Added AND Nodes: 160 161
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 161 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 156 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 166 currentId 156
Added AND Nodes: 165 166
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 166 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 7 with id = 141 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 171 currentId 141
Added AND Nodes: 170 171
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 171 from client 9 to 10
10 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 166 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 166
Added AND Nodes: 175 176
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 176 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 176 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 181 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 181 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 186 currentId 181
Added AND Nodes: 185 186
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 186 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 186 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 191 currentId 186
Added AND Nodes: 190 191
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 191 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 15 with id = 190 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 196 currentId 190
Added AND Nodes: 195 196
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 196 from client 7 to 6
6 => after replyFromServer: 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 161 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 201 currentId 161
Added AND Nodes: 200 201
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 201 from client 1 to 2
2 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 191 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 206 currentId 191
Added AND Nodes: 205 206
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 206 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
10 => Spliiting due to client waiting
10 => callsites count before spliiting 6 with id = 171 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 211 currentId 171
Added AND Nodes: 210 211
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 211 from client 10 to 11
11 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 206 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 216 currentId 206
Added AND Nodes: 215 216
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 216 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
5 => outcome: Correct
10 : 
for clientid : 5 algo id is 1
10 => outcome: Correct
for clientid : 10 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 196 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 221 currentId 196
Added AND Nodes: 220 221
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 221 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 216 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 226 currentId 216
Added AND Nodes: 225 226
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 226 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 226 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 231 currentId 226
Added AND Nodes: 230 231
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 231 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 221 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 236 currentId 221
Added AND Nodes: 235 236
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 236 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 14 with id = 211 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 241 currentId 211
Added AND Nodes: 240 241
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 241 from client 11 to 8
8 => after replyFromServer: 50
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 231 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 246 currentId 231
Added AND Nodes: 245 246
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 246 from client 6 to 5
5 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 246 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 251 currentId 246
Added AND Nodes: 250 251
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 251 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 5 with id = 236 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 256 currentId 236
Added AND Nodes: 255 256
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 256 from client 4 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 7 with id = 201 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 261 currentId 201
Added AND Nodes: 260 261
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 261 from client 2 to 3
3 => after replyFromServer: 100
4 => Spliiting due to client waiting
4 => callsites count before spliiting 38 with id = 255 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 266 currentId 255
Added AND Nodes: 265 266
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 266 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 35 with id = 256 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 271 currentId 256
Added AND Nodes: 270 271
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 271 from client 6 to 7
7 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 18 with id = 241 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 276 currentId 241
Added AND Nodes: 275 276
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 276 from client 8 to 9
9 => after replyFromServer: 50
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
2 => Spliiting due to client waiting
2 => callsites count before spliiting 12 with id = 260 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 281 currentId 260
Added AND Nodes: 280 281
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 281 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
5 => Spliiting due to client waiting
5 => callsites count before spliiting 32 with id = 266 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 286 currentId 266
Added AND Nodes: 285 286
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 286 from client 5 to 4
4 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 84 with id = 275 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 291 currentId 275
Added AND Nodes: 290 291
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 291 from client 8 to 10
10 => after replyFromServer: 50
5 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 33 with id = 271 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 296 currentId 271
Added AND Nodes: 295 296
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 296 from client 7 to 6
6 => after replyFromServer: 0
3 => Spliiting due to client waiting
3 => callsites count before spliiting 7 with id = 261 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 301 currentId 261
Added AND Nodes: 300 301
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 301 from client 3 to 1
1 => after replyFromServer: 100
0 => Spliiting due to client waiting
0 => callsites count before spliiting 4 with id = 281 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 306 currentId 281
Added AND Nodes: 305 306
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 306 from client 0 to 2
2 => after replyFromServer: 100
8 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
8 => callsites count before spliiting 108 with id = 290 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 311 currentId 290
Added AND Nodes: 310 311
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 311 from client 8 to 11
11 => after replyFromServer: 50
4 => Spliiting due to client waiting
4 => callsites count before spliiting 35 with id = 286 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 316 currentId 286
Added AND Nodes: 315 316
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 316 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => callsites count before spliiting 233 with id = 285 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 321 currentId 285
Added AND Nodes: 320 321
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 321 from client 5 to 4
4 => after replyFromServer: 0
7 => callsites count before spliiting 238 with id = 295 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 326 currentId 295
Added AND Nodes: 325 326
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 326 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 33 with id = 316 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 331 currentId 316
Added AND Nodes: 330 331
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 331 from client 6 to 7
7 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => callsites count before spliiting 209 with id = 330 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 336 currentId 330
Added AND Nodes: 335 336
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 336 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
3 => callsites count before spliiting 62 with id = 300 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 341 currentId 300
Added AND Nodes: 340 341
2 => callsites count before spliiting 59 with id = 306 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 346 currentId 306
Added AND Nodes: 345 346
2 => LOOP outcome: Correct & reachbound = False
5 => Spliiting due to client waiting
5 => callsites count before spliiting 144 with id = 326 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 351 currentId 326
Added AND Nodes: 350 351
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 351 from client 5 to 6
6 => after replyFromServer: 0
0 => callsites count before spliiting 50 with id = 305 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 356 currentId 305
Added AND Nodes: 355 356
5 => callsites count before spliiting 276 with id = 350 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 361 currentId 350
Added AND Nodes: 360 361
8 => callsites count before spliiting 214 with id = 310 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 366 currentId 310
Added AND Nodes: 365 366
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 361 from client 5 to 6
6 => after replyFromServer: 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => outcome: Errors
Outcome NOK bestAlgo updated to 2
Verification Outcome : NOK
Time Taken : 23.643763
bestAlgo: 2
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on linux-3.8-rc1-32_7a-drivers--hwmon--w83793.ko-ldv_main0_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 5 algo id is 1
for clientid : 4 algo id is 1
for clientid : 7 algo id is 1
for clientid : 6 algo id is 1
for clientid : 8 algo id is 2
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 5
Algo : 1 started with splitmode 0
5 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
0 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 11 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 21 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
8 => Spliiting due to client waiting
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 6 and splitMode 100
4 => Spliiting due to client waiting
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
4 => callsites count before spliiting 1 with id = 21 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 31 currentId 21
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
Added AND Nodes: 30 31
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 31 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 31 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 41 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 41 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 46 from client 6 to 5
5 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
1 => Spliiting due to client waiting
1 => callsites count before spliiting 7 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 51 currentId 26
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 56 currentId 36
Added AND Nodes: 50 51
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 51 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
Added AND Nodes: 55 56
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 56 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 46 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 61 currentId 46
Added AND Nodes: 60 61
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 61 from client 5 to 4
4 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 61 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 66 from client 4 to 7
7 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 56 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 71 currentId 56
Added AND Nodes: 70 71
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 71 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 66 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 76 currentId 66
Added AND Nodes: 75 76
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 76 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 71 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 81 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 2 with id = 76 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 5
5 => after replyFromServer: 0
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 16 with id = 85 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 85
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 4
4 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 6 with id = 86 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 96 from client 5 to 7
7 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 91 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 101 from client 4 to 6
6 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 81 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 106 currentId 81
Added AND Nodes: 105 106
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 106 from client 8 to 9
9 => after replyFromServer: 50
5 => Spliiting due to client waiting
5 => callsites count before spliiting 13 with id = 95 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 111 currentId 95
Added AND Nodes: 110 111
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 111 from client 5 to 4
4 => after replyFromServer: 0
2 => Spliiting due to client waiting
2 => callsites count before spliiting 6 with id = 51 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 116 currentId 51
Added AND Nodes: 115 116
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 116 from client 2 to 3
3 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 6 with id = 105 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 121 currentId 105
Added AND Nodes: 120 121
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 121 from client 8 to 10
10 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 5 with id = 106 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 126 currentId 106
Added AND Nodes: 125 126
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 126 from client 9 to 11
11 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => callsites count before spliiting 16 with id = 125 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 131 currentId 125
Added AND Nodes: 130 131
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 131 from client 9 to 8
8 => after replyFromServer: 50
3 => Spliiting due to client waiting
3 => callsites count before spliiting 3 with id = 116 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 136 currentId 116
Added AND Nodes: 135 136
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 136 from client 3 to 0
0 => after replyFromServer: 100
2 => Spliiting due to client waiting
2 => callsites count before spliiting 9 with id = 115 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 141 currentId 115
Added AND Nodes: 140 141
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 141 from client 2 to 1
1 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
0 => Spliiting due to client waiting
0 => callsites count before spliiting 5 with id = 136 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 146 currentId 136
Added AND Nodes: 145 146
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 146 from client 0 to 2
2 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
1 => Spliiting due to client waiting
1 => callsites count before spliiting 2 with id = 141 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 151 from client 1 to 0
0 => after replyFromServer: 100
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on linux-3.8-rc1-32_7a-drivers--media--usb--em28xx--em28xx.ko-ldv_main0_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 4 algo id is 1
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
Added OR Node: 6
for clientid : 8 algo id is 2
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
8 => Spliiting due to client waiting
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 26 currentId 16
Added AND Nodes: 25 26
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 26 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 31 currentId 21
Added AND Nodes: 30 31
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 31 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
0 => Spliiting due to client waiting
0 => callsites count before spliiting 8 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 36 currentId 6
Added AND Nodes: 35 36
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 36 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 31 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 46 currentId 41
Added AND Nodes: 45 46
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 46 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 8 with id = 26 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 26
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 9 with id = 36 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 56 currentId 36
Added AND Nodes: 55 56
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 56 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 46 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 46
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 66 currentId 51
Added AND Nodes: 65 66
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 66 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 71 currentId 61
Added AND Nodes: 70 71
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 71 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 71 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 76 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 2 with id = 66 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 81 currentId 66
Added AND Nodes: 80 81
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 81 from client 11 to 8
8 => after replyFromServer: 50
7 => Spliiting due to client waiting
7 => callsites count before spliiting 2 with id = 76 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 86 currentId 76
Added AND Nodes: 85 86
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 86 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 16 with id = 85 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 91 currentId 85
Added AND Nodes: 90 91
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 91 from client 7 to 5
5 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 8 with id = 86 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 96 currentId 86
Added AND Nodes: 95 96
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 96 from client 4 to 6
6 => after replyFromServer: 0
4 => Spliiting due to client waiting
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 91 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 101 from client 5 to 7
7 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 36 with id = 95 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 106 currentId 95
Added AND Nodes: 105 106
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 106 from client 4 to 5
5 => after replyFromServer: 0
4 => callsites count before spliiting 206 with id = 105 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 111 currentId 105
Added AND Nodes: 110 111
6 => callsites count before spliiting 259 with id = 96 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 116 currentId 96
Added AND Nodes: 115 116
7 => callsites count before spliiting 219 with id = 101 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 121 currentId 101
Added AND Nodes: 120 121
5 => callsites count before spliiting 202 with id = 106 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 126 currentId 106
Added AND Nodes: 125 126
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 430 with id = 110 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 131 currentId 110
Added AND Nodes: 130 131
5 => callsites count before spliiting 229 with id = 126 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 136 currentId 126
Added AND Nodes: 135 136
6 => callsites count before spliiting 388 with id = 115 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 141 currentId 115
Added AND Nodes: 140 141
7 => callsites count before spliiting 251 with id = 120 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 146 currentId 120
Added AND Nodes: 145 146
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 429 with id = 130 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 151 currentId 130
Added AND Nodes: 150 151
5 => callsites count before spliiting 267 with id = 135 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 156 currentId 135
Added AND Nodes: 155 156
4 => callsites count before spliiting 361 with id = 150 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 161 currentId 150
Added AND Nodes: 160 161
5 => callsites count before spliiting 282 with id = 155 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 166 currentId 155
Added AND Nodes: 165 166
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 467 with id = 140 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 171 currentId 140
Added AND Nodes: 170 171
4 => callsites count before spliiting 304 with id = 160 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 176 currentId 160
Added AND Nodes: 175 176
7 => callsites count before spliiting 338 with id = 146 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 181 currentId 146
Added AND Nodes: 180 181
6 => callsites count before spliiting 388 with id = 170 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 186 currentId 170
Added AND Nodes: 185 186
5 => callsites count before spliiting 295 with id = 166 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 191 currentId 166
Added AND Nodes: 190 191
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 214 with id = 175 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 196 currentId 175
Added AND Nodes: 195 196
6 => callsites count before spliiting 455 with id = 185 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 201 currentId 185
Added AND Nodes: 200 201
7 => callsites count before spliiting 264 with id = 180 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 206 currentId 180
Added AND Nodes: 205 206
6 => callsites count before spliiting 513 with id = 200 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 211 currentId 200
Added AND Nodes: 210 211
6 => callsites count before spliiting 452 with id = 210 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 216 currentId 210
Added AND Nodes: 215 216
5 => callsites count before spliiting 210 with id = 191 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 221 currentId 191
Added AND Nodes: 220 221
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 363 with id = 215 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 226 currentId 215
Added AND Nodes: 225 226
4 => callsites count before spliiting 282 with id = 195 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 231 currentId 195
Added AND Nodes: 230 231
6 => callsites count before spliiting 273 with id = 225 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 236 currentId 225
Added AND Nodes: 235 236
4 => callsites count before spliiting 228 with id = 230 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 241 currentId 230
Added AND Nodes: 240 241
6 => callsites count before spliiting 280 with id = 235 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 246 currentId 235
Added AND Nodes: 245 246
5 => callsites count before spliiting 317 with id = 221 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 251 currentId 221
Added AND Nodes: 250 251
7 => callsites count before spliiting 304 with id = 205 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 256 currentId 205
Added AND Nodes: 255 256
4 => callsites count before spliiting 243 with id = 240 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 261 currentId 240
Added AND Nodes: 260 261
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
6 => callsites count before spliiting 203 with id = 245 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 266 currentId 245
Added AND Nodes: 265 266
4 => callsites count before spliiting 226 with id = 260 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 271 currentId 260
Added AND Nodes: 270 271
7 => callsites count before spliiting 222 with id = 255 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 276 currentId 255
Added AND Nodes: 275 276
6 => callsites count before spliiting 225 with id = 265 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 281 currentId 265
Added AND Nodes: 280 281
6 => callsites count before spliiting 203 with id = 280 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 286 currentId 280
Added AND Nodes: 285 286
6 => callsites count before spliiting 214 with id = 285 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 291 currentId 285
Added AND Nodes: 290 291
5 => callsites count before spliiting 365 with id = 251 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 296 currentId 251
Added AND Nodes: 295 296
5 => callsites count before spliiting 235 with id = 295 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 301 currentId 295
Added AND Nodes: 300 301
6 => callsites count before spliiting 200 with id = 290 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 306 currentId 290
Added AND Nodes: 305 306
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 200 with id = 306 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 311 currentId 306
Added AND Nodes: 310 311
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 204 with id = 311 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 316 currentId 311
Added AND Nodes: 315 316
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 207 with id = 316 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 321 currentId 316
Added AND Nodes: 320 321
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
8 => Spliiting due to client waiting
8 => callsites count before spliiting 7 with id = 81 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 326 currentId 81
Added AND Nodes: 325 326
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 326 from client 8 to 9
9 => after replyFromServer: 50
2 => Spliiting due to client waiting
2 => callsites count before spliiting 8 with id = 56 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 331 currentId 56
Added AND Nodes: 330 331
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 331 from client 2 to 3
3 => after replyFromServer: 100
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => Spliiting due to client waiting
11 => callsites count before spliiting 8 with id = 80 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 336 currentId 80
Added AND Nodes: 335 336
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 336 from client 11 to 10
10 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 7 with id = 336 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 341 currentId 336
Added AND Nodes: 340 341
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 341 from client 10 to 11
11 => after replyFromServer: 50
6 => callsites count before spliiting 217 with id = 286 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 346 currentId 286
Added AND Nodes: 345 346
6 => callsites count before spliiting 207 with id = 345 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 351 currentId 345
Added AND Nodes: 350 351
6 => callsites count before spliiting 254 with id = 350 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 356 currentId 350
Added AND Nodes: 355 356
6 => callsites count before spliiting 265 with id = 355 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 361 currentId 355
Added AND Nodes: 360 361
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => outcome: Errors
Outcome NOK bestAlgo updated to 1
Verification Outcome : NOK
Time Taken : 1355.138802
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on linux-3.8-rc1-32_7a-drivers--scsi--mpt3sas--mpt3sas.ko-ldv_main4_false-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 3 algo id is 0
for clientid : 4 algo id is 1
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
for clientid : 5 algo id is 1
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
for clientid : 6 algo id is 1
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
for clientid : 8 algo id is 2
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 9 algo id is 2
4 => Spliiting due to client waiting
for clientid : 10 algo id is 2
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
0 => Spliiting due to client waiting
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 26 currentId 21
Added AND Nodes: 25 26
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 26 from client 5 to 6
6 => after replyFromServer: 0
0 => Spliiting due to client waiting
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 12 with id = 6 and splitMode 100
5 => outcome: Correct
0 => sending calltree : splitMode 100 mustReachId 31 currentId 6
8 => Spliiting due to client waiting
Added AND Nodes: 30 31
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 31 from client 0 to 1
for clientid : 5 algo id is 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 36 currentId 16
Added AND Nodes: 35 36
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 36 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 26 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 26
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 36 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 46 currentId 36
Added AND Nodes: 45 46
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 46 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 51 currentId 41
Added AND Nodes: 50 51
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 51 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 46 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 56 currentId 46
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 51 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 51
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
Added AND Nodes: 55 56
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 56 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 56 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 71 currentId 56
Added AND Nodes: 70 71
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 71 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
8 => Spliiting due to client waiting
8 => callsites count before spliiting 1 with id = 71 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 76 currentId 71
Added AND Nodes: 75 76
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 76 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 2 with id = 76 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 81 currentId 76
Added AND Nodes: 80 81
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 81 from client 9 to 10
10 => after replyFromServer: 50
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
1 => Spliiting due to client waiting
1 => callsites count before spliiting 11 with id = 31 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 86 currentId 31
Added AND Nodes: 85 86
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 86 from client 1 to 2
2 => after replyFromServer: 100
1 => LOOP outcome: Correct & reachbound = False
1 => outcome: Correct
for clientid : 1 algo id is 0
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 91 currentId 66
Added AND Nodes: 90 91
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 91 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 11 with id = 81 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 96 currentId 81
Added AND Nodes: 95 96
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 96 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 91 and splitMode 0
10 => outcome: Correct
7 => sending calltree : splitMode 0 mustReachId 101 currentId 91
Added AND Nodes: 100 101
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 101 from client 7 to 4
for clientid : 10 algo id is 2
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 101 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 106 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 96 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 111 currentId 96
Added AND Nodes: 110 111
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 111 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 106 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 116 currentId 106
Added AND Nodes: 115 116
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 116 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 116 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 121 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 3 with id = 121 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 126 from client 7 to 4
4 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 14 with id = 125 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 131 currentId 125
Added AND Nodes: 130 131
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 131 from client 7 to 5
5 => after replyFromServer: 0
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => Spliiting due to client waiting
7 => callsites count before spliiting 22 with id = 130 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 136 currentId 130
Added AND Nodes: 135 136
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 136 from client 7 to 6
6 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 5 with id = 126 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 141 currentId 126
Added AND Nodes: 140 141
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 141 from client 4 to 7
7 => after replyFromServer: 0
4 => callsites count before spliiting 203 with id = 140 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 146 currentId 140
Added AND Nodes: 145 146
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 235 with id = 136 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 151 currentId 136
Added AND Nodes: 150 151
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => callsites count before spliiting 354 with id = 151 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 156 currentId 151
Added AND Nodes: 155 156
4 => callsites count before spliiting 420 with id = 146 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 161 currentId 146
Added AND Nodes: 160 161
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => Spliiting due to client waiting
2 => callsites count before spliiting 2 with id = 86 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 166 currentId 86
Added AND Nodes: 165 166
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 166 from client 2 to 3
3 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 111 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 171 currentId 111
Added AND Nodes: 170 171
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 171 from client 8 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
9 => Spliiting due to client waiting
9 => callsites count before spliiting 3 with id = 171 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 176 currentId 171
Added AND Nodes: 175 176
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 176 from client 9 to 10
10 => after replyFromServer: 50
9 => Spliiting due to client waiting
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 5 with id = 176 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 181 from client 10 to 11
11 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
5 => callsites count before spliiting 208 with id = 131 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 186 currentId 131
Added AND Nodes: 185 186
6 => outcome: Errors
Outcome NOK bestAlgo updated to 1
Verification Outcome : NOK
Time Taken : 1581.793847
bestAlgo: 1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
working on linux-3.8-rc1-32_7a-drivers--scsi--osst.ko-ldv_main0_sequence_infinite_withcheck_stateful_true-unreach-call.cil.out.i.bpl.bpl
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
Corral program verifier version 1.0.0.0
Corral program verifier version 1.0.0.0
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
http://localhost:5000/
for clientid : 4 algo id is 1
for clientid : 1 algo id is 0
for clientid : 2 algo id is 0
for clientid : 3 algo id is 0
for clientid : 5 algo id is 1
for clientid : 6 algo id is 1
for clientid : 8 algo id is 2
for clientid : 7 algo id is 1
Portfolio Split performed!!
0 => sending calltree : val 100 ORid 6 parentId 0
for clientid : 9 algo id is 2
for clientid : 10 algo id is 2
Added OR Node: 6
0 => sending calltree : val 0 ORid 11 parentId 6
Added OR Node: 11
OR Q: , 0
Assign partition 11 from OR Queue to 4
Algo : 1 started with splitmode 0
4 => after replyFromServer: 0
0 => sending calltree : val 50 ORid 16 parentId 6
Added OR Node: 16
OR Q: , 50
Assign partition 16 from OR Queue to 8
Algo : 2 started with splitmode 50
8 => after replyFromServer: 50
for clientid : 11 algo id is 2
4 => Spliiting due to client waiting
0 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => callsites count before spliiting 2 with id = 11 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 21 currentId 11
Added AND Nodes: 20 21
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 21 from client 4 to 5
5 => after replyFromServer: 0
0 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
0 => callsites count before spliiting 6 with id = 6 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 26 currentId 6
8 => Spliiting due to client waiting
Added AND Nodes: 25 26
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 26 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 2 with id = 16 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 31 currentId 16
Added AND Nodes: 30 31
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 31 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 21 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 36 currentId 21
Added AND Nodes: 35 36
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 36 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
1 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 36 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 41 currentId 36
9 => Spliiting due to client waiting
1 => callsites count before spliiting 13 with id = 26 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 46 currentId 26
9 => callsites count before spliiting 6 with id = 31 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 51 currentId 31
Added AND Nodes: 40 41
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 41 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
Added AND Nodes: 45 46
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 46 from client 1 to 2
2 => after replyFromServer: 100
Added AND Nodes: 50 51
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 51 from client 9 to 10
1 => LOOP outcome: Correct & reachbound = False
10 => after replyFromServer: 50
1 => outcome: Correct
for clientid : 1 algo id is 0
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => outcome: Correct
for clientid : 9 algo id is 2
7 => Spliiting due to client waiting
7 => callsites count before spliiting 4 with id = 41 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 56 currentId 41
Added AND Nodes: 55 56
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 56 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 56 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 61 currentId 56
Added AND Nodes: 60 61
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 61 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 61 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 66 currentId 61
Added AND Nodes: 65 66
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 66 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
10 => Spliiting due to client waiting
10 => callsites count before spliiting 11 with id = 51 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 71 currentId 51
Added AND Nodes: 70 71
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 71 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
2 => Spliiting due to client waiting
2 => callsites count before spliiting 16 with id = 46 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 76 currentId 46
Added AND Nodes: 75 76
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 76 from client 2 to 3
3 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 1 with id = 71 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 81 currentId 71
Added AND Nodes: 80 81
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 81 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => Spliiting due to client waiting
6 => callsites count before spliiting 15 with id = 66 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 86 currentId 66
Added AND Nodes: 85 86
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 86 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 86 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 91 currentId 86
Added AND Nodes: 90 91
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 91 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 1 with id = 91 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 96 currentId 91
Added AND Nodes: 95 96
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 96 from client 4 to 5
5 => after replyFromServer: 0
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 1 with id = 96 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 101 currentId 96
Added AND Nodes: 100 101
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 101 from client 5 to 6
6 => after replyFromServer: 0
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => outcome: Correct
for clientid : 5 algo id is 1
6 => Spliiting due to client waiting
6 => callsites count before spliiting 1 with id = 101 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 106 currentId 101
Added AND Nodes: 105 106
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 106 from client 6 to 7
7 => after replyFromServer: 0
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => outcome: Correct
for clientid : 6 algo id is 1
7 => Spliiting due to client waiting
7 => callsites count before spliiting 1 with id = 106 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 111 currentId 106
Added AND Nodes: 110 111
clientID of largest queue : 7
clientCalltreeQueue Count : 1
Assign partition 111 from client 7 to 4
4 => after replyFromServer: 0
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => outcome: Correct
for clientid : 7 algo id is 1
4 => Spliiting due to client waiting
4 => callsites count before spliiting 3 with id = 111 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 116 currentId 111
Added AND Nodes: 115 116
clientID of largest queue : 4
clientCalltreeQueue Count : 1
Assign partition 116 from client 4 to 5
5 => after replyFromServer: 0
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => outcome: Correct
for clientid : 4 algo id is 1
5 => Spliiting due to client waiting
5 => callsites count before spliiting 2 with id = 116 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 121 currentId 116
Added AND Nodes: 120 121
clientID of largest queue : 5
clientCalltreeQueue Count : 1
Assign partition 121 from client 5 to 6
6 => after replyFromServer: 0
5 => Spliiting due to client waiting
5 => Spliiting due to client waiting
6 => Spliiting due to client waiting
6 => callsites count before spliiting 5 with id = 121 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 126 currentId 121
Added AND Nodes: 125 126
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 126 from client 6 to 7
7 => after replyFromServer: 0
8 => Spliiting due to client waiting
8 => callsites count before spliiting 16 with id = 81 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 131 currentId 81
Added AND Nodes: 130 131
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 131 from client 8 to 9
9 => after replyFromServer: 50
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
3 => Spliiting due to client waiting
3 => callsites count before spliiting 9 with id = 76 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 136 currentId 76
Added AND Nodes: 135 136
clientID of largest queue : 3
clientCalltreeQueue Count : 1
Assign partition 136 from client 3 to 0
0 => after replyFromServer: 100
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
9 => Spliiting due to client waiting
9 => callsites count before spliiting 1 with id = 131 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 141 currentId 131
6 => Spliiting due to client waiting
Added AND Nodes: 140 141
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 141 from client 9 to 10
10 => after replyFromServer: 50
6 => callsites count before spliiting 10 with id = 125 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 146 currentId 125
9 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 145 146
clientID of largest queue : 6
clientCalltreeQueue Count : 1
Assign partition 146 from client 6 to 4
Added New : 
9 : 
4 => after replyFromServer: 0
9 => outcome: Correct
for clientid : 9 algo id is 2
10 => Spliiting due to client waiting
10 => callsites count before spliiting 1 with id = 141 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 151 currentId 141
Added AND Nodes: 150 151
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 151 from client 10 to 11
11 => after replyFromServer: 50
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
0 => Spliiting due to client waiting
0 => callsites count before spliiting 9 with id = 136 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 156 currentId 136
Added AND Nodes: 155 156
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 156 from client 0 to 1
1 => after replyFromServer: 100
0 => LOOP outcome: Correct & reachbound = False
0 => outcome: Correct
for clientid : 0 algo id is 0
11 => Spliiting due to client waiting
11 => callsites count before spliiting 7 with id = 151 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 161 currentId 151
Added AND Nodes: 160 161
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 161 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
6 => callsites count before spliiting 212 with id = 145 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 166 currentId 145
Added AND Nodes: 165 166
1 => Spliiting due to client waiting
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 5 with id = 156 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 171 currentId 156
Added AND Nodes: 170 171
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 171 from client 1 to 2
2 => after replyFromServer: 100
8 => Spliiting due to client waiting
8 => callsites count before spliiting 8 with id = 161 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 176 currentId 161
Added AND Nodes: 175 176
clientID of largest queue : 8
clientCalltreeQueue Count : 1
Assign partition 176 from client 8 to 9
9 => after replyFromServer: 50
8 => Spliiting due to client waiting
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 9 with id = 176 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 181 currentId 176
Added AND Nodes: 180 181
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 181 from client 9 to 10
10 => after replyFromServer: 50
7 => callsites count before spliiting 208 with id = 126 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 186 currentId 126
Added AND Nodes: 185 186
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => Spliiting due to client waiting
9 => callsites count before spliiting 16 with id = 180 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 191 currentId 180
Added AND Nodes: 190 191
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 191 from client 9 to 11
11 => after replyFromServer: 50
1 => Spliiting due to client waiting
1 => callsites count before spliiting 12 with id = 170 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 196 currentId 170
Added AND Nodes: 195 196
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 196 from client 1 to 3
3 => after replyFromServer: 100
11 => Spliiting due to client waiting
11 => callsites count before spliiting 7 with id = 191 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 201 currentId 191
Added AND Nodes: 200 201
clientID of largest queue : 11
clientCalltreeQueue Count : 1
Assign partition 201 from client 11 to 8
8 => after replyFromServer: 50
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => outcome: Correct
for clientid : 11 algo id is 2
4 => callsites count before spliiting 227 with id = 146 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 206 currentId 146
Added AND Nodes: 205 206
2 => Spliiting due to client waiting
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
2 => callsites count before spliiting 2 with id = 171 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 211 currentId 171
Added AND Nodes: 210 211
clientID of largest queue : 2
clientCalltreeQueue Count : 1
Assign partition 211 from client 2 to 0
0 => after replyFromServer: 100
2 => LOOP outcome: Correct & reachbound = False
2 => outcome: Correct
for clientid : 2 algo id is 0
3 => LOOP outcome: Correct & reachbound = False
3 => outcome: Correct
for clientid : 3 algo id is 0
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => outcome: Correct
for clientid : 8 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 25 with id = 190 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 216 currentId 190
Added AND Nodes: 215 216
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 216 from client 9 to 11
11 => after replyFromServer: 50
10 => Spliiting due to client waiting
10 => callsites count before spliiting 4 with id = 181 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 221 currentId 181
Added AND Nodes: 220 221
clientID of largest queue : 10
clientCalltreeQueue Count : 1
Assign partition 221 from client 10 to 8
8 => after replyFromServer: 50
5 => callsites count before spliiting 207 with id = 120 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 226 currentId 120
Added AND Nodes: 225 226
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
1 => Spliiting due to client waiting
1 => callsites count before spliiting 21 with id = 195 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 231 currentId 195
Added AND Nodes: 230 231
clientID of largest queue : 1
clientCalltreeQueue Count : 1
Assign partition 231 from client 1 to 2
2 => after replyFromServer: 100
0 => Spliiting due to client waiting
0 => callsites count before spliiting 2 with id = 211 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 236 currentId 211
Added AND Nodes: 235 236
clientID of largest queue : 0
clientCalltreeQueue Count : 1
Assign partition 236 from client 0 to 3
3 => after replyFromServer: 100
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => outcome: Correct
for clientid : 10 algo id is 2
9 => Spliiting due to client waiting
9 => callsites count before spliiting 38 with id = 215 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 241 currentId 215
Added AND Nodes: 240 241
clientID of largest queue : 9
clientCalltreeQueue Count : 1
Assign partition 241 from client 9 to 10
10 => after replyFromServer: 50
1 => callsites count before spliiting 59 with id = 230 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 246 currentId 230
Added AND Nodes: 245 246
6 => callsites count before spliiting 272 with id = 166 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 251 currentId 166
Added AND Nodes: 250 251
5 => callsites count before spliiting 212 with id = 226 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 256 currentId 226
Added AND Nodes: 255 256
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
4 => callsites count before spliiting 268 with id = 206 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 261 currentId 206
Added AND Nodes: 260 261
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
7 => callsites count before spliiting 205 with id = 186 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 266 currentId 186
Added AND Nodes: 265 266
2 => callsites count before spliiting 57 with id = 231 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 271 currentId 231
Added AND Nodes: 270 271
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
2 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 52 with id = 235 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 276 currentId 235
Added AND Nodes: 275 276
6 => callsites count before spliiting 224 with id = 250 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 281 currentId 250
0 => LOOP outcome: Correct & reachbound = False
Added AND Nodes: 280 281
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
11 => callsites count before spliiting 232 with id = 216 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 286 currentId 216
Added AND Nodes: 285 286
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 221 with id = 240 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 291 currentId 240
Added AND Nodes: 290 291
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 52 with id = 245 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 296 currentId 245
Added AND Nodes: 295 296
3 => callsites count before spliiting 51 with id = 236 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 301 currentId 236
Added AND Nodes: 300 301
3 => LOOP outcome: Correct & reachbound = False
5 => callsites count before spliiting 204 with id = 256 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 306 currentId 256
Added AND Nodes: 305 306
2 => callsites count before spliiting 53 with id = 271 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 311 currentId 271
Added AND Nodes: 310 311
2 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 227 with id = 241 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 316 currentId 241
Added AND Nodes: 315 316
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
4 => callsites count before spliiting 230 with id = 261 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 321 currentId 261
Added AND Nodes: 320 321
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 51 with id = 276 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 326 currentId 276
Added AND Nodes: 325 326
1 => callsites count before spliiting 53 with id = 295 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 331 currentId 295
Added AND Nodes: 330 331
1 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 205 with id = 221 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 336 currentId 221
Added AND Nodes: 335 336
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
7 => callsites count before spliiting 232 with id = 266 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 341 currentId 266
Added AND Nodes: 340 341
2 => callsites count before spliiting 53 with id = 311 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 346 currentId 311
Added AND Nodes: 345 346
2 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 54 with id = 301 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 351 currentId 301
Added AND Nodes: 350 351
3 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 226 with id = 320 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 356 currentId 320
Added AND Nodes: 355 356
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => callsites count before spliiting 241 with id = 281 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 361 currentId 281
Added AND Nodes: 360 361
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 50 with id = 331 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 366 currentId 331
Added AND Nodes: 365 366
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 54 with id = 325 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 371 currentId 325
Added AND Nodes: 370 371
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 51 with id = 351 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 376 currentId 351
Added AND Nodes: 375 376
8 => callsites count before spliiting 200 with id = 336 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 381 currentId 336
Added AND Nodes: 380 381
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
11 => callsites count before spliiting 200 with id = 286 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 386 currentId 286
Added AND Nodes: 385 386
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
9 => callsites count before spliiting 207 with id = 291 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 391 currentId 291
Added AND Nodes: 390 391
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
1 => callsites count before spliiting 51 with id = 366 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 396 currentId 366
Added AND Nodes: 395 396
4 => callsites count before spliiting 266 with id = 321 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 401 currentId 321
Added AND Nodes: 400 401
5 => callsites count before spliiting 200 with id = 306 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 406 currentId 306
Added AND Nodes: 405 406
0 => callsites count before spliiting 51 with id = 371 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 411 currentId 371
Added AND Nodes: 410 411
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 53 with id = 375 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 416 currentId 375
Added AND Nodes: 415 416
3 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 242 with id = 316 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 421 currentId 316
Added AND Nodes: 420 421
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
3 => callsites count before spliiting 65 with id = 416 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 426 currentId 416
Added AND Nodes: 425 426
3 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 56 with id = 411 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 431 currentId 411
Added AND Nodes: 430 431
6 => callsites count before spliiting 239 with id = 361 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 436 currentId 361
Added AND Nodes: 435 436
2 => callsites count before spliiting 98 with id = 346 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 441 currentId 346
Added AND Nodes: 440 441
5 => callsites count before spliiting 203 with id = 405 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 446 currentId 405
Added AND Nodes: 445 446
2 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 55 with id = 395 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 451 currentId 395
Added AND Nodes: 450 451
1 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 238 with id = 341 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 456 currentId 341
Added AND Nodes: 455 456
8 => callsites count before spliiting 223 with id = 381 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 461 currentId 381
Added AND Nodes: 460 461
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 234 with id = 435 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 466 currentId 435
Added AND Nodes: 465 466
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 79 with id = 426 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 471 currentId 426
Added AND Nodes: 470 471
4 => callsites count before spliiting 256 with id = 400 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 476 currentId 400
Added AND Nodes: 475 476
0 => callsites count before spliiting 57 with id = 430 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 481 currentId 430
Added AND Nodes: 480 481
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
1 => callsites count before spliiting 53 with id = 451 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 486 currentId 451
Added AND Nodes: 485 486
0 => LOOP outcome: Correct & reachbound = False
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
3 => callsites count before spliiting 59 with id = 470 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 491 currentId 470
Added AND Nodes: 490 491
3 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 201 with id = 475 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 496 currentId 475
Added AND Nodes: 495 496
11 => callsites count before spliiting 231 with id = 386 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 501 currentId 386
Added AND Nodes: 500 501
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 60 with id = 485 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 506 currentId 485
Added AND Nodes: 505 506
0 => callsites count before spliiting 61 with id = 481 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 511 currentId 481
Added AND Nodes: 510 511
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 56 with id = 491 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 516 currentId 491
Added AND Nodes: 515 516
5 => callsites count before spliiting 217 with id = 406 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 521 currentId 406
Added AND Nodes: 520 521
0 => callsites count before spliiting 50 with id = 510 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 526 currentId 510
Added AND Nodes: 525 526
2 => callsites count before spliiting 51 with id = 441 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 531 currentId 441
Added AND Nodes: 530 531
2 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 50 with id = 506 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 536 currentId 506
Added AND Nodes: 535 536
7 => callsites count before spliiting 239 with id = 455 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 541 currentId 455
Added AND Nodes: 540 541
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
2 => callsites count before spliiting 100 with id = 531 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 546 currentId 531
Added AND Nodes: 545 546
3 => callsites count before spliiting 51 with id = 515 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 551 currentId 515
Added AND Nodes: 550 551
3 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 202 with id = 540 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 556 currentId 540
Added AND Nodes: 555 556
2 => callsites count before spliiting 155 with id = 545 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 561 currentId 545
Added AND Nodes: 560 561
0 => callsites count before spliiting 60 with id = 526 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 566 currentId 526
Added AND Nodes: 565 566
3 => callsites count before spliiting 53 with id = 551 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 571 currentId 551
Added AND Nodes: 570 571
5 => callsites count before spliiting 232 with id = 520 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 576 currentId 520
Added AND Nodes: 575 576
10 => callsites count before spliiting 224 with id = 421 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 581 currentId 421
Added AND Nodes: 580 581
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 209 with id = 461 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 586 currentId 461
Added AND Nodes: 585 586
2 => callsites count before spliiting 156 with id = 560 and splitMode 100
2 => sending calltree : splitMode 100 mustReachId 591 currentId 560
Added AND Nodes: 590 591
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
1 => callsites count before spliiting 53 with id = 535 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 596 currentId 535
Added AND Nodes: 595 596
6 => callsites count before spliiting 217 with id = 436 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 601 currentId 436
Added AND Nodes: 600 601
11 => callsites count before spliiting 223 with id = 501 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 606 currentId 501
Added AND Nodes: 605 606
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
0 => callsites count before spliiting 71 with id = 565 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 611 currentId 565
Added AND Nodes: 610 611
1 => callsites count before spliiting 106 with id = 595 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 616 currentId 595
Added AND Nodes: 615 616
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 82 with id = 570 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 621 currentId 570
Added AND Nodes: 620 621
0 => LOOP outcome: Correct & reachbound = False
3 => callsites count before spliiting 85 with id = 620 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 626 currentId 620
Added AND Nodes: 625 626
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
4 => callsites count before spliiting 204 with id = 495 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 631 currentId 495
Added AND Nodes: 630 631
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
3 => callsites count before spliiting 84 with id = 625 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 636 currentId 625
Added AND Nodes: 635 636
9 => callsites count before spliiting 270 with id = 391 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 641 currentId 391
Added AND Nodes: 640 641
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
6 => callsites count before spliiting 218 with id = 600 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 646 currentId 600
Added AND Nodes: 645 646
9 => callsites count before spliiting 303 with id = 640 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 651 currentId 640
Added AND Nodes: 650 651
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
5 => callsites count before spliiting 233 with id = 575 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 656 currentId 575
Added AND Nodes: 655 656
0 => callsites count before spliiting 51 with id = 611 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 661 currentId 611
Added AND Nodes: 660 661
3 => callsites count before spliiting 88 with id = 635 and splitMode 100
3 => sending calltree : splitMode 100 mustReachId 666 currentId 635
Added AND Nodes: 665 666
1 => callsites count before spliiting 57 with id = 596 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 671 currentId 596
Added AND Nodes: 670 671
0 => callsites count before spliiting 92 with id = 660 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 676 currentId 660
Added AND Nodes: 675 676
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 75 with id = 670 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 681 currentId 670
Added AND Nodes: 680 681
5 => callsites count before spliiting 202 with id = 655 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 686 currentId 655
Added AND Nodes: 685 686
0 => LOOP outcome: Correct & reachbound = False
4 => callsites count before spliiting 212 with id = 476 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 691 currentId 476
Added AND Nodes: 690 691
1 => callsites count before spliiting 70 with id = 680 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 696 currentId 680
Added AND Nodes: 695 696
1 => callsites count before spliiting 68 with id = 695 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 701 currentId 695
Added AND Nodes: 700 701
0 => callsites count before spliiting 56 with id = 661 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 706 currentId 661
Added AND Nodes: 705 706
6 => callsites count before spliiting 245 with id = 645 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 711 currentId 645
Added AND Nodes: 710 711
1 => callsites count before spliiting 72 with id = 700 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 716 currentId 700
Added AND Nodes: 715 716
7 => callsites count before spliiting 216 with id = 541 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 721 currentId 541
Added AND Nodes: 720 721
5 => callsites count before spliiting 202 with id = 685 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 726 currentId 685
Added AND Nodes: 725 726
11 => callsites count before spliiting 234 with id = 606 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 731 currentId 606
Added AND Nodes: 730 731
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 68 with id = 715 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 736 currentId 715
Added AND Nodes: 735 736
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
1 => LOOP outcome: Correct & reachbound = False
0 => callsites count before spliiting 59 with id = 705 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 741 currentId 705
Added AND Nodes: 740 741
7 => callsites count before spliiting 221 with id = 720 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 746 currentId 720
Added AND Nodes: 745 746
4 => callsites count before spliiting 230 with id = 690 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 751 currentId 690
Added AND Nodes: 750 751
8 => callsites count before spliiting 245 with id = 586 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 756 currentId 586
Added AND Nodes: 755 756
0 => callsites count before spliiting 100 with id = 740 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 761 currentId 740
Added AND Nodes: 760 761
0 => LOOP outcome: Correct & reachbound = False
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 250 with id = 755 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 766 currentId 755
Added AND Nodes: 765 766
6 => callsites count before spliiting 215 with id = 710 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 771 currentId 710
Added AND Nodes: 770 771
8 => callsites count before spliiting 259 with id = 765 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 776 currentId 765
Added AND Nodes: 775 776
1 => callsites count before spliiting 50 with id = 671 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 781 currentId 671
Added AND Nodes: 780 781
8 => callsites count before spliiting 269 with id = 775 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 786 currentId 775
Added AND Nodes: 785 786
9 => callsites count before spliiting 227 with id = 641 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 791 currentId 641
Added AND Nodes: 790 791
8 => callsites count before spliiting 287 with id = 785 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 796 currentId 785
Added AND Nodes: 795 796
9 => callsites count before spliiting 255 with id = 790 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 801 currentId 790
Added AND Nodes: 800 801
8 => callsites count before spliiting 319 with id = 795 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 806 currentId 795
Added AND Nodes: 805 806
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => callsites count before spliiting 235 with id = 750 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 811 currentId 750
Added AND Nodes: 810 811
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
0 => callsites count before spliiting 51 with id = 741 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 816 currentId 741
Added AND Nodes: 815 816
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
4 => callsites count before spliiting 205 with id = 810 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 821 currentId 810
Added AND Nodes: 820 821
0 => callsites count before spliiting 57 with id = 815 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 826 currentId 815
Added AND Nodes: 825 826
7 => callsites count before spliiting 204 with id = 745 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 831 currentId 745
Added AND Nodes: 830 831
0 => callsites count before spliiting 52 with id = 825 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 836 currentId 825
Added AND Nodes: 835 836
0 => callsites count before spliiting 53 with id = 835 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 841 currentId 835
Added AND Nodes: 840 841
11 => callsites count before spliiting 201 with id = 731 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 846 currentId 731
Added AND Nodes: 845 846
11 => callsites count before spliiting 227 with id = 845 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 851 currentId 845
Added AND Nodes: 850 851
6 => callsites count before spliiting 259 with id = 711 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 856 currentId 711
Added AND Nodes: 855 856
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
1 => callsites count before spliiting 58 with id = 780 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 861 currentId 780
Added AND Nodes: 860 861
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 77 with id = 860 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 866 currentId 860
Added AND Nodes: 865 866
0 => LOOP outcome: Correct & reachbound = False
1 => callsites count before spliiting 83 with id = 865 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 871 currentId 865
Added AND Nodes: 870 871
4 => callsites count before spliiting 205 with id = 820 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 876 currentId 820
Added AND Nodes: 875 876
1 => callsites count before spliiting 92 with id = 870 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 881 currentId 870
Added AND Nodes: 880 881
6 => callsites count before spliiting 200 with id = 855 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 886 currentId 855
Added AND Nodes: 885 886
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
9 => callsites count before spliiting 202 with id = 791 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 891 currentId 791
Added AND Nodes: 890 891
0 => LOOP outcome: Correct & reachbound = False
9 => callsites count before spliiting 236 with id = 890 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 896 currentId 890
Added AND Nodes: 895 896
1 => callsites count before spliiting 96 with id = 880 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 901 currentId 880
Added AND Nodes: 900 901
1 => callsites count before spliiting 96 with id = 900 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 906 currentId 900
Added AND Nodes: 905 906
9 => callsites count before spliiting 280 with id = 895 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 911 currentId 895
Added AND Nodes: 910 911
9 => callsites count before spliiting 415 with id = 910 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 916 currentId 910
Added AND Nodes: 915 916
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
9 => LOOP outcome: Correct & reachbound = False
Added New : 
9 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 248 with id = 656 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 921 currentId 656
Added AND Nodes: 920 921
0 => callsites count before spliiting 53 with id = 826 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 926 currentId 826
Added AND Nodes: 925 926
1 => callsites count before spliiting 82 with id = 905 and splitMode 100
1 => sending calltree : splitMode 100 mustReachId 931 currentId 905
Added AND Nodes: 930 931
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
9 => callsites count before spliiting 216 with id = 891 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 936 currentId 891
Added AND Nodes: 935 936
9 => callsites count before spliiting 250 with id = 935 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 941 currentId 935
Added AND Nodes: 940 941
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
9 => callsites count before spliiting 295 with id = 940 and splitMode 50
9 => sending calltree : splitMode 50 mustReachId 946 currentId 940
Added AND Nodes: 945 946
6 => callsites count before spliiting 262 with id = 856 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 951 currentId 856
Added AND Nodes: 950 951
5 => callsites count before spliiting 251 with id = 920 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 956 currentId 920
Added AND Nodes: 955 956
0 => callsites count before spliiting 51 with id = 925 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 961 currentId 925
Added AND Nodes: 960 961
7 => callsites count before spliiting 206 with id = 721 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 966 currentId 721
Added AND Nodes: 965 966
6 => callsites count before spliiting 232 with id = 950 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 971 currentId 950
Added AND Nodes: 970 971
0 => callsites count before spliiting 102 with id = 960 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 976 currentId 960
Added AND Nodes: 975 976
11 => callsites count before spliiting 205 with id = 846 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 981 currentId 846
Added AND Nodes: 980 981
11 => callsites count before spliiting 209 with id = 980 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 986 currentId 980
Added AND Nodes: 985 986
11 => callsites count before spliiting 241 with id = 985 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 991 currentId 985
Added AND Nodes: 990 991
11 => callsites count before spliiting 267 with id = 990 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 996 currentId 990
Added AND Nodes: 995 996
8 => callsites count before spliiting 251 with id = 766 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1001 currentId 766
Added AND Nodes: 1000 1001
0 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 282 with id = 995 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1006 currentId 995
Added AND Nodes: 1005 1006
8 => callsites count before spliiting 269 with id = 1000 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1011 currentId 1000
Added AND Nodes: 1010 1011
7 => callsites count before spliiting 239 with id = 965 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1016 currentId 965
Added AND Nodes: 1015 1016
8 => callsites count before spliiting 272 with id = 1010 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1021 currentId 1010
Added AND Nodes: 1020 1021
4 => callsites count before spliiting 200 with id = 875 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1026 currentId 875
Added AND Nodes: 1025 1026
8 => callsites count before spliiting 275 with id = 1020 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1031 currentId 1020
Added AND Nodes: 1030 1031
5 => callsites count before spliiting 225 with id = 955 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1036 currentId 955
Added AND Nodes: 1035 1036
10 => callsites count before spliiting 203 with id = 581 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1041 currentId 581
Added AND Nodes: 1040 1041
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
11 => callsites count before spliiting 289 with id = 1005 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1046 currentId 1005
Added AND Nodes: 1045 1046
8 => callsites count before spliiting 301 with id = 1030 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1051 currentId 1030
Added AND Nodes: 1050 1051
6 => callsites count before spliiting 257 with id = 970 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1056 currentId 970
Added AND Nodes: 1055 1056
0 => LOOP outcome: Correct & reachbound = False
11 => callsites count before spliiting 294 with id = 1045 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1061 currentId 1045
Added AND Nodes: 1060 1061
8 => callsites count before spliiting 329 with id = 1050 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1066 currentId 1050
Added AND Nodes: 1065 1066
11 => callsites count before spliiting 298 with id = 1060 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1071 currentId 1060
Added AND Nodes: 1070 1071
5 => callsites count before spliiting 200 with id = 1035 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1076 currentId 1035
Added AND Nodes: 1075 1076
8 => callsites count before spliiting 383 with id = 1065 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1081 currentId 1065
Added AND Nodes: 1080 1081
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
6 => callsites count before spliiting 240 with id = 1055 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1086 currentId 1055
Added AND Nodes: 1085 1086
6 => LOOP outcome: Correct & reachbound = False
Added New : 
6 : 
7 => callsites count before spliiting 220 with id = 1015 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1091 currentId 1015
Added AND Nodes: 1090 1091
11 => callsites count before spliiting 343 with id = 1070 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1096 currentId 1070
Added AND Nodes: 1095 1096
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
5 => callsites count before spliiting 223 with id = 1075 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1101 currentId 1075
Added AND Nodes: 1100 1101
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => callsites count before spliiting 51 with id = 961 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1106 currentId 961
Added AND Nodes: 1105 1106
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
7 => callsites count before spliiting 225 with id = 1090 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1111 currentId 1090
Added AND Nodes: 1110 1111
5 => callsites count before spliiting 200 with id = 1100 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1116 currentId 1100
Added AND Nodes: 1115 1116
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
6 => callsites count before spliiting 211 with id = 1086 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1121 currentId 1086
Added AND Nodes: 1120 1121
4 => callsites count before spliiting 231 with id = 821 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1126 currentId 821
Added AND Nodes: 1125 1126
0 => callsites count before spliiting 62 with id = 1105 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1131 currentId 1105
Added AND Nodes: 1130 1131
0 => callsites count before spliiting 60 with id = 1130 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1136 currentId 1130
Added AND Nodes: 1135 1136
8 => callsites count before spliiting 248 with id = 1001 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1141 currentId 1001
Added AND Nodes: 1140 1141
0 => callsites count before spliiting 63 with id = 1135 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1146 currentId 1135
Added AND Nodes: 1145 1146
11 => LOOP outcome: Correct & reachbound = False
Added New : 
11 : 
10 => callsites count before spliiting 275 with id = 1041 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1151 currentId 1041
Added AND Nodes: 1150 1151
7 => callsites count before spliiting 222 with id = 1110 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1156 currentId 1110
Added AND Nodes: 1155 1156
0 => LOOP outcome: Correct & reachbound = False
10 => callsites count before spliiting 332 with id = 1150 and splitMode 50
10 => sending calltree : splitMode 50 mustReachId 1161 currentId 1150
Added AND Nodes: 1160 1161
0 => LOOP outcome: Correct & reachbound = False
8 => callsites count before spliiting 311 with id = 1140 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1166 currentId 1140
Added AND Nodes: 1165 1166
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
10 => LOOP outcome: Correct & reachbound = False
Added New : 
10 : 
8 => callsites count before spliiting 348 with id = 1165 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1171 currentId 1165
Added AND Nodes: 1170 1171
8 => callsites count before spliiting 394 with id = 1170 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1176 currentId 1170
Added AND Nodes: 1175 1176
8 => callsites count before spliiting 431 with id = 1175 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1181 currentId 1175
Added AND Nodes: 1180 1181
6 => callsites count before spliiting 204 with id = 1120 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1186 currentId 1120
Added AND Nodes: 1185 1186
8 => callsites count before spliiting 434 with id = 1180 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1191 currentId 1180
Added AND Nodes: 1190 1191
8 => callsites count before spliiting 485 with id = 1190 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1196 currentId 1190
Added AND Nodes: 1195 1196
8 => callsites count before spliiting 489 with id = 1195 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1201 currentId 1195
Added AND Nodes: 1200 1201
8 => callsites count before spliiting 512 with id = 1200 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1206 currentId 1200
Added AND Nodes: 1205 1206
8 => callsites count before spliiting 515 with id = 1205 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1211 currentId 1205
Added AND Nodes: 1210 1211
8 => callsites count before spliiting 540 with id = 1210 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1216 currentId 1210
Added AND Nodes: 1215 1216
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
4 => callsites count before spliiting 283 with id = 1125 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1221 currentId 1125
Added AND Nodes: 1220 1221
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
5 => LOOP outcome: Correct & reachbound = False
Added New : 
5 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
0 => LOOP outcome: Correct & reachbound = False
7 => callsites count before spliiting 203 with id = 1155 and splitMode 0
7 => sending calltree : splitMode 0 mustReachId 1226 currentId 1155
Added AND Nodes: 1225 1226
4 => callsites count before spliiting 205 with id = 1220 and splitMode 0
4 => sending calltree : splitMode 0 mustReachId 1231 currentId 1220
Added AND Nodes: 1230 1231
8 => LOOP outcome: Correct & reachbound = False
Added New : 
8 : 
5 => callsites count before spliiting 279 with id = 1036 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1236 currentId 1036
Added AND Nodes: 1235 1236
6 => callsites count before spliiting 202 with id = 1185 and splitMode 0
6 => sending calltree : splitMode 0 mustReachId 1241 currentId 1185
Added AND Nodes: 1240 1241
11 => callsites count before spliiting 249 with id = 986 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1246 currentId 986
Added AND Nodes: 1245 1246
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
5 => callsites count before spliiting 274 with id = 1235 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1251 currentId 1235
Added AND Nodes: 1250 1251
11 => callsites count before spliiting 256 with id = 1245 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1256 currentId 1245
Added AND Nodes: 1255 1256
5 => callsites count before spliiting 217 with id = 1250 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1261 currentId 1250
Added AND Nodes: 1260 1261
11 => callsites count before spliiting 259 with id = 1255 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1266 currentId 1255
Added AND Nodes: 1265 1266
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
4 => LOOP outcome: Correct & reachbound = False
Added New : 
4 : 
11 => callsites count before spliiting 285 with id = 1265 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1271 currentId 1265
Added AND Nodes: 1270 1271
0 => callsites count before spliiting 51 with id = 1131 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1276 currentId 1131
Added AND Nodes: 1275 1276
11 => callsites count before spliiting 289 with id = 1270 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1281 currentId 1270
Added AND Nodes: 1280 1281
0 => callsites count before spliiting 54 with id = 1275 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1286 currentId 1275
Added AND Nodes: 1285 1286
11 => callsites count before spliiting 292 with id = 1280 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1291 currentId 1280
Added AND Nodes: 1290 1291
5 => callsites count before spliiting 219 with id = 1260 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1296 currentId 1260
Added AND Nodes: 1295 1296
11 => callsites count before spliiting 321 with id = 1290 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1301 currentId 1290
Added AND Nodes: 1300 1301
0 => callsites count before spliiting 57 with id = 1285 and splitMode 100
0 => sending calltree : splitMode 100 mustReachId 1306 currentId 1285
Added AND Nodes: 1305 1306
11 => callsites count before spliiting 360 with id = 1300 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1311 currentId 1300
Added AND Nodes: 1310 1311
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
8 => callsites count before spliiting 211 with id = 1191 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1316 currentId 1191
Added AND Nodes: 1315 1316
8 => callsites count before spliiting 229 with id = 1315 and splitMode 50
8 => sending calltree : splitMode 50 mustReachId 1321 currentId 1315
Added AND Nodes: 1320 1321
5 => callsites count before spliiting 219 with id = 1295 and splitMode 0
5 => sending calltree : splitMode 0 mustReachId 1326 currentId 1295
Added AND Nodes: 1325 1326
11 => callsites count before spliiting 399 with id = 1310 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1331 currentId 1310
Added AND Nodes: 1330 1331
7 => LOOP outcome: Correct & reachbound = False
Added New : 
7 : 
11 => callsites count before spliiting 464 with id = 1330 and splitMode 50
11 => sending calltree : splitMode 50 mustReachId 1336 currentId 1330
Added AND Nodes: 1335 1336
Verification Outcome : TIMEDOUT
Time Taken : 3600
bestAlgo: -1
Algo Client list 0:  0,1,2,3
Algo Client list 1:  4,5,6,7
Algo Client list 2:  8,9,10,11
